/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const REVISION$1 = '141';
const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
const CullFaceNone$1 = 0;
const CullFaceBack$1 = 1;
const CullFaceFront$1 = 2;
const PCFShadowMap$1 = 1;
const PCFSoftShadowMap$1 = 2;
const VSMShadowMap$1 = 3;
const FrontSide$1 = 0;
const BackSide$1 = 1;
const DoubleSide$1 = 2;
const FlatShading$1 = 1;
const NoBlending$1 = 0;
const NormalBlending$1 = 1;
const AdditiveBlending$1 = 2;
const SubtractiveBlending$1 = 3;
const MultiplyBlending$1 = 4;
const CustomBlending$1 = 5;
const AddEquation$1 = 100;
const SubtractEquation$1 = 101;
const ReverseSubtractEquation$1 = 102;
const MinEquation$1 = 103;
const MaxEquation$1 = 104;
const ZeroFactor$1 = 200;
const OneFactor$1 = 201;
const SrcColorFactor$1 = 202;
const OneMinusSrcColorFactor$1 = 203;
const SrcAlphaFactor$1 = 204;
const OneMinusSrcAlphaFactor$1 = 205;
const DstAlphaFactor$1 = 206;
const OneMinusDstAlphaFactor$1 = 207;
const DstColorFactor$1 = 208;
const OneMinusDstColorFactor$1 = 209;
const SrcAlphaSaturateFactor$1 = 210;
const NeverDepth$1 = 0;
const AlwaysDepth$1 = 1;
const LessDepth$1 = 2;
const LessEqualDepth$1 = 3;
const EqualDepth$1 = 4;
const GreaterEqualDepth$1 = 5;
const GreaterDepth$1 = 6;
const NotEqualDepth$1 = 7;
const MultiplyOperation$1 = 0;
const MixOperation$1 = 1;
const AddOperation$1 = 2;
const NoToneMapping$1 = 0;
const LinearToneMapping$1 = 1;
const ReinhardToneMapping$1 = 2;
const CineonToneMapping$1 = 3;
const ACESFilmicToneMapping$1 = 4;
const CustomToneMapping$1 = 5;

const UVMapping$1 = 300;
const CubeReflectionMapping$1 = 301;
const CubeRefractionMapping$1 = 302;
const EquirectangularReflectionMapping$1 = 303;
const EquirectangularRefractionMapping$1 = 304;
const CubeUVReflectionMapping$1 = 306;
const RepeatWrapping$1 = 1000;
const ClampToEdgeWrapping$1 = 1001;
const MirroredRepeatWrapping$1 = 1002;
const NearestFilter$1 = 1003;
const NearestMipmapNearestFilter$1 = 1004;
const NearestMipmapLinearFilter$1 = 1005;
const LinearFilter$1 = 1006;
const LinearMipmapNearestFilter$1 = 1007;
const LinearMipmapLinearFilter$1 = 1008;
const UnsignedByteType$1 = 1009;
const ByteType$1 = 1010;
const ShortType$1 = 1011;
const UnsignedShortType$1 = 1012;
const IntType$1 = 1013;
const UnsignedIntType$1 = 1014;
const FloatType$1 = 1015;
const HalfFloatType$1 = 1016;
const UnsignedShort4444Type$1 = 1017;
const UnsignedShort5551Type$1 = 1018;
const UnsignedInt248Type$1 = 1020;
const AlphaFormat$1 = 1021;
const RGBFormat$1 = 1022;
const RGBAFormat$1 = 1023;
const LuminanceFormat$1 = 1024;
const LuminanceAlphaFormat$1 = 1025;
const DepthFormat$1 = 1026;
const DepthStencilFormat$1 = 1027;
const RedFormat$1 = 1028;
const RedIntegerFormat$1 = 1029;
const RGFormat$1 = 1030;
const RGIntegerFormat$1 = 1031;
const RGBAIntegerFormat$1 = 1033;

const RGB_S3TC_DXT1_Format$1 = 33776;
const RGBA_S3TC_DXT1_Format$1 = 33777;
const RGBA_S3TC_DXT3_Format$1 = 33778;
const RGBA_S3TC_DXT5_Format$1 = 33779;
const RGB_PVRTC_4BPPV1_Format$1 = 35840;
const RGB_PVRTC_2BPPV1_Format$1 = 35841;
const RGBA_PVRTC_4BPPV1_Format$1 = 35842;
const RGBA_PVRTC_2BPPV1_Format$1 = 35843;
const RGB_ETC1_Format$1 = 36196;
const RGB_ETC2_Format$1 = 37492;
const RGBA_ETC2_EAC_Format$1 = 37496;
const RGBA_ASTC_4x4_Format$1 = 37808;
const RGBA_ASTC_5x4_Format$1 = 37809;
const RGBA_ASTC_5x5_Format$1 = 37810;
const RGBA_ASTC_6x5_Format$1 = 37811;
const RGBA_ASTC_6x6_Format$1 = 37812;
const RGBA_ASTC_8x5_Format$1 = 37813;
const RGBA_ASTC_8x6_Format$1 = 37814;
const RGBA_ASTC_8x8_Format$1 = 37815;
const RGBA_ASTC_10x5_Format$1 = 37816;
const RGBA_ASTC_10x6_Format$1 = 37817;
const RGBA_ASTC_10x8_Format$1 = 37818;
const RGBA_ASTC_10x10_Format$1 = 37819;
const RGBA_ASTC_12x10_Format$1 = 37820;
const RGBA_ASTC_12x12_Format$1 = 37821;
const RGBA_BPTC_Format$1 = 36492;
const LinearEncoding$1 = 3000;
const sRGBEncoding$1 = 3001;
const BasicDepthPacking$1 = 3200;
const RGBADepthPacking$1 = 3201;
const TangentSpaceNormalMap$1 = 0;
const ObjectSpaceNormalMap$1 = 1;
const SRGBColorSpace = 'srgb';
const LinearSRGBColorSpace = 'srgb-linear';
const KeepStencilOp$1 = 7680;
const AlwaysStencilFunc$1 = 519;

const StaticDrawUsage$1 = 35044;
const GLSL3$1 = '300 es';

const _SRGBAFormat = 1035; // fallback for WebGL 1

/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */

class EventDispatcher$1 {

	addEventListener(type, listener) {

		if (this._listeners === undefined) this._listeners = {};

		const listeners = this._listeners;

		if (listeners[type] === undefined) {

			listeners[type] = [];

		}

		if (listeners[type].indexOf(listener) === - 1) {

			listeners[type].push(listener);

		}

	}

	hasEventListener(type, listener) {

		if (this._listeners === undefined) return false;

		const listeners = this._listeners;

		return listeners[type] !== undefined && listeners[type].indexOf(listener) !== - 1;

	}

	removeEventListener(type, listener) {

		if (this._listeners === undefined) return;

		const listeners = this._listeners;
		const listenerArray = listeners[type];

		if (listenerArray !== undefined) {

			const index = listenerArray.indexOf(listener);

			if (index !== - 1) {

				listenerArray.splice(index, 1);

			}

		}

	}

	dispatchEvent(event) {

		if (this._listeners === undefined) return;

		const listeners = this._listeners;
		const listenerArray = listeners[event.type];

		if (listenerArray !== undefined) {

			event.target = this;

			// Make a copy, in case listeners are removed while iterating.
			const array = listenerArray.slice(0);

			for (let i = 0, l = array.length; i < l; i++) {

				array[i].call(this, event);

			}

			event.target = null;

		}

	}

}

const _lut$1 = [];

for (let i = 0; i < 256; i++) {

	_lut$1[i] = (i < 16 ? '0' : '') + (i).toString(16);

}


const DEG2RAD$1 = Math.PI / 180;
const RAD2DEG$1 = 180 / Math.PI;

// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
function generateUUID$1() {

	const d0 = Math.random() * 0xffffffff | 0;
	const d1 = Math.random() * 0xffffffff | 0;
	const d2 = Math.random() * 0xffffffff | 0;
	const d3 = Math.random() * 0xffffffff | 0;
	const uuid = _lut$1[d0 & 0xff] + _lut$1[d0 >> 8 & 0xff] + _lut$1[d0 >> 16 & 0xff] + _lut$1[d0 >> 24 & 0xff] + '-' +
		_lut$1[d1 & 0xff] + _lut$1[d1 >> 8 & 0xff] + '-' + _lut$1[d1 >> 16 & 0x0f | 0x40] + _lut$1[d1 >> 24 & 0xff] + '-' +
		_lut$1[d2 & 0x3f | 0x80] + _lut$1[d2 >> 8 & 0xff] + '-' + _lut$1[d2 >> 16 & 0xff] + _lut$1[d2 >> 24 & 0xff] +
		_lut$1[d3 & 0xff] + _lut$1[d3 >> 8 & 0xff] + _lut$1[d3 >> 16 & 0xff] + _lut$1[d3 >> 24 & 0xff];

	// .toLowerCase() here flattens concatenated strings to save heap memory space.
	return uuid.toLowerCase();

}

function clamp$1(value, min, max) {

	return Math.max(min, Math.min(max, value));

}

// compute euclidean modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
function euclideanModulo$1(n, m) {

	return ((n % m) + m) % m;

}

// https://en.wikipedia.org/wiki/Linear_interpolation
function lerp$1(x, y, t) {

	return (1 - t) * x + t * y;

}

function isPowerOfTwo$1(value) {

	return (value & (value - 1)) === 0 && value !== 0;

}

function floorPowerOfTwo$1(value) {

	return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));

}

class Vector2$1 {

	constructor(x = 0, y = 0) {

		this.isVector2 = true;

		this.x = x;
		this.y = y;

	}

	get width() {

		return this.x;

	}

	set width(value) {

		this.x = value;

	}

	get height() {

		return this.y;

	}

	set height(value) {

		this.y = value;

	}

	set(x, y) {

		this.x = x;
		this.y = y;

		return this;

	}

	setScalar(scalar) {

		this.x = scalar;
		this.y = scalar;

		return this;

	}

	setX(x) {

		this.x = x;

		return this;

	}

	setY(y) {

		this.y = y;

		return this;

	}

	setComponent(index, value) {

		switch (index) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			default: throw new Error('index is out of range: ' + index);

		}

		return this;

	}

	getComponent(index) {

		switch (index) {

			case 0: return this.x;
			case 1: return this.y;
			default: throw new Error('index is out of range: ' + index);

		}

	}

	clone() {

		return new this.constructor(this.x, this.y);

	}

	copy(v) {

		this.x = v.x;
		this.y = v.y;

		return this;

	}

	add(v, w) {

		if (w !== undefined) {

			console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
			return this.addVectors(v, w);

		}

		this.x += v.x;
		this.y += v.y;

		return this;

	}

	addScalar(s) {

		this.x += s;
		this.y += s;

		return this;

	}

	addVectors(a, b) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;

		return this;

	}

	addScaledVector(v, s) {

		this.x += v.x * s;
		this.y += v.y * s;

		return this;

	}

	sub(v, w) {

		if (w !== undefined) {

			console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
			return this.subVectors(v, w);

		}

		this.x -= v.x;
		this.y -= v.y;

		return this;

	}

	subScalar(s) {

		this.x -= s;
		this.y -= s;

		return this;

	}

	subVectors(a, b) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;

		return this;

	}

	multiply(v) {

		this.x *= v.x;
		this.y *= v.y;

		return this;

	}

	multiplyScalar(scalar) {

		this.x *= scalar;
		this.y *= scalar;

		return this;

	}

	divide(v) {

		this.x /= v.x;
		this.y /= v.y;

		return this;

	}

	divideScalar(scalar) {

		return this.multiplyScalar(1 / scalar);

	}

	applyMatrix3(m) {

		const x = this.x, y = this.y;
		const e = m.elements;

		this.x = e[0] * x + e[3] * y + e[6];
		this.y = e[1] * x + e[4] * y + e[7];

		return this;

	}

	min(v) {

		this.x = Math.min(this.x, v.x);
		this.y = Math.min(this.y, v.y);

		return this;

	}

	max(v) {

		this.x = Math.max(this.x, v.x);
		this.y = Math.max(this.y, v.y);

		return this;

	}

	clamp(min, max) {

		// assumes min < max, componentwise

		this.x = Math.max(min.x, Math.min(max.x, this.x));
		this.y = Math.max(min.y, Math.min(max.y, this.y));

		return this;

	}

	clampScalar(minVal, maxVal) {

		this.x = Math.max(minVal, Math.min(maxVal, this.x));
		this.y = Math.max(minVal, Math.min(maxVal, this.y));

		return this;

	}

	clampLength(min, max) {

		const length = this.length();

		return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));

	}

	floor() {

		this.x = Math.floor(this.x);
		this.y = Math.floor(this.y);

		return this;

	}

	ceil() {

		this.x = Math.ceil(this.x);
		this.y = Math.ceil(this.y);

		return this;

	}

	round() {

		this.x = Math.round(this.x);
		this.y = Math.round(this.y);

		return this;

	}

	roundToZero() {

		this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);
		this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);

		return this;

	}

	negate() {

		this.x = - this.x;
		this.y = - this.y;

		return this;

	}

	dot(v) {

		return this.x * v.x + this.y * v.y;

	}

	cross(v) {

		return this.x * v.y - this.y * v.x;

	}

	lengthSq() {

		return this.x * this.x + this.y * this.y;

	}

	length() {

		return Math.sqrt(this.x * this.x + this.y * this.y);

	}

	manhattanLength() {

		return Math.abs(this.x) + Math.abs(this.y);

	}

	normalize() {

		return this.divideScalar(this.length() || 1);

	}

	angle() {

		// computes the angle in radians with respect to the positive x-axis

		const angle = Math.atan2(- this.y, - this.x) + Math.PI;

		return angle;

	}

	distanceTo(v) {

		return Math.sqrt(this.distanceToSquared(v));

	}

	distanceToSquared(v) {

		const dx = this.x - v.x, dy = this.y - v.y;
		return dx * dx + dy * dy;

	}

	manhattanDistanceTo(v) {

		return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);

	}

	setLength(length) {

		return this.normalize().multiplyScalar(length);

	}

	lerp(v, alpha) {

		this.x += (v.x - this.x) * alpha;
		this.y += (v.y - this.y) * alpha;

		return this;

	}

	lerpVectors(v1, v2, alpha) {

		this.x = v1.x + (v2.x - v1.x) * alpha;
		this.y = v1.y + (v2.y - v1.y) * alpha;

		return this;

	}

	equals(v) {

		return ((v.x === this.x) && (v.y === this.y));

	}

	fromArray(array, offset = 0) {

		this.x = array[offset];
		this.y = array[offset + 1];

		return this;

	}

	toArray(array = [], offset = 0) {

		array[offset] = this.x;
		array[offset + 1] = this.y;

		return array;

	}

	fromBufferAttribute(attribute, index, offset) {

		if (offset !== undefined) {

			console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');

		}

		this.x = attribute.getX(index);
		this.y = attribute.getY(index);

		return this;

	}

	rotateAround(center, angle) {

		const c = Math.cos(angle), s = Math.sin(angle);

		const x = this.x - center.x;
		const y = this.y - center.y;

		this.x = x * c - y * s + center.x;
		this.y = x * s + y * c + center.y;

		return this;

	}

	random() {

		this.x = Math.random();
		this.y = Math.random();

		return this;

	}

	*[Symbol.iterator]() {

		yield this.x;
		yield this.y;

	}

}

class Matrix3$1 {

	constructor() {

		this.isMatrix3 = true;

		this.elements = [

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		];

		if (arguments.length > 0) {

			console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');

		}

	}

	set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {

		const te = this.elements;

		te[0] = n11; te[1] = n21; te[2] = n31;
		te[3] = n12; te[4] = n22; te[5] = n32;
		te[6] = n13; te[7] = n23; te[8] = n33;

		return this;

	}

	identity() {

		this.set(

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		);

		return this;

	}

	copy(m) {

		const te = this.elements;
		const me = m.elements;

		te[0] = me[0]; te[1] = me[1]; te[2] = me[2];
		te[3] = me[3]; te[4] = me[4]; te[5] = me[5];
		te[6] = me[6]; te[7] = me[7]; te[8] = me[8];

		return this;

	}

	extractBasis(xAxis, yAxis, zAxis) {

		xAxis.setFromMatrix3Column(this, 0);
		yAxis.setFromMatrix3Column(this, 1);
		zAxis.setFromMatrix3Column(this, 2);

		return this;

	}

	setFromMatrix4(m) {

		const me = m.elements;

		this.set(

			me[0], me[4], me[8],
			me[1], me[5], me[9],
			me[2], me[6], me[10]

		);

		return this;

	}

	multiply(m) {

		return this.multiplyMatrices(this, m);

	}

	premultiply(m) {

		return this.multiplyMatrices(m, this);

	}

	multiplyMatrices(a, b) {

		const ae = a.elements;
		const be = b.elements;
		const te = this.elements;

		const a11 = ae[0], a12 = ae[3], a13 = ae[6];
		const a21 = ae[1], a22 = ae[4], a23 = ae[7];
		const a31 = ae[2], a32 = ae[5], a33 = ae[8];

		const b11 = be[0], b12 = be[3], b13 = be[6];
		const b21 = be[1], b22 = be[4], b23 = be[7];
		const b31 = be[2], b32 = be[5], b33 = be[8];

		te[0] = a11 * b11 + a12 * b21 + a13 * b31;
		te[3] = a11 * b12 + a12 * b22 + a13 * b32;
		te[6] = a11 * b13 + a12 * b23 + a13 * b33;

		te[1] = a21 * b11 + a22 * b21 + a23 * b31;
		te[4] = a21 * b12 + a22 * b22 + a23 * b32;
		te[7] = a21 * b13 + a22 * b23 + a23 * b33;

		te[2] = a31 * b11 + a32 * b21 + a33 * b31;
		te[5] = a31 * b12 + a32 * b22 + a33 * b32;
		te[8] = a31 * b13 + a32 * b23 + a33 * b33;

		return this;

	}

	multiplyScalar(s) {

		const te = this.elements;

		te[0] *= s; te[3] *= s; te[6] *= s;
		te[1] *= s; te[4] *= s; te[7] *= s;
		te[2] *= s; te[5] *= s; te[8] *= s;

		return this;

	}

	determinant() {

		const te = this.elements;

		const a = te[0], b = te[1], c = te[2],
			d = te[3], e = te[4], f = te[5],
			g = te[6], h = te[7], i = te[8];

		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

	}

	invert() {

		const te = this.elements,

			n11 = te[0], n21 = te[1], n31 = te[2],
			n12 = te[3], n22 = te[4], n32 = te[5],
			n13 = te[6], n23 = te[7], n33 = te[8],

			t11 = n33 * n22 - n32 * n23,
			t12 = n32 * n13 - n33 * n12,
			t13 = n23 * n12 - n22 * n13,

			det = n11 * t11 + n21 * t12 + n31 * t13;

		if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);

		const detInv = 1 / det;

		te[0] = t11 * detInv;
		te[1] = (n31 * n23 - n33 * n21) * detInv;
		te[2] = (n32 * n21 - n31 * n22) * detInv;

		te[3] = t12 * detInv;
		te[4] = (n33 * n11 - n31 * n13) * detInv;
		te[5] = (n31 * n12 - n32 * n11) * detInv;

		te[6] = t13 * detInv;
		te[7] = (n21 * n13 - n23 * n11) * detInv;
		te[8] = (n22 * n11 - n21 * n12) * detInv;

		return this;

	}

	transpose() {

		let tmp;
		const m = this.elements;

		tmp = m[1]; m[1] = m[3]; m[3] = tmp;
		tmp = m[2]; m[2] = m[6]; m[6] = tmp;
		tmp = m[5]; m[5] = m[7]; m[7] = tmp;

		return this;

	}

	getNormalMatrix(matrix4) {

		return this.setFromMatrix4(matrix4).invert().transpose();

	}

	transposeIntoArray(r) {

		const m = this.elements;

		r[0] = m[0];
		r[1] = m[3];
		r[2] = m[6];
		r[3] = m[1];
		r[4] = m[4];
		r[5] = m[7];
		r[6] = m[2];
		r[7] = m[5];
		r[8] = m[8];

		return this;

	}

	setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {

		const c = Math.cos(rotation);
		const s = Math.sin(rotation);

		this.set(
			sx * c, sx * s, - sx * (c * cx + s * cy) + cx + tx,
			- sy * s, sy * c, - sy * (- s * cx + c * cy) + cy + ty,
			0, 0, 1
		);

		return this;

	}

	scale(sx, sy) {

		const te = this.elements;

		te[0] *= sx; te[3] *= sx; te[6] *= sx;
		te[1] *= sy; te[4] *= sy; te[7] *= sy;

		return this;

	}

	rotate(theta) {

		const c = Math.cos(theta);
		const s = Math.sin(theta);

		const te = this.elements;

		const a11 = te[0], a12 = te[3], a13 = te[6];
		const a21 = te[1], a22 = te[4], a23 = te[7];

		te[0] = c * a11 + s * a21;
		te[3] = c * a12 + s * a22;
		te[6] = c * a13 + s * a23;

		te[1] = - s * a11 + c * a21;
		te[4] = - s * a12 + c * a22;
		te[7] = - s * a13 + c * a23;

		return this;

	}

	translate(tx, ty) {

		const te = this.elements;

		te[0] += tx * te[2]; te[3] += tx * te[5]; te[6] += tx * te[8];
		te[1] += ty * te[2]; te[4] += ty * te[5]; te[7] += ty * te[8];

		return this;

	}

	equals(matrix) {

		const te = this.elements;
		const me = matrix.elements;

		for (let i = 0; i < 9; i++) {

			if (te[i] !== me[i]) return false;

		}

		return true;

	}

	fromArray(array, offset = 0) {

		for (let i = 0; i < 9; i++) {

			this.elements[i] = array[i + offset];

		}

		return this;

	}

	toArray(array = [], offset = 0) {

		const te = this.elements;

		array[offset] = te[0];
		array[offset + 1] = te[1];
		array[offset + 2] = te[2];

		array[offset + 3] = te[3];
		array[offset + 4] = te[4];
		array[offset + 5] = te[5];

		array[offset + 6] = te[6];
		array[offset + 7] = te[7];
		array[offset + 8] = te[8];

		return array;

	}

	clone() {

		return new this.constructor().fromArray(this.elements);

	}

}

function arrayNeedsUint32(array) {

	// assumes larger values usually on last

	for (let i = array.length - 1; i >= 0; --i) {

		if (array[i] > 65535) return true;

	}

	return false;

}

function createElementNS$1(name) {

	return document.createElementNS('http://www.w3.org/1999/xhtml', name);

}

function SRGBToLinear$1(c) {

	return (c < 0.04045) ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);

}

function LinearToSRGB$1(c) {

	return (c < 0.0031308) ? c * 12.92 : 1.055 * (Math.pow(c, 0.41666)) - 0.055;

}

// JavaScript RGB-to-RGB transforms, defined as
// FN[InputColorSpace][OutputColorSpace] callback functions.
const FN = {
	[SRGBColorSpace]: { [LinearSRGBColorSpace]: SRGBToLinear$1 },
	[LinearSRGBColorSpace]: { [SRGBColorSpace]: LinearToSRGB$1 },
};

const ColorManagement = {

	legacyMode: true,

	get workingColorSpace() {

		return LinearSRGBColorSpace;

	},

	set workingColorSpace(colorSpace) {

		console.warn('THREE.ColorManagement: .workingColorSpace is readonly.');

	},

	convert: function (color, sourceColorSpace, targetColorSpace) {

		if (this.legacyMode || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {

			return color;

		}

		if (FN[sourceColorSpace] && FN[sourceColorSpace][targetColorSpace] !== undefined) {

			const fn = FN[sourceColorSpace][targetColorSpace];

			color.r = fn(color.r);
			color.g = fn(color.g);
			color.b = fn(color.b);

			return color;

		}

		throw new Error('Unsupported color space conversion.');

	},

	fromWorkingColorSpace: function (color, targetColorSpace) {

		return this.convert(color, this.workingColorSpace, targetColorSpace);

	},

	toWorkingColorSpace: function (color, sourceColorSpace) {

		return this.convert(color, sourceColorSpace, this.workingColorSpace);

	},

};

const _colorKeywords$1 = {
	'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32
};

const _rgb = { r: 0, g: 0, b: 0 };
const _hslA$1 = { h: 0, s: 0, l: 0 };
const _hslB$1 = { h: 0, s: 0, l: 0 };

function hue2rgb$1(p, q, t) {

	if (t < 0) t += 1;
	if (t > 1) t -= 1;
	if (t < 1 / 6) return p + (q - p) * 6 * t;
	if (t < 1 / 2) return q;
	if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
	return p;

}

function toComponents(source, target) {

	target.r = source.r;
	target.g = source.g;
	target.b = source.b;

	return target;

}

class Color$1 {

	constructor(r, g, b) {

		this.isColor = true;

		this.r = 1;
		this.g = 1;
		this.b = 1;

		if (g === undefined && b === undefined) {

			// r is THREE.Color, hex or string
			return this.set(r);

		}

		return this.setRGB(r, g, b);

	}

	set(value) {

		if (value && value.isColor) {

			this.copy(value);

		} else if (typeof value === 'number') {

			this.setHex(value);

		} else if (typeof value === 'string') {

			this.setStyle(value);

		}

		return this;

	}

	setScalar(scalar) {

		this.r = scalar;
		this.g = scalar;
		this.b = scalar;

		return this;

	}

	setHex(hex, colorSpace = SRGBColorSpace) {

		hex = Math.floor(hex);

		this.r = (hex >> 16 & 255) / 255;
		this.g = (hex >> 8 & 255) / 255;
		this.b = (hex & 255) / 255;

		ColorManagement.toWorkingColorSpace(this, colorSpace);

		return this;

	}

	setRGB(r, g, b, colorSpace = LinearSRGBColorSpace) {

		this.r = r;
		this.g = g;
		this.b = b;

		ColorManagement.toWorkingColorSpace(this, colorSpace);

		return this;

	}

	setHSL(h, s, l, colorSpace = LinearSRGBColorSpace) {

		// h,s,l ranges are in 0.0 - 1.0
		h = euclideanModulo$1(h, 1);
		s = clamp$1(s, 0, 1);
		l = clamp$1(l, 0, 1);

		if (s === 0) {

			this.r = this.g = this.b = l;

		} else {

			const p = l <= 0.5 ? l * (1 + s) : l + s - (l * s);
			const q = (2 * l) - p;

			this.r = hue2rgb$1(q, p, h + 1 / 3);
			this.g = hue2rgb$1(q, p, h);
			this.b = hue2rgb$1(q, p, h - 1 / 3);

		}

		ColorManagement.toWorkingColorSpace(this, colorSpace);

		return this;

	}

	setStyle(style, colorSpace = SRGBColorSpace) {

		function handleAlpha(string) {

			if (string === undefined) return;

			if (parseFloat(string) < 1) {

				console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');

			}

		}


		let m;

		if (m = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style)) {

			// rgb / hsl

			let color;
			const name = m[1];
			const components = m[2];

			switch (name) {

				case 'rgb':
				case 'rgba':

					if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {

						// rgb(255,0,0) rgba(255,0,0,0.5)
						this.r = Math.min(255, parseInt(color[1], 10)) / 255;
						this.g = Math.min(255, parseInt(color[2], 10)) / 255;
						this.b = Math.min(255, parseInt(color[3], 10)) / 255;

						ColorManagement.toWorkingColorSpace(this, colorSpace);

						handleAlpha(color[4]);

						return this;

					}

					if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {

						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
						this.r = Math.min(100, parseInt(color[1], 10)) / 100;
						this.g = Math.min(100, parseInt(color[2], 10)) / 100;
						this.b = Math.min(100, parseInt(color[3], 10)) / 100;

						ColorManagement.toWorkingColorSpace(this, colorSpace);

						handleAlpha(color[4]);

						return this;

					}

					break;

				case 'hsl':
				case 'hsla':

					if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {

						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
						const h = parseFloat(color[1]) / 360;
						const s = parseInt(color[2], 10) / 100;
						const l = parseInt(color[3], 10) / 100;

						handleAlpha(color[4]);

						return this.setHSL(h, s, l, colorSpace);

					}

					break;

			}

		} else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {

			// hex color

			const hex = m[1];
			const size = hex.length;

			if (size === 3) {

				// #ff0
				this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
				this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;
				this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;

				ColorManagement.toWorkingColorSpace(this, colorSpace);

				return this;

			} else if (size === 6) {

				// #ff0000
				this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;
				this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;
				this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;

				ColorManagement.toWorkingColorSpace(this, colorSpace);

				return this;

			}

		}

		if (style && style.length > 0) {

			return this.setColorName(style, colorSpace);

		}

		return this;

	}

	setColorName(style, colorSpace = SRGBColorSpace) {

		// color keywords
		const hex = _colorKeywords$1[style.toLowerCase()];

		if (hex !== undefined) {

			// red
			this.setHex(hex, colorSpace);

		} else {

			// unknown color
			console.warn('THREE.Color: Unknown color ' + style);

		}

		return this;

	}

	clone() {

		return new this.constructor(this.r, this.g, this.b);

	}

	copy(color) {

		this.r = color.r;
		this.g = color.g;
		this.b = color.b;

		return this;

	}

	copySRGBToLinear(color) {

		this.r = SRGBToLinear$1(color.r);
		this.g = SRGBToLinear$1(color.g);
		this.b = SRGBToLinear$1(color.b);

		return this;

	}

	copyLinearToSRGB(color) {

		this.r = LinearToSRGB$1(color.r);
		this.g = LinearToSRGB$1(color.g);
		this.b = LinearToSRGB$1(color.b);

		return this;

	}

	convertSRGBToLinear() {

		this.copySRGBToLinear(this);

		return this;

	}

	convertLinearToSRGB() {

		this.copyLinearToSRGB(this);

		return this;

	}

	getHex(colorSpace = SRGBColorSpace) {

		ColorManagement.fromWorkingColorSpace(toComponents(this, _rgb), colorSpace);

		return clamp$1(_rgb.r * 255, 0, 255) << 16 ^ clamp$1(_rgb.g * 255, 0, 255) << 8 ^ clamp$1(_rgb.b * 255, 0, 255) << 0;

	}

	getHexString(colorSpace = SRGBColorSpace) {

		return ('000000' + this.getHex(colorSpace).toString(16)).slice(- 6);

	}

	getHSL(target, colorSpace = LinearSRGBColorSpace) {

		// h,s,l ranges are in 0.0 - 1.0

		ColorManagement.fromWorkingColorSpace(toComponents(this, _rgb), colorSpace);

		const r = _rgb.r, g = _rgb.g, b = _rgb.b;

		const max = Math.max(r, g, b);
		const min = Math.min(r, g, b);

		let hue, saturation;
		const lightness = (min + max) / 2.0;

		if (min === max) {

			hue = 0;
			saturation = 0;

		} else {

			const delta = max - min;

			saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);

			switch (max) {

				case r: hue = (g - b) / delta + (g < b ? 6 : 0); break;
				case g: hue = (b - r) / delta + 2; break;
				case b: hue = (r - g) / delta + 4; break;

			}

			hue /= 6;

		}

		target.h = hue;
		target.s = saturation;
		target.l = lightness;

		return target;

	}

	getRGB(target, colorSpace = LinearSRGBColorSpace) {

		ColorManagement.fromWorkingColorSpace(toComponents(this, _rgb), colorSpace);

		target.r = _rgb.r;
		target.g = _rgb.g;
		target.b = _rgb.b;

		return target;

	}

	getStyle(colorSpace = SRGBColorSpace) {

		ColorManagement.fromWorkingColorSpace(toComponents(this, _rgb), colorSpace);

		if (colorSpace !== SRGBColorSpace) {

			// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).
			return `color(${colorSpace} ${_rgb.r} ${_rgb.g} ${_rgb.b})`;

		}

		return `rgb(${(_rgb.r * 255) | 0},${(_rgb.g * 255) | 0},${(_rgb.b * 255) | 0})`;

	}

	offsetHSL(h, s, l) {

		this.getHSL(_hslA$1);

		_hslA$1.h += h; _hslA$1.s += s; _hslA$1.l += l;

		this.setHSL(_hslA$1.h, _hslA$1.s, _hslA$1.l);

		return this;

	}

	add(color) {

		this.r += color.r;
		this.g += color.g;
		this.b += color.b;

		return this;

	}

	addColors(color1, color2) {

		this.r = color1.r + color2.r;
		this.g = color1.g + color2.g;
		this.b = color1.b + color2.b;

		return this;

	}

	addScalar(s) {

		this.r += s;
		this.g += s;
		this.b += s;

		return this;

	}

	sub(color) {

		this.r = Math.max(0, this.r - color.r);
		this.g = Math.max(0, this.g - color.g);
		this.b = Math.max(0, this.b - color.b);

		return this;

	}

	multiply(color) {

		this.r *= color.r;
		this.g *= color.g;
		this.b *= color.b;

		return this;

	}

	multiplyScalar(s) {

		this.r *= s;
		this.g *= s;
		this.b *= s;

		return this;

	}

	lerp(color, alpha) {

		this.r += (color.r - this.r) * alpha;
		this.g += (color.g - this.g) * alpha;
		this.b += (color.b - this.b) * alpha;

		return this;

	}

	lerpColors(color1, color2, alpha) {

		this.r = color1.r + (color2.r - color1.r) * alpha;
		this.g = color1.g + (color2.g - color1.g) * alpha;
		this.b = color1.b + (color2.b - color1.b) * alpha;

		return this;

	}

	lerpHSL(color, alpha) {

		this.getHSL(_hslA$1);
		color.getHSL(_hslB$1);

		const h = lerp$1(_hslA$1.h, _hslB$1.h, alpha);
		const s = lerp$1(_hslA$1.s, _hslB$1.s, alpha);
		const l = lerp$1(_hslA$1.l, _hslB$1.l, alpha);

		this.setHSL(h, s, l);

		return this;

	}

	equals(c) {

		return (c.r === this.r) && (c.g === this.g) && (c.b === this.b);

	}

	fromArray(array, offset = 0) {

		this.r = array[offset];
		this.g = array[offset + 1];
		this.b = array[offset + 2];

		return this;

	}

	toArray(array = [], offset = 0) {

		array[offset] = this.r;
		array[offset + 1] = this.g;
		array[offset + 2] = this.b;

		return array;

	}

	fromBufferAttribute(attribute, index) {

		this.r = attribute.getX(index);
		this.g = attribute.getY(index);
		this.b = attribute.getZ(index);

		if (attribute.normalized === true) {

			// assuming Uint8Array

			this.r /= 255;
			this.g /= 255;
			this.b /= 255;

		}

		return this;

	}

	toJSON() {

		return this.getHex();

	}

	*[Symbol.iterator]() {

		yield this.r;
		yield this.g;
		yield this.b;

	}

}

Color$1.NAMES = _colorKeywords$1;

let _canvas$1;

class ImageUtils$1 {

	static getDataURL(image) {

		if (/^data:/i.test(image.src)) {

			return image.src;

		}

		if (typeof HTMLCanvasElement == 'undefined') {

			return image.src;

		}

		let canvas;

		if (image instanceof HTMLCanvasElement) {

			canvas = image;

		} else {

			if (_canvas$1 === undefined) _canvas$1 = createElementNS$1('canvas');

			_canvas$1.width = image.width;
			_canvas$1.height = image.height;

			const context = _canvas$1.getContext('2d');

			if (image instanceof ImageData) {

				context.putImageData(image, 0, 0);

			} else {

				context.drawImage(image, 0, 0, image.width, image.height);

			}

			canvas = _canvas$1;

		}

		if (canvas.width > 2048 || canvas.height > 2048) {

			console.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);

			return canvas.toDataURL('image/jpeg', 0.6);

		} else {

			return canvas.toDataURL('image/png');

		}

	}

	static sRGBToLinear(image) {

		if ((typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement) ||
			(typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement) ||
			(typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap)) {

			const canvas = createElementNS$1('canvas');

			canvas.width = image.width;
			canvas.height = image.height;

			const context = canvas.getContext('2d');
			context.drawImage(image, 0, 0, image.width, image.height);

			const imageData = context.getImageData(0, 0, image.width, image.height);
			const data = imageData.data;

			for (let i = 0; i < data.length; i++) {

				data[i] = SRGBToLinear$1(data[i] / 255) * 255;

			}

			context.putImageData(imageData, 0, 0);

			return canvas;

		} else if (image.data) {

			const data = image.data.slice(0);

			for (let i = 0; i < data.length; i++) {

				if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {

					data[i] = Math.floor(SRGBToLinear$1(data[i] / 255) * 255);

				} else {

					// assuming float

					data[i] = SRGBToLinear$1(data[i]);

				}

			}

			return {
				data: data,
				width: image.width,
				height: image.height
			};

		} else {

			console.warn('THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.');
			return image;

		}

	}

}

class Source {

	constructor(data = null) {

		this.isSource = true;

		this.uuid = generateUUID$1();

		this.data = data;

		this.version = 0;

	}

	set needsUpdate(value) {

		if (value === true) this.version++;

	}

	toJSON(meta) {

		const isRootObject = (meta === undefined || typeof meta === 'string');

		if (!isRootObject && meta.images[this.uuid] !== undefined) {

			return meta.images[this.uuid];

		}

		const output = {
			uuid: this.uuid,
			url: ''
		};

		const data = this.data;

		if (data !== null) {

			let url;

			if (Array.isArray(data)) {

				// cube texture

				url = [];

				for (let i = 0, l = data.length; i < l; i++) {

					if (data[i].isDataTexture) {

						url.push(serializeImage$1(data[i].image));

					} else {

						url.push(serializeImage$1(data[i]));

					}

				}

			} else {

				// texture

				url = serializeImage$1(data);

			}

			output.url = url;

		}

		if (!isRootObject) {

			meta.images[this.uuid] = output;

		}

		return output;

	}

}

function serializeImage$1(image) {

	if ((typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement) ||
		(typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement) ||
		(typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap)) {

		// default images

		return ImageUtils$1.getDataURL(image);

	} else {

		if (image.data) {

			// images of DataTexture

			return {
				data: Array.prototype.slice.call(image.data),
				width: image.width,
				height: image.height,
				type: image.data.constructor.name
			};

		} else {

			console.warn('THREE.Texture: Unable to serialize Texture.');
			return {};

		}

	}

}

let textureId$1 = 0;

class Texture$1 extends EventDispatcher$1 {

	constructor(image = Texture$1.DEFAULT_IMAGE, mapping = Texture$1.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping$1, wrapT = ClampToEdgeWrapping$1, magFilter = LinearFilter$1, minFilter = LinearMipmapLinearFilter$1, format = RGBAFormat$1, type = UnsignedByteType$1, anisotropy = 1, encoding = LinearEncoding$1) {

		super();

		this.isTexture = true;

		Object.defineProperty(this, 'id', { value: textureId$1++ });

		this.uuid = generateUUID$1();

		this.name = '';

		this.source = new Source(image);
		this.mipmaps = [];

		this.mapping = mapping;

		this.wrapS = wrapS;
		this.wrapT = wrapT;

		this.magFilter = magFilter;
		this.minFilter = minFilter;

		this.anisotropy = anisotropy;

		this.format = format;
		this.internalFormat = null;
		this.type = type;

		this.offset = new Vector2$1(0, 0);
		this.repeat = new Vector2$1(1, 1);
		this.center = new Vector2$1(0, 0);
		this.rotation = 0;

		this.matrixAutoUpdate = true;
		this.matrix = new Matrix3$1();

		this.generateMipmaps = true;
		this.premultiplyAlpha = false;
		this.flipY = true;
		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

		// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
		//
		// Also changing the encoding after already used by a Material will not automatically make the Material
		// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
		this.encoding = encoding;

		this.userData = {};

		this.version = 0;
		this.onUpdate = null;

		this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not
		this.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)

	}

	get image() {

		return this.source.data;

	}

	set image(value) {

		this.source.data = value;

	}

	updateMatrix() {

		this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);

	}

	clone() {

		return new this.constructor().copy(this);

	}

	copy(source) {

		this.name = source.name;

		this.source = source.source;
		this.mipmaps = source.mipmaps.slice(0);

		this.mapping = source.mapping;

		this.wrapS = source.wrapS;
		this.wrapT = source.wrapT;

		this.magFilter = source.magFilter;
		this.minFilter = source.minFilter;

		this.anisotropy = source.anisotropy;

		this.format = source.format;
		this.internalFormat = source.internalFormat;
		this.type = source.type;

		this.offset.copy(source.offset);
		this.repeat.copy(source.repeat);
		this.center.copy(source.center);
		this.rotation = source.rotation;

		this.matrixAutoUpdate = source.matrixAutoUpdate;
		this.matrix.copy(source.matrix);

		this.generateMipmaps = source.generateMipmaps;
		this.premultiplyAlpha = source.premultiplyAlpha;
		this.flipY = source.flipY;
		this.unpackAlignment = source.unpackAlignment;
		this.encoding = source.encoding;

		this.userData = JSON.parse(JSON.stringify(source.userData));

		this.needsUpdate = true;

		return this;

	}

	toJSON(meta) {

		const isRootObject = (meta === undefined || typeof meta === 'string');

		if (!isRootObject && meta.textures[this.uuid] !== undefined) {

			return meta.textures[this.uuid];

		}

		const output = {

			metadata: {
				version: 4.5,
				type: 'Texture',
				generator: 'Texture.toJSON'
			},

			uuid: this.uuid,
			name: this.name,

			image: this.source.toJSON(meta).uuid,

			mapping: this.mapping,

			repeat: [this.repeat.x, this.repeat.y],
			offset: [this.offset.x, this.offset.y],
			center: [this.center.x, this.center.y],
			rotation: this.rotation,

			wrap: [this.wrapS, this.wrapT],

			format: this.format,
			type: this.type,
			encoding: this.encoding,

			minFilter: this.minFilter,
			magFilter: this.magFilter,
			anisotropy: this.anisotropy,

			flipY: this.flipY,

			premultiplyAlpha: this.premultiplyAlpha,
			unpackAlignment: this.unpackAlignment

		};

		if (JSON.stringify(this.userData) !== '{}') output.userData = this.userData;

		if (!isRootObject) {

			meta.textures[this.uuid] = output;

		}

		return output;

	}

	dispose() {

		this.dispatchEvent({ type: 'dispose' });

	}

	transformUv(uv) {

		if (this.mapping !== UVMapping$1) return uv;

		uv.applyMatrix3(this.matrix);

		if (uv.x < 0 || uv.x > 1) {

			switch (this.wrapS) {

				case RepeatWrapping$1:

					uv.x = uv.x - Math.floor(uv.x);
					break;

				case ClampToEdgeWrapping$1:

					uv.x = uv.x < 0 ? 0 : 1;
					break;

				case MirroredRepeatWrapping$1:

					if (Math.abs(Math.floor(uv.x) % 2) === 1) {

						uv.x = Math.ceil(uv.x) - uv.x;

					} else {

						uv.x = uv.x - Math.floor(uv.x);

					}

					break;

			}

		}

		if (uv.y < 0 || uv.y > 1) {

			switch (this.wrapT) {

				case RepeatWrapping$1:

					uv.y = uv.y - Math.floor(uv.y);
					break;

				case ClampToEdgeWrapping$1:

					uv.y = uv.y < 0 ? 0 : 1;
					break;

				case MirroredRepeatWrapping$1:

					if (Math.abs(Math.floor(uv.y) % 2) === 1) {

						uv.y = Math.ceil(uv.y) - uv.y;

					} else {

						uv.y = uv.y - Math.floor(uv.y);

					}

					break;

			}

		}

		if (this.flipY) {

			uv.y = 1 - uv.y;

		}

		return uv;

	}

	set needsUpdate(value) {

		if (value === true) {

			this.version++;
			this.source.needsUpdate = true;

		}

	}

}

Texture$1.DEFAULT_IMAGE = null;
Texture$1.DEFAULT_MAPPING = UVMapping$1;

class Vector4$1 {

	constructor(x = 0, y = 0, z = 0, w = 1) {

		this.isVector4 = true;

		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;

	}

	get width() {

		return this.z;

	}

	set width(value) {

		this.z = value;

	}

	get height() {

		return this.w;

	}

	set height(value) {

		this.w = value;

	}

	set(x, y, z, w) {

		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;

		return this;

	}

	setScalar(scalar) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;
		this.w = scalar;

		return this;

	}

	setX(x) {

		this.x = x;

		return this;

	}

	setY(y) {

		this.y = y;

		return this;

	}

	setZ(z) {

		this.z = z;

		return this;

	}

	setW(w) {

		this.w = w;

		return this;

	}

	setComponent(index, value) {

		switch (index) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			case 3: this.w = value; break;
			default: throw new Error('index is out of range: ' + index);

		}

		return this;

	}

	getComponent(index) {

		switch (index) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			case 3: return this.w;
			default: throw new Error('index is out of range: ' + index);

		}

	}

	clone() {

		return new this.constructor(this.x, this.y, this.z, this.w);

	}

	copy(v) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = (v.w !== undefined) ? v.w : 1;

		return this;

	}

	add(v, w) {

		if (w !== undefined) {

			console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
			return this.addVectors(v, w);

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		this.w += v.w;

		return this;

	}

	addScalar(s) {

		this.x += s;
		this.y += s;
		this.z += s;
		this.w += s;

		return this;

	}

	addVectors(a, b) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;
		this.w = a.w + b.w;

		return this;

	}

	addScaledVector(v, s) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;
		this.w += v.w * s;

		return this;

	}

	sub(v, w) {

		if (w !== undefined) {

			console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
			return this.subVectors(v, w);

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		this.w -= v.w;

		return this;

	}

	subScalar(s) {

		this.x -= s;
		this.y -= s;
		this.z -= s;
		this.w -= s;

		return this;

	}

	subVectors(a, b) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;
		this.w = a.w - b.w;

		return this;

	}

	multiply(v) {

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;
		this.w *= v.w;

		return this;

	}

	multiplyScalar(scalar) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;
		this.w *= scalar;

		return this;

	}

	applyMatrix4(m) {

		const x = this.x, y = this.y, z = this.z, w = this.w;
		const e = m.elements;

		this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
		this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
		this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
		this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;

		return this;

	}

	divideScalar(scalar) {

		return this.multiplyScalar(1 / scalar);

	}

	setAxisAngleFromQuaternion(q) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

		// q is assumed to be normalized

		this.w = 2 * Math.acos(q.w);

		const s = Math.sqrt(1 - q.w * q.w);

		if (s < 0.0001) {

			this.x = 1;
			this.y = 0;
			this.z = 0;

		} else {

			this.x = q.x / s;
			this.y = q.y / s;
			this.z = q.z / s;

		}

		return this;

	}

	setAxisAngleFromRotationMatrix(m) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		let angle, x, y, z; // variables for result
		const epsilon = 0.01,		// margin to allow for rounding errors
			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

			te = m.elements,

			m11 = te[0], m12 = te[4], m13 = te[8],
			m21 = te[1], m22 = te[5], m23 = te[9],
			m31 = te[2], m32 = te[6], m33 = te[10];

		if ((Math.abs(m12 - m21) < epsilon) &&
			(Math.abs(m13 - m31) < epsilon) &&
			(Math.abs(m23 - m32) < epsilon)) {

			// singularity found
			// first check for identity matrix which must have +1 for all terms
			// in leading diagonal and zero in other terms

			if ((Math.abs(m12 + m21) < epsilon2) &&
				(Math.abs(m13 + m31) < epsilon2) &&
				(Math.abs(m23 + m32) < epsilon2) &&
				(Math.abs(m11 + m22 + m33 - 3) < epsilon2)) {

				// this singularity is identity matrix so angle = 0

				this.set(1, 0, 0, 0);

				return this; // zero angle, arbitrary axis

			}

			// otherwise this singularity is angle = 180

			angle = Math.PI;

			const xx = (m11 + 1) / 2;
			const yy = (m22 + 1) / 2;
			const zz = (m33 + 1) / 2;
			const xy = (m12 + m21) / 4;
			const xz = (m13 + m31) / 4;
			const yz = (m23 + m32) / 4;

			if ((xx > yy) && (xx > zz)) {

				// m11 is the largest diagonal term

				if (xx < epsilon) {

					x = 0;
					y = 0.707106781;
					z = 0.707106781;

				} else {

					x = Math.sqrt(xx);
					y = xy / x;
					z = xz / x;

				}

			} else if (yy > zz) {

				// m22 is the largest diagonal term

				if (yy < epsilon) {

					x = 0.707106781;
					y = 0;
					z = 0.707106781;

				} else {

					y = Math.sqrt(yy);
					x = xy / y;
					z = yz / y;

				}

			} else {

				// m33 is the largest diagonal term so base result on this

				if (zz < epsilon) {

					x = 0.707106781;
					y = 0.707106781;
					z = 0;

				} else {

					z = Math.sqrt(zz);
					x = xz / z;
					y = yz / z;

				}

			}

			this.set(x, y, z, angle);

			return this; // return 180 deg rotation

		}

		// as we have reached here there are no singularities so we can handle normally

		let s = Math.sqrt((m32 - m23) * (m32 - m23) +
			(m13 - m31) * (m13 - m31) +
			(m21 - m12) * (m21 - m12)); // used to normalize

		if (Math.abs(s) < 0.001) s = 1;

		// prevent divide by zero, should not happen if matrix is orthogonal and should be
		// caught by singularity test above, but I've left it in just in case

		this.x = (m32 - m23) / s;
		this.y = (m13 - m31) / s;
		this.z = (m21 - m12) / s;
		this.w = Math.acos((m11 + m22 + m33 - 1) / 2);

		return this;

	}

	min(v) {

		this.x = Math.min(this.x, v.x);
		this.y = Math.min(this.y, v.y);
		this.z = Math.min(this.z, v.z);
		this.w = Math.min(this.w, v.w);

		return this;

	}

	max(v) {

		this.x = Math.max(this.x, v.x);
		this.y = Math.max(this.y, v.y);
		this.z = Math.max(this.z, v.z);
		this.w = Math.max(this.w, v.w);

		return this;

	}

	clamp(min, max) {

		// assumes min < max, componentwise

		this.x = Math.max(min.x, Math.min(max.x, this.x));
		this.y = Math.max(min.y, Math.min(max.y, this.y));
		this.z = Math.max(min.z, Math.min(max.z, this.z));
		this.w = Math.max(min.w, Math.min(max.w, this.w));

		return this;

	}

	clampScalar(minVal, maxVal) {

		this.x = Math.max(minVal, Math.min(maxVal, this.x));
		this.y = Math.max(minVal, Math.min(maxVal, this.y));
		this.z = Math.max(minVal, Math.min(maxVal, this.z));
		this.w = Math.max(minVal, Math.min(maxVal, this.w));

		return this;

	}

	clampLength(min, max) {

		const length = this.length();

		return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));

	}

	floor() {

		this.x = Math.floor(this.x);
		this.y = Math.floor(this.y);
		this.z = Math.floor(this.z);
		this.w = Math.floor(this.w);

		return this;

	}

	ceil() {

		this.x = Math.ceil(this.x);
		this.y = Math.ceil(this.y);
		this.z = Math.ceil(this.z);
		this.w = Math.ceil(this.w);

		return this;

	}

	round() {

		this.x = Math.round(this.x);
		this.y = Math.round(this.y);
		this.z = Math.round(this.z);
		this.w = Math.round(this.w);

		return this;

	}

	roundToZero() {

		this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);
		this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);
		this.z = (this.z < 0) ? Math.ceil(this.z) : Math.floor(this.z);
		this.w = (this.w < 0) ? Math.ceil(this.w) : Math.floor(this.w);

		return this;

	}

	negate() {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;
		this.w = - this.w;

		return this;

	}

	dot(v) {

		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

	}

	lengthSq() {

		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

	}

	length() {

		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);

	}

	manhattanLength() {

		return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);

	}

	normalize() {

		return this.divideScalar(this.length() || 1);

	}

	setLength(length) {

		return this.normalize().multiplyScalar(length);

	}

	lerp(v, alpha) {

		this.x += (v.x - this.x) * alpha;
		this.y += (v.y - this.y) * alpha;
		this.z += (v.z - this.z) * alpha;
		this.w += (v.w - this.w) * alpha;

		return this;

	}

	lerpVectors(v1, v2, alpha) {

		this.x = v1.x + (v2.x - v1.x) * alpha;
		this.y = v1.y + (v2.y - v1.y) * alpha;
		this.z = v1.z + (v2.z - v1.z) * alpha;
		this.w = v1.w + (v2.w - v1.w) * alpha;

		return this;

	}

	equals(v) {

		return ((v.x === this.x) && (v.y === this.y) && (v.z === this.z) && (v.w === this.w));

	}

	fromArray(array, offset = 0) {

		this.x = array[offset];
		this.y = array[offset + 1];
		this.z = array[offset + 2];
		this.w = array[offset + 3];

		return this;

	}

	toArray(array = [], offset = 0) {

		array[offset] = this.x;
		array[offset + 1] = this.y;
		array[offset + 2] = this.z;
		array[offset + 3] = this.w;

		return array;

	}

	fromBufferAttribute(attribute, index, offset) {

		if (offset !== undefined) {

			console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');

		}

		this.x = attribute.getX(index);
		this.y = attribute.getY(index);
		this.z = attribute.getZ(index);
		this.w = attribute.getW(index);

		return this;

	}

	random() {

		this.x = Math.random();
		this.y = Math.random();
		this.z = Math.random();
		this.w = Math.random();

		return this;

	}

	*[Symbol.iterator]() {

		yield this.x;
		yield this.y;
		yield this.z;
		yield this.w;

	}

}

/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/
class WebGLRenderTarget$1 extends EventDispatcher$1 {

	constructor(width, height, options = {}) {

		super();

		this.isWebGLRenderTarget = true;

		this.width = width;
		this.height = height;
		this.depth = 1;

		this.scissor = new Vector4$1(0, 0, width, height);
		this.scissorTest = false;

		this.viewport = new Vector4$1(0, 0, width, height);

		const image = { width: width, height: height, depth: 1 };

		this.texture = new Texture$1(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
		this.texture.isRenderTargetTexture = true;

		this.texture.flipY = false;
		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
		this.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;
		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter$1;

		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;

		this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

		this.samples = options.samples !== undefined ? options.samples : 0;

	}

	setSize(width, height, depth = 1) {

		if (this.width !== width || this.height !== height || this.depth !== depth) {

			this.width = width;
			this.height = height;
			this.depth = depth;

			this.texture.image.width = width;
			this.texture.image.height = height;
			this.texture.image.depth = depth;

			this.dispose();

		}

		this.viewport.set(0, 0, width, height);
		this.scissor.set(0, 0, width, height);

	}

	clone() {

		return new this.constructor().copy(this);

	}

	copy(source) {

		this.width = source.width;
		this.height = source.height;
		this.depth = source.depth;

		this.viewport.copy(source.viewport);

		this.texture = source.texture.clone();
		this.texture.isRenderTargetTexture = true;

		// ensure image object is not shared, see #20328

		const image = Object.assign({}, source.texture.image);
		this.texture.source = new Source(image);

		this.depthBuffer = source.depthBuffer;
		this.stencilBuffer = source.stencilBuffer;

		if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();

		this.samples = source.samples;

		return this;

	}

	dispose() {

		this.dispatchEvent({ type: 'dispose' });

	}

}

class DataArrayTexture extends Texture$1 {

	constructor(data = null, width = 1, height = 1, depth = 1) {

		super(null);

		this.isDataArrayTexture = true;

		this.image = { data, width, height, depth };

		this.magFilter = NearestFilter$1;
		this.minFilter = NearestFilter$1;

		this.wrapR = ClampToEdgeWrapping$1;

		this.generateMipmaps = false;
		this.flipY = false;
		this.unpackAlignment = 1;

	}

}

class Data3DTexture extends Texture$1 {

	constructor(data = null, width = 1, height = 1, depth = 1) {

		// We're going to add .setXXX() methods for setting properties later.
		// Users can still set in DataTexture3D directly.
		//
		//	const texture = new THREE.DataTexture3D( data, width, height, depth );
		// 	texture.anisotropy = 16;
		//
		// See #14839

		super(null);

		this.isData3DTexture = true;

		this.image = { data, width, height, depth };

		this.magFilter = NearestFilter$1;
		this.minFilter = NearestFilter$1;

		this.wrapR = ClampToEdgeWrapping$1;

		this.generateMipmaps = false;
		this.flipY = false;
		this.unpackAlignment = 1;

	}

}

class Quaternion$1 {

	constructor(x = 0, y = 0, z = 0, w = 1) {

		this.isQuaternion = true;

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

	}

	static slerp(qa, qb, qm, t) {

		console.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');
		return qm.slerpQuaternions(qa, qb, t);

	}

	static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {

		// fuzz-free, array-based Quaternion SLERP operation

		let x0 = src0[srcOffset0 + 0],
			y0 = src0[srcOffset0 + 1],
			z0 = src0[srcOffset0 + 2],
			w0 = src0[srcOffset0 + 3];

		const x1 = src1[srcOffset1 + 0],
			y1 = src1[srcOffset1 + 1],
			z1 = src1[srcOffset1 + 2],
			w1 = src1[srcOffset1 + 3];

		if (t === 0) {

			dst[dstOffset + 0] = x0;
			dst[dstOffset + 1] = y0;
			dst[dstOffset + 2] = z0;
			dst[dstOffset + 3] = w0;
			return;

		}

		if (t === 1) {

			dst[dstOffset + 0] = x1;
			dst[dstOffset + 1] = y1;
			dst[dstOffset + 2] = z1;
			dst[dstOffset + 3] = w1;
			return;

		}

		if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {

			let s = 1 - t;
			const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
				dir = (cos >= 0 ? 1 : - 1),
				sqrSin = 1 - cos * cos;

			// Skip the Slerp for tiny steps to avoid numeric problems:
			if (sqrSin > Number.EPSILON) {

				const sin = Math.sqrt(sqrSin),
					len = Math.atan2(sin, cos * dir);

				s = Math.sin(s * len) / sin;
				t = Math.sin(t * len) / sin;

			}

			const tDir = t * dir;

			x0 = x0 * s + x1 * tDir;
			y0 = y0 * s + y1 * tDir;
			z0 = z0 * s + z1 * tDir;
			w0 = w0 * s + w1 * tDir;

			// Normalize in case we just did a lerp:
			if (s === 1 - t) {

				const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);

				x0 *= f;
				y0 *= f;
				z0 *= f;
				w0 *= f;

			}

		}

		dst[dstOffset] = x0;
		dst[dstOffset + 1] = y0;
		dst[dstOffset + 2] = z0;
		dst[dstOffset + 3] = w0;

	}

	static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {

		const x0 = src0[srcOffset0];
		const y0 = src0[srcOffset0 + 1];
		const z0 = src0[srcOffset0 + 2];
		const w0 = src0[srcOffset0 + 3];

		const x1 = src1[srcOffset1];
		const y1 = src1[srcOffset1 + 1];
		const z1 = src1[srcOffset1 + 2];
		const w1 = src1[srcOffset1 + 3];

		dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
		dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
		dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
		dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;

		return dst;

	}

	get x() {

		return this._x;

	}

	set x(value) {

		this._x = value;
		this._onChangeCallback();

	}

	get y() {

		return this._y;

	}

	set y(value) {

		this._y = value;
		this._onChangeCallback();

	}

	get z() {

		return this._z;

	}

	set z(value) {

		this._z = value;
		this._onChangeCallback();

	}

	get w() {

		return this._w;

	}

	set w(value) {

		this._w = value;
		this._onChangeCallback();

	}

	set(x, y, z, w) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

		this._onChangeCallback();

		return this;

	}

	clone() {

		return new this.constructor(this._x, this._y, this._z, this._w);

	}

	copy(quaternion) {

		this._x = quaternion.x;
		this._y = quaternion.y;
		this._z = quaternion.z;
		this._w = quaternion.w;

		this._onChangeCallback();

		return this;

	}

	setFromEuler(euler, update) {

		if (!(euler && euler.isEuler)) {

			throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');

		}

		const x = euler._x, y = euler._y, z = euler._z, order = euler._order;

		// http://www.mathworks.com/matlabcentral/fileexchange/
		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
		//	content/SpinCalc.m

		const cos = Math.cos;
		const sin = Math.sin;

		const c1 = cos(x / 2);
		const c2 = cos(y / 2);
		const c3 = cos(z / 2);

		const s1 = sin(x / 2);
		const s2 = sin(y / 2);
		const s3 = sin(z / 2);

		switch (order) {

			case 'XYZ':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'YXZ':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			case 'ZXY':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'ZYX':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			case 'YZX':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'XZY':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			default:
				console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);

		}

		if (update !== false) this._onChangeCallback();

		return this;

	}

	setFromAxisAngle(axis, angle) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

		// assumes axis is normalized

		const halfAngle = angle / 2, s = Math.sin(halfAngle);

		this._x = axis.x * s;
		this._y = axis.y * s;
		this._z = axis.z * s;
		this._w = Math.cos(halfAngle);

		this._onChangeCallback();

		return this;

	}

	setFromRotationMatrix(m) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		const te = m.elements,

			m11 = te[0], m12 = te[4], m13 = te[8],
			m21 = te[1], m22 = te[5], m23 = te[9],
			m31 = te[2], m32 = te[6], m33 = te[10],

			trace = m11 + m22 + m33;

		if (trace > 0) {

			const s = 0.5 / Math.sqrt(trace + 1.0);

			this._w = 0.25 / s;
			this._x = (m32 - m23) * s;
			this._y = (m13 - m31) * s;
			this._z = (m21 - m12) * s;

		} else if (m11 > m22 && m11 > m33) {

			const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);

			this._w = (m32 - m23) / s;
			this._x = 0.25 * s;
			this._y = (m12 + m21) / s;
			this._z = (m13 + m31) / s;

		} else if (m22 > m33) {

			const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);

			this._w = (m13 - m31) / s;
			this._x = (m12 + m21) / s;
			this._y = 0.25 * s;
			this._z = (m23 + m32) / s;

		} else {

			const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);

			this._w = (m21 - m12) / s;
			this._x = (m13 + m31) / s;
			this._y = (m23 + m32) / s;
			this._z = 0.25 * s;

		}

		this._onChangeCallback();

		return this;

	}

	setFromUnitVectors(vFrom, vTo) {

		// assumes direction vectors vFrom and vTo are normalized

		let r = vFrom.dot(vTo) + 1;

		if (r < Number.EPSILON) {

			// vFrom and vTo point in opposite directions

			r = 0;

			if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {

				this._x = - vFrom.y;
				this._y = vFrom.x;
				this._z = 0;
				this._w = r;

			} else {

				this._x = 0;
				this._y = - vFrom.z;
				this._z = vFrom.y;
				this._w = r;

			}

		} else {

			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
			this._w = r;

		}

		return this.normalize();

	}

	angleTo(q) {

		return 2 * Math.acos(Math.abs(clamp$1(this.dot(q), - 1, 1)));

	}

	rotateTowards(q, step) {

		const angle = this.angleTo(q);

		if (angle === 0) return this;

		const t = Math.min(1, step / angle);

		this.slerp(q, t);

		return this;

	}

	identity() {

		return this.set(0, 0, 0, 1);

	}

	invert() {

		// quaternion is assumed to have unit length

		return this.conjugate();

	}

	conjugate() {

		this._x *= - 1;
		this._y *= - 1;
		this._z *= - 1;

		this._onChangeCallback();

		return this;

	}

	dot(v) {

		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

	}

	lengthSq() {

		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

	}

	length() {

		return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);

	}

	normalize() {

		let l = this.length();

		if (l === 0) {

			this._x = 0;
			this._y = 0;
			this._z = 0;
			this._w = 1;

		} else {

			l = 1 / l;

			this._x = this._x * l;
			this._y = this._y * l;
			this._z = this._z * l;
			this._w = this._w * l;

		}

		this._onChangeCallback();

		return this;

	}

	multiply(q, p) {

		if (p !== undefined) {

			console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');
			return this.multiplyQuaternions(q, p);

		}

		return this.multiplyQuaternions(this, q);

	}

	premultiply(q) {

		return this.multiplyQuaternions(q, this);

	}

	multiplyQuaternions(a, b) {

		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

		const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
		const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

		this._onChangeCallback();

		return this;

	}

	slerp(qb, t) {

		if (t === 0) return this;
		if (t === 1) return this.copy(qb);

		const x = this._x, y = this._y, z = this._z, w = this._w;

		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

		let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

		if (cosHalfTheta < 0) {

			this._w = - qb._w;
			this._x = - qb._x;
			this._y = - qb._y;
			this._z = - qb._z;

			cosHalfTheta = - cosHalfTheta;

		} else {

			this.copy(qb);

		}

		if (cosHalfTheta >= 1.0) {

			this._w = w;
			this._x = x;
			this._y = y;
			this._z = z;

			return this;

		}

		const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

		if (sqrSinHalfTheta <= Number.EPSILON) {

			const s = 1 - t;
			this._w = s * w + t * this._w;
			this._x = s * x + t * this._x;
			this._y = s * y + t * this._y;
			this._z = s * z + t * this._z;

			this.normalize();
			this._onChangeCallback();

			return this;

		}

		const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
		const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
		const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,
			ratioB = Math.sin(t * halfTheta) / sinHalfTheta;

		this._w = (w * ratioA + this._w * ratioB);
		this._x = (x * ratioA + this._x * ratioB);
		this._y = (y * ratioA + this._y * ratioB);
		this._z = (z * ratioA + this._z * ratioB);

		this._onChangeCallback();

		return this;

	}

	slerpQuaternions(qa, qb, t) {

		return this.copy(qa).slerp(qb, t);

	}

	random() {

		// Derived from http://planning.cs.uiuc.edu/node198.html
		// Note, this source uses w, x, y, z ordering,
		// so we swap the order below.

		const u1 = Math.random();
		const sqrt1u1 = Math.sqrt(1 - u1);
		const sqrtu1 = Math.sqrt(u1);

		const u2 = 2 * Math.PI * Math.random();

		const u3 = 2 * Math.PI * Math.random();

		return this.set(
			sqrt1u1 * Math.cos(u2),
			sqrtu1 * Math.sin(u3),
			sqrtu1 * Math.cos(u3),
			sqrt1u1 * Math.sin(u2),
		);

	}

	equals(quaternion) {

		return (quaternion._x === this._x) && (quaternion._y === this._y) && (quaternion._z === this._z) && (quaternion._w === this._w);

	}

	fromArray(array, offset = 0) {

		this._x = array[offset];
		this._y = array[offset + 1];
		this._z = array[offset + 2];
		this._w = array[offset + 3];

		this._onChangeCallback();

		return this;

	}

	toArray(array = [], offset = 0) {

		array[offset] = this._x;
		array[offset + 1] = this._y;
		array[offset + 2] = this._z;
		array[offset + 3] = this._w;

		return array;

	}

	fromBufferAttribute(attribute, index) {

		this._x = attribute.getX(index);
		this._y = attribute.getY(index);
		this._z = attribute.getZ(index);
		this._w = attribute.getW(index);

		return this;

	}

	_onChange(callback) {

		this._onChangeCallback = callback;

		return this;

	}

	_onChangeCallback() { }

	*[Symbol.iterator]() {

		yield this._x;
		yield this._y;
		yield this._z;
		yield this._w;

	}

}

class Vector3$1 {

	constructor(x = 0, y = 0, z = 0) {

		this.isVector3 = true;

		this.x = x;
		this.y = y;
		this.z = z;

	}

	set(x, y, z) {

		if (z === undefined) z = this.z; // sprite.scale.set(x,y)

		this.x = x;
		this.y = y;
		this.z = z;

		return this;

	}

	setScalar(scalar) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;

		return this;

	}

	setX(x) {

		this.x = x;

		return this;

	}

	setY(y) {

		this.y = y;

		return this;

	}

	setZ(z) {

		this.z = z;

		return this;

	}

	setComponent(index, value) {

		switch (index) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			default: throw new Error('index is out of range: ' + index);

		}

		return this;

	}

	getComponent(index) {

		switch (index) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			default: throw new Error('index is out of range: ' + index);

		}

	}

	clone() {

		return new this.constructor(this.x, this.y, this.z);

	}

	copy(v) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;

		return this;

	}

	add(v, w) {

		if (w !== undefined) {

			console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
			return this.addVectors(v, w);

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;

		return this;

	}

	addScalar(s) {

		this.x += s;
		this.y += s;
		this.z += s;

		return this;

	}

	addVectors(a, b) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;

		return this;

	}

	addScaledVector(v, s) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;

		return this;

	}

	sub(v, w) {

		if (w !== undefined) {

			console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
			return this.subVectors(v, w);

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;

		return this;

	}

	subScalar(s) {

		this.x -= s;
		this.y -= s;
		this.z -= s;

		return this;

	}

	subVectors(a, b) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;

		return this;

	}

	multiply(v, w) {

		if (w !== undefined) {

			console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');
			return this.multiplyVectors(v, w);

		}

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;

		return this;

	}

	multiplyScalar(scalar) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;

		return this;

	}

	multiplyVectors(a, b) {

		this.x = a.x * b.x;
		this.y = a.y * b.y;
		this.z = a.z * b.z;

		return this;

	}

	applyEuler(euler) {

		if (!(euler && euler.isEuler)) {

			console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');

		}

		return this.applyQuaternion(_quaternion$4$1.setFromEuler(euler));

	}

	applyAxisAngle(axis, angle) {

		return this.applyQuaternion(_quaternion$4$1.setFromAxisAngle(axis, angle));

	}

	applyMatrix3(m) {

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		this.x = e[0] * x + e[3] * y + e[6] * z;
		this.y = e[1] * x + e[4] * y + e[7] * z;
		this.z = e[2] * x + e[5] * y + e[8] * z;

		return this;

	}

	applyNormalMatrix(m) {

		return this.applyMatrix3(m).normalize();

	}

	applyMatrix4(m) {

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);

		this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
		this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
		this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;

		return this;

	}

	applyQuaternion(q) {

		const x = this.x, y = this.y, z = this.z;
		const qx = q.x, qy = q.y, qz = q.z, qw = q.w;

		// calculate quat * vector

		const ix = qw * x + qy * z - qz * y;
		const iy = qw * y + qz * x - qx * z;
		const iz = qw * z + qx * y - qy * x;
		const iw = - qx * x - qy * y - qz * z;

		// calculate result * inverse quat

		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

		return this;

	}

	project(camera) {

		return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);

	}

	unproject(camera) {

		return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);

	}

	transformDirection(m) {

		// input: THREE.Matrix4 affine matrix
		// vector interpreted as a direction

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		this.x = e[0] * x + e[4] * y + e[8] * z;
		this.y = e[1] * x + e[5] * y + e[9] * z;
		this.z = e[2] * x + e[6] * y + e[10] * z;

		return this.normalize();

	}

	divide(v) {

		this.x /= v.x;
		this.y /= v.y;
		this.z /= v.z;

		return this;

	}

	divideScalar(scalar) {

		return this.multiplyScalar(1 / scalar);

	}

	min(v) {

		this.x = Math.min(this.x, v.x);
		this.y = Math.min(this.y, v.y);
		this.z = Math.min(this.z, v.z);

		return this;

	}

	max(v) {

		this.x = Math.max(this.x, v.x);
		this.y = Math.max(this.y, v.y);
		this.z = Math.max(this.z, v.z);

		return this;

	}

	clamp(min, max) {

		// assumes min < max, componentwise

		this.x = Math.max(min.x, Math.min(max.x, this.x));
		this.y = Math.max(min.y, Math.min(max.y, this.y));
		this.z = Math.max(min.z, Math.min(max.z, this.z));

		return this;

	}

	clampScalar(minVal, maxVal) {

		this.x = Math.max(minVal, Math.min(maxVal, this.x));
		this.y = Math.max(minVal, Math.min(maxVal, this.y));
		this.z = Math.max(minVal, Math.min(maxVal, this.z));

		return this;

	}

	clampLength(min, max) {

		const length = this.length();

		return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));

	}

	floor() {

		this.x = Math.floor(this.x);
		this.y = Math.floor(this.y);
		this.z = Math.floor(this.z);

		return this;

	}

	ceil() {

		this.x = Math.ceil(this.x);
		this.y = Math.ceil(this.y);
		this.z = Math.ceil(this.z);

		return this;

	}

	round() {

		this.x = Math.round(this.x);
		this.y = Math.round(this.y);
		this.z = Math.round(this.z);

		return this;

	}

	roundToZero() {

		this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);
		this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);
		this.z = (this.z < 0) ? Math.ceil(this.z) : Math.floor(this.z);

		return this;

	}

	negate() {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;

		return this;

	}

	dot(v) {

		return this.x * v.x + this.y * v.y + this.z * v.z;

	}

	// TODO lengthSquared?

	lengthSq() {

		return this.x * this.x + this.y * this.y + this.z * this.z;

	}

	length() {

		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);

	}

	manhattanLength() {

		return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);

	}

	normalize() {

		return this.divideScalar(this.length() || 1);

	}

	setLength(length) {

		return this.normalize().multiplyScalar(length);

	}

	lerp(v, alpha) {

		this.x += (v.x - this.x) * alpha;
		this.y += (v.y - this.y) * alpha;
		this.z += (v.z - this.z) * alpha;

		return this;

	}

	lerpVectors(v1, v2, alpha) {

		this.x = v1.x + (v2.x - v1.x) * alpha;
		this.y = v1.y + (v2.y - v1.y) * alpha;
		this.z = v1.z + (v2.z - v1.z) * alpha;

		return this;

	}

	cross(v, w) {

		if (w !== undefined) {

			console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');
			return this.crossVectors(v, w);

		}

		return this.crossVectors(this, v);

	}

	crossVectors(a, b) {

		const ax = a.x, ay = a.y, az = a.z;
		const bx = b.x, by = b.y, bz = b.z;

		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;

		return this;

	}

	projectOnVector(v) {

		const denominator = v.lengthSq();

		if (denominator === 0) return this.set(0, 0, 0);

		const scalar = v.dot(this) / denominator;

		return this.copy(v).multiplyScalar(scalar);

	}

	projectOnPlane(planeNormal) {

		_vector$c$1.copy(this).projectOnVector(planeNormal);

		return this.sub(_vector$c$1);

	}

	reflect(normal) {

		// reflect incident vector off plane orthogonal to normal
		// normal is assumed to have unit length

		return this.sub(_vector$c$1.copy(normal).multiplyScalar(2 * this.dot(normal)));

	}

	angleTo(v) {

		const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());

		if (denominator === 0) return Math.PI / 2;

		const theta = this.dot(v) / denominator;

		// clamp, to handle numerical problems

		return Math.acos(clamp$1(theta, - 1, 1));

	}

	distanceTo(v) {

		return Math.sqrt(this.distanceToSquared(v));

	}

	distanceToSquared(v) {

		const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

		return dx * dx + dy * dy + dz * dz;

	}

	manhattanDistanceTo(v) {

		return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);

	}

	setFromSpherical(s) {

		return this.setFromSphericalCoords(s.radius, s.phi, s.theta);

	}

	setFromSphericalCoords(radius, phi, theta) {

		const sinPhiRadius = Math.sin(phi) * radius;

		this.x = sinPhiRadius * Math.sin(theta);
		this.y = Math.cos(phi) * radius;
		this.z = sinPhiRadius * Math.cos(theta);

		return this;

	}

	setFromCylindrical(c) {

		return this.setFromCylindricalCoords(c.radius, c.theta, c.y);

	}

	setFromCylindricalCoords(radius, theta, y) {

		this.x = radius * Math.sin(theta);
		this.y = y;
		this.z = radius * Math.cos(theta);

		return this;

	}

	setFromMatrixPosition(m) {

		const e = m.elements;

		this.x = e[12];
		this.y = e[13];
		this.z = e[14];

		return this;

	}

	setFromMatrixScale(m) {

		const sx = this.setFromMatrixColumn(m, 0).length();
		const sy = this.setFromMatrixColumn(m, 1).length();
		const sz = this.setFromMatrixColumn(m, 2).length();

		this.x = sx;
		this.y = sy;
		this.z = sz;

		return this;

	}

	setFromMatrixColumn(m, index) {

		return this.fromArray(m.elements, index * 4);

	}

	setFromMatrix3Column(m, index) {

		return this.fromArray(m.elements, index * 3);

	}

	setFromEuler(e) {

		this.x = e._x;
		this.y = e._y;
		this.z = e._z;

		return this;

	}

	equals(v) {

		return ((v.x === this.x) && (v.y === this.y) && (v.z === this.z));

	}

	fromArray(array, offset = 0) {

		this.x = array[offset];
		this.y = array[offset + 1];
		this.z = array[offset + 2];

		return this;

	}

	toArray(array = [], offset = 0) {

		array[offset] = this.x;
		array[offset + 1] = this.y;
		array[offset + 2] = this.z;

		return array;

	}

	fromBufferAttribute(attribute, index, offset) {

		if (offset !== undefined) {

			console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');

		}

		this.x = attribute.getX(index);
		this.y = attribute.getY(index);
		this.z = attribute.getZ(index);

		return this;

	}

	random() {

		this.x = Math.random();
		this.y = Math.random();
		this.z = Math.random();

		return this;

	}

	randomDirection() {

		// Derived from https://mathworld.wolfram.com/SpherePointPicking.html

		const u = (Math.random() - 0.5) * 2;
		const t = Math.random() * Math.PI * 2;
		const f = Math.sqrt(1 - u ** 2);

		this.x = f * Math.cos(t);
		this.y = f * Math.sin(t);
		this.z = u;

		return this;

	}

	*[Symbol.iterator]() {

		yield this.x;
		yield this.y;
		yield this.z;

	}

}

const _vector$c$1 = /*@__PURE__*/ new Vector3$1();
const _quaternion$4$1 = /*@__PURE__*/ new Quaternion$1();

class Box3$1 {

	constructor(min = new Vector3$1(+ Infinity, + Infinity, + Infinity), max = new Vector3$1(- Infinity, - Infinity, - Infinity)) {

		this.isBox3 = true;

		this.min = min;
		this.max = max;

	}

	set(min, max) {

		this.min.copy(min);
		this.max.copy(max);

		return this;

	}

	setFromArray(array) {

		let minX = + Infinity;
		let minY = + Infinity;
		let minZ = + Infinity;

		let maxX = - Infinity;
		let maxY = - Infinity;
		let maxZ = - Infinity;

		for (let i = 0, l = array.length; i < l; i += 3) {

			const x = array[i];
			const y = array[i + 1];
			const z = array[i + 2];

			if (x < minX) minX = x;
			if (y < minY) minY = y;
			if (z < minZ) minZ = z;

			if (x > maxX) maxX = x;
			if (y > maxY) maxY = y;
			if (z > maxZ) maxZ = z;

		}

		this.min.set(minX, minY, minZ);
		this.max.set(maxX, maxY, maxZ);

		return this;

	}

	setFromBufferAttribute(attribute) {

		let minX = + Infinity;
		let minY = + Infinity;
		let minZ = + Infinity;

		let maxX = - Infinity;
		let maxY = - Infinity;
		let maxZ = - Infinity;

		for (let i = 0, l = attribute.count; i < l; i++) {

			const x = attribute.getX(i);
			const y = attribute.getY(i);
			const z = attribute.getZ(i);

			if (x < minX) minX = x;
			if (y < minY) minY = y;
			if (z < minZ) minZ = z;

			if (x > maxX) maxX = x;
			if (y > maxY) maxY = y;
			if (z > maxZ) maxZ = z;

		}

		this.min.set(minX, minY, minZ);
		this.max.set(maxX, maxY, maxZ);

		return this;

	}

	setFromPoints(points) {

		this.makeEmpty();

		for (let i = 0, il = points.length; i < il; i++) {

			this.expandByPoint(points[i]);

		}

		return this;

	}

	setFromCenterAndSize(center, size) {

		const halfSize = _vector$b$1.copy(size).multiplyScalar(0.5);

		this.min.copy(center).sub(halfSize);
		this.max.copy(center).add(halfSize);

		return this;

	}

	setFromObject(object, precise = false) {

		this.makeEmpty();

		return this.expandByObject(object, precise);

	}

	clone() {

		return new this.constructor().copy(this);

	}

	copy(box) {

		this.min.copy(box.min);
		this.max.copy(box.max);

		return this;

	}

	makeEmpty() {

		this.min.x = this.min.y = this.min.z = + Infinity;
		this.max.x = this.max.y = this.max.z = - Infinity;

		return this;

	}

	isEmpty() {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return (this.max.x < this.min.x) || (this.max.y < this.min.y) || (this.max.z < this.min.z);

	}

	getCenter(target) {

		return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);

	}

	getSize(target) {

		return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);

	}

	expandByPoint(point) {

		this.min.min(point);
		this.max.max(point);

		return this;

	}

	expandByVector(vector) {

		this.min.sub(vector);
		this.max.add(vector);

		return this;

	}

	expandByScalar(scalar) {

		this.min.addScalar(- scalar);
		this.max.addScalar(scalar);

		return this;

	}

	expandByObject(object, precise = false) {

		// Computes the world-axis-aligned bounding box of an object (including its children),
		// accounting for both the object's, and children's, world transforms

		object.updateWorldMatrix(false, false);

		const geometry = object.geometry;

		if (geometry !== undefined) {

			if (precise && geometry.attributes != undefined && geometry.attributes.position !== undefined) {

				const position = geometry.attributes.position;
				for (let i = 0, l = position.count; i < l; i++) {

					_vector$b$1.fromBufferAttribute(position, i).applyMatrix4(object.matrixWorld);
					this.expandByPoint(_vector$b$1);

				}

			} else {

				if (geometry.boundingBox === null) {

					geometry.computeBoundingBox();

				}

				_box$3$1.copy(geometry.boundingBox);
				_box$3$1.applyMatrix4(object.matrixWorld);

				this.union(_box$3$1);

			}

		}

		const children = object.children;

		for (let i = 0, l = children.length; i < l; i++) {

			this.expandByObject(children[i], precise);

		}

		return this;

	}

	containsPoint(point) {

		return point.x < this.min.x || point.x > this.max.x ||
			point.y < this.min.y || point.y > this.max.y ||
			point.z < this.min.z || point.z > this.max.z ? false : true;

	}

	containsBox(box) {

		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
			this.min.y <= box.min.y && box.max.y <= this.max.y &&
			this.min.z <= box.min.z && box.max.z <= this.max.z;

	}

	getParameter(point, target) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		return target.set(
			(point.x - this.min.x) / (this.max.x - this.min.x),
			(point.y - this.min.y) / (this.max.y - this.min.y),
			(point.z - this.min.z) / (this.max.z - this.min.z)
		);

	}

	intersectsBox(box) {

		// using 6 splitting planes to rule out intersections.
		return box.max.x < this.min.x || box.min.x > this.max.x ||
			box.max.y < this.min.y || box.min.y > this.max.y ||
			box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

	}

	intersectsSphere(sphere) {

		// Find the point on the AABB closest to the sphere center.
		this.clampPoint(sphere.center, _vector$b$1);

		// If that point is inside the sphere, the AABB and sphere intersect.
		return _vector$b$1.distanceToSquared(sphere.center) <= (sphere.radius * sphere.radius);

	}

	intersectsPlane(plane) {

		// We compute the minimum and maximum dot product values. If those values
		// are on the same side (back or front) of the plane, then there is no intersection.

		let min, max;

		if (plane.normal.x > 0) {

			min = plane.normal.x * this.min.x;
			max = plane.normal.x * this.max.x;

		} else {

			min = plane.normal.x * this.max.x;
			max = plane.normal.x * this.min.x;

		}

		if (plane.normal.y > 0) {

			min += plane.normal.y * this.min.y;
			max += plane.normal.y * this.max.y;

		} else {

			min += plane.normal.y * this.max.y;
			max += plane.normal.y * this.min.y;

		}

		if (plane.normal.z > 0) {

			min += plane.normal.z * this.min.z;
			max += plane.normal.z * this.max.z;

		} else {

			min += plane.normal.z * this.max.z;
			max += plane.normal.z * this.min.z;

		}

		return (min <= - plane.constant && max >= - plane.constant);

	}

	intersectsTriangle(triangle) {

		if (this.isEmpty()) {

			return false;

		}

		// compute box center and extents
		this.getCenter(_center$1);
		_extents$1.subVectors(this.max, _center$1);

		// translate triangle to aabb origin
		_v0$2$1.subVectors(triangle.a, _center$1);
		_v1$7$1.subVectors(triangle.b, _center$1);
		_v2$3$1.subVectors(triangle.c, _center$1);

		// compute edge vectors for triangle
		_f0$1.subVectors(_v1$7$1, _v0$2$1);
		_f1$1.subVectors(_v2$3$1, _v1$7$1);
		_f2$1.subVectors(_v0$2$1, _v2$3$1);

		// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
		// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
		// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
		let axes = [
			0, - _f0$1.z, _f0$1.y, 0, - _f1$1.z, _f1$1.y, 0, - _f2$1.z, _f2$1.y,
			_f0$1.z, 0, - _f0$1.x, _f1$1.z, 0, - _f1$1.x, _f2$1.z, 0, - _f2$1.x,
			- _f0$1.y, _f0$1.x, 0, - _f1$1.y, _f1$1.x, 0, - _f2$1.y, _f2$1.x, 0
		];
		if (!satForAxes$1(axes, _v0$2$1, _v1$7$1, _v2$3$1, _extents$1)) {

			return false;

		}

		// test 3 face normals from the aabb
		axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
		if (!satForAxes$1(axes, _v0$2$1, _v1$7$1, _v2$3$1, _extents$1)) {

			return false;

		}

		// finally testing the face normal of the triangle
		// use already existing triangle edge vectors here
		_triangleNormal$1.crossVectors(_f0$1, _f1$1);
		axes = [_triangleNormal$1.x, _triangleNormal$1.y, _triangleNormal$1.z];

		return satForAxes$1(axes, _v0$2$1, _v1$7$1, _v2$3$1, _extents$1);

	}

	clampPoint(point, target) {

		return target.copy(point).clamp(this.min, this.max);

	}

	distanceToPoint(point) {

		const clampedPoint = _vector$b$1.copy(point).clamp(this.min, this.max);

		return clampedPoint.sub(point).length();

	}

	getBoundingSphere(target) {

		this.getCenter(target.center);

		target.radius = this.getSize(_vector$b$1).length() * 0.5;

		return target;

	}

	intersect(box) {

		this.min.max(box.min);
		this.max.min(box.max);

		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
		if (this.isEmpty()) this.makeEmpty();

		return this;

	}

	union(box) {

		this.min.min(box.min);
		this.max.max(box.max);

		return this;

	}

	applyMatrix4(matrix) {

		// transform of empty box is an empty box.
		if (this.isEmpty()) return this;

		// NOTE: I am using a binary pattern to specify all 2^3 combinations below
		_points$1[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000
		_points$1[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001
		_points$1[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010
		_points$1[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011
		_points$1[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100
		_points$1[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101
		_points$1[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110
		_points$1[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111

		this.setFromPoints(_points$1);

		return this;

	}

	translate(offset) {

		this.min.add(offset);
		this.max.add(offset);

		return this;

	}

	equals(box) {

		return box.min.equals(this.min) && box.max.equals(this.max);

	}

}

const _points$1 = [
	/*@__PURE__*/ new Vector3$1(),
	/*@__PURE__*/ new Vector3$1(),
	/*@__PURE__*/ new Vector3$1(),
	/*@__PURE__*/ new Vector3$1(),
	/*@__PURE__*/ new Vector3$1(),
	/*@__PURE__*/ new Vector3$1(),
	/*@__PURE__*/ new Vector3$1(),
	/*@__PURE__*/ new Vector3$1()
];

const _vector$b$1 = /*@__PURE__*/ new Vector3$1();

const _box$3$1 = /*@__PURE__*/ new Box3$1();

// triangle centered vertices

const _v0$2$1 = /*@__PURE__*/ new Vector3$1();
const _v1$7$1 = /*@__PURE__*/ new Vector3$1();
const _v2$3$1 = /*@__PURE__*/ new Vector3$1();

// triangle edge vectors

const _f0$1 = /*@__PURE__*/ new Vector3$1();
const _f1$1 = /*@__PURE__*/ new Vector3$1();
const _f2$1 = /*@__PURE__*/ new Vector3$1();

const _center$1 = /*@__PURE__*/ new Vector3$1();
const _extents$1 = /*@__PURE__*/ new Vector3$1();
const _triangleNormal$1 = /*@__PURE__*/ new Vector3$1();
const _testAxis$1 = /*@__PURE__*/ new Vector3$1();

function satForAxes$1(axes, v0, v1, v2, extents) {

	for (let i = 0, j = axes.length - 3; i <= j; i += 3) {

		_testAxis$1.fromArray(axes, i);
		// project the aabb onto the separating axis
		const r = extents.x * Math.abs(_testAxis$1.x) + extents.y * Math.abs(_testAxis$1.y) + extents.z * Math.abs(_testAxis$1.z);
		// project all 3 vertices of the triangle onto the separating axis
		const p0 = v0.dot(_testAxis$1);
		const p1 = v1.dot(_testAxis$1);
		const p2 = v2.dot(_testAxis$1);
		// actual test, basically see if either of the most extreme of the triangle points intersects r
		if (Math.max(- Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {

			// points of the projected triangle are outside the projected half-length of the aabb
			// the axis is separating and we can exit
			return false;

		}

	}

	return true;

}

const _box$2$1 = /*@__PURE__*/ new Box3$1();
const _v1$6$1 = /*@__PURE__*/ new Vector3$1();
const _toFarthestPoint$1 = /*@__PURE__*/ new Vector3$1();
const _toPoint$1 = /*@__PURE__*/ new Vector3$1();

class Sphere$1 {

	constructor(center = new Vector3$1(), radius = - 1) {

		this.center = center;
		this.radius = radius;

	}

	set(center, radius) {

		this.center.copy(center);
		this.radius = radius;

		return this;

	}

	setFromPoints(points, optionalCenter) {

		const center = this.center;

		if (optionalCenter !== undefined) {

			center.copy(optionalCenter);

		} else {

			_box$2$1.setFromPoints(points).getCenter(center);

		}

		let maxRadiusSq = 0;

		for (let i = 0, il = points.length; i < il; i++) {

			maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));

		}

		this.radius = Math.sqrt(maxRadiusSq);

		return this;

	}

	copy(sphere) {

		this.center.copy(sphere.center);
		this.radius = sphere.radius;

		return this;

	}

	isEmpty() {

		return (this.radius < 0);

	}

	makeEmpty() {

		this.center.set(0, 0, 0);
		this.radius = - 1;

		return this;

	}

	containsPoint(point) {

		return (point.distanceToSquared(this.center) <= (this.radius * this.radius));

	}

	distanceToPoint(point) {

		return (point.distanceTo(this.center) - this.radius);

	}

	intersectsSphere(sphere) {

		const radiusSum = this.radius + sphere.radius;

		return sphere.center.distanceToSquared(this.center) <= (radiusSum * radiusSum);

	}

	intersectsBox(box) {

		return box.intersectsSphere(this);

	}

	intersectsPlane(plane) {

		return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;

	}

	clampPoint(point, target) {

		const deltaLengthSq = this.center.distanceToSquared(point);

		target.copy(point);

		if (deltaLengthSq > (this.radius * this.radius)) {

			target.sub(this.center).normalize();
			target.multiplyScalar(this.radius).add(this.center);

		}

		return target;

	}

	getBoundingBox(target) {

		if (this.isEmpty()) {

			// Empty sphere produces empty bounding box
			target.makeEmpty();
			return target;

		}

		target.set(this.center, this.center);
		target.expandByScalar(this.radius);

		return target;

	}

	applyMatrix4(matrix) {

		this.center.applyMatrix4(matrix);
		this.radius = this.radius * matrix.getMaxScaleOnAxis();

		return this;

	}

	translate(offset) {

		this.center.add(offset);

		return this;

	}

	expandByPoint(point) {

		// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671

		_toPoint$1.subVectors(point, this.center);

		const lengthSq = _toPoint$1.lengthSq();

		if (lengthSq > (this.radius * this.radius)) {

			const length = Math.sqrt(lengthSq);
			const missingRadiusHalf = (length - this.radius) * 0.5;

			// Nudge this sphere towards the target point. Add half the missing distance to radius,
			// and the other half to position. This gives a tighter enclosure, instead of if
			// the whole missing distance were just added to radius.

			this.center.add(_toPoint$1.multiplyScalar(missingRadiusHalf / length));
			this.radius += missingRadiusHalf;

		}

		return this;

	}

	union(sphere) {

		// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769

		// To enclose another sphere into this sphere, we only need to enclose two points:
		// 1) Enclose the farthest point on the other sphere into this sphere.
		// 2) Enclose the opposite point of the farthest point into this sphere.

		if (this.center.equals(sphere.center) === true) {

			_toFarthestPoint$1.set(0, 0, 1).multiplyScalar(sphere.radius);


		} else {

			_toFarthestPoint$1.subVectors(sphere.center, this.center).normalize().multiplyScalar(sphere.radius);

		}

		this.expandByPoint(_v1$6$1.copy(sphere.center).add(_toFarthestPoint$1));
		this.expandByPoint(_v1$6$1.copy(sphere.center).sub(_toFarthestPoint$1));

		return this;

	}

	equals(sphere) {

		return sphere.center.equals(this.center) && (sphere.radius === this.radius);

	}

	clone() {

		return new this.constructor().copy(this);

	}

}

const _vector$a$1 = /*@__PURE__*/ new Vector3$1();
const _segCenter$1 = /*@__PURE__*/ new Vector3$1();
const _segDir$1 = /*@__PURE__*/ new Vector3$1();
const _diff$1 = /*@__PURE__*/ new Vector3$1();

const _edge1$1 = /*@__PURE__*/ new Vector3$1();
const _edge2$1 = /*@__PURE__*/ new Vector3$1();
const _normal$1$1 = /*@__PURE__*/ new Vector3$1();

class Ray$1 {

	constructor(origin = new Vector3$1(), direction = new Vector3$1(0, 0, - 1)) {

		this.origin = origin;
		this.direction = direction;

	}

	set(origin, direction) {

		this.origin.copy(origin);
		this.direction.copy(direction);

		return this;

	}

	copy(ray) {

		this.origin.copy(ray.origin);
		this.direction.copy(ray.direction);

		return this;

	}

	at(t, target) {

		return target.copy(this.direction).multiplyScalar(t).add(this.origin);

	}

	lookAt(v) {

		this.direction.copy(v).sub(this.origin).normalize();

		return this;

	}

	recast(t) {

		this.origin.copy(this.at(t, _vector$a$1));

		return this;

	}

	closestPointToPoint(point, target) {

		target.subVectors(point, this.origin);

		const directionDistance = target.dot(this.direction);

		if (directionDistance < 0) {

			return target.copy(this.origin);

		}

		return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);

	}

	distanceToPoint(point) {

		return Math.sqrt(this.distanceSqToPoint(point));

	}

	distanceSqToPoint(point) {

		const directionDistance = _vector$a$1.subVectors(point, this.origin).dot(this.direction);

		// point behind the ray

		if (directionDistance < 0) {

			return this.origin.distanceToSquared(point);

		}

		_vector$a$1.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);

		return _vector$a$1.distanceToSquared(point);

	}

	distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {

		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
		// It returns the min distance between the ray and the segment
		// defined by v0 and v1
		// It can also set two optional targets :
		// - The closest point on the ray
		// - The closest point on the segment

		_segCenter$1.copy(v0).add(v1).multiplyScalar(0.5);
		_segDir$1.copy(v1).sub(v0).normalize();
		_diff$1.copy(this.origin).sub(_segCenter$1);

		const segExtent = v0.distanceTo(v1) * 0.5;
		const a01 = - this.direction.dot(_segDir$1);
		const b0 = _diff$1.dot(this.direction);
		const b1 = - _diff$1.dot(_segDir$1);
		const c = _diff$1.lengthSq();
		const det = Math.abs(1 - a01 * a01);
		let s0, s1, sqrDist, extDet;

		if (det > 0) {

			// The ray and segment are not parallel.

			s0 = a01 * b1 - b0;
			s1 = a01 * b0 - b1;
			extDet = segExtent * det;

			if (s0 >= 0) {

				if (s1 >= - extDet) {

					if (s1 <= extDet) {

						// region 0
						// Minimum at interior points of ray and segment.

						const invDet = 1 / det;
						s0 *= invDet;
						s1 *= invDet;
						sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;

					} else {

						// region 1

						s1 = segExtent;
						s0 = Math.max(0, - (a01 * s1 + b0));
						sqrDist = - s0 * s0 + s1 * (s1 + 2 * b1) + c;

					}

				} else {

					// region 5

					s1 = - segExtent;
					s0 = Math.max(0, - (a01 * s1 + b0));
					sqrDist = - s0 * s0 + s1 * (s1 + 2 * b1) + c;

				}

			} else {

				if (s1 <= - extDet) {

					// region 4

					s0 = Math.max(0, - (- a01 * segExtent + b0));
					s1 = (s0 > 0) ? - segExtent : Math.min(Math.max(- segExtent, - b1), segExtent);
					sqrDist = - s0 * s0 + s1 * (s1 + 2 * b1) + c;

				} else if (s1 <= extDet) {

					// region 3

					s0 = 0;
					s1 = Math.min(Math.max(- segExtent, - b1), segExtent);
					sqrDist = s1 * (s1 + 2 * b1) + c;

				} else {

					// region 2

					s0 = Math.max(0, - (a01 * segExtent + b0));
					s1 = (s0 > 0) ? segExtent : Math.min(Math.max(- segExtent, - b1), segExtent);
					sqrDist = - s0 * s0 + s1 * (s1 + 2 * b1) + c;

				}

			}

		} else {

			// Ray and segment are parallel.

			s1 = (a01 > 0) ? - segExtent : segExtent;
			s0 = Math.max(0, - (a01 * s1 + b0));
			sqrDist = - s0 * s0 + s1 * (s1 + 2 * b1) + c;

		}

		if (optionalPointOnRay) {

			optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);

		}

		if (optionalPointOnSegment) {

			optionalPointOnSegment.copy(_segDir$1).multiplyScalar(s1).add(_segCenter$1);

		}

		return sqrDist;

	}

	intersectSphere(sphere, target) {

		_vector$a$1.subVectors(sphere.center, this.origin);
		const tca = _vector$a$1.dot(this.direction);
		const d2 = _vector$a$1.dot(_vector$a$1) - tca * tca;
		const radius2 = sphere.radius * sphere.radius;

		if (d2 > radius2) return null;

		const thc = Math.sqrt(radius2 - d2);

		// t0 = first intersect point - entrance on front of sphere
		const t0 = tca - thc;

		// t1 = second intersect point - exit point on back of sphere
		const t1 = tca + thc;

		// test to see if both t0 and t1 are behind the ray - if so, return null
		if (t0 < 0 && t1 < 0) return null;

		// test to see if t0 is behind the ray:
		// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
		// in order to always return an intersect point that is in front of the ray.
		if (t0 < 0) return this.at(t1, target);

		// else t0 is in front of the ray, so return the first collision point scaled by t0
		return this.at(t0, target);

	}

	intersectsSphere(sphere) {

		return this.distanceSqToPoint(sphere.center) <= (sphere.radius * sphere.radius);

	}

	distanceToPlane(plane) {

		const denominator = plane.normal.dot(this.direction);

		if (denominator === 0) {

			// line is coplanar, return origin
			if (plane.distanceToPoint(this.origin) === 0) {

				return 0;

			}

			// Null is preferable to undefined since undefined means.... it is undefined

			return null;

		}

		const t = - (this.origin.dot(plane.normal) + plane.constant) / denominator;

		// Return if the ray never intersects the plane

		return t >= 0 ? t : null;

	}

	intersectPlane(plane, target) {

		const t = this.distanceToPlane(plane);

		if (t === null) {

			return null;

		}

		return this.at(t, target);

	}

	intersectsPlane(plane) {

		// check if the ray lies on the plane first

		const distToPoint = plane.distanceToPoint(this.origin);

		if (distToPoint === 0) {

			return true;

		}

		const denominator = plane.normal.dot(this.direction);

		if (denominator * distToPoint < 0) {

			return true;

		}

		// ray origin is behind the plane (and is pointing behind it)

		return false;

	}

	intersectBox(box, target) {

		let tmin, tmax, tymin, tymax, tzmin, tzmax;

		const invdirx = 1 / this.direction.x,
			invdiry = 1 / this.direction.y,
			invdirz = 1 / this.direction.z;

		const origin = this.origin;

		if (invdirx >= 0) {

			tmin = (box.min.x - origin.x) * invdirx;
			tmax = (box.max.x - origin.x) * invdirx;

		} else {

			tmin = (box.max.x - origin.x) * invdirx;
			tmax = (box.min.x - origin.x) * invdirx;

		}

		if (invdiry >= 0) {

			tymin = (box.min.y - origin.y) * invdiry;
			tymax = (box.max.y - origin.y) * invdiry;

		} else {

			tymin = (box.max.y - origin.y) * invdiry;
			tymax = (box.min.y - origin.y) * invdiry;

		}

		if ((tmin > tymax) || (tymin > tmax)) return null;

		// These lines also handle the case where tmin or tmax is NaN
		// (result of 0 * Infinity). x !== x returns true if x is NaN

		if (tymin > tmin || tmin !== tmin) tmin = tymin;

		if (tymax < tmax || tmax !== tmax) tmax = tymax;

		if (invdirz >= 0) {

			tzmin = (box.min.z - origin.z) * invdirz;
			tzmax = (box.max.z - origin.z) * invdirz;

		} else {

			tzmin = (box.max.z - origin.z) * invdirz;
			tzmax = (box.min.z - origin.z) * invdirz;

		}

		if ((tmin > tzmax) || (tzmin > tmax)) return null;

		if (tzmin > tmin || tmin !== tmin) tmin = tzmin;

		if (tzmax < tmax || tmax !== tmax) tmax = tzmax;

		//return point closest to the ray (positive side)

		if (tmax < 0) return null;

		return this.at(tmin >= 0 ? tmin : tmax, target);

	}

	intersectsBox(box) {

		return this.intersectBox(box, _vector$a$1) !== null;

	}

	intersectTriangle(a, b, c, backfaceCulling, target) {

		// Compute the offset origin, edges, and normal.

		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

		_edge1$1.subVectors(b, a);
		_edge2$1.subVectors(c, a);
		_normal$1$1.crossVectors(_edge1$1, _edge2$1);

		// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
		// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
		//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
		//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
		//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
		let DdN = this.direction.dot(_normal$1$1);
		let sign;

		if (DdN > 0) {

			if (backfaceCulling) return null;
			sign = 1;

		} else if (DdN < 0) {

			sign = - 1;
			DdN = - DdN;

		} else {

			return null;

		}

		_diff$1.subVectors(this.origin, a);
		const DdQxE2 = sign * this.direction.dot(_edge2$1.crossVectors(_diff$1, _edge2$1));

		// b1 < 0, no intersection
		if (DdQxE2 < 0) {

			return null;

		}

		const DdE1xQ = sign * this.direction.dot(_edge1$1.cross(_diff$1));

		// b2 < 0, no intersection
		if (DdE1xQ < 0) {

			return null;

		}

		// b1+b2 > 1, no intersection
		if (DdQxE2 + DdE1xQ > DdN) {

			return null;

		}

		// Line intersects triangle, check if ray does.
		const QdN = - sign * _diff$1.dot(_normal$1$1);

		// t < 0, no intersection
		if (QdN < 0) {

			return null;

		}

		// Ray intersects triangle.
		return this.at(QdN / DdN, target);

	}

	applyMatrix4(matrix4) {

		this.origin.applyMatrix4(matrix4);
		this.direction.transformDirection(matrix4);

		return this;

	}

	equals(ray) {

		return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);

	}

	clone() {

		return new this.constructor().copy(this);

	}

}

class Matrix4$1 {

	constructor() {

		this.isMatrix4 = true;

		this.elements = [

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		];

		if (arguments.length > 0) {

			console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');

		}

	}

	set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {

		const te = this.elements;

		te[0] = n11; te[4] = n12; te[8] = n13; te[12] = n14;
		te[1] = n21; te[5] = n22; te[9] = n23; te[13] = n24;
		te[2] = n31; te[6] = n32; te[10] = n33; te[14] = n34;
		te[3] = n41; te[7] = n42; te[11] = n43; te[15] = n44;

		return this;

	}

	identity() {

		this.set(

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	clone() {

		return new Matrix4$1().fromArray(this.elements);

	}

	copy(m) {

		const te = this.elements;
		const me = m.elements;

		te[0] = me[0]; te[1] = me[1]; te[2] = me[2]; te[3] = me[3];
		te[4] = me[4]; te[5] = me[5]; te[6] = me[6]; te[7] = me[7];
		te[8] = me[8]; te[9] = me[9]; te[10] = me[10]; te[11] = me[11];
		te[12] = me[12]; te[13] = me[13]; te[14] = me[14]; te[15] = me[15];

		return this;

	}

	copyPosition(m) {

		const te = this.elements, me = m.elements;

		te[12] = me[12];
		te[13] = me[13];
		te[14] = me[14];

		return this;

	}

	setFromMatrix3(m) {

		const me = m.elements;

		this.set(

			me[0], me[3], me[6], 0,
			me[1], me[4], me[7], 0,
			me[2], me[5], me[8], 0,
			0, 0, 0, 1

		);

		return this;

	}

	extractBasis(xAxis, yAxis, zAxis) {

		xAxis.setFromMatrixColumn(this, 0);
		yAxis.setFromMatrixColumn(this, 1);
		zAxis.setFromMatrixColumn(this, 2);

		return this;

	}

	makeBasis(xAxis, yAxis, zAxis) {

		this.set(
			xAxis.x, yAxis.x, zAxis.x, 0,
			xAxis.y, yAxis.y, zAxis.y, 0,
			xAxis.z, yAxis.z, zAxis.z, 0,
			0, 0, 0, 1
		);

		return this;

	}

	extractRotation(m) {

		// this method does not support reflection matrices

		const te = this.elements;
		const me = m.elements;

		const scaleX = 1 / _v1$5$1.setFromMatrixColumn(m, 0).length();
		const scaleY = 1 / _v1$5$1.setFromMatrixColumn(m, 1).length();
		const scaleZ = 1 / _v1$5$1.setFromMatrixColumn(m, 2).length();

		te[0] = me[0] * scaleX;
		te[1] = me[1] * scaleX;
		te[2] = me[2] * scaleX;
		te[3] = 0;

		te[4] = me[4] * scaleY;
		te[5] = me[5] * scaleY;
		te[6] = me[6] * scaleY;
		te[7] = 0;

		te[8] = me[8] * scaleZ;
		te[9] = me[9] * scaleZ;
		te[10] = me[10] * scaleZ;
		te[11] = 0;

		te[12] = 0;
		te[13] = 0;
		te[14] = 0;
		te[15] = 1;

		return this;

	}

	makeRotationFromEuler(euler) {

		if (!(euler && euler.isEuler)) {

			console.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');

		}

		const te = this.elements;

		const x = euler.x, y = euler.y, z = euler.z;
		const a = Math.cos(x), b = Math.sin(x);
		const c = Math.cos(y), d = Math.sin(y);
		const e = Math.cos(z), f = Math.sin(z);

		if (euler.order === 'XYZ') {

			const ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[0] = c * e;
			te[4] = - c * f;
			te[8] = d;

			te[1] = af + be * d;
			te[5] = ae - bf * d;
			te[9] = - b * c;

			te[2] = bf - ae * d;
			te[6] = be + af * d;
			te[10] = a * c;

		} else if (euler.order === 'YXZ') {

			const ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[0] = ce + df * b;
			te[4] = de * b - cf;
			te[8] = a * d;

			te[1] = a * f;
			te[5] = a * e;
			te[9] = - b;

			te[2] = cf * b - de;
			te[6] = df + ce * b;
			te[10] = a * c;

		} else if (euler.order === 'ZXY') {

			const ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[0] = ce - df * b;
			te[4] = - a * f;
			te[8] = de + cf * b;

			te[1] = cf + de * b;
			te[5] = a * e;
			te[9] = df - ce * b;

			te[2] = - a * d;
			te[6] = b;
			te[10] = a * c;

		} else if (euler.order === 'ZYX') {

			const ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[0] = c * e;
			te[4] = be * d - af;
			te[8] = ae * d + bf;

			te[1] = c * f;
			te[5] = bf * d + ae;
			te[9] = af * d - be;

			te[2] = - d;
			te[6] = b * c;
			te[10] = a * c;

		} else if (euler.order === 'YZX') {

			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[0] = c * e;
			te[4] = bd - ac * f;
			te[8] = bc * f + ad;

			te[1] = f;
			te[5] = a * e;
			te[9] = - b * e;

			te[2] = - d * e;
			te[6] = ad * f + bc;
			te[10] = ac - bd * f;

		} else if (euler.order === 'XZY') {

			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[0] = c * e;
			te[4] = - f;
			te[8] = d * e;

			te[1] = ac * f + bd;
			te[5] = a * e;
			te[9] = ad * f - bc;

			te[2] = bc * f - ad;
			te[6] = b * e;
			te[10] = bd * f + ac;

		}

		// bottom row
		te[3] = 0;
		te[7] = 0;
		te[11] = 0;

		// last column
		te[12] = 0;
		te[13] = 0;
		te[14] = 0;
		te[15] = 1;

		return this;

	}

	makeRotationFromQuaternion(q) {

		return this.compose(_zero$1, q, _one$1);

	}

	lookAt(eye, target, up) {

		const te = this.elements;

		_z$1.subVectors(eye, target);

		if (_z$1.lengthSq() === 0) {

			// eye and target are in the same position

			_z$1.z = 1;

		}

		_z$1.normalize();
		_x$1.crossVectors(up, _z$1);

		if (_x$1.lengthSq() === 0) {

			// up and z are parallel

			if (Math.abs(up.z) === 1) {

				_z$1.x += 0.0001;

			} else {

				_z$1.z += 0.0001;

			}

			_z$1.normalize();
			_x$1.crossVectors(up, _z$1);

		}

		_x$1.normalize();
		_y$1.crossVectors(_z$1, _x$1);

		te[0] = _x$1.x; te[4] = _y$1.x; te[8] = _z$1.x;
		te[1] = _x$1.y; te[5] = _y$1.y; te[9] = _z$1.y;
		te[2] = _x$1.z; te[6] = _y$1.z; te[10] = _z$1.z;

		return this;

	}

	multiply(m, n) {

		if (n !== undefined) {

			console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');
			return this.multiplyMatrices(m, n);

		}

		return this.multiplyMatrices(this, m);

	}

	premultiply(m) {

		return this.multiplyMatrices(m, this);

	}

	multiplyMatrices(a, b) {

		const ae = a.elements;
		const be = b.elements;
		const te = this.elements;

		const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
		const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
		const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
		const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];

		const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
		const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
		const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
		const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];

		te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

		te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

		te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

		te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

		return this;

	}

	multiplyScalar(s) {

		const te = this.elements;

		te[0] *= s; te[4] *= s; te[8] *= s; te[12] *= s;
		te[1] *= s; te[5] *= s; te[9] *= s; te[13] *= s;
		te[2] *= s; te[6] *= s; te[10] *= s; te[14] *= s;
		te[3] *= s; te[7] *= s; te[11] *= s; te[15] *= s;

		return this;

	}

	determinant() {

		const te = this.elements;

		const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
		const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
		const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
		const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];

		//TODO: make this more efficient
		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

		return (
			n41 * (
				+ n14 * n23 * n32
				- n13 * n24 * n32
				- n14 * n22 * n33
				+ n12 * n24 * n33
				+ n13 * n22 * n34
				- n12 * n23 * n34
			) +
			n42 * (
				+ n11 * n23 * n34
				- n11 * n24 * n33
				+ n14 * n21 * n33
				- n13 * n21 * n34
				+ n13 * n24 * n31
				- n14 * n23 * n31
			) +
			n43 * (
				+ n11 * n24 * n32
				- n11 * n22 * n34
				- n14 * n21 * n32
				+ n12 * n21 * n34
				+ n14 * n22 * n31
				- n12 * n24 * n31
			) +
			n44 * (
				- n13 * n22 * n31
				- n11 * n23 * n32
				+ n11 * n22 * n33
				+ n13 * n21 * n32
				- n12 * n21 * n33
				+ n12 * n23 * n31
			)

		);

	}

	transpose() {

		const te = this.elements;
		let tmp;

		tmp = te[1]; te[1] = te[4]; te[4] = tmp;
		tmp = te[2]; te[2] = te[8]; te[8] = tmp;
		tmp = te[6]; te[6] = te[9]; te[9] = tmp;

		tmp = te[3]; te[3] = te[12]; te[12] = tmp;
		tmp = te[7]; te[7] = te[13]; te[13] = tmp;
		tmp = te[11]; te[11] = te[14]; te[14] = tmp;

		return this;

	}

	setPosition(x, y, z) {

		const te = this.elements;

		if (x.isVector3) {

			te[12] = x.x;
			te[13] = x.y;
			te[14] = x.z;

		} else {

			te[12] = x;
			te[13] = y;
			te[14] = z;

		}

		return this;

	}

	invert() {

		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
		const te = this.elements,

			n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3],
			n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7],
			n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11],
			n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15],

			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

		const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

		if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

		const detInv = 1 / det;

		te[0] = t11 * detInv;
		te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
		te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
		te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;

		te[4] = t12 * detInv;
		te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
		te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
		te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;

		te[8] = t13 * detInv;
		te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
		te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
		te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;

		te[12] = t14 * detInv;
		te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
		te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
		te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;

		return this;

	}

	scale(v) {

		const te = this.elements;
		const x = v.x, y = v.y, z = v.z;

		te[0] *= x; te[4] *= y; te[8] *= z;
		te[1] *= x; te[5] *= y; te[9] *= z;
		te[2] *= x; te[6] *= y; te[10] *= z;
		te[3] *= x; te[7] *= y; te[11] *= z;

		return this;

	}

	getMaxScaleOnAxis() {

		const te = this.elements;

		const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
		const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
		const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];

		return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));

	}

	makeTranslation(x, y, z) {

		this.set(

			1, 0, 0, x,
			0, 1, 0, y,
			0, 0, 1, z,
			0, 0, 0, 1

		);

		return this;

	}

	makeRotationX(theta) {

		const c = Math.cos(theta), s = Math.sin(theta);

		this.set(

			1, 0, 0, 0,
			0, c, - s, 0,
			0, s, c, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeRotationY(theta) {

		const c = Math.cos(theta), s = Math.sin(theta);

		this.set(

			c, 0, s, 0,
			0, 1, 0, 0,
			- s, 0, c, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeRotationZ(theta) {

		const c = Math.cos(theta), s = Math.sin(theta);

		this.set(

			c, - s, 0, 0,
			s, c, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeRotationAxis(axis, angle) {

		// Based on http://www.gamedev.net/reference/articles/article1199.asp

		const c = Math.cos(angle);
		const s = Math.sin(angle);
		const t = 1 - c;
		const x = axis.x, y = axis.y, z = axis.z;
		const tx = t * x, ty = t * y;

		this.set(

			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeScale(x, y, z) {

		this.set(

			x, 0, 0, 0,
			0, y, 0, 0,
			0, 0, z, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeShear(xy, xz, yx, yz, zx, zy) {

		this.set(

			1, yx, zx, 0,
			xy, 1, zy, 0,
			xz, yz, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	compose(position, quaternion, scale) {

		const te = this.elements;

		const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
		const x2 = x + x, y2 = y + y, z2 = z + z;
		const xx = x * x2, xy = x * y2, xz = x * z2;
		const yy = y * y2, yz = y * z2, zz = z * z2;
		const wx = w * x2, wy = w * y2, wz = w * z2;

		const sx = scale.x, sy = scale.y, sz = scale.z;

		te[0] = (1 - (yy + zz)) * sx;
		te[1] = (xy + wz) * sx;
		te[2] = (xz - wy) * sx;
		te[3] = 0;

		te[4] = (xy - wz) * sy;
		te[5] = (1 - (xx + zz)) * sy;
		te[6] = (yz + wx) * sy;
		te[7] = 0;

		te[8] = (xz + wy) * sz;
		te[9] = (yz - wx) * sz;
		te[10] = (1 - (xx + yy)) * sz;
		te[11] = 0;

		te[12] = position.x;
		te[13] = position.y;
		te[14] = position.z;
		te[15] = 1;

		return this;

	}

	decompose(position, quaternion, scale) {

		const te = this.elements;

		let sx = _v1$5$1.set(te[0], te[1], te[2]).length();
		const sy = _v1$5$1.set(te[4], te[5], te[6]).length();
		const sz = _v1$5$1.set(te[8], te[9], te[10]).length();

		// if determine is negative, we need to invert one scale
		const det = this.determinant();
		if (det < 0) sx = - sx;

		position.x = te[12];
		position.y = te[13];
		position.z = te[14];

		// scale the rotation part
		_m1$2$1.copy(this);

		const invSX = 1 / sx;
		const invSY = 1 / sy;
		const invSZ = 1 / sz;

		_m1$2$1.elements[0] *= invSX;
		_m1$2$1.elements[1] *= invSX;
		_m1$2$1.elements[2] *= invSX;

		_m1$2$1.elements[4] *= invSY;
		_m1$2$1.elements[5] *= invSY;
		_m1$2$1.elements[6] *= invSY;

		_m1$2$1.elements[8] *= invSZ;
		_m1$2$1.elements[9] *= invSZ;
		_m1$2$1.elements[10] *= invSZ;

		quaternion.setFromRotationMatrix(_m1$2$1);

		scale.x = sx;
		scale.y = sy;
		scale.z = sz;

		return this;

	}

	makePerspective(left, right, top, bottom, near, far) {

		if (far === undefined) {

			console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');

		}

		const te = this.elements;
		const x = 2 * near / (right - left);
		const y = 2 * near / (top - bottom);

		const a = (right + left) / (right - left);
		const b = (top + bottom) / (top - bottom);
		const c = - (far + near) / (far - near);
		const d = - 2 * far * near / (far - near);

		te[0] = x; te[4] = 0; te[8] = a; te[12] = 0;
		te[1] = 0; te[5] = y; te[9] = b; te[13] = 0;
		te[2] = 0; te[6] = 0; te[10] = c; te[14] = d;
		te[3] = 0; te[7] = 0; te[11] = - 1; te[15] = 0;

		return this;

	}

	makeOrthographic(left, right, top, bottom, near, far) {

		const te = this.elements;
		const w = 1.0 / (right - left);
		const h = 1.0 / (top - bottom);
		const p = 1.0 / (far - near);

		const x = (right + left) * w;
		const y = (top + bottom) * h;
		const z = (far + near) * p;

		te[0] = 2 * w; te[4] = 0; te[8] = 0; te[12] = - x;
		te[1] = 0; te[5] = 2 * h; te[9] = 0; te[13] = - y;
		te[2] = 0; te[6] = 0; te[10] = - 2 * p; te[14] = - z;
		te[3] = 0; te[7] = 0; te[11] = 0; te[15] = 1;

		return this;

	}

	equals(matrix) {

		const te = this.elements;
		const me = matrix.elements;

		for (let i = 0; i < 16; i++) {

			if (te[i] !== me[i]) return false;

		}

		return true;

	}

	fromArray(array, offset = 0) {

		for (let i = 0; i < 16; i++) {

			this.elements[i] = array[i + offset];

		}

		return this;

	}

	toArray(array = [], offset = 0) {

		const te = this.elements;

		array[offset] = te[0];
		array[offset + 1] = te[1];
		array[offset + 2] = te[2];
		array[offset + 3] = te[3];

		array[offset + 4] = te[4];
		array[offset + 5] = te[5];
		array[offset + 6] = te[6];
		array[offset + 7] = te[7];

		array[offset + 8] = te[8];
		array[offset + 9] = te[9];
		array[offset + 10] = te[10];
		array[offset + 11] = te[11];

		array[offset + 12] = te[12];
		array[offset + 13] = te[13];
		array[offset + 14] = te[14];
		array[offset + 15] = te[15];

		return array;

	}

}

const _v1$5$1 = /*@__PURE__*/ new Vector3$1();
const _m1$2$1 = /*@__PURE__*/ new Matrix4$1();
const _zero$1 = /*@__PURE__*/ new Vector3$1(0, 0, 0);
const _one$1 = /*@__PURE__*/ new Vector3$1(1, 1, 1);
const _x$1 = /*@__PURE__*/ new Vector3$1();
const _y$1 = /*@__PURE__*/ new Vector3$1();
const _z$1 = /*@__PURE__*/ new Vector3$1();

const _matrix$1$1 = /*@__PURE__*/ new Matrix4$1();
const _quaternion$3$1 = /*@__PURE__*/ new Quaternion$1();

class Euler$1 {

	constructor(x = 0, y = 0, z = 0, order = Euler$1.DefaultOrder) {

		this.isEuler = true;

		this._x = x;
		this._y = y;
		this._z = z;
		this._order = order;

	}

	get x() {

		return this._x;

	}

	set x(value) {

		this._x = value;
		this._onChangeCallback();

	}

	get y() {

		return this._y;

	}

	set y(value) {

		this._y = value;
		this._onChangeCallback();

	}

	get z() {

		return this._z;

	}

	set z(value) {

		this._z = value;
		this._onChangeCallback();

	}

	get order() {

		return this._order;

	}

	set order(value) {

		this._order = value;
		this._onChangeCallback();

	}

	set(x, y, z, order = this._order) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._order = order;

		this._onChangeCallback();

		return this;

	}

	clone() {

		return new this.constructor(this._x, this._y, this._z, this._order);

	}

	copy(euler) {

		this._x = euler._x;
		this._y = euler._y;
		this._z = euler._z;
		this._order = euler._order;

		this._onChangeCallback();

		return this;

	}

	setFromRotationMatrix(m, order = this._order, update = true) {

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		const te = m.elements;
		const m11 = te[0], m12 = te[4], m13 = te[8];
		const m21 = te[1], m22 = te[5], m23 = te[9];
		const m31 = te[2], m32 = te[6], m33 = te[10];

		switch (order) {

			case 'XYZ':

				this._y = Math.asin(clamp$1(m13, - 1, 1));

				if (Math.abs(m13) < 0.9999999) {

					this._x = Math.atan2(- m23, m33);
					this._z = Math.atan2(- m12, m11);

				} else {

					this._x = Math.atan2(m32, m22);
					this._z = 0;

				}

				break;

			case 'YXZ':

				this._x = Math.asin(- clamp$1(m23, - 1, 1));

				if (Math.abs(m23) < 0.9999999) {

					this._y = Math.atan2(m13, m33);
					this._z = Math.atan2(m21, m22);

				} else {

					this._y = Math.atan2(- m31, m11);
					this._z = 0;

				}

				break;

			case 'ZXY':

				this._x = Math.asin(clamp$1(m32, - 1, 1));

				if (Math.abs(m32) < 0.9999999) {

					this._y = Math.atan2(- m31, m33);
					this._z = Math.atan2(- m12, m22);

				} else {

					this._y = 0;
					this._z = Math.atan2(m21, m11);

				}

				break;

			case 'ZYX':

				this._y = Math.asin(- clamp$1(m31, - 1, 1));

				if (Math.abs(m31) < 0.9999999) {

					this._x = Math.atan2(m32, m33);
					this._z = Math.atan2(m21, m11);

				} else {

					this._x = 0;
					this._z = Math.atan2(- m12, m22);

				}

				break;

			case 'YZX':

				this._z = Math.asin(clamp$1(m21, - 1, 1));

				if (Math.abs(m21) < 0.9999999) {

					this._x = Math.atan2(- m23, m22);
					this._y = Math.atan2(- m31, m11);

				} else {

					this._x = 0;
					this._y = Math.atan2(m13, m33);

				}

				break;

			case 'XZY':

				this._z = Math.asin(- clamp$1(m12, - 1, 1));

				if (Math.abs(m12) < 0.9999999) {

					this._x = Math.atan2(m32, m22);
					this._y = Math.atan2(m13, m11);

				} else {

					this._x = Math.atan2(- m23, m33);
					this._y = 0;

				}

				break;

			default:

				console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);

		}

		this._order = order;

		if (update === true) this._onChangeCallback();

		return this;

	}

	setFromQuaternion(q, order, update) {

		_matrix$1$1.makeRotationFromQuaternion(q);

		return this.setFromRotationMatrix(_matrix$1$1, order, update);

	}

	setFromVector3(v, order = this._order) {

		return this.set(v.x, v.y, v.z, order);

	}

	reorder(newOrder) {

		// WARNING: this discards revolution information -bhouston

		_quaternion$3$1.setFromEuler(this);

		return this.setFromQuaternion(_quaternion$3$1, newOrder);

	}

	equals(euler) {

		return (euler._x === this._x) && (euler._y === this._y) && (euler._z === this._z) && (euler._order === this._order);

	}

	fromArray(array) {

		this._x = array[0];
		this._y = array[1];
		this._z = array[2];
		if (array[3] !== undefined) this._order = array[3];

		this._onChangeCallback();

		return this;

	}

	toArray(array = [], offset = 0) {

		array[offset] = this._x;
		array[offset + 1] = this._y;
		array[offset + 2] = this._z;
		array[offset + 3] = this._order;

		return array;

	}

	_onChange(callback) {

		this._onChangeCallback = callback;

		return this;

	}

	_onChangeCallback() { }

	*[Symbol.iterator]() {

		yield this._x;
		yield this._y;
		yield this._z;
		yield this._order;

	}

	// @deprecated since r138, 02cf0df1cb4575d5842fef9c85bb5a89fe020d53

	toVector3() {

		console.error('THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead');

	}

}

Euler$1.DefaultOrder = 'XYZ';
Euler$1.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];

class Layers$1 {

	constructor() {

		this.mask = 1 | 0;

	}

	set(channel) {

		this.mask = (1 << channel | 0) >>> 0;

	}

	enable(channel) {

		this.mask |= 1 << channel | 0;

	}

	enableAll() {

		this.mask = 0xffffffff | 0;

	}

	toggle(channel) {

		this.mask ^= 1 << channel | 0;

	}

	disable(channel) {

		this.mask &= ~(1 << channel | 0);

	}

	disableAll() {

		this.mask = 0;

	}

	test(layers) {

		return (this.mask & layers.mask) !== 0;

	}

	isEnabled(channel) {

		return (this.mask & (1 << channel | 0)) !== 0;

	}

}

let _object3DId$1 = 0;

const _v1$4$1 = /*@__PURE__*/ new Vector3$1();
const _q1$1 = /*@__PURE__*/ new Quaternion$1();
const _m1$1$1 = /*@__PURE__*/ new Matrix4$1();
const _target$1 = /*@__PURE__*/ new Vector3$1();

const _position$3$1 = /*@__PURE__*/ new Vector3$1();
const _scale$2$1 = /*@__PURE__*/ new Vector3$1();
const _quaternion$2$1 = /*@__PURE__*/ new Quaternion$1();

const _xAxis$1 = /*@__PURE__*/ new Vector3$1(1, 0, 0);
const _yAxis$1 = /*@__PURE__*/ new Vector3$1(0, 1, 0);
const _zAxis$1 = /*@__PURE__*/ new Vector3$1(0, 0, 1);

const _addedEvent$1 = { type: 'added' };
const _removedEvent$1 = { type: 'removed' };

class Object3D$1 extends EventDispatcher$1 {

	constructor() {

		super();

		this.isObject3D = true;

		Object.defineProperty(this, 'id', { value: _object3DId$1++ });

		this.uuid = generateUUID$1();

		this.name = '';
		this.type = 'Object3D';

		this.parent = null;
		this.children = [];

		this.up = Object3D$1.DefaultUp.clone();

		const position = new Vector3$1();
		const rotation = new Euler$1();
		const quaternion = new Quaternion$1();
		const scale = new Vector3$1(1, 1, 1);

		function onRotationChange() {

			quaternion.setFromEuler(rotation, false);

		}

		function onQuaternionChange() {

			rotation.setFromQuaternion(quaternion, undefined, false);

		}

		rotation._onChange(onRotationChange);
		quaternion._onChange(onQuaternionChange);

		Object.defineProperties(this, {
			position: {
				configurable: true,
				enumerable: true,
				value: position
			},
			rotation: {
				configurable: true,
				enumerable: true,
				value: rotation
			},
			quaternion: {
				configurable: true,
				enumerable: true,
				value: quaternion
			},
			scale: {
				configurable: true,
				enumerable: true,
				value: scale
			},
			modelViewMatrix: {
				value: new Matrix4$1()
			},
			normalMatrix: {
				value: new Matrix3$1()
			}
		});

		this.matrix = new Matrix4$1();
		this.matrixWorld = new Matrix4$1();

		this.matrixAutoUpdate = Object3D$1.DefaultMatrixAutoUpdate;
		this.matrixWorldNeedsUpdate = false;

		this.layers = new Layers$1();
		this.visible = true;

		this.castShadow = false;
		this.receiveShadow = false;

		this.frustumCulled = true;
		this.renderOrder = 0;

		this.animations = [];

		this.userData = {};

	}

	onBeforeRender( /* renderer, scene, camera, geometry, material, group */) { }

	onAfterRender( /* renderer, scene, camera, geometry, material, group */) { }

	applyMatrix4(matrix) {

		if (this.matrixAutoUpdate) this.updateMatrix();

		this.matrix.premultiply(matrix);

		this.matrix.decompose(this.position, this.quaternion, this.scale);

	}

	applyQuaternion(q) {

		this.quaternion.premultiply(q);

		return this;

	}

	setRotationFromAxisAngle(axis, angle) {

		// assumes axis is normalized

		this.quaternion.setFromAxisAngle(axis, angle);

	}

	setRotationFromEuler(euler) {

		this.quaternion.setFromEuler(euler, true);

	}

	setRotationFromMatrix(m) {

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		this.quaternion.setFromRotationMatrix(m);

	}

	setRotationFromQuaternion(q) {

		// assumes q is normalized

		this.quaternion.copy(q);

	}

	rotateOnAxis(axis, angle) {

		// rotate object on axis in object space
		// axis is assumed to be normalized

		_q1$1.setFromAxisAngle(axis, angle);

		this.quaternion.multiply(_q1$1);

		return this;

	}

	rotateOnWorldAxis(axis, angle) {

		// rotate object on axis in world space
		// axis is assumed to be normalized
		// method assumes no rotated parent

		_q1$1.setFromAxisAngle(axis, angle);

		this.quaternion.premultiply(_q1$1);

		return this;

	}

	rotateX(angle) {

		return this.rotateOnAxis(_xAxis$1, angle);

	}

	rotateY(angle) {

		return this.rotateOnAxis(_yAxis$1, angle);

	}

	rotateZ(angle) {

		return this.rotateOnAxis(_zAxis$1, angle);

	}

	translateOnAxis(axis, distance) {

		// translate object by distance along axis in object space
		// axis is assumed to be normalized

		_v1$4$1.copy(axis).applyQuaternion(this.quaternion);

		this.position.add(_v1$4$1.multiplyScalar(distance));

		return this;

	}

	translateX(distance) {

		return this.translateOnAxis(_xAxis$1, distance);

	}

	translateY(distance) {

		return this.translateOnAxis(_yAxis$1, distance);

	}

	translateZ(distance) {

		return this.translateOnAxis(_zAxis$1, distance);

	}

	localToWorld(vector) {

		return vector.applyMatrix4(this.matrixWorld);

	}

	worldToLocal(vector) {

		return vector.applyMatrix4(_m1$1$1.copy(this.matrixWorld).invert());

	}

	lookAt(x, y, z) {

		// This method does not support objects having non-uniformly-scaled parent(s)

		if (x.isVector3) {

			_target$1.copy(x);

		} else {

			_target$1.set(x, y, z);

		}

		const parent = this.parent;

		this.updateWorldMatrix(true, false);

		_position$3$1.setFromMatrixPosition(this.matrixWorld);

		if (this.isCamera || this.isLight) {

			_m1$1$1.lookAt(_position$3$1, _target$1, this.up);

		} else {

			_m1$1$1.lookAt(_target$1, _position$3$1, this.up);

		}

		this.quaternion.setFromRotationMatrix(_m1$1$1);

		if (parent) {

			_m1$1$1.extractRotation(parent.matrixWorld);
			_q1$1.setFromRotationMatrix(_m1$1$1);
			this.quaternion.premultiply(_q1$1.invert());

		}

	}

	add(object) {

		if (arguments.length > 1) {

			for (let i = 0; i < arguments.length; i++) {

				this.add(arguments[i]);

			}

			return this;

		}

		if (object === this) {

			console.error('THREE.Object3D.add: object can\'t be added as a child of itself.', object);
			return this;

		}

		if (object && object.isObject3D) {

			if (object.parent !== null) {

				object.parent.remove(object);

			}

			object.parent = this;
			this.children.push(object);

			object.dispatchEvent(_addedEvent$1);

		} else {

			console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);

		}

		return this;

	}

	remove(object) {

		if (arguments.length > 1) {

			for (let i = 0; i < arguments.length; i++) {

				this.remove(arguments[i]);

			}

			return this;

		}

		const index = this.children.indexOf(object);

		if (index !== - 1) {

			object.parent = null;
			this.children.splice(index, 1);

			object.dispatchEvent(_removedEvent$1);

		}

		return this;

	}

	removeFromParent() {

		const parent = this.parent;

		if (parent !== null) {

			parent.remove(this);

		}

		return this;

	}

	clear() {

		for (let i = 0; i < this.children.length; i++) {

			const object = this.children[i];

			object.parent = null;

			object.dispatchEvent(_removedEvent$1);

		}

		this.children.length = 0;

		return this;


	}

	attach(object) {

		// adds object as a child of this, while maintaining the object's world transform

		// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)

		this.updateWorldMatrix(true, false);

		_m1$1$1.copy(this.matrixWorld).invert();

		if (object.parent !== null) {

			object.parent.updateWorldMatrix(true, false);

			_m1$1$1.multiply(object.parent.matrixWorld);

		}

		object.applyMatrix4(_m1$1$1);

		this.add(object);

		object.updateWorldMatrix(false, true);

		return this;

	}

	getObjectById(id) {

		return this.getObjectByProperty('id', id);

	}

	getObjectByName(name) {

		return this.getObjectByProperty('name', name);

	}

	getObjectByProperty(name, value) {

		if (this[name] === value) return this;

		for (let i = 0, l = this.children.length; i < l; i++) {

			const child = this.children[i];
			const object = child.getObjectByProperty(name, value);

			if (object !== undefined) {

				return object;

			}

		}

		return undefined;

	}

	getWorldPosition(target) {

		this.updateWorldMatrix(true, false);

		return target.setFromMatrixPosition(this.matrixWorld);

	}

	getWorldQuaternion(target) {

		this.updateWorldMatrix(true, false);

		this.matrixWorld.decompose(_position$3$1, target, _scale$2$1);

		return target;

	}

	getWorldScale(target) {

		this.updateWorldMatrix(true, false);

		this.matrixWorld.decompose(_position$3$1, _quaternion$2$1, target);

		return target;

	}

	getWorldDirection(target) {

		this.updateWorldMatrix(true, false);

		const e = this.matrixWorld.elements;

		return target.set(e[8], e[9], e[10]).normalize();

	}

	raycast( /* raycaster, intersects */) { }

	traverse(callback) {

		callback(this);

		const children = this.children;

		for (let i = 0, l = children.length; i < l; i++) {

			children[i].traverse(callback);

		}

	}

	traverseVisible(callback) {

		if (this.visible === false) return;

		callback(this);

		const children = this.children;

		for (let i = 0, l = children.length; i < l; i++) {

			children[i].traverseVisible(callback);

		}

	}

	traverseAncestors(callback) {

		const parent = this.parent;

		if (parent !== null) {

			callback(parent);

			parent.traverseAncestors(callback);

		}

	}

	updateMatrix() {

		this.matrix.compose(this.position, this.quaternion, this.scale);

		this.matrixWorldNeedsUpdate = true;

	}

	updateMatrixWorld(force) {

		if (this.matrixAutoUpdate) this.updateMatrix();

		if (this.matrixWorldNeedsUpdate || force) {

			if (this.parent === null) {

				this.matrixWorld.copy(this.matrix);

			} else {

				this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);

			}

			this.matrixWorldNeedsUpdate = false;

			force = true;

		}

		// update children

		const children = this.children;

		for (let i = 0, l = children.length; i < l; i++) {

			children[i].updateMatrixWorld(force);

		}

	}

	updateWorldMatrix(updateParents, updateChildren) {

		const parent = this.parent;

		if (updateParents === true && parent !== null) {

			parent.updateWorldMatrix(true, false);

		}

		if (this.matrixAutoUpdate) this.updateMatrix();

		if (this.parent === null) {

			this.matrixWorld.copy(this.matrix);

		} else {

			this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);

		}

		// update children

		if (updateChildren === true) {

			const children = this.children;

			for (let i = 0, l = children.length; i < l; i++) {

				children[i].updateWorldMatrix(false, true);

			}

		}

	}

	toJSON(meta) {

		// meta is a string when called from JSON.stringify
		const isRootObject = (meta === undefined || typeof meta === 'string');

		const output = {};

		// meta is a hash used to collect geometries, materials.
		// not providing it implies that this is the root object
		// being serialized.
		if (isRootObject) {

			// initialize meta obj
			meta = {
				geometries: {},
				materials: {},
				textures: {},
				images: {},
				shapes: {},
				skeletons: {},
				animations: {},
				nodes: {}
			};

			output.metadata = {
				version: 4.5,
				type: 'Object',
				generator: 'Object3D.toJSON'
			};

		}

		// standard Object3D serialization

		const object = {};

		object.uuid = this.uuid;
		object.type = this.type;

		if (this.name !== '') object.name = this.name;
		if (this.castShadow === true) object.castShadow = true;
		if (this.receiveShadow === true) object.receiveShadow = true;
		if (this.visible === false) object.visible = false;
		if (this.frustumCulled === false) object.frustumCulled = false;
		if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
		if (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;

		object.layers = this.layers.mask;
		object.matrix = this.matrix.toArray();

		if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;

		// object specific properties

		if (this.isInstancedMesh) {

			object.type = 'InstancedMesh';
			object.count = this.count;
			object.instanceMatrix = this.instanceMatrix.toJSON();
			if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();

		}

		//

		function serialize(library, element) {

			if (library[element.uuid] === undefined) {

				library[element.uuid] = element.toJSON(meta);

			}

			return element.uuid;

		}

		if (this.isScene) {

			if (this.background) {

				if (this.background.isColor) {

					object.background = this.background.toJSON();

				} else if (this.background.isTexture) {

					object.background = this.background.toJSON(meta).uuid;

				}

			}

			if (this.environment && this.environment.isTexture) {

				object.environment = this.environment.toJSON(meta).uuid;

			}

		} else if (this.isMesh || this.isLine || this.isPoints) {

			object.geometry = serialize(meta.geometries, this.geometry);

			const parameters = this.geometry.parameters;

			if (parameters !== undefined && parameters.shapes !== undefined) {

				const shapes = parameters.shapes;

				if (Array.isArray(shapes)) {

					for (let i = 0, l = shapes.length; i < l; i++) {

						const shape = shapes[i];

						serialize(meta.shapes, shape);

					}

				} else {

					serialize(meta.shapes, shapes);

				}

			}

		}

		if (this.isSkinnedMesh) {

			object.bindMode = this.bindMode;
			object.bindMatrix = this.bindMatrix.toArray();

			if (this.skeleton !== undefined) {

				serialize(meta.skeletons, this.skeleton);

				object.skeleton = this.skeleton.uuid;

			}

		}

		if (this.material !== undefined) {

			if (Array.isArray(this.material)) {

				const uuids = [];

				for (let i = 0, l = this.material.length; i < l; i++) {

					uuids.push(serialize(meta.materials, this.material[i]));

				}

				object.material = uuids;

			} else {

				object.material = serialize(meta.materials, this.material);

			}

		}

		//

		if (this.children.length > 0) {

			object.children = [];

			for (let i = 0; i < this.children.length; i++) {

				object.children.push(this.children[i].toJSON(meta).object);

			}

		}

		//

		if (this.animations.length > 0) {

			object.animations = [];

			for (let i = 0; i < this.animations.length; i++) {

				const animation = this.animations[i];

				object.animations.push(serialize(meta.animations, animation));

			}

		}

		if (isRootObject) {

			const geometries = extractFromCache(meta.geometries);
			const materials = extractFromCache(meta.materials);
			const textures = extractFromCache(meta.textures);
			const images = extractFromCache(meta.images);
			const shapes = extractFromCache(meta.shapes);
			const skeletons = extractFromCache(meta.skeletons);
			const animations = extractFromCache(meta.animations);
			const nodes = extractFromCache(meta.nodes);

			if (geometries.length > 0) output.geometries = geometries;
			if (materials.length > 0) output.materials = materials;
			if (textures.length > 0) output.textures = textures;
			if (images.length > 0) output.images = images;
			if (shapes.length > 0) output.shapes = shapes;
			if (skeletons.length > 0) output.skeletons = skeletons;
			if (animations.length > 0) output.animations = animations;
			if (nodes.length > 0) output.nodes = nodes;

		}

		output.object = object;

		return output;

		// extract data from the cache hash
		// remove metadata on each item
		// and return as array
		function extractFromCache(cache) {

			const values = [];
			for (const key in cache) {

				const data = cache[key];
				delete data.metadata;
				values.push(data);

			}

			return values;

		}

	}

	clone(recursive) {

		return new this.constructor().copy(this, recursive);

	}

	copy(source, recursive = true) {

		this.name = source.name;

		this.up.copy(source.up);

		this.position.copy(source.position);
		this.rotation.order = source.rotation.order;
		this.quaternion.copy(source.quaternion);
		this.scale.copy(source.scale);

		this.matrix.copy(source.matrix);
		this.matrixWorld.copy(source.matrixWorld);

		this.matrixAutoUpdate = source.matrixAutoUpdate;
		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

		this.layers.mask = source.layers.mask;
		this.visible = source.visible;

		this.castShadow = source.castShadow;
		this.receiveShadow = source.receiveShadow;

		this.frustumCulled = source.frustumCulled;
		this.renderOrder = source.renderOrder;

		this.userData = JSON.parse(JSON.stringify(source.userData));

		if (recursive === true) {

			for (let i = 0; i < source.children.length; i++) {

				const child = source.children[i];
				this.add(child.clone());

			}

		}

		return this;

	}

}

Object3D$1.DefaultUp = new Vector3$1(0, 1, 0);
Object3D$1.DefaultMatrixAutoUpdate = true;

const _v0$1$1 = /*@__PURE__*/ new Vector3$1();
const _v1$3$1 = /*@__PURE__*/ new Vector3$1();
const _v2$2$1 = /*@__PURE__*/ new Vector3$1();
const _v3$1$1 = /*@__PURE__*/ new Vector3$1();

const _vab$1 = /*@__PURE__*/ new Vector3$1();
const _vac$1 = /*@__PURE__*/ new Vector3$1();
const _vbc$1 = /*@__PURE__*/ new Vector3$1();
const _vap$1 = /*@__PURE__*/ new Vector3$1();
const _vbp$1 = /*@__PURE__*/ new Vector3$1();
const _vcp$1 = /*@__PURE__*/ new Vector3$1();

class Triangle$1 {

	constructor(a = new Vector3$1(), b = new Vector3$1(), c = new Vector3$1()) {

		this.a = a;
		this.b = b;
		this.c = c;

	}

	static getNormal(a, b, c, target) {

		target.subVectors(c, b);
		_v0$1$1.subVectors(a, b);
		target.cross(_v0$1$1);

		const targetLengthSq = target.lengthSq();
		if (targetLengthSq > 0) {

			return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));

		}

		return target.set(0, 0, 0);

	}

	// static/instance method to calculate barycentric coordinates
	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
	static getBarycoord(point, a, b, c, target) {

		_v0$1$1.subVectors(c, a);
		_v1$3$1.subVectors(b, a);
		_v2$2$1.subVectors(point, a);

		const dot00 = _v0$1$1.dot(_v0$1$1);
		const dot01 = _v0$1$1.dot(_v1$3$1);
		const dot02 = _v0$1$1.dot(_v2$2$1);
		const dot11 = _v1$3$1.dot(_v1$3$1);
		const dot12 = _v1$3$1.dot(_v2$2$1);

		const denom = (dot00 * dot11 - dot01 * dot01);

		// collinear or singular triangle
		if (denom === 0) {

			// arbitrary location outside of triangle?
			// not sure if this is the best idea, maybe should be returning undefined
			return target.set(- 2, - 1, - 1);

		}

		const invDenom = 1 / denom;
		const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
		const v = (dot00 * dot12 - dot01 * dot02) * invDenom;

		// barycentric coordinates must always sum to 1
		return target.set(1 - u - v, v, u);

	}

	static containsPoint(point, a, b, c) {

		this.getBarycoord(point, a, b, c, _v3$1$1);

		return (_v3$1$1.x >= 0) && (_v3$1$1.y >= 0) && ((_v3$1$1.x + _v3$1$1.y) <= 1);

	}

	static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {

		this.getBarycoord(point, p1, p2, p3, _v3$1$1);

		target.set(0, 0);
		target.addScaledVector(uv1, _v3$1$1.x);
		target.addScaledVector(uv2, _v3$1$1.y);
		target.addScaledVector(uv3, _v3$1$1.z);

		return target;

	}

	static isFrontFacing(a, b, c, direction) {

		_v0$1$1.subVectors(c, b);
		_v1$3$1.subVectors(a, b);

		// strictly front facing
		return (_v0$1$1.cross(_v1$3$1).dot(direction) < 0) ? true : false;

	}

	set(a, b, c) {

		this.a.copy(a);
		this.b.copy(b);
		this.c.copy(c);

		return this;

	}

	setFromPointsAndIndices(points, i0, i1, i2) {

		this.a.copy(points[i0]);
		this.b.copy(points[i1]);
		this.c.copy(points[i2]);

		return this;

	}

	setFromAttributeAndIndices(attribute, i0, i1, i2) {

		this.a.fromBufferAttribute(attribute, i0);
		this.b.fromBufferAttribute(attribute, i1);
		this.c.fromBufferAttribute(attribute, i2);

		return this;

	}

	clone() {

		return new this.constructor().copy(this);

	}

	copy(triangle) {

		this.a.copy(triangle.a);
		this.b.copy(triangle.b);
		this.c.copy(triangle.c);

		return this;

	}

	getArea() {

		_v0$1$1.subVectors(this.c, this.b);
		_v1$3$1.subVectors(this.a, this.b);

		return _v0$1$1.cross(_v1$3$1).length() * 0.5;

	}

	getMidpoint(target) {

		return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);

	}

	getNormal(target) {

		return Triangle$1.getNormal(this.a, this.b, this.c, target);

	}

	getPlane(target) {

		return target.setFromCoplanarPoints(this.a, this.b, this.c);

	}

	getBarycoord(point, target) {

		return Triangle$1.getBarycoord(point, this.a, this.b, this.c, target);

	}

	getUV(point, uv1, uv2, uv3, target) {

		return Triangle$1.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);

	}

	containsPoint(point) {

		return Triangle$1.containsPoint(point, this.a, this.b, this.c);

	}

	isFrontFacing(direction) {

		return Triangle$1.isFrontFacing(this.a, this.b, this.c, direction);

	}

	intersectsBox(box) {

		return box.intersectsTriangle(this);

	}

	closestPointToPoint(p, target) {

		const a = this.a, b = this.b, c = this.c;
		let v, w;

		// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
		// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
		// under the accompanying license; see chapter 5.1.5 for detailed explanation.
		// basically, we're distinguishing which of the voronoi regions of the triangle
		// the point lies in with the minimum amount of redundant computation.

		_vab$1.subVectors(b, a);
		_vac$1.subVectors(c, a);
		_vap$1.subVectors(p, a);
		const d1 = _vab$1.dot(_vap$1);
		const d2 = _vac$1.dot(_vap$1);
		if (d1 <= 0 && d2 <= 0) {

			// vertex region of A; barycentric coords (1, 0, 0)
			return target.copy(a);

		}

		_vbp$1.subVectors(p, b);
		const d3 = _vab$1.dot(_vbp$1);
		const d4 = _vac$1.dot(_vbp$1);
		if (d3 >= 0 && d4 <= d3) {

			// vertex region of B; barycentric coords (0, 1, 0)
			return target.copy(b);

		}

		const vc = d1 * d4 - d3 * d2;
		if (vc <= 0 && d1 >= 0 && d3 <= 0) {

			v = d1 / (d1 - d3);
			// edge region of AB; barycentric coords (1-v, v, 0)
			return target.copy(a).addScaledVector(_vab$1, v);

		}

		_vcp$1.subVectors(p, c);
		const d5 = _vab$1.dot(_vcp$1);
		const d6 = _vac$1.dot(_vcp$1);
		if (d6 >= 0 && d5 <= d6) {

			// vertex region of C; barycentric coords (0, 0, 1)
			return target.copy(c);

		}

		const vb = d5 * d2 - d1 * d6;
		if (vb <= 0 && d2 >= 0 && d6 <= 0) {

			w = d2 / (d2 - d6);
			// edge region of AC; barycentric coords (1-w, 0, w)
			return target.copy(a).addScaledVector(_vac$1, w);

		}

		const va = d3 * d6 - d5 * d4;
		if (va <= 0 && (d4 - d3) >= 0 && (d5 - d6) >= 0) {

			_vbc$1.subVectors(c, b);
			w = (d4 - d3) / ((d4 - d3) + (d5 - d6));
			// edge region of BC; barycentric coords (0, 1-w, w)
			return target.copy(b).addScaledVector(_vbc$1, w); // edge region of BC

		}

		// face region
		const denom = 1 / (va + vb + vc);
		// u = va * denom
		v = vb * denom;
		w = vc * denom;

		return target.copy(a).addScaledVector(_vab$1, v).addScaledVector(_vac$1, w);

	}

	equals(triangle) {

		return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);

	}

}

let materialId$1 = 0;

class Material$1 extends EventDispatcher$1 {

	constructor() {

		super();

		this.isMaterial = true;

		Object.defineProperty(this, 'id', { value: materialId$1++ });

		this.uuid = generateUUID$1();

		this.name = '';
		this.type = 'Material';

		this.blending = NormalBlending$1;
		this.side = FrontSide$1;
		this.vertexColors = false;

		this.opacity = 1;
		this.transparent = false;

		this.blendSrc = SrcAlphaFactor$1;
		this.blendDst = OneMinusSrcAlphaFactor$1;
		this.blendEquation = AddEquation$1;
		this.blendSrcAlpha = null;
		this.blendDstAlpha = null;
		this.blendEquationAlpha = null;

		this.depthFunc = LessEqualDepth$1;
		this.depthTest = true;
		this.depthWrite = true;

		this.stencilWriteMask = 0xff;
		this.stencilFunc = AlwaysStencilFunc$1;
		this.stencilRef = 0;
		this.stencilFuncMask = 0xff;
		this.stencilFail = KeepStencilOp$1;
		this.stencilZFail = KeepStencilOp$1;
		this.stencilZPass = KeepStencilOp$1;
		this.stencilWrite = false;

		this.clippingPlanes = null;
		this.clipIntersection = false;
		this.clipShadows = false;

		this.shadowSide = null;

		this.colorWrite = true;

		this.precision = null; // override the renderer's default precision for this material

		this.polygonOffset = false;
		this.polygonOffsetFactor = 0;
		this.polygonOffsetUnits = 0;

		this.dithering = false;

		this.alphaToCoverage = false;
		this.premultipliedAlpha = false;

		this.visible = true;

		this.toneMapped = true;

		this.userData = {};

		this.version = 0;

		this._alphaTest = 0;

	}

	get alphaTest() {

		return this._alphaTest;

	}

	set alphaTest(value) {

		if (this._alphaTest > 0 !== value > 0) {

			this.version++;

		}

		this._alphaTest = value;

	}

	onBuild( /* shaderobject, renderer */) { }

	onBeforeRender( /* renderer, scene, camera, geometry, object, group */) { }

	onBeforeCompile( /* shaderobject, renderer */) { }

	customProgramCacheKey() {

		return this.onBeforeCompile.toString();

	}

	setValues(values) {

		if (values === undefined) return;

		for (const key in values) {

			const newValue = values[key];

			if (newValue === undefined) {

				console.warn('THREE.Material: \'' + key + '\' parameter is undefined.');
				continue;

			}

			// for backward compatibility if shading is set in the constructor
			if (key === 'shading') {

				console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
				this.flatShading = (newValue === FlatShading$1) ? true : false;
				continue;

			}

			const currentValue = this[key];

			if (currentValue === undefined) {

				console.warn('THREE.' + this.type + ': \'' + key + '\' is not a property of this material.');
				continue;

			}

			if (currentValue && currentValue.isColor) {

				currentValue.set(newValue);

			} else if ((currentValue && currentValue.isVector3) && (newValue && newValue.isVector3)) {

				currentValue.copy(newValue);

			} else {

				this[key] = newValue;

			}

		}

	}

	toJSON(meta) {

		const isRootObject = (meta === undefined || typeof meta === 'string');

		if (isRootObject) {

			meta = {
				textures: {},
				images: {}
			};

		}

		const data = {
			metadata: {
				version: 4.5,
				type: 'Material',
				generator: 'Material.toJSON'
			}
		};

		// standard Material serialization
		data.uuid = this.uuid;
		data.type = this.type;

		if (this.name !== '') data.name = this.name;

		if (this.color && this.color.isColor) data.color = this.color.getHex();

		if (this.roughness !== undefined) data.roughness = this.roughness;
		if (this.metalness !== undefined) data.metalness = this.metalness;

		if (this.sheen !== undefined) data.sheen = this.sheen;
		if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();
		if (this.sheenRoughness !== undefined) data.sheenRoughness = this.sheenRoughness;
		if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
		if (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;

		if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
		if (this.specularIntensity !== undefined) data.specularIntensity = this.specularIntensity;
		if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();
		if (this.shininess !== undefined) data.shininess = this.shininess;
		if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;
		if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;

		if (this.clearcoatMap && this.clearcoatMap.isTexture) {

			data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;

		}

		if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {

			data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;

		}

		if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {

			data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
			data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();

		}

		if (this.iridescence !== undefined) data.iridescence = this.iridescence;
		if (this.iridescenceIOR !== undefined) data.iridescenceIOR = this.iridescenceIOR;
		if (this.iridescenceThicknessRange !== undefined) data.iridescenceThicknessRange = this.iridescenceThicknessRange;

		if (this.iridescenceMap && this.iridescenceMap.isTexture) {

			data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;

		}

		if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {

			data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;

		}

		if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
		if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
		if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;

		if (this.lightMap && this.lightMap.isTexture) {

			data.lightMap = this.lightMap.toJSON(meta).uuid;
			data.lightMapIntensity = this.lightMapIntensity;

		}

		if (this.aoMap && this.aoMap.isTexture) {

			data.aoMap = this.aoMap.toJSON(meta).uuid;
			data.aoMapIntensity = this.aoMapIntensity;

		}

		if (this.bumpMap && this.bumpMap.isTexture) {

			data.bumpMap = this.bumpMap.toJSON(meta).uuid;
			data.bumpScale = this.bumpScale;

		}

		if (this.normalMap && this.normalMap.isTexture) {

			data.normalMap = this.normalMap.toJSON(meta).uuid;
			data.normalMapType = this.normalMapType;
			data.normalScale = this.normalScale.toArray();

		}

		if (this.displacementMap && this.displacementMap.isTexture) {

			data.displacementMap = this.displacementMap.toJSON(meta).uuid;
			data.displacementScale = this.displacementScale;
			data.displacementBias = this.displacementBias;

		}

		if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
		if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;

		if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
		if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
		if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
		if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;

		if (this.envMap && this.envMap.isTexture) {

			data.envMap = this.envMap.toJSON(meta).uuid;

			if (this.combine !== undefined) data.combine = this.combine;

		}

		if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;
		if (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;
		if (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;

		if (this.gradientMap && this.gradientMap.isTexture) {

			data.gradientMap = this.gradientMap.toJSON(meta).uuid;

		}

		if (this.transmission !== undefined) data.transmission = this.transmission;
		if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
		if (this.thickness !== undefined) data.thickness = this.thickness;
		if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
		if (this.attenuationDistance !== undefined) data.attenuationDistance = this.attenuationDistance;
		if (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();

		if (this.size !== undefined) data.size = this.size;
		if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
		if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;

		if (this.blending !== NormalBlending$1) data.blending = this.blending;
		if (this.side !== FrontSide$1) data.side = this.side;
		if (this.vertexColors) data.vertexColors = true;

		if (this.opacity < 1) data.opacity = this.opacity;
		if (this.transparent === true) data.transparent = this.transparent;

		data.depthFunc = this.depthFunc;
		data.depthTest = this.depthTest;
		data.depthWrite = this.depthWrite;
		data.colorWrite = this.colorWrite;

		data.stencilWrite = this.stencilWrite;
		data.stencilWriteMask = this.stencilWriteMask;
		data.stencilFunc = this.stencilFunc;
		data.stencilRef = this.stencilRef;
		data.stencilFuncMask = this.stencilFuncMask;
		data.stencilFail = this.stencilFail;
		data.stencilZFail = this.stencilZFail;
		data.stencilZPass = this.stencilZPass;

		// rotation (SpriteMaterial)
		if (this.rotation !== undefined && this.rotation !== 0) data.rotation = this.rotation;

		if (this.polygonOffset === true) data.polygonOffset = true;
		if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
		if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;

		if (this.linewidth !== undefined && this.linewidth !== 1) data.linewidth = this.linewidth;
		if (this.dashSize !== undefined) data.dashSize = this.dashSize;
		if (this.gapSize !== undefined) data.gapSize = this.gapSize;
		if (this.scale !== undefined) data.scale = this.scale;

		if (this.dithering === true) data.dithering = true;

		if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
		if (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;
		if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;

		if (this.wireframe === true) data.wireframe = this.wireframe;
		if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
		if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;
		if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;

		if (this.flatShading === true) data.flatShading = this.flatShading;

		if (this.visible === false) data.visible = false;

		if (this.toneMapped === false) data.toneMapped = false;

		if (this.fog === false) data.fog = false;

		if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;

		// TODO: Copied from Object3D.toJSON

		function extractFromCache(cache) {

			const values = [];

			for (const key in cache) {

				const data = cache[key];
				delete data.metadata;
				values.push(data);

			}

			return values;

		}

		if (isRootObject) {

			const textures = extractFromCache(meta.textures);
			const images = extractFromCache(meta.images);

			if (textures.length > 0) data.textures = textures;
			if (images.length > 0) data.images = images;

		}

		return data;

	}

	clone() {

		return new this.constructor().copy(this);

	}

	copy(source) {

		this.name = source.name;

		this.blending = source.blending;
		this.side = source.side;
		this.vertexColors = source.vertexColors;

		this.opacity = source.opacity;
		this.transparent = source.transparent;

		this.blendSrc = source.blendSrc;
		this.blendDst = source.blendDst;
		this.blendEquation = source.blendEquation;
		this.blendSrcAlpha = source.blendSrcAlpha;
		this.blendDstAlpha = source.blendDstAlpha;
		this.blendEquationAlpha = source.blendEquationAlpha;

		this.depthFunc = source.depthFunc;
		this.depthTest = source.depthTest;
		this.depthWrite = source.depthWrite;

		this.stencilWriteMask = source.stencilWriteMask;
		this.stencilFunc = source.stencilFunc;
		this.stencilRef = source.stencilRef;
		this.stencilFuncMask = source.stencilFuncMask;
		this.stencilFail = source.stencilFail;
		this.stencilZFail = source.stencilZFail;
		this.stencilZPass = source.stencilZPass;
		this.stencilWrite = source.stencilWrite;

		const srcPlanes = source.clippingPlanes;
		let dstPlanes = null;

		if (srcPlanes !== null) {

			const n = srcPlanes.length;
			dstPlanes = new Array(n);

			for (let i = 0; i !== n; ++i) {

				dstPlanes[i] = srcPlanes[i].clone();

			}

		}

		this.clippingPlanes = dstPlanes;
		this.clipIntersection = source.clipIntersection;
		this.clipShadows = source.clipShadows;

		this.shadowSide = source.shadowSide;

		this.colorWrite = source.colorWrite;

		this.precision = source.precision;

		this.polygonOffset = source.polygonOffset;
		this.polygonOffsetFactor = source.polygonOffsetFactor;
		this.polygonOffsetUnits = source.polygonOffsetUnits;

		this.dithering = source.dithering;

		this.alphaTest = source.alphaTest;
		this.alphaToCoverage = source.alphaToCoverage;
		this.premultipliedAlpha = source.premultipliedAlpha;

		this.visible = source.visible;

		this.toneMapped = source.toneMapped;

		this.userData = JSON.parse(JSON.stringify(source.userData));

		return this;

	}

	dispose() {

		this.dispatchEvent({ type: 'dispose' });

	}

	set needsUpdate(value) {

		if (value === true) this.version++;

	}

	// @deprecated since r131, f5803c62cc4a29d90744e9dc7811d086e354c1d8

	get vertexTangents() {

		console.warn('THREE.' + this.type + ': .vertexTangents has been removed.');
		return false;

	}

	set vertexTangents(value) {

		console.warn('THREE.' + this.type + ': .vertexTangents has been removed.');

	}

}

Material$1.fromType = function ( /*type*/) {

	// TODO: Behavior added in Materials.js

	return null;

};

class MeshBasicMaterial$1 extends Material$1 {

	constructor(parameters) {

		super();

		this.isMeshBasicMaterial = true;

		this.type = 'MeshBasicMaterial';

		this.color = new Color$1(0xffffff); // emissive

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation$1;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.fog = true;

		this.setValues(parameters);

	}

	copy(source) {

		super.copy(source);

		this.color.copy(source.color);

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.fog = source.fog;

		return this;

	}

}

const _vector$9$1 = /*@__PURE__*/ new Vector3$1();
const _vector2$1$1 = /*@__PURE__*/ new Vector2$1();

class BufferAttribute$1 {

	constructor(array, itemSize, normalized) {

		if (Array.isArray(array)) {

			throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');

		}

		this.isBufferAttribute = true;

		this.name = '';

		this.array = array;
		this.itemSize = itemSize;
		this.count = array !== undefined ? array.length / itemSize : 0;
		this.normalized = normalized === true;

		this.usage = StaticDrawUsage$1;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	}

	onUploadCallback() { }

	set needsUpdate(value) {

		if (value === true) this.version++;

	}

	setUsage(value) {

		this.usage = value;

		return this;

	}

	copy(source) {

		this.name = source.name;
		this.array = new source.array.constructor(source.array);
		this.itemSize = source.itemSize;
		this.count = source.count;
		this.normalized = source.normalized;

		this.usage = source.usage;

		return this;

	}

	copyAt(index1, attribute, index2) {

		index1 *= this.itemSize;
		index2 *= attribute.itemSize;

		for (let i = 0, l = this.itemSize; i < l; i++) {

			this.array[index1 + i] = attribute.array[index2 + i];

		}

		return this;

	}

	copyArray(array) {

		this.array.set(array);

		return this;

	}

	copyColorsArray(colors) {

		const array = this.array;
		let offset = 0;

		for (let i = 0, l = colors.length; i < l; i++) {

			let color = colors[i];

			if (color === undefined) {

				console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);
				color = new Color$1();

			}

			array[offset++] = color.r;
			array[offset++] = color.g;
			array[offset++] = color.b;

		}

		return this;

	}

	copyVector2sArray(vectors) {

		const array = this.array;
		let offset = 0;

		for (let i = 0, l = vectors.length; i < l; i++) {

			let vector = vectors[i];

			if (vector === undefined) {

				console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);
				vector = new Vector2$1();

			}

			array[offset++] = vector.x;
			array[offset++] = vector.y;

		}

		return this;

	}

	copyVector3sArray(vectors) {

		const array = this.array;
		let offset = 0;

		for (let i = 0, l = vectors.length; i < l; i++) {

			let vector = vectors[i];

			if (vector === undefined) {

				console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);
				vector = new Vector3$1();

			}

			array[offset++] = vector.x;
			array[offset++] = vector.y;
			array[offset++] = vector.z;

		}

		return this;

	}

	copyVector4sArray(vectors) {

		const array = this.array;
		let offset = 0;

		for (let i = 0, l = vectors.length; i < l; i++) {

			let vector = vectors[i];

			if (vector === undefined) {

				console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);
				vector = new Vector4$1();

			}

			array[offset++] = vector.x;
			array[offset++] = vector.y;
			array[offset++] = vector.z;
			array[offset++] = vector.w;

		}

		return this;

	}

	applyMatrix3(m) {

		if (this.itemSize === 2) {

			for (let i = 0, l = this.count; i < l; i++) {

				_vector2$1$1.fromBufferAttribute(this, i);
				_vector2$1$1.applyMatrix3(m);

				this.setXY(i, _vector2$1$1.x, _vector2$1$1.y);

			}

		} else if (this.itemSize === 3) {

			for (let i = 0, l = this.count; i < l; i++) {

				_vector$9$1.fromBufferAttribute(this, i);
				_vector$9$1.applyMatrix3(m);

				this.setXYZ(i, _vector$9$1.x, _vector$9$1.y, _vector$9$1.z);

			}

		}

		return this;

	}

	applyMatrix4(m) {

		for (let i = 0, l = this.count; i < l; i++) {

			_vector$9$1.fromBufferAttribute(this, i);

			_vector$9$1.applyMatrix4(m);

			this.setXYZ(i, _vector$9$1.x, _vector$9$1.y, _vector$9$1.z);

		}

		return this;

	}

	applyNormalMatrix(m) {

		for (let i = 0, l = this.count; i < l; i++) {

			_vector$9$1.fromBufferAttribute(this, i);

			_vector$9$1.applyNormalMatrix(m);

			this.setXYZ(i, _vector$9$1.x, _vector$9$1.y, _vector$9$1.z);

		}

		return this;

	}

	transformDirection(m) {

		for (let i = 0, l = this.count; i < l; i++) {

			_vector$9$1.fromBufferAttribute(this, i);

			_vector$9$1.transformDirection(m);

			this.setXYZ(i, _vector$9$1.x, _vector$9$1.y, _vector$9$1.z);

		}

		return this;

	}

	set(value, offset = 0) {

		this.array.set(value, offset);

		return this;

	}

	getX(index) {

		return this.array[index * this.itemSize];

	}

	setX(index, x) {

		this.array[index * this.itemSize] = x;

		return this;

	}

	getY(index) {

		return this.array[index * this.itemSize + 1];

	}

	setY(index, y) {

		this.array[index * this.itemSize + 1] = y;

		return this;

	}

	getZ(index) {

		return this.array[index * this.itemSize + 2];

	}

	setZ(index, z) {

		this.array[index * this.itemSize + 2] = z;

		return this;

	}

	getW(index) {

		return this.array[index * this.itemSize + 3];

	}

	setW(index, w) {

		this.array[index * this.itemSize + 3] = w;

		return this;

	}

	setXY(index, x, y) {

		index *= this.itemSize;

		this.array[index + 0] = x;
		this.array[index + 1] = y;

		return this;

	}

	setXYZ(index, x, y, z) {

		index *= this.itemSize;

		this.array[index + 0] = x;
		this.array[index + 1] = y;
		this.array[index + 2] = z;

		return this;

	}

	setXYZW(index, x, y, z, w) {

		index *= this.itemSize;

		this.array[index + 0] = x;
		this.array[index + 1] = y;
		this.array[index + 2] = z;
		this.array[index + 3] = w;

		return this;

	}

	onUpload(callback) {

		this.onUploadCallback = callback;

		return this;

	}

	clone() {

		return new this.constructor(this.array, this.itemSize).copy(this);

	}

	toJSON() {

		const data = {
			itemSize: this.itemSize,
			type: this.array.constructor.name,
			array: Array.prototype.slice.call(this.array),
			normalized: this.normalized
		};

		if (this.name !== '') data.name = this.name;
		if (this.usage !== StaticDrawUsage$1) data.usage = this.usage;
		if (this.updateRange.offset !== 0 || this.updateRange.count !== - 1) data.updateRange = this.updateRange;

		return data;

	}

}

class Uint16BufferAttribute$1 extends BufferAttribute$1 {

	constructor(array, itemSize, normalized) {

		super(new Uint16Array(array), itemSize, normalized);

	}

}

class Uint32BufferAttribute$1 extends BufferAttribute$1 {

	constructor(array, itemSize, normalized) {

		super(new Uint32Array(array), itemSize, normalized);

	}

}


class Float32BufferAttribute$1 extends BufferAttribute$1 {

	constructor(array, itemSize, normalized) {

		super(new Float32Array(array), itemSize, normalized);

	}

}

let _id$1 = 0;

const _m1$3 = /*@__PURE__*/ new Matrix4$1();
const _obj$1 = /*@__PURE__*/ new Object3D$1();
const _offset$1 = /*@__PURE__*/ new Vector3$1();
const _box$1$1 = /*@__PURE__*/ new Box3$1();
const _boxMorphTargets$1 = /*@__PURE__*/ new Box3$1();
const _vector$8$1 = /*@__PURE__*/ new Vector3$1();

class BufferGeometry$1 extends EventDispatcher$1 {

	constructor() {

		super();

		this.isBufferGeometry = true;

		Object.defineProperty(this, 'id', { value: _id$1++ });

		this.uuid = generateUUID$1();

		this.name = '';
		this.type = 'BufferGeometry';

		this.index = null;
		this.attributes = {};

		this.morphAttributes = {};
		this.morphTargetsRelative = false;

		this.groups = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		this.drawRange = { start: 0, count: Infinity };

		this.userData = {};

	}

	getIndex() {

		return this.index;

	}

	setIndex(index) {

		if (Array.isArray(index)) {

			this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute$1 : Uint16BufferAttribute$1)(index, 1);

		} else {

			this.index = index;

		}

		return this;

	}

	getAttribute(name) {

		return this.attributes[name];

	}

	setAttribute(name, attribute) {

		this.attributes[name] = attribute;

		return this;

	}

	deleteAttribute(name) {

		delete this.attributes[name];

		return this;

	}

	hasAttribute(name) {

		return this.attributes[name] !== undefined;

	}

	addGroup(start, count, materialIndex = 0) {

		this.groups.push({

			start: start,
			count: count,
			materialIndex: materialIndex

		});

	}

	clearGroups() {

		this.groups = [];

	}

	setDrawRange(start, count) {

		this.drawRange.start = start;
		this.drawRange.count = count;

	}

	applyMatrix4(matrix) {

		const position = this.attributes.position;

		if (position !== undefined) {

			position.applyMatrix4(matrix);

			position.needsUpdate = true;

		}

		const normal = this.attributes.normal;

		if (normal !== undefined) {

			const normalMatrix = new Matrix3$1().getNormalMatrix(matrix);

			normal.applyNormalMatrix(normalMatrix);

			normal.needsUpdate = true;

		}

		const tangent = this.attributes.tangent;

		if (tangent !== undefined) {

			tangent.transformDirection(matrix);

			tangent.needsUpdate = true;

		}

		if (this.boundingBox !== null) {

			this.computeBoundingBox();

		}

		if (this.boundingSphere !== null) {

			this.computeBoundingSphere();

		}

		return this;

	}

	applyQuaternion(q) {

		_m1$3.makeRotationFromQuaternion(q);

		this.applyMatrix4(_m1$3);

		return this;

	}

	rotateX(angle) {

		// rotate geometry around world x-axis

		_m1$3.makeRotationX(angle);

		this.applyMatrix4(_m1$3);

		return this;

	}

	rotateY(angle) {

		// rotate geometry around world y-axis

		_m1$3.makeRotationY(angle);

		this.applyMatrix4(_m1$3);

		return this;

	}

	rotateZ(angle) {

		// rotate geometry around world z-axis

		_m1$3.makeRotationZ(angle);

		this.applyMatrix4(_m1$3);

		return this;

	}

	translate(x, y, z) {

		// translate geometry

		_m1$3.makeTranslation(x, y, z);

		this.applyMatrix4(_m1$3);

		return this;

	}

	scale(x, y, z) {

		// scale geometry

		_m1$3.makeScale(x, y, z);

		this.applyMatrix4(_m1$3);

		return this;

	}

	lookAt(vector) {

		_obj$1.lookAt(vector);

		_obj$1.updateMatrix();

		this.applyMatrix4(_obj$1.matrix);

		return this;

	}

	center() {

		this.computeBoundingBox();

		this.boundingBox.getCenter(_offset$1).negate();

		this.translate(_offset$1.x, _offset$1.y, _offset$1.z);

		return this;

	}

	setFromPoints(points) {

		const position = [];

		for (let i = 0, l = points.length; i < l; i++) {

			const point = points[i];
			position.push(point.x, point.y, point.z || 0);

		}

		this.setAttribute('position', new Float32BufferAttribute$1(position, 3));

		return this;

	}

	computeBoundingBox() {

		if (this.boundingBox === null) {

			this.boundingBox = new Box3$1();

		}

		const position = this.attributes.position;
		const morphAttributesPosition = this.morphAttributes.position;

		if (position && position.isGLBufferAttribute) {

			console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);

			this.boundingBox.set(
				new Vector3$1(- Infinity, - Infinity, - Infinity),
				new Vector3$1(+ Infinity, + Infinity, + Infinity)
			);

			return;

		}

		if (position !== undefined) {

			this.boundingBox.setFromBufferAttribute(position);

			// process morph attributes if present

			if (morphAttributesPosition) {

				for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {

					const morphAttribute = morphAttributesPosition[i];
					_box$1$1.setFromBufferAttribute(morphAttribute);

					if (this.morphTargetsRelative) {

						_vector$8$1.addVectors(this.boundingBox.min, _box$1$1.min);
						this.boundingBox.expandByPoint(_vector$8$1);

						_vector$8$1.addVectors(this.boundingBox.max, _box$1$1.max);
						this.boundingBox.expandByPoint(_vector$8$1);

					} else {

						this.boundingBox.expandByPoint(_box$1$1.min);
						this.boundingBox.expandByPoint(_box$1$1.max);

					}

				}

			}

		} else {

			this.boundingBox.makeEmpty();

		}

		if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {

			console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);

		}

	}

	computeBoundingSphere() {

		if (this.boundingSphere === null) {

			this.boundingSphere = new Sphere$1();

		}

		const position = this.attributes.position;
		const morphAttributesPosition = this.morphAttributes.position;

		if (position && position.isGLBufferAttribute) {

			console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);

			this.boundingSphere.set(new Vector3$1(), Infinity);

			return;

		}

		if (position) {

			// first, find the center of the bounding sphere

			const center = this.boundingSphere.center;

			_box$1$1.setFromBufferAttribute(position);

			// process morph attributes if present

			if (morphAttributesPosition) {

				for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {

					const morphAttribute = morphAttributesPosition[i];
					_boxMorphTargets$1.setFromBufferAttribute(morphAttribute);

					if (this.morphTargetsRelative) {

						_vector$8$1.addVectors(_box$1$1.min, _boxMorphTargets$1.min);
						_box$1$1.expandByPoint(_vector$8$1);

						_vector$8$1.addVectors(_box$1$1.max, _boxMorphTargets$1.max);
						_box$1$1.expandByPoint(_vector$8$1);

					} else {

						_box$1$1.expandByPoint(_boxMorphTargets$1.min);
						_box$1$1.expandByPoint(_boxMorphTargets$1.max);

					}

				}

			}

			_box$1$1.getCenter(center);

			// second, try to find a boundingSphere with a radius smaller than the
			// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

			let maxRadiusSq = 0;

			for (let i = 0, il = position.count; i < il; i++) {

				_vector$8$1.fromBufferAttribute(position, i);

				maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8$1));

			}

			// process morph attributes if present

			if (morphAttributesPosition) {

				for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {

					const morphAttribute = morphAttributesPosition[i];
					const morphTargetsRelative = this.morphTargetsRelative;

					for (let j = 0, jl = morphAttribute.count; j < jl; j++) {

						_vector$8$1.fromBufferAttribute(morphAttribute, j);

						if (morphTargetsRelative) {

							_offset$1.fromBufferAttribute(position, j);
							_vector$8$1.add(_offset$1);

						}

						maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8$1));

					}

				}

			}

			this.boundingSphere.radius = Math.sqrt(maxRadiusSq);

			if (isNaN(this.boundingSphere.radius)) {

				console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);

			}

		}

	}

	computeTangents() {

		const index = this.index;
		const attributes = this.attributes;

		// based on http://www.terathon.com/code/tangent.html
		// (per vertex tangents)

		if (index === null ||
			attributes.position === undefined ||
			attributes.normal === undefined ||
			attributes.uv === undefined) {

			console.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');
			return;

		}

		const indices = index.array;
		const positions = attributes.position.array;
		const normals = attributes.normal.array;
		const uvs = attributes.uv.array;

		const nVertices = positions.length / 3;

		if (this.hasAttribute('tangent') === false) {

			this.setAttribute('tangent', new BufferAttribute$1(new Float32Array(4 * nVertices), 4));

		}

		const tangents = this.getAttribute('tangent').array;

		const tan1 = [], tan2 = [];

		for (let i = 0; i < nVertices; i++) {

			tan1[i] = new Vector3$1();
			tan2[i] = new Vector3$1();

		}

		const vA = new Vector3$1(),
			vB = new Vector3$1(),
			vC = new Vector3$1(),

			uvA = new Vector2$1(),
			uvB = new Vector2$1(),
			uvC = new Vector2$1(),

			sdir = new Vector3$1(),
			tdir = new Vector3$1();

		function handleTriangle(a, b, c) {

			vA.fromArray(positions, a * 3);
			vB.fromArray(positions, b * 3);
			vC.fromArray(positions, c * 3);

			uvA.fromArray(uvs, a * 2);
			uvB.fromArray(uvs, b * 2);
			uvC.fromArray(uvs, c * 2);

			vB.sub(vA);
			vC.sub(vA);

			uvB.sub(uvA);
			uvC.sub(uvA);

			const r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y);

			// silently ignore degenerate uv triangles having coincident or colinear vertices

			if (!isFinite(r)) return;

			sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, - uvB.y).multiplyScalar(r);
			tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, - uvC.x).multiplyScalar(r);

			tan1[a].add(sdir);
			tan1[b].add(sdir);
			tan1[c].add(sdir);

			tan2[a].add(tdir);
			tan2[b].add(tdir);
			tan2[c].add(tdir);

		}

		let groups = this.groups;

		if (groups.length === 0) {

			groups = [{
				start: 0,
				count: indices.length
			}];

		}

		for (let i = 0, il = groups.length; i < il; ++i) {

			const group = groups[i];

			const start = group.start;
			const count = group.count;

			for (let j = start, jl = start + count; j < jl; j += 3) {

				handleTriangle(
					indices[j + 0],
					indices[j + 1],
					indices[j + 2]
				);

			}

		}

		const tmp = new Vector3$1(), tmp2 = new Vector3$1();
		const n = new Vector3$1(), n2 = new Vector3$1();

		function handleVertex(v) {

			n.fromArray(normals, v * 3);
			n2.copy(n);

			const t = tan1[v];

			// Gram-Schmidt orthogonalize

			tmp.copy(t);
			tmp.sub(n.multiplyScalar(n.dot(t))).normalize();

			// Calculate handedness

			tmp2.crossVectors(n2, t);
			const test = tmp2.dot(tan2[v]);
			const w = (test < 0.0) ? - 1.0 : 1.0;

			tangents[v * 4] = tmp.x;
			tangents[v * 4 + 1] = tmp.y;
			tangents[v * 4 + 2] = tmp.z;
			tangents[v * 4 + 3] = w;

		}

		for (let i = 0, il = groups.length; i < il; ++i) {

			const group = groups[i];

			const start = group.start;
			const count = group.count;

			for (let j = start, jl = start + count; j < jl; j += 3) {

				handleVertex(indices[j + 0]);
				handleVertex(indices[j + 1]);
				handleVertex(indices[j + 2]);

			}

		}

	}

	computeVertexNormals() {

		const index = this.index;
		const positionAttribute = this.getAttribute('position');

		if (positionAttribute !== undefined) {

			let normalAttribute = this.getAttribute('normal');

			if (normalAttribute === undefined) {

				normalAttribute = new BufferAttribute$1(new Float32Array(positionAttribute.count * 3), 3);
				this.setAttribute('normal', normalAttribute);

			} else {

				// reset existing normals to zero

				for (let i = 0, il = normalAttribute.count; i < il; i++) {

					normalAttribute.setXYZ(i, 0, 0, 0);

				}

			}

			const pA = new Vector3$1(), pB = new Vector3$1(), pC = new Vector3$1();
			const nA = new Vector3$1(), nB = new Vector3$1(), nC = new Vector3$1();
			const cb = new Vector3$1(), ab = new Vector3$1();

			// indexed elements

			if (index) {

				for (let i = 0, il = index.count; i < il; i += 3) {

					const vA = index.getX(i + 0);
					const vB = index.getX(i + 1);
					const vC = index.getX(i + 2);

					pA.fromBufferAttribute(positionAttribute, vA);
					pB.fromBufferAttribute(positionAttribute, vB);
					pC.fromBufferAttribute(positionAttribute, vC);

					cb.subVectors(pC, pB);
					ab.subVectors(pA, pB);
					cb.cross(ab);

					nA.fromBufferAttribute(normalAttribute, vA);
					nB.fromBufferAttribute(normalAttribute, vB);
					nC.fromBufferAttribute(normalAttribute, vC);

					nA.add(cb);
					nB.add(cb);
					nC.add(cb);

					normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
					normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
					normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);

				}

			} else {

				// non-indexed elements (unconnected triangle soup)

				for (let i = 0, il = positionAttribute.count; i < il; i += 3) {

					pA.fromBufferAttribute(positionAttribute, i + 0);
					pB.fromBufferAttribute(positionAttribute, i + 1);
					pC.fromBufferAttribute(positionAttribute, i + 2);

					cb.subVectors(pC, pB);
					ab.subVectors(pA, pB);
					cb.cross(ab);

					normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);
					normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);
					normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);

				}

			}

			this.normalizeNormals();

			normalAttribute.needsUpdate = true;

		}

	}

	merge(geometry, offset) {

		if (!(geometry && geometry.isBufferGeometry)) {

			console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);
			return;

		}

		if (offset === undefined) {

			offset = 0;

			console.warn(
				'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '
				+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'
			);

		}

		const attributes = this.attributes;

		for (const key in attributes) {

			if (geometry.attributes[key] === undefined) continue;

			const attribute1 = attributes[key];
			const attributeArray1 = attribute1.array;

			const attribute2 = geometry.attributes[key];
			const attributeArray2 = attribute2.array;

			const attributeOffset = attribute2.itemSize * offset;
			const length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);

			for (let i = 0, j = attributeOffset; i < length; i++, j++) {

				attributeArray1[j] = attributeArray2[i];

			}

		}

		return this;

	}

	normalizeNormals() {

		const normals = this.attributes.normal;

		for (let i = 0, il = normals.count; i < il; i++) {

			_vector$8$1.fromBufferAttribute(normals, i);

			_vector$8$1.normalize();

			normals.setXYZ(i, _vector$8$1.x, _vector$8$1.y, _vector$8$1.z);

		}

	}

	toNonIndexed() {

		function convertBufferAttribute(attribute, indices) {

			const array = attribute.array;
			const itemSize = attribute.itemSize;
			const normalized = attribute.normalized;

			const array2 = new array.constructor(indices.length * itemSize);

			let index = 0, index2 = 0;

			for (let i = 0, l = indices.length; i < l; i++) {

				if (attribute.isInterleavedBufferAttribute) {

					index = indices[i] * attribute.data.stride + attribute.offset;

				} else {

					index = indices[i] * itemSize;

				}

				for (let j = 0; j < itemSize; j++) {

					array2[index2++] = array[index++];

				}

			}

			return new BufferAttribute$1(array2, itemSize, normalized);

		}

		//

		if (this.index === null) {

			console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');
			return this;

		}

		const geometry2 = new BufferGeometry$1();

		const indices = this.index.array;
		const attributes = this.attributes;

		// attributes

		for (const name in attributes) {

			const attribute = attributes[name];

			const newAttribute = convertBufferAttribute(attribute, indices);

			geometry2.setAttribute(name, newAttribute);

		}

		// morph attributes

		const morphAttributes = this.morphAttributes;

		for (const name in morphAttributes) {

			const morphArray = [];
			const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes

			for (let i = 0, il = morphAttribute.length; i < il; i++) {

				const attribute = morphAttribute[i];

				const newAttribute = convertBufferAttribute(attribute, indices);

				morphArray.push(newAttribute);

			}

			geometry2.morphAttributes[name] = morphArray;

		}

		geometry2.morphTargetsRelative = this.morphTargetsRelative;

		// groups

		const groups = this.groups;

		for (let i = 0, l = groups.length; i < l; i++) {

			const group = groups[i];
			geometry2.addGroup(group.start, group.count, group.materialIndex);

		}

		return geometry2;

	}

	toJSON() {

		const data = {
			metadata: {
				version: 4.5,
				type: 'BufferGeometry',
				generator: 'BufferGeometry.toJSON'
			}
		};

		// standard BufferGeometry serialization

		data.uuid = this.uuid;
		data.type = this.type;
		if (this.name !== '') data.name = this.name;
		if (Object.keys(this.userData).length > 0) data.userData = this.userData;

		if (this.parameters !== undefined) {

			const parameters = this.parameters;

			for (const key in parameters) {

				if (parameters[key] !== undefined) data[key] = parameters[key];

			}

			return data;

		}

		// for simplicity the code assumes attributes are not shared across geometries, see #15811

		data.data = { attributes: {} };

		const index = this.index;

		if (index !== null) {

			data.data.index = {
				type: index.array.constructor.name,
				array: Array.prototype.slice.call(index.array)
			};

		}

		const attributes = this.attributes;

		for (const key in attributes) {

			const attribute = attributes[key];

			data.data.attributes[key] = attribute.toJSON(data.data);

		}

		const morphAttributes = {};
		let hasMorphAttributes = false;

		for (const key in this.morphAttributes) {

			const attributeArray = this.morphAttributes[key];

			const array = [];

			for (let i = 0, il = attributeArray.length; i < il; i++) {

				const attribute = attributeArray[i];

				array.push(attribute.toJSON(data.data));

			}

			if (array.length > 0) {

				morphAttributes[key] = array;

				hasMorphAttributes = true;

			}

		}

		if (hasMorphAttributes) {

			data.data.morphAttributes = morphAttributes;
			data.data.morphTargetsRelative = this.morphTargetsRelative;

		}

		const groups = this.groups;

		if (groups.length > 0) {

			data.data.groups = JSON.parse(JSON.stringify(groups));

		}

		const boundingSphere = this.boundingSphere;

		if (boundingSphere !== null) {

			data.data.boundingSphere = {
				center: boundingSphere.center.toArray(),
				radius: boundingSphere.radius
			};

		}

		return data;

	}

	clone() {

		return new this.constructor().copy(this);

	}

	copy(source) {

		// reset

		this.index = null;
		this.attributes = {};
		this.morphAttributes = {};
		this.groups = [];
		this.boundingBox = null;
		this.boundingSphere = null;

		// used for storing cloned, shared data

		const data = {};

		// name

		this.name = source.name;

		// index

		const index = source.index;

		if (index !== null) {

			this.setIndex(index.clone(data));

		}

		// attributes

		const attributes = source.attributes;

		for (const name in attributes) {

			const attribute = attributes[name];
			this.setAttribute(name, attribute.clone(data));

		}

		// morph attributes

		const morphAttributes = source.morphAttributes;

		for (const name in morphAttributes) {

			const array = [];
			const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes

			for (let i = 0, l = morphAttribute.length; i < l; i++) {

				array.push(morphAttribute[i].clone(data));

			}

			this.morphAttributes[name] = array;

		}

		this.morphTargetsRelative = source.morphTargetsRelative;

		// groups

		const groups = source.groups;

		for (let i = 0, l = groups.length; i < l; i++) {

			const group = groups[i];
			this.addGroup(group.start, group.count, group.materialIndex);

		}

		// bounding box

		const boundingBox = source.boundingBox;

		if (boundingBox !== null) {

			this.boundingBox = boundingBox.clone();

		}

		// bounding sphere

		const boundingSphere = source.boundingSphere;

		if (boundingSphere !== null) {

			this.boundingSphere = boundingSphere.clone();

		}

		// draw range

		this.drawRange.start = source.drawRange.start;
		this.drawRange.count = source.drawRange.count;

		// user data

		this.userData = source.userData;

		// geometry generator parameters

		if (source.parameters !== undefined) this.parameters = Object.assign({}, source.parameters);

		return this;

	}

	dispose() {

		this.dispatchEvent({ type: 'dispose' });

	}

}

const _inverseMatrix$2$1 = /*@__PURE__*/ new Matrix4$1();
const _ray$2$1 = /*@__PURE__*/ new Ray$1();
const _sphere$3$1 = /*@__PURE__*/ new Sphere$1();

const _vA$1$1 = /*@__PURE__*/ new Vector3$1();
const _vB$1$1 = /*@__PURE__*/ new Vector3$1();
const _vC$1$1 = /*@__PURE__*/ new Vector3$1();

const _tempA$1 = /*@__PURE__*/ new Vector3$1();
const _tempB$1 = /*@__PURE__*/ new Vector3$1();
const _tempC$1 = /*@__PURE__*/ new Vector3$1();

const _morphA$1 = /*@__PURE__*/ new Vector3$1();
const _morphB$1 = /*@__PURE__*/ new Vector3$1();
const _morphC$1 = /*@__PURE__*/ new Vector3$1();

const _uvA$1$1 = /*@__PURE__*/ new Vector2$1();
const _uvB$1$1 = /*@__PURE__*/ new Vector2$1();
const _uvC$1$1 = /*@__PURE__*/ new Vector2$1();

const _intersectionPoint$1 = /*@__PURE__*/ new Vector3$1();
const _intersectionPointWorld$1 = /*@__PURE__*/ new Vector3$1();

class Mesh$1 extends Object3D$1 {

	constructor(geometry = new BufferGeometry$1(), material = new MeshBasicMaterial$1()) {

		super();

		this.isMesh = true;

		this.type = 'Mesh';

		this.geometry = geometry;
		this.material = material;

		this.updateMorphTargets();

	}

	copy(source, recursive) {

		super.copy(source, recursive);

		if (source.morphTargetInfluences !== undefined) {

			this.morphTargetInfluences = source.morphTargetInfluences.slice();

		}

		if (source.morphTargetDictionary !== undefined) {

			this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);

		}

		this.material = source.material;
		this.geometry = source.geometry;

		return this;

	}

	updateMorphTargets() {

		const geometry = this.geometry;

		const morphAttributes = geometry.morphAttributes;
		const keys = Object.keys(morphAttributes);

		if (keys.length > 0) {

			const morphAttribute = morphAttributes[keys[0]];

			if (morphAttribute !== undefined) {

				this.morphTargetInfluences = [];
				this.morphTargetDictionary = {};

				for (let m = 0, ml = morphAttribute.length; m < ml; m++) {

					const name = morphAttribute[m].name || String(m);

					this.morphTargetInfluences.push(0);
					this.morphTargetDictionary[name] = m;

				}

			}

		}

	}

	raycast(raycaster, intersects) {

		const geometry = this.geometry;
		const material = this.material;
		const matrixWorld = this.matrixWorld;

		if (material === undefined) return;

		// Checking boundingSphere distance to ray

		if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

		_sphere$3$1.copy(geometry.boundingSphere);
		_sphere$3$1.applyMatrix4(matrixWorld);

		if (raycaster.ray.intersectsSphere(_sphere$3$1) === false) return;

		//

		_inverseMatrix$2$1.copy(matrixWorld).invert();
		_ray$2$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2$1);

		// Check boundingBox before continuing

		if (geometry.boundingBox !== null) {

			if (_ray$2$1.intersectsBox(geometry.boundingBox) === false) return;

		}

		let intersection;

		const index = geometry.index;
		const position = geometry.attributes.position;
		const morphPosition = geometry.morphAttributes.position;
		const morphTargetsRelative = geometry.morphTargetsRelative;
		const uv = geometry.attributes.uv;
		const uv2 = geometry.attributes.uv2;
		const groups = geometry.groups;
		const drawRange = geometry.drawRange;

		if (index !== null) {

			// indexed buffer geometry

			if (Array.isArray(material)) {

				for (let i = 0, il = groups.length; i < il; i++) {

					const group = groups[i];
					const groupMaterial = material[group.materialIndex];

					const start = Math.max(group.start, drawRange.start);
					const end = Math.min(index.count, Math.min((group.start + group.count), (drawRange.start + drawRange.count)));

					for (let j = start, jl = end; j < jl; j += 3) {

						const a = index.getX(j);
						const b = index.getX(j + 1);
						const c = index.getX(j + 2);

						intersection = checkBufferGeometryIntersection$1(this, groupMaterial, raycaster, _ray$2$1, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);

						if (intersection) {

							intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics
							intersection.face.materialIndex = group.materialIndex;
							intersects.push(intersection);

						}

					}

				}

			} else {

				const start = Math.max(0, drawRange.start);
				const end = Math.min(index.count, (drawRange.start + drawRange.count));

				for (let i = start, il = end; i < il; i += 3) {

					const a = index.getX(i);
					const b = index.getX(i + 1);
					const c = index.getX(i + 2);

					intersection = checkBufferGeometryIntersection$1(this, material, raycaster, _ray$2$1, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);

					if (intersection) {

						intersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics
						intersects.push(intersection);

					}

				}

			}

		} else if (position !== undefined) {

			// non-indexed buffer geometry

			if (Array.isArray(material)) {

				for (let i = 0, il = groups.length; i < il; i++) {

					const group = groups[i];
					const groupMaterial = material[group.materialIndex];

					const start = Math.max(group.start, drawRange.start);
					const end = Math.min(position.count, Math.min((group.start + group.count), (drawRange.start + drawRange.count)));

					for (let j = start, jl = end; j < jl; j += 3) {

						const a = j;
						const b = j + 1;
						const c = j + 2;

						intersection = checkBufferGeometryIntersection$1(this, groupMaterial, raycaster, _ray$2$1, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);

						if (intersection) {

							intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics
							intersection.face.materialIndex = group.materialIndex;
							intersects.push(intersection);

						}

					}

				}

			} else {

				const start = Math.max(0, drawRange.start);
				const end = Math.min(position.count, (drawRange.start + drawRange.count));

				for (let i = start, il = end; i < il; i += 3) {

					const a = i;
					const b = i + 1;
					const c = i + 2;

					intersection = checkBufferGeometryIntersection$1(this, material, raycaster, _ray$2$1, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);

					if (intersection) {

						intersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics
						intersects.push(intersection);

					}

				}

			}

		}

	}

}

function checkIntersection$1(object, material, raycaster, ray, pA, pB, pC, point) {

	let intersect;

	if (material.side === BackSide$1) {

		intersect = ray.intersectTriangle(pC, pB, pA, true, point);

	} else {

		intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide$1, point);

	}

	if (intersect === null) return null;

	_intersectionPointWorld$1.copy(point);
	_intersectionPointWorld$1.applyMatrix4(object.matrixWorld);

	const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld$1);

	if (distance < raycaster.near || distance > raycaster.far) return null;

	return {
		distance: distance,
		point: _intersectionPointWorld$1.clone(),
		object: object
	};

}

function checkBufferGeometryIntersection$1(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {

	_vA$1$1.fromBufferAttribute(position, a);
	_vB$1$1.fromBufferAttribute(position, b);
	_vC$1$1.fromBufferAttribute(position, c);

	const morphInfluences = object.morphTargetInfluences;

	if (morphPosition && morphInfluences) {

		_morphA$1.set(0, 0, 0);
		_morphB$1.set(0, 0, 0);
		_morphC$1.set(0, 0, 0);

		for (let i = 0, il = morphPosition.length; i < il; i++) {

			const influence = morphInfluences[i];
			const morphAttribute = morphPosition[i];

			if (influence === 0) continue;

			_tempA$1.fromBufferAttribute(morphAttribute, a);
			_tempB$1.fromBufferAttribute(morphAttribute, b);
			_tempC$1.fromBufferAttribute(morphAttribute, c);

			if (morphTargetsRelative) {

				_morphA$1.addScaledVector(_tempA$1, influence);
				_morphB$1.addScaledVector(_tempB$1, influence);
				_morphC$1.addScaledVector(_tempC$1, influence);

			} else {

				_morphA$1.addScaledVector(_tempA$1.sub(_vA$1$1), influence);
				_morphB$1.addScaledVector(_tempB$1.sub(_vB$1$1), influence);
				_morphC$1.addScaledVector(_tempC$1.sub(_vC$1$1), influence);

			}

		}

		_vA$1$1.add(_morphA$1);
		_vB$1$1.add(_morphB$1);
		_vC$1$1.add(_morphC$1);

	}

	if (object.isSkinnedMesh) {

		object.boneTransform(a, _vA$1$1);
		object.boneTransform(b, _vB$1$1);
		object.boneTransform(c, _vC$1$1);

	}

	const intersection = checkIntersection$1(object, material, raycaster, ray, _vA$1$1, _vB$1$1, _vC$1$1, _intersectionPoint$1);

	if (intersection) {

		if (uv) {

			_uvA$1$1.fromBufferAttribute(uv, a);
			_uvB$1$1.fromBufferAttribute(uv, b);
			_uvC$1$1.fromBufferAttribute(uv, c);

			intersection.uv = Triangle$1.getUV(_intersectionPoint$1, _vA$1$1, _vB$1$1, _vC$1$1, _uvA$1$1, _uvB$1$1, _uvC$1$1, new Vector2$1());

		}

		if (uv2) {

			_uvA$1$1.fromBufferAttribute(uv2, a);
			_uvB$1$1.fromBufferAttribute(uv2, b);
			_uvC$1$1.fromBufferAttribute(uv2, c);

			intersection.uv2 = Triangle$1.getUV(_intersectionPoint$1, _vA$1$1, _vB$1$1, _vC$1$1, _uvA$1$1, _uvB$1$1, _uvC$1$1, new Vector2$1());

		}

		const face = {
			a: a,
			b: b,
			c: c,
			normal: new Vector3$1(),
			materialIndex: 0
		};

		Triangle$1.getNormal(_vA$1$1, _vB$1$1, _vC$1$1, face.normal);

		intersection.face = face;

	}

	return intersection;

}

class BoxGeometry$1 extends BufferGeometry$1 {

	constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {

		super();

		this.type = 'BoxGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		const scope = this;

		// segments

		widthSegments = Math.floor(widthSegments);
		heightSegments = Math.floor(heightSegments);
		depthSegments = Math.floor(depthSegments);

		// buffers

		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];

		// helper variables

		let numberOfVertices = 0;
		let groupStart = 0;

		// build each side of the box geometry

		buildPlane('z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0); // px
		buildPlane('z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1); // nx
		buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py
		buildPlane('x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3); // ny
		buildPlane('x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4); // pz
		buildPlane('x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5); // nz

		// build geometry

		this.setIndex(indices);
		this.setAttribute('position', new Float32BufferAttribute$1(vertices, 3));
		this.setAttribute('normal', new Float32BufferAttribute$1(normals, 3));
		this.setAttribute('uv', new Float32BufferAttribute$1(uvs, 2));

		function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {

			const segmentWidth = width / gridX;
			const segmentHeight = height / gridY;

			const widthHalf = width / 2;
			const heightHalf = height / 2;
			const depthHalf = depth / 2;

			const gridX1 = gridX + 1;
			const gridY1 = gridY + 1;

			let vertexCounter = 0;
			let groupCount = 0;

			const vector = new Vector3$1();

			// generate vertices, normals and uvs

			for (let iy = 0; iy < gridY1; iy++) {

				const y = iy * segmentHeight - heightHalf;

				for (let ix = 0; ix < gridX1; ix++) {

					const x = ix * segmentWidth - widthHalf;

					// set values to correct vector component

					vector[u] = x * udir;
					vector[v] = y * vdir;
					vector[w] = depthHalf;

					// now apply vector to vertex buffer

					vertices.push(vector.x, vector.y, vector.z);

					// set values to correct vector component

					vector[u] = 0;
					vector[v] = 0;
					vector[w] = depth > 0 ? 1 : - 1;

					// now apply vector to normal buffer

					normals.push(vector.x, vector.y, vector.z);

					// uvs

					uvs.push(ix / gridX);
					uvs.push(1 - (iy / gridY));

					// counters

					vertexCounter += 1;

				}

			}

			// indices

			// 1. you need three indices to draw a single face
			// 2. a single segment consists of two faces
			// 3. so we need to generate six (2*3) indices per segment

			for (let iy = 0; iy < gridY; iy++) {

				for (let ix = 0; ix < gridX; ix++) {

					const a = numberOfVertices + ix + gridX1 * iy;
					const b = numberOfVertices + ix + gridX1 * (iy + 1);
					const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
					const d = numberOfVertices + (ix + 1) + gridX1 * iy;

					// faces

					indices.push(a, b, d);
					indices.push(b, c, d);

					// increase counter

					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup(groupStart, groupCount, materialIndex);

			// calculate new start value for groups

			groupStart += groupCount;

			// update total number of vertices

			numberOfVertices += vertexCounter;

		}

	}

	static fromJSON(data) {

		return new BoxGeometry$1(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);

	}

}

/**
 * Uniform Utilities
 */

function cloneUniforms$1(src) {

	const dst = {};

	for (const u in src) {

		dst[u] = {};

		for (const p in src[u]) {

			const property = src[u][p];

			if (property && (property.isColor ||
				property.isMatrix3 || property.isMatrix4 ||
				property.isVector2 || property.isVector3 || property.isVector4 ||
				property.isTexture || property.isQuaternion)) {

				dst[u][p] = property.clone();

			} else if (Array.isArray(property)) {

				dst[u][p] = property.slice();

			} else {

				dst[u][p] = property;

			}

		}

	}

	return dst;

}

function mergeUniforms$1(uniforms) {

	const merged = {};

	for (let u = 0; u < uniforms.length; u++) {

		const tmp = cloneUniforms$1(uniforms[u]);

		for (const p in tmp) {

			merged[p] = tmp[p];

		}

	}

	return merged;

}

// Legacy

const UniformsUtils$1 = { clone: cloneUniforms$1, merge: mergeUniforms$1 };

var default_vertex$1 = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";

var default_fragment$1 = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

class ShaderMaterial$1 extends Material$1 {

	constructor(parameters) {

		super();

		this.isShaderMaterial = true;

		this.type = 'ShaderMaterial';

		this.defines = {};
		this.uniforms = {};

		this.vertexShader = default_vertex$1;
		this.fragmentShader = default_fragment$1;

		this.linewidth = 1;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false; // set to use scene fog
		this.lights = false; // set to use scene lights
		this.clipping = false; // set to use user-defined clipping planes

		this.extensions = {
			derivatives: false, // set to use derivatives
			fragDepth: false, // set to use fragment depth values
			drawBuffers: false, // set to use draw buffers
			shaderTextureLOD: false // set to use shader texture LOD
		};

		// When rendered geometry doesn't include these attributes but the material does,
		// use these default values in WebGL. This avoids errors when buffer data is missing.
		this.defaultAttributeValues = {
			'color': [1, 1, 1],
			'uv': [0, 0],
			'uv2': [0, 0]
		};

		this.index0AttributeName = undefined;
		this.uniformsNeedUpdate = false;

		this.glslVersion = null;

		if (parameters !== undefined) {

			if (parameters.attributes !== undefined) {

				console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');

			}

			this.setValues(parameters);

		}

	}

	copy(source) {

		super.copy(source);

		this.fragmentShader = source.fragmentShader;
		this.vertexShader = source.vertexShader;

		this.uniforms = cloneUniforms$1(source.uniforms);

		this.defines = Object.assign({}, source.defines);

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.fog = source.fog;
		this.lights = source.lights;
		this.clipping = source.clipping;

		this.extensions = Object.assign({}, source.extensions);

		this.glslVersion = source.glslVersion;

		return this;

	}

	toJSON(meta) {

		const data = super.toJSON(meta);

		data.glslVersion = this.glslVersion;
		data.uniforms = {};

		for (const name in this.uniforms) {

			const uniform = this.uniforms[name];
			const value = uniform.value;

			if (value && value.isTexture) {

				data.uniforms[name] = {
					type: 't',
					value: value.toJSON(meta).uuid
				};

			} else if (value && value.isColor) {

				data.uniforms[name] = {
					type: 'c',
					value: value.getHex()
				};

			} else if (value && value.isVector2) {

				data.uniforms[name] = {
					type: 'v2',
					value: value.toArray()
				};

			} else if (value && value.isVector3) {

				data.uniforms[name] = {
					type: 'v3',
					value: value.toArray()
				};

			} else if (value && value.isVector4) {

				data.uniforms[name] = {
					type: 'v4',
					value: value.toArray()
				};

			} else if (value && value.isMatrix3) {

				data.uniforms[name] = {
					type: 'm3',
					value: value.toArray()
				};

			} else if (value && value.isMatrix4) {

				data.uniforms[name] = {
					type: 'm4',
					value: value.toArray()
				};

			} else {

				data.uniforms[name] = {
					value: value
				};

				// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far

			}

		}

		if (Object.keys(this.defines).length > 0) data.defines = this.defines;

		data.vertexShader = this.vertexShader;
		data.fragmentShader = this.fragmentShader;

		const extensions = {};

		for (const key in this.extensions) {

			if (this.extensions[key] === true) extensions[key] = true;

		}

		if (Object.keys(extensions).length > 0) data.extensions = extensions;

		return data;

	}

}

class Camera$1 extends Object3D$1 {

	constructor() {

		super();

		this.isCamera = true;

		this.type = 'Camera';

		this.matrixWorldInverse = new Matrix4$1();

		this.projectionMatrix = new Matrix4$1();
		this.projectionMatrixInverse = new Matrix4$1();

	}

	copy(source, recursive) {

		super.copy(source, recursive);

		this.matrixWorldInverse.copy(source.matrixWorldInverse);

		this.projectionMatrix.copy(source.projectionMatrix);
		this.projectionMatrixInverse.copy(source.projectionMatrixInverse);

		return this;

	}

	getWorldDirection(target) {

		this.updateWorldMatrix(true, false);

		const e = this.matrixWorld.elements;

		return target.set(- e[8], - e[9], - e[10]).normalize();

	}

	updateMatrixWorld(force) {

		super.updateMatrixWorld(force);

		this.matrixWorldInverse.copy(this.matrixWorld).invert();

	}

	updateWorldMatrix(updateParents, updateChildren) {

		super.updateWorldMatrix(updateParents, updateChildren);

		this.matrixWorldInverse.copy(this.matrixWorld).invert();

	}

	clone() {

		return new this.constructor().copy(this);

	}

}

class PerspectiveCamera$1 extends Camera$1 {

	constructor(fov = 50, aspect = 1, near = 0.1, far = 2000) {

		super();

		this.isPerspectiveCamera = true;

		this.type = 'PerspectiveCamera';

		this.fov = fov;
		this.zoom = 1;

		this.near = near;
		this.far = far;
		this.focus = 10;

		this.aspect = aspect;
		this.view = null;

		this.filmGauge = 35;	// width of the film (default in millimeters)
		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

		this.updateProjectionMatrix();

	}

	copy(source, recursive) {

		super.copy(source, recursive);

		this.fov = source.fov;
		this.zoom = source.zoom;

		this.near = source.near;
		this.far = source.far;
		this.focus = source.focus;

		this.aspect = source.aspect;
		this.view = source.view === null ? null : Object.assign({}, source.view);

		this.filmGauge = source.filmGauge;
		this.filmOffset = source.filmOffset;

		return this;

	}

	/**
	 * Sets the FOV by focal length in respect to the current .filmGauge.
	 *
	 * The default film gauge is 35, so that the focal length can be specified for
	 * a 35mm (full frame) camera.
	 *
	 * Values for focal length and film gauge must have the same unit.
	 */
	setFocalLength(focalLength) {

		/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */
		const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

		this.fov = RAD2DEG$1 * 2 * Math.atan(vExtentSlope);
		this.updateProjectionMatrix();

	}

	/**
	 * Calculates the focal length from the current .fov and .filmGauge.
	 */
	getFocalLength() {

		const vExtentSlope = Math.tan(DEG2RAD$1 * 0.5 * this.fov);

		return 0.5 * this.getFilmHeight() / vExtentSlope;

	}

	getEffectiveFOV() {

		return RAD2DEG$1 * 2 * Math.atan(
			Math.tan(DEG2RAD$1 * 0.5 * this.fov) / this.zoom);

	}

	getFilmWidth() {

		// film not completely covered in portrait format (aspect < 1)
		return this.filmGauge * Math.min(this.aspect, 1);

	}

	getFilmHeight() {

		// film not completely covered in landscape format (aspect > 1)
		return this.filmGauge / Math.max(this.aspect, 1);

	}

	/**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   const w = 1920;
	 *   const h = 1080;
	 *   const fullWidth = w * 3;
	 *   const fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */
	setViewOffset(fullWidth, fullHeight, x, y, width, height) {

		this.aspect = fullWidth / fullHeight;

		if (this.view === null) {

			this.view = {
				enabled: true,
				fullWidth: 1,
				fullHeight: 1,
				offsetX: 0,
				offsetY: 0,
				width: 1,
				height: 1
			};

		}

		this.view.enabled = true;
		this.view.fullWidth = fullWidth;
		this.view.fullHeight = fullHeight;
		this.view.offsetX = x;
		this.view.offsetY = y;
		this.view.width = width;
		this.view.height = height;

		this.updateProjectionMatrix();

	}

	clearViewOffset() {

		if (this.view !== null) {

			this.view.enabled = false;

		}

		this.updateProjectionMatrix();

	}

	updateProjectionMatrix() {

		const near = this.near;
		let top = near * Math.tan(DEG2RAD$1 * 0.5 * this.fov) / this.zoom;
		let height = 2 * top;
		let width = this.aspect * height;
		let left = - 0.5 * width;
		const view = this.view;

		if (this.view !== null && this.view.enabled) {

			const fullWidth = view.fullWidth,
				fullHeight = view.fullHeight;

			left += view.offsetX * width / fullWidth;
			top -= view.offsetY * height / fullHeight;
			width *= view.width / fullWidth;
			height *= view.height / fullHeight;

		}

		const skew = this.filmOffset;
		if (skew !== 0) left += near * skew / this.getFilmWidth();

		this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);

		this.projectionMatrixInverse.copy(this.projectionMatrix).invert();

	}

	toJSON(meta) {

		const data = super.toJSON(meta);

		data.object.fov = this.fov;
		data.object.zoom = this.zoom;

		data.object.near = this.near;
		data.object.far = this.far;
		data.object.focus = this.focus;

		data.object.aspect = this.aspect;

		if (this.view !== null) data.object.view = Object.assign({}, this.view);

		data.object.filmGauge = this.filmGauge;
		data.object.filmOffset = this.filmOffset;

		return data;

	}

}

const fov$1 = 90, aspect$2 = 1;

class CubeCamera$1 extends Object3D$1 {

	constructor(near, far, renderTarget) {

		super();

		this.type = 'CubeCamera';

		if (renderTarget.isWebGLCubeRenderTarget !== true) {

			console.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');
			return;

		}

		this.renderTarget = renderTarget;

		const cameraPX = new PerspectiveCamera$1(fov$1, aspect$2, near, far);
		cameraPX.layers = this.layers;
		cameraPX.up.set(0, - 1, 0);
		cameraPX.lookAt(new Vector3$1(1, 0, 0));
		this.add(cameraPX);

		const cameraNX = new PerspectiveCamera$1(fov$1, aspect$2, near, far);
		cameraNX.layers = this.layers;
		cameraNX.up.set(0, - 1, 0);
		cameraNX.lookAt(new Vector3$1(- 1, 0, 0));
		this.add(cameraNX);

		const cameraPY = new PerspectiveCamera$1(fov$1, aspect$2, near, far);
		cameraPY.layers = this.layers;
		cameraPY.up.set(0, 0, 1);
		cameraPY.lookAt(new Vector3$1(0, 1, 0));
		this.add(cameraPY);

		const cameraNY = new PerspectiveCamera$1(fov$1, aspect$2, near, far);
		cameraNY.layers = this.layers;
		cameraNY.up.set(0, 0, - 1);
		cameraNY.lookAt(new Vector3$1(0, - 1, 0));
		this.add(cameraNY);

		const cameraPZ = new PerspectiveCamera$1(fov$1, aspect$2, near, far);
		cameraPZ.layers = this.layers;
		cameraPZ.up.set(0, - 1, 0);
		cameraPZ.lookAt(new Vector3$1(0, 0, 1));
		this.add(cameraPZ);

		const cameraNZ = new PerspectiveCamera$1(fov$1, aspect$2, near, far);
		cameraNZ.layers = this.layers;
		cameraNZ.up.set(0, - 1, 0);
		cameraNZ.lookAt(new Vector3$1(0, 0, - 1));
		this.add(cameraNZ);

	}

	update(renderer, scene) {

		if (this.parent === null) this.updateMatrixWorld();

		const renderTarget = this.renderTarget;

		const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;

		const currentRenderTarget = renderer.getRenderTarget();

		const currentToneMapping = renderer.toneMapping;
		const currentXrEnabled = renderer.xr.enabled;

		renderer.toneMapping = NoToneMapping$1;
		renderer.xr.enabled = false;

		const generateMipmaps = renderTarget.texture.generateMipmaps;

		renderTarget.texture.generateMipmaps = false;

		renderer.setRenderTarget(renderTarget, 0);
		renderer.render(scene, cameraPX);

		renderer.setRenderTarget(renderTarget, 1);
		renderer.render(scene, cameraNX);

		renderer.setRenderTarget(renderTarget, 2);
		renderer.render(scene, cameraPY);

		renderer.setRenderTarget(renderTarget, 3);
		renderer.render(scene, cameraNY);

		renderer.setRenderTarget(renderTarget, 4);
		renderer.render(scene, cameraPZ);

		renderTarget.texture.generateMipmaps = generateMipmaps;

		renderer.setRenderTarget(renderTarget, 5);
		renderer.render(scene, cameraNZ);

		renderer.setRenderTarget(currentRenderTarget);

		renderer.toneMapping = currentToneMapping;
		renderer.xr.enabled = currentXrEnabled;

		renderTarget.texture.needsPMREMUpdate = true;

	}

}

class CubeTexture$1 extends Texture$1 {

	constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {

		images = images !== undefined ? images : [];
		mapping = mapping !== undefined ? mapping : CubeReflectionMapping$1;

		super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);

		this.isCubeTexture = true;

		this.flipY = false;

	}

	get images() {

		return this.image;

	}

	set images(value) {

		this.image = value;

	}

}

class WebGLCubeRenderTarget$1 extends WebGLRenderTarget$1 {

	constructor(size, options = {}) {

		super(size, size, options);

		this.isWebGLCubeRenderTarget = true;

		const image = { width: size, height: size, depth: 1 };
		const images = [image, image, image, image, image, image];

		this.texture = new CubeTexture$1(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);

		// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
		// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
		// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.

		// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
		// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
		// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).

		this.texture.isRenderTargetTexture = true;

		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter$1;

	}

	fromEquirectangularTexture(renderer, texture) {

		this.texture.type = texture.type;
		this.texture.encoding = texture.encoding;

		this.texture.generateMipmaps = texture.generateMipmaps;
		this.texture.minFilter = texture.minFilter;
		this.texture.magFilter = texture.magFilter;

		const shader = {

			uniforms: {
				tEquirect: { value: null },
			},

			vertexShader: /* glsl */`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,

			fragmentShader: /* glsl */`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
		};

		const geometry = new BoxGeometry$1(5, 5, 5);

		const material = new ShaderMaterial$1({

			name: 'CubemapFromEquirect',

			uniforms: cloneUniforms$1(shader.uniforms),
			vertexShader: shader.vertexShader,
			fragmentShader: shader.fragmentShader,
			side: BackSide$1,
			blending: NoBlending$1

		});

		material.uniforms.tEquirect.value = texture;

		const mesh = new Mesh$1(geometry, material);

		const currentMinFilter = texture.minFilter;

		// Avoid blurred poles
		if (texture.minFilter === LinearMipmapLinearFilter$1) texture.minFilter = LinearFilter$1;

		const camera = new CubeCamera$1(1, 10, this);
		camera.update(renderer, mesh);

		texture.minFilter = currentMinFilter;

		mesh.geometry.dispose();
		mesh.material.dispose();

		return this;

	}

	clear(renderer, color, depth, stencil) {

		const currentRenderTarget = renderer.getRenderTarget();

		for (let i = 0; i < 6; i++) {

			renderer.setRenderTarget(this, i);

			renderer.clear(color, depth, stencil);

		}

		renderer.setRenderTarget(currentRenderTarget);

	}

}

const _vector1$1 = /*@__PURE__*/ new Vector3$1();
const _vector2$2 = /*@__PURE__*/ new Vector3$1();
const _normalMatrix$1 = /*@__PURE__*/ new Matrix3$1();

class Plane$1 {

	constructor(normal = new Vector3$1(1, 0, 0), constant = 0) {

		this.isPlane = true;

		// normal is assumed to be normalized

		this.normal = normal;
		this.constant = constant;

	}

	set(normal, constant) {

		this.normal.copy(normal);
		this.constant = constant;

		return this;

	}

	setComponents(x, y, z, w) {

		this.normal.set(x, y, z);
		this.constant = w;

		return this;

	}

	setFromNormalAndCoplanarPoint(normal, point) {

		this.normal.copy(normal);
		this.constant = - point.dot(this.normal);

		return this;

	}

	setFromCoplanarPoints(a, b, c) {

		const normal = _vector1$1.subVectors(c, b).cross(_vector2$2.subVectors(a, b)).normalize();

		// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

		this.setFromNormalAndCoplanarPoint(normal, a);

		return this;

	}

	copy(plane) {

		this.normal.copy(plane.normal);
		this.constant = plane.constant;

		return this;

	}

	normalize() {

		// Note: will lead to a divide by zero if the plane is invalid.

		const inverseNormalLength = 1.0 / this.normal.length();
		this.normal.multiplyScalar(inverseNormalLength);
		this.constant *= inverseNormalLength;

		return this;

	}

	negate() {

		this.constant *= - 1;
		this.normal.negate();

		return this;

	}

	distanceToPoint(point) {

		return this.normal.dot(point) + this.constant;

	}

	distanceToSphere(sphere) {

		return this.distanceToPoint(sphere.center) - sphere.radius;

	}

	projectPoint(point, target) {

		return target.copy(this.normal).multiplyScalar(- this.distanceToPoint(point)).add(point);

	}

	intersectLine(line, target) {

		const direction = line.delta(_vector1$1);

		const denominator = this.normal.dot(direction);

		if (denominator === 0) {

			// line is coplanar, return origin
			if (this.distanceToPoint(line.start) === 0) {

				return target.copy(line.start);

			}

			// Unsure if this is the correct method to handle this case.
			return null;

		}

		const t = - (line.start.dot(this.normal) + this.constant) / denominator;

		if (t < 0 || t > 1) {

			return null;

		}

		return target.copy(direction).multiplyScalar(t).add(line.start);

	}

	intersectsLine(line) {

		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

		const startSign = this.distanceToPoint(line.start);
		const endSign = this.distanceToPoint(line.end);

		return (startSign < 0 && endSign > 0) || (endSign < 0 && startSign > 0);

	}

	intersectsBox(box) {

		return box.intersectsPlane(this);

	}

	intersectsSphere(sphere) {

		return sphere.intersectsPlane(this);

	}

	coplanarPoint(target) {

		return target.copy(this.normal).multiplyScalar(- this.constant);

	}

	applyMatrix4(matrix, optionalNormalMatrix) {

		const normalMatrix = optionalNormalMatrix || _normalMatrix$1.getNormalMatrix(matrix);

		const referencePoint = this.coplanarPoint(_vector1$1).applyMatrix4(matrix);

		const normal = this.normal.applyMatrix3(normalMatrix).normalize();

		this.constant = - referencePoint.dot(normal);

		return this;

	}

	translate(offset) {

		this.constant -= offset.dot(this.normal);

		return this;

	}

	equals(plane) {

		return plane.normal.equals(this.normal) && (plane.constant === this.constant);

	}

	clone() {

		return new this.constructor().copy(this);

	}

}

const _sphere$2$1 = /*@__PURE__*/ new Sphere$1();
const _vector$7$1 = /*@__PURE__*/ new Vector3$1();

class Frustum$1 {

	constructor(p0 = new Plane$1(), p1 = new Plane$1(), p2 = new Plane$1(), p3 = new Plane$1(), p4 = new Plane$1(), p5 = new Plane$1()) {

		this.planes = [p0, p1, p2, p3, p4, p5];

	}

	set(p0, p1, p2, p3, p4, p5) {

		const planes = this.planes;

		planes[0].copy(p0);
		planes[1].copy(p1);
		planes[2].copy(p2);
		planes[3].copy(p3);
		planes[4].copy(p4);
		planes[5].copy(p5);

		return this;

	}

	copy(frustum) {

		const planes = this.planes;

		for (let i = 0; i < 6; i++) {

			planes[i].copy(frustum.planes[i]);

		}

		return this;

	}

	setFromProjectionMatrix(m) {

		const planes = this.planes;
		const me = m.elements;
		const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
		const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
		const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
		const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];

		planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
		planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
		planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
		planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
		planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
		planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();

		return this;

	}

	intersectsObject(object) {

		const geometry = object.geometry;

		if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

		_sphere$2$1.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);

		return this.intersectsSphere(_sphere$2$1);

	}

	intersectsSprite(sprite) {

		_sphere$2$1.center.set(0, 0, 0);
		_sphere$2$1.radius = 0.7071067811865476;
		_sphere$2$1.applyMatrix4(sprite.matrixWorld);

		return this.intersectsSphere(_sphere$2$1);

	}

	intersectsSphere(sphere) {

		const planes = this.planes;
		const center = sphere.center;
		const negRadius = - sphere.radius;

		for (let i = 0; i < 6; i++) {

			const distance = planes[i].distanceToPoint(center);

			if (distance < negRadius) {

				return false;

			}

		}

		return true;

	}

	intersectsBox(box) {

		const planes = this.planes;

		for (let i = 0; i < 6; i++) {

			const plane = planes[i];

			// corner at max distance

			_vector$7$1.x = plane.normal.x > 0 ? box.max.x : box.min.x;
			_vector$7$1.y = plane.normal.y > 0 ? box.max.y : box.min.y;
			_vector$7$1.z = plane.normal.z > 0 ? box.max.z : box.min.z;

			if (plane.distanceToPoint(_vector$7$1) < 0) {

				return false;

			}

		}

		return true;

	}

	containsPoint(point) {

		const planes = this.planes;

		for (let i = 0; i < 6; i++) {

			if (planes[i].distanceToPoint(point) < 0) {

				return false;

			}

		}

		return true;

	}

	clone() {

		return new this.constructor().copy(this);

	}

}

function WebGLAnimation$1() {

	let context = null;
	let isAnimating = false;
	let animationLoop = null;
	let requestId = null;

	function onAnimationFrame(time, frame) {

		animationLoop(time, frame);

		requestId = context.requestAnimationFrame(onAnimationFrame);

	}

	return {

		start: function () {

			if (isAnimating === true) return;
			if (animationLoop === null) return;

			requestId = context.requestAnimationFrame(onAnimationFrame);

			isAnimating = true;

		},

		stop: function () {

			context.cancelAnimationFrame(requestId);

			isAnimating = false;

		},

		setAnimationLoop: function (callback) {

			animationLoop = callback;

		},

		setContext: function (value) {

			context = value;

		}

	};

}

function WebGLAttributes$1(gl, capabilities) {

	const isWebGL2 = capabilities.isWebGL2;

	const buffers = new WeakMap();

	function createBuffer(attribute, bufferType) {

		const array = attribute.array;
		const usage = attribute.usage;

		const buffer = gl.createBuffer();

		gl.bindBuffer(bufferType, buffer);
		gl.bufferData(bufferType, array, usage);

		attribute.onUploadCallback();

		let type;

		if (array instanceof Float32Array) {

			type = 5126;

		} else if (array instanceof Uint16Array) {

			if (attribute.isFloat16BufferAttribute) {

				if (isWebGL2) {

					type = 5131;

				} else {

					throw new Error('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');

				}

			} else {

				type = 5123;

			}

		} else if (array instanceof Int16Array) {

			type = 5122;

		} else if (array instanceof Uint32Array) {

			type = 5125;

		} else if (array instanceof Int32Array) {

			type = 5124;

		} else if (array instanceof Int8Array) {

			type = 5120;

		} else if (array instanceof Uint8Array) {

			type = 5121;

		} else if (array instanceof Uint8ClampedArray) {

			type = 5121;

		} else {

			throw new Error('THREE.WebGLAttributes: Unsupported buffer data format: ' + array);

		}

		return {
			buffer: buffer,
			type: type,
			bytesPerElement: array.BYTES_PER_ELEMENT,
			version: attribute.version
		};

	}

	function updateBuffer(buffer, attribute, bufferType) {

		const array = attribute.array;
		const updateRange = attribute.updateRange;

		gl.bindBuffer(bufferType, buffer);

		if (updateRange.count === - 1) {

			// Not using update ranges

			gl.bufferSubData(bufferType, 0, array);

		} else {

			if (isWebGL2) {

				gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
					array, updateRange.offset, updateRange.count);

			} else {

				gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
					array.subarray(updateRange.offset, updateRange.offset + updateRange.count));

			}

			updateRange.count = - 1; // reset range

		}

	}

	//

	function get(attribute) {

		if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;

		return buffers.get(attribute);

	}

	function remove(attribute) {

		if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;

		const data = buffers.get(attribute);

		if (data) {

			gl.deleteBuffer(data.buffer);

			buffers.delete(attribute);

		}

	}

	function update(attribute, bufferType) {

		if (attribute.isGLBufferAttribute) {

			const cached = buffers.get(attribute);

			if (!cached || cached.version < attribute.version) {

				buffers.set(attribute, {
					buffer: attribute.buffer,
					type: attribute.type,
					bytesPerElement: attribute.elementSize,
					version: attribute.version
				});

			}

			return;

		}

		if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;

		const data = buffers.get(attribute);

		if (data === undefined) {

			buffers.set(attribute, createBuffer(attribute, bufferType));

		} else if (data.version < attribute.version) {

			updateBuffer(data.buffer, attribute, bufferType);

			data.version = attribute.version;

		}

	}

	return {

		get: get,
		remove: remove,
		update: update

	};

}

class PlaneGeometry$1 extends BufferGeometry$1 {

	constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {

		super();
		this.type = 'PlaneGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		const width_half = width / 2;
		const height_half = height / 2;

		const gridX = Math.floor(widthSegments);
		const gridY = Math.floor(heightSegments);

		const gridX1 = gridX + 1;
		const gridY1 = gridY + 1;

		const segment_width = width / gridX;
		const segment_height = height / gridY;

		//

		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];

		for (let iy = 0; iy < gridY1; iy++) {

			const y = iy * segment_height - height_half;

			for (let ix = 0; ix < gridX1; ix++) {

				const x = ix * segment_width - width_half;

				vertices.push(x, - y, 0);

				normals.push(0, 0, 1);

				uvs.push(ix / gridX);
				uvs.push(1 - (iy / gridY));

			}

		}

		for (let iy = 0; iy < gridY; iy++) {

			for (let ix = 0; ix < gridX; ix++) {

				const a = ix + gridX1 * iy;
				const b = ix + gridX1 * (iy + 1);
				const c = (ix + 1) + gridX1 * (iy + 1);
				const d = (ix + 1) + gridX1 * iy;

				indices.push(a, b, d);
				indices.push(b, c, d);

			}

		}

		this.setIndex(indices);
		this.setAttribute('position', new Float32BufferAttribute$1(vertices, 3));
		this.setAttribute('normal', new Float32BufferAttribute$1(normals, 3));
		this.setAttribute('uv', new Float32BufferAttribute$1(uvs, 2));

	}

	static fromJSON(data) {

		return new PlaneGeometry$1(data.width, data.height, data.widthSegments, data.heightSegments);

	}

}

var alphamap_fragment$1 = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";

var alphamap_pars_fragment$1 = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

var alphatest_fragment$1 = "#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif";

var alphatest_pars_fragment$1 = "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";

var aomap_fragment$1 = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";

var aomap_pars_fragment$1 = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

var begin_vertex$1 = "vec3 transformed = vec3( position );";

var beginnormal_vertex$1 = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";

var bsdfs$1 = "vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\n#ifdef USE_IRIDESCENCE\nvec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = mix(F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence);\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\n#endif\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif";

var iridescence_fragment = "#ifdef USE_IRIDESCENCE\nconst mat3 XYZ_TO_REC709 = mat3(\n    3.2404542, -0.9692660,  0.0556434,\n   -1.5371385,  1.8760108, -0.2040259,\n   -0.4985314,  0.0415560,  1.0572252\n);\nvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n   vec3 sqrtF0 = sqrt( fresnel0 );\n   return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n}\nvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n   return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n}\nfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n   return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n}\nvec3 evalSensitivity( float OPD, vec3 shift ) {\n   float phase = 2.0 * PI * OPD * 1.0e-9;\n   vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n   vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n   vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n   vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( -pow2( phase ) * var );\n   xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[0] ) * exp( -4.5282e+09 * pow2( phase ) );\n   xyz /= 1.0685e-7;\n   vec3 srgb = XYZ_TO_REC709 * xyz;\n   return srgb;\n}\nvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n   vec3 I;\n   float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n   float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n   float cosTheta2Sq = 1.0 - sinTheta2Sq;\n   if ( cosTheta2Sq < 0.0 ) {\n       return vec3( 1.0 );\n   }\n   float cosTheta2 = sqrt( cosTheta2Sq );\n   float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n   float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n   float R21 = R12;\n   float T121 = 1.0 - R12;\n   float phi12 = 0.0;\n   if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n   float phi21 = PI - phi12;\n   vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );   vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n   vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n   vec3 phi23 = vec3( 0.0 );\n   if ( baseIOR[0] < iridescenceIOR ) phi23[0] = PI;\n   if ( baseIOR[1] < iridescenceIOR ) phi23[1] = PI;\n   if ( baseIOR[2] < iridescenceIOR ) phi23[2] = PI;\n   float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n   vec3 phi = vec3( phi21 ) + phi23;\n   vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n   vec3 r123 = sqrt( R123 );\n   vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n   vec3 C0 = R12 + Rs;\n   I = C0;\n   vec3 Cm = Rs - T121;\n   for ( int m = 1; m <= 2; ++m ) {\n       Cm *= r123;\n       vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n       I += Cm * Sm;\n   }\n   return max( I, vec3( 0.0 ) );\n}\n#endif";

var bumpmap_pars_fragment$1 = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";

var clipping_planes_fragment$1 = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";

var clipping_planes_pars_fragment$1 = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";

var clipping_planes_pars_vertex$1 = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";

var clipping_planes_vertex$1 = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";

var color_fragment$1 = "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";

var color_pars_fragment$1 = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";

var color_pars_vertex$1 = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";

var color_vertex$1 = "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";

var common$1 = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";

var cube_uv_reflection_fragment$1 = "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";

var defaultnormal_vertex$1 = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";

var displacementmap_pars_vertex$1 = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";

var displacementmap_vertex$1 = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";

var emissivemap_fragment$1 = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";

var emissivemap_pars_fragment$1 = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";

var encodings_fragment$1 = "gl_FragColor = linearToOutputTexel( gl_FragColor );";

var encodings_pars_fragment$1 = "vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";

var envmap_fragment$1 = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";

var envmap_common_pars_fragment$1 = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";

var envmap_pars_fragment$1 = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";

var envmap_pars_vertex$1 = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";

var envmap_vertex$1 = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";

var fog_vertex$1 = "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";

var fog_pars_vertex$1 = "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";

var fog_fragment$1 = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";

var fog_pars_fragment$1 = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

var gradientmap_pars_fragment$1 = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";

var lightmap_fragment$1 = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";

var lightmap_pars_fragment$1 = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

var lights_lambert_vertex$1 = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif";

var lights_pars_begin$1 = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";

var envmap_physical_pars_fragment$1 = "#if defined( USE_ENVMAP )\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif";

var lights_toon_fragment$1 = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";

var lights_toon_pars_fragment$1 = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";

var lights_phong_fragment$1 = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";

var lights_phong_pars_fragment$1 = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";

var lights_physical_fragment$1 = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif";

var lights_physical_pars_fragment$1 = "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );\n\t#else\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";

var lights_fragment_begin$1 = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\nfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\nif ( material.iridescenceThickness == 0.0 ) {\n\tmaterial.iridescence = 0.0;\n} else {\n\tmaterial.iridescence = saturate( material.iridescence );\n}\nif ( material.iridescence > 0.0 ) {\n\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";

var lights_fragment_maps$1 = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";

var lights_fragment_end$1 = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";

var logdepthbuf_fragment$1 = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

var logdepthbuf_pars_fragment$1 = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";

var logdepthbuf_pars_vertex$1 = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";

var logdepthbuf_vertex$1 = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";

var map_fragment$1 = "#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";

var map_pars_fragment$1 = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";

var map_particle_fragment$1 = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";

var map_particle_pars_fragment$1 = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

var metalnessmap_fragment$1 = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";

var metalnessmap_pars_fragment$1 = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

var morphcolor_vertex = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif";

var morphnormal_vertex$1 = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif";

var morphtarget_pars_vertex$1 = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif";

var morphtarget_vertex$1 = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif";

var normal_fragment_begin$1 = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";

var normal_fragment_maps$1 = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";

var normal_pars_fragment$1 = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

var normal_pars_vertex$1 = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

var normal_vertex$1 = "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";

var normalmap_pars_fragment$1 = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif";

var clearcoat_normal_fragment_begin$1 = "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";

var clearcoat_normal_fragment_maps$1 = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif";

var clearcoat_pars_fragment$1 = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";

var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif";

var output_fragment$1 = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";

var packing$1 = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";

var premultiplied_alpha_fragment$1 = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";

var project_vertex$1 = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";

var dithering_fragment$1 = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";

var dithering_pars_fragment$1 = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";

var roughnessmap_fragment$1 = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";

var roughnessmap_pars_fragment$1 = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

var shadowmap_pars_fragment$1 = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";

var shadowmap_pars_vertex$1 = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";

var shadowmap_vertex$1 = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";

var shadowmask_pars_fragment$1 = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";

var skinbase_vertex$1 = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

var skinning_pars_vertex$1 = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tfloat j = i * 4.0;\n\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\ty = dy * ( y + 0.5 );\n\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\treturn bone;\n\t}\n#endif";

var skinning_vertex$1 = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";

var skinnormal_vertex$1 = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";

var specularmap_fragment$1 = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

var specularmap_pars_fragment$1 = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

var tonemapping_fragment$1 = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";

var tonemapping_pars_fragment$1 = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";

var transmission_fragment$1 = "#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif";

var transmission_pars_fragment$1 = "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef texture2DLodEXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif";

var uv_pars_fragment$1 = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";

var uv_pars_vertex$1 = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";

var uv_vertex$1 = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";

var uv2_pars_fragment$1 = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

var uv2_pars_vertex$1 = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";

var uv2_vertex$1 = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";

var worldpos_vertex$1 = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";

const vertex$g$1 = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";

const fragment$g$1 = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tgl_FragColor = vec4( mix( pow( gl_FragColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), gl_FragColor.rgb * 0.0773993808, vec3( lessThanEqual( gl_FragColor.rgb, vec3( 0.04045 ) ) ) ), gl_FragColor.w );\n\t#endif\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

const vertex$f$1 = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

const fragment$f$1 = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

const vertex$e$1 = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";

const fragment$e$1 = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";

const vertex$d$1 = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";

const fragment$d$1 = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";

const vertex$c$1 = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";

const fragment$c$1 = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

const vertex$b$1 = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

const fragment$b$1 = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

const vertex$a$1 = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";

const fragment$a$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$9$1 = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

const fragment$9$1 = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$8$1 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";

const fragment$8$1 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$7$1 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";

const fragment$7$1 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";

const vertex$6$1 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

const fragment$6$1 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$5$1 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";

const fragment$5$1 = "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$4$1 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

const fragment$4$1 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$3$1 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";

const fragment$3$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

const vertex$2$1 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

const fragment$2$1 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

const vertex$1$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

const fragment$1$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

const ShaderChunk$1 = {
	alphamap_fragment: alphamap_fragment$1,
	alphamap_pars_fragment: alphamap_pars_fragment$1,
	alphatest_fragment: alphatest_fragment$1,
	alphatest_pars_fragment: alphatest_pars_fragment$1,
	aomap_fragment: aomap_fragment$1,
	aomap_pars_fragment: aomap_pars_fragment$1,
	begin_vertex: begin_vertex$1,
	beginnormal_vertex: beginnormal_vertex$1,
	bsdfs: bsdfs$1,
	iridescence_fragment: iridescence_fragment,
	bumpmap_pars_fragment: bumpmap_pars_fragment$1,
	clipping_planes_fragment: clipping_planes_fragment$1,
	clipping_planes_pars_fragment: clipping_planes_pars_fragment$1,
	clipping_planes_pars_vertex: clipping_planes_pars_vertex$1,
	clipping_planes_vertex: clipping_planes_vertex$1,
	color_fragment: color_fragment$1,
	color_pars_fragment: color_pars_fragment$1,
	color_pars_vertex: color_pars_vertex$1,
	color_vertex: color_vertex$1,
	common: common$1,
	cube_uv_reflection_fragment: cube_uv_reflection_fragment$1,
	defaultnormal_vertex: defaultnormal_vertex$1,
	displacementmap_pars_vertex: displacementmap_pars_vertex$1,
	displacementmap_vertex: displacementmap_vertex$1,
	emissivemap_fragment: emissivemap_fragment$1,
	emissivemap_pars_fragment: emissivemap_pars_fragment$1,
	encodings_fragment: encodings_fragment$1,
	encodings_pars_fragment: encodings_pars_fragment$1,
	envmap_fragment: envmap_fragment$1,
	envmap_common_pars_fragment: envmap_common_pars_fragment$1,
	envmap_pars_fragment: envmap_pars_fragment$1,
	envmap_pars_vertex: envmap_pars_vertex$1,
	envmap_physical_pars_fragment: envmap_physical_pars_fragment$1,
	envmap_vertex: envmap_vertex$1,
	fog_vertex: fog_vertex$1,
	fog_pars_vertex: fog_pars_vertex$1,
	fog_fragment: fog_fragment$1,
	fog_pars_fragment: fog_pars_fragment$1,
	gradientmap_pars_fragment: gradientmap_pars_fragment$1,
	lightmap_fragment: lightmap_fragment$1,
	lightmap_pars_fragment: lightmap_pars_fragment$1,
	lights_lambert_vertex: lights_lambert_vertex$1,
	lights_pars_begin: lights_pars_begin$1,
	lights_toon_fragment: lights_toon_fragment$1,
	lights_toon_pars_fragment: lights_toon_pars_fragment$1,
	lights_phong_fragment: lights_phong_fragment$1,
	lights_phong_pars_fragment: lights_phong_pars_fragment$1,
	lights_physical_fragment: lights_physical_fragment$1,
	lights_physical_pars_fragment: lights_physical_pars_fragment$1,
	lights_fragment_begin: lights_fragment_begin$1,
	lights_fragment_maps: lights_fragment_maps$1,
	lights_fragment_end: lights_fragment_end$1,
	logdepthbuf_fragment: logdepthbuf_fragment$1,
	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment$1,
	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex$1,
	logdepthbuf_vertex: logdepthbuf_vertex$1,
	map_fragment: map_fragment$1,
	map_pars_fragment: map_pars_fragment$1,
	map_particle_fragment: map_particle_fragment$1,
	map_particle_pars_fragment: map_particle_pars_fragment$1,
	metalnessmap_fragment: metalnessmap_fragment$1,
	metalnessmap_pars_fragment: metalnessmap_pars_fragment$1,
	morphcolor_vertex: morphcolor_vertex,
	morphnormal_vertex: morphnormal_vertex$1,
	morphtarget_pars_vertex: morphtarget_pars_vertex$1,
	morphtarget_vertex: morphtarget_vertex$1,
	normal_fragment_begin: normal_fragment_begin$1,
	normal_fragment_maps: normal_fragment_maps$1,
	normal_pars_fragment: normal_pars_fragment$1,
	normal_pars_vertex: normal_pars_vertex$1,
	normal_vertex: normal_vertex$1,
	normalmap_pars_fragment: normalmap_pars_fragment$1,
	clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin$1,
	clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps$1,
	clearcoat_pars_fragment: clearcoat_pars_fragment$1,
	iridescence_pars_fragment: iridescence_pars_fragment,
	output_fragment: output_fragment$1,
	packing: packing$1,
	premultiplied_alpha_fragment: premultiplied_alpha_fragment$1,
	project_vertex: project_vertex$1,
	dithering_fragment: dithering_fragment$1,
	dithering_pars_fragment: dithering_pars_fragment$1,
	roughnessmap_fragment: roughnessmap_fragment$1,
	roughnessmap_pars_fragment: roughnessmap_pars_fragment$1,
	shadowmap_pars_fragment: shadowmap_pars_fragment$1,
	shadowmap_pars_vertex: shadowmap_pars_vertex$1,
	shadowmap_vertex: shadowmap_vertex$1,
	shadowmask_pars_fragment: shadowmask_pars_fragment$1,
	skinbase_vertex: skinbase_vertex$1,
	skinning_pars_vertex: skinning_pars_vertex$1,
	skinning_vertex: skinning_vertex$1,
	skinnormal_vertex: skinnormal_vertex$1,
	specularmap_fragment: specularmap_fragment$1,
	specularmap_pars_fragment: specularmap_pars_fragment$1,
	tonemapping_fragment: tonemapping_fragment$1,
	tonemapping_pars_fragment: tonemapping_pars_fragment$1,
	transmission_fragment: transmission_fragment$1,
	transmission_pars_fragment: transmission_pars_fragment$1,
	uv_pars_fragment: uv_pars_fragment$1,
	uv_pars_vertex: uv_pars_vertex$1,
	uv_vertex: uv_vertex$1,
	uv2_pars_fragment: uv2_pars_fragment$1,
	uv2_pars_vertex: uv2_pars_vertex$1,
	uv2_vertex: uv2_vertex$1,
	worldpos_vertex: worldpos_vertex$1,

	background_vert: vertex$g$1,
	background_frag: fragment$g$1,
	cube_vert: vertex$f$1,
	cube_frag: fragment$f$1,
	depth_vert: vertex$e$1,
	depth_frag: fragment$e$1,
	distanceRGBA_vert: vertex$d$1,
	distanceRGBA_frag: fragment$d$1,
	equirect_vert: vertex$c$1,
	equirect_frag: fragment$c$1,
	linedashed_vert: vertex$b$1,
	linedashed_frag: fragment$b$1,
	meshbasic_vert: vertex$a$1,
	meshbasic_frag: fragment$a$1,
	meshlambert_vert: vertex$9$1,
	meshlambert_frag: fragment$9$1,
	meshmatcap_vert: vertex$8$1,
	meshmatcap_frag: fragment$8$1,
	meshnormal_vert: vertex$7$1,
	meshnormal_frag: fragment$7$1,
	meshphong_vert: vertex$6$1,
	meshphong_frag: fragment$6$1,
	meshphysical_vert: vertex$5$1,
	meshphysical_frag: fragment$5$1,
	meshtoon_vert: vertex$4$1,
	meshtoon_frag: fragment$4$1,
	points_vert: vertex$3$1,
	points_frag: fragment$3$1,
	shadow_vert: vertex$2$1,
	shadow_frag: fragment$2$1,
	sprite_vert: vertex$1$1,
	sprite_frag: fragment$1$1
};

/**
 * Uniforms library for shared webgl shaders
 */

const UniformsLib$1 = {

	common: {

		diffuse: { value: new Color$1(0xffffff) },
		opacity: { value: 1.0 },

		map: { value: null },
		uvTransform: { value: new Matrix3$1() },
		uv2Transform: { value: new Matrix3$1() },

		alphaMap: { value: null },
		alphaTest: { value: 0 }

	},

	specularmap: {

		specularMap: { value: null },

	},

	envmap: {

		envMap: { value: null },
		flipEnvMap: { value: - 1 },
		reflectivity: { value: 1.0 }, // basic, lambert, phong
		ior: { value: 1.5 }, // physical
		refractionRatio: { value: 0.98 } // basic, lambert, phong

	},

	aomap: {

		aoMap: { value: null },
		aoMapIntensity: { value: 1 }

	},

	lightmap: {

		lightMap: { value: null },
		lightMapIntensity: { value: 1 }

	},

	emissivemap: {

		emissiveMap: { value: null }

	},

	bumpmap: {

		bumpMap: { value: null },
		bumpScale: { value: 1 }

	},

	normalmap: {

		normalMap: { value: null },
		normalScale: { value: new Vector2$1(1, 1) }

	},

	displacementmap: {

		displacementMap: { value: null },
		displacementScale: { value: 1 },
		displacementBias: { value: 0 }

	},

	roughnessmap: {

		roughnessMap: { value: null }

	},

	metalnessmap: {

		metalnessMap: { value: null }

	},

	gradientmap: {

		gradientMap: { value: null }

	},

	fog: {

		fogDensity: { value: 0.00025 },
		fogNear: { value: 1 },
		fogFar: { value: 2000 },
		fogColor: { value: new Color$1(0xffffff) }

	},

	lights: {

		ambientLightColor: { value: [] },

		lightProbe: { value: [] },

		directionalLights: {
			value: [], properties: {
				direction: {},
				color: {}
			}
		},

		directionalLightShadows: {
			value: [], properties: {
				shadowBias: {},
				shadowNormalBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			}
		},

		directionalShadowMap: { value: [] },
		directionalShadowMatrix: { value: [] },

		spotLights: {
			value: [], properties: {
				color: {},
				position: {},
				direction: {},
				distance: {},
				coneCos: {},
				penumbraCos: {},
				decay: {}
			}
		},

		spotLightShadows: {
			value: [], properties: {
				shadowBias: {},
				shadowNormalBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			}
		},

		spotShadowMap: { value: [] },
		spotShadowMatrix: { value: [] },

		pointLights: {
			value: [], properties: {
				color: {},
				position: {},
				decay: {},
				distance: {}
			}
		},

		pointLightShadows: {
			value: [], properties: {
				shadowBias: {},
				shadowNormalBias: {},
				shadowRadius: {},
				shadowMapSize: {},
				shadowCameraNear: {},
				shadowCameraFar: {}
			}
		},

		pointShadowMap: { value: [] },
		pointShadowMatrix: { value: [] },

		hemisphereLights: {
			value: [], properties: {
				direction: {},
				skyColor: {},
				groundColor: {}
			}
		},

		// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
		rectAreaLights: {
			value: [], properties: {
				color: {},
				position: {},
				width: {},
				height: {}
			}
		},

		ltc_1: { value: null },
		ltc_2: { value: null }

	},

	points: {

		diffuse: { value: new Color$1(0xffffff) },
		opacity: { value: 1.0 },
		size: { value: 1.0 },
		scale: { value: 1.0 },
		map: { value: null },
		alphaMap: { value: null },
		alphaTest: { value: 0 },
		uvTransform: { value: new Matrix3$1() }

	},

	sprite: {

		diffuse: { value: new Color$1(0xffffff) },
		opacity: { value: 1.0 },
		center: { value: new Vector2$1(0.5, 0.5) },
		rotation: { value: 0.0 },
		map: { value: null },
		alphaMap: { value: null },
		alphaTest: { value: 0 },
		uvTransform: { value: new Matrix3$1() }

	}

};

const ShaderLib$1 = {

	basic: {

		uniforms: mergeUniforms$1([
			UniformsLib$1.common,
			UniformsLib$1.specularmap,
			UniformsLib$1.envmap,
			UniformsLib$1.aomap,
			UniformsLib$1.lightmap,
			UniformsLib$1.fog
		]),

		vertexShader: ShaderChunk$1.meshbasic_vert,
		fragmentShader: ShaderChunk$1.meshbasic_frag

	},

	lambert: {

		uniforms: mergeUniforms$1([
			UniformsLib$1.common,
			UniformsLib$1.specularmap,
			UniformsLib$1.envmap,
			UniformsLib$1.aomap,
			UniformsLib$1.lightmap,
			UniformsLib$1.emissivemap,
			UniformsLib$1.fog,
			UniformsLib$1.lights,
			{
				emissive: { value: new Color$1(0x000000) }
			}
		]),

		vertexShader: ShaderChunk$1.meshlambert_vert,
		fragmentShader: ShaderChunk$1.meshlambert_frag

	},

	phong: {

		uniforms: mergeUniforms$1([
			UniformsLib$1.common,
			UniformsLib$1.specularmap,
			UniformsLib$1.envmap,
			UniformsLib$1.aomap,
			UniformsLib$1.lightmap,
			UniformsLib$1.emissivemap,
			UniformsLib$1.bumpmap,
			UniformsLib$1.normalmap,
			UniformsLib$1.displacementmap,
			UniformsLib$1.fog,
			UniformsLib$1.lights,
			{
				emissive: { value: new Color$1(0x000000) },
				specular: { value: new Color$1(0x111111) },
				shininess: { value: 30 }
			}
		]),

		vertexShader: ShaderChunk$1.meshphong_vert,
		fragmentShader: ShaderChunk$1.meshphong_frag

	},

	standard: {

		uniforms: mergeUniforms$1([
			UniformsLib$1.common,
			UniformsLib$1.envmap,
			UniformsLib$1.aomap,
			UniformsLib$1.lightmap,
			UniformsLib$1.emissivemap,
			UniformsLib$1.bumpmap,
			UniformsLib$1.normalmap,
			UniformsLib$1.displacementmap,
			UniformsLib$1.roughnessmap,
			UniformsLib$1.metalnessmap,
			UniformsLib$1.fog,
			UniformsLib$1.lights,
			{
				emissive: { value: new Color$1(0x000000) },
				roughness: { value: 1.0 },
				metalness: { value: 0.0 },
				envMapIntensity: { value: 1 } // temporary
			}
		]),

		vertexShader: ShaderChunk$1.meshphysical_vert,
		fragmentShader: ShaderChunk$1.meshphysical_frag

	},

	toon: {

		uniforms: mergeUniforms$1([
			UniformsLib$1.common,
			UniformsLib$1.aomap,
			UniformsLib$1.lightmap,
			UniformsLib$1.emissivemap,
			UniformsLib$1.bumpmap,
			UniformsLib$1.normalmap,
			UniformsLib$1.displacementmap,
			UniformsLib$1.gradientmap,
			UniformsLib$1.fog,
			UniformsLib$1.lights,
			{
				emissive: { value: new Color$1(0x000000) }
			}
		]),

		vertexShader: ShaderChunk$1.meshtoon_vert,
		fragmentShader: ShaderChunk$1.meshtoon_frag

	},

	matcap: {

		uniforms: mergeUniforms$1([
			UniformsLib$1.common,
			UniformsLib$1.bumpmap,
			UniformsLib$1.normalmap,
			UniformsLib$1.displacementmap,
			UniformsLib$1.fog,
			{
				matcap: { value: null }
			}
		]),

		vertexShader: ShaderChunk$1.meshmatcap_vert,
		fragmentShader: ShaderChunk$1.meshmatcap_frag

	},

	points: {

		uniforms: mergeUniforms$1([
			UniformsLib$1.points,
			UniformsLib$1.fog
		]),

		vertexShader: ShaderChunk$1.points_vert,
		fragmentShader: ShaderChunk$1.points_frag

	},

	dashed: {

		uniforms: mergeUniforms$1([
			UniformsLib$1.common,
			UniformsLib$1.fog,
			{
				scale: { value: 1 },
				dashSize: { value: 1 },
				totalSize: { value: 2 }
			}
		]),

		vertexShader: ShaderChunk$1.linedashed_vert,
		fragmentShader: ShaderChunk$1.linedashed_frag

	},

	depth: {

		uniforms: mergeUniforms$1([
			UniformsLib$1.common,
			UniformsLib$1.displacementmap
		]),

		vertexShader: ShaderChunk$1.depth_vert,
		fragmentShader: ShaderChunk$1.depth_frag

	},

	normal: {

		uniforms: mergeUniforms$1([
			UniformsLib$1.common,
			UniformsLib$1.bumpmap,
			UniformsLib$1.normalmap,
			UniformsLib$1.displacementmap,
			{
				opacity: { value: 1.0 }
			}
		]),

		vertexShader: ShaderChunk$1.meshnormal_vert,
		fragmentShader: ShaderChunk$1.meshnormal_frag

	},

	sprite: {

		uniforms: mergeUniforms$1([
			UniformsLib$1.sprite,
			UniformsLib$1.fog
		]),

		vertexShader: ShaderChunk$1.sprite_vert,
		fragmentShader: ShaderChunk$1.sprite_frag

	},

	background: {

		uniforms: {
			uvTransform: { value: new Matrix3$1() },
			t2D: { value: null },
		},

		vertexShader: ShaderChunk$1.background_vert,
		fragmentShader: ShaderChunk$1.background_frag

	},
	/* -------------------------------------------------------------------------
	//	Cube map shader
	 ------------------------------------------------------------------------- */

	cube: {

		uniforms: mergeUniforms$1([
			UniformsLib$1.envmap,
			{
				opacity: { value: 1.0 }
			}
		]),

		vertexShader: ShaderChunk$1.cube_vert,
		fragmentShader: ShaderChunk$1.cube_frag

	},

	equirect: {

		uniforms: {
			tEquirect: { value: null },
		},

		vertexShader: ShaderChunk$1.equirect_vert,
		fragmentShader: ShaderChunk$1.equirect_frag

	},

	distanceRGBA: {

		uniforms: mergeUniforms$1([
			UniformsLib$1.common,
			UniformsLib$1.displacementmap,
			{
				referencePosition: { value: new Vector3$1() },
				nearDistance: { value: 1 },
				farDistance: { value: 1000 }
			}
		]),

		vertexShader: ShaderChunk$1.distanceRGBA_vert,
		fragmentShader: ShaderChunk$1.distanceRGBA_frag

	},

	shadow: {

		uniforms: mergeUniforms$1([
			UniformsLib$1.lights,
			UniformsLib$1.fog,
			{
				color: { value: new Color$1(0x00000) },
				opacity: { value: 1.0 }
			},
		]),

		vertexShader: ShaderChunk$1.shadow_vert,
		fragmentShader: ShaderChunk$1.shadow_frag

	}

};

ShaderLib$1.physical = {

	uniforms: mergeUniforms$1([
		ShaderLib$1.standard.uniforms,
		{
			clearcoat: { value: 0 },
			clearcoatMap: { value: null },
			clearcoatRoughness: { value: 0 },
			clearcoatRoughnessMap: { value: null },
			clearcoatNormalScale: { value: new Vector2$1(1, 1) },
			clearcoatNormalMap: { value: null },
			iridescence: { value: 0 },
			iridescenceMap: { value: null },
			iridescenceIOR: { value: 1.3 },
			iridescenceThicknessMinimum: { value: 100 },
			iridescenceThicknessMaximum: { value: 400 },
			iridescenceThicknessMap: { value: null },
			sheen: { value: 0 },
			sheenColor: { value: new Color$1(0x000000) },
			sheenColorMap: { value: null },
			sheenRoughness: { value: 1 },
			sheenRoughnessMap: { value: null },
			transmission: { value: 0 },
			transmissionMap: { value: null },
			transmissionSamplerSize: { value: new Vector2$1() },
			transmissionSamplerMap: { value: null },
			thickness: { value: 0 },
			thicknessMap: { value: null },
			attenuationDistance: { value: 0 },
			attenuationColor: { value: new Color$1(0x000000) },
			specularIntensity: { value: 1 },
			specularIntensityMap: { value: null },
			specularColor: { value: new Color$1(1, 1, 1) },
			specularColorMap: { value: null },
		}
	]),

	vertexShader: ShaderChunk$1.meshphysical_vert,
	fragmentShader: ShaderChunk$1.meshphysical_frag

};

function WebGLBackground$1(renderer, cubemaps, state, objects, alpha, premultipliedAlpha) {

	const clearColor = new Color$1(0x000000);
	let clearAlpha = alpha === true ? 0 : 1;

	let planeMesh;
	let boxMesh;

	let currentBackground = null;
	let currentBackgroundVersion = 0;
	let currentTonemapping = null;

	function render(renderList, scene) {

		let forceClear = false;
		let background = scene.isScene === true ? scene.background : null;

		if (background && background.isTexture) {

			background = cubemaps.get(background);

		}

		// Ignore background in AR
		// TODO: Reconsider this.

		const xr = renderer.xr;
		const session = xr.getSession && xr.getSession();

		if (session && session.environmentBlendMode === 'additive') {

			background = null;

		}

		if (background === null) {

			setClear(clearColor, clearAlpha);

		} else if (background && background.isColor) {

			setClear(background, 1);
			forceClear = true;

		}

		if (renderer.autoClear || forceClear) {

			renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);

		}

		if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping$1)) {

			if (boxMesh === undefined) {

				boxMesh = new Mesh$1(
					new BoxGeometry$1(1, 1, 1),
					new ShaderMaterial$1({
						name: 'BackgroundCubeMaterial',
						uniforms: cloneUniforms$1(ShaderLib$1.cube.uniforms),
						vertexShader: ShaderLib$1.cube.vertexShader,
						fragmentShader: ShaderLib$1.cube.fragmentShader,
						side: BackSide$1,
						depthTest: false,
						depthWrite: false,
						fog: false
					})
				);

				boxMesh.geometry.deleteAttribute('normal');
				boxMesh.geometry.deleteAttribute('uv');

				boxMesh.onBeforeRender = function (renderer, scene, camera) {

					this.matrixWorld.copyPosition(camera.matrixWorld);

				};

				// enable code injection for non-built-in material
				Object.defineProperty(boxMesh.material, 'envMap', {

					get: function () {

						return this.uniforms.envMap.value;

					}

				});

				objects.update(boxMesh);

			}

			boxMesh.material.uniforms.envMap.value = background;
			boxMesh.material.uniforms.flipEnvMap.value = (background.isCubeTexture && background.isRenderTargetTexture === false) ? - 1 : 1;

			if (currentBackground !== background ||
				currentBackgroundVersion !== background.version ||
				currentTonemapping !== renderer.toneMapping) {

				boxMesh.material.needsUpdate = true;

				currentBackground = background;
				currentBackgroundVersion = background.version;
				currentTonemapping = renderer.toneMapping;

			}

			boxMesh.layers.enableAll();

			// push to the pre-sorted opaque render list
			renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);

		} else if (background && background.isTexture) {

			if (planeMesh === undefined) {

				planeMesh = new Mesh$1(
					new PlaneGeometry$1(2, 2),
					new ShaderMaterial$1({
						name: 'BackgroundMaterial',
						uniforms: cloneUniforms$1(ShaderLib$1.background.uniforms),
						vertexShader: ShaderLib$1.background.vertexShader,
						fragmentShader: ShaderLib$1.background.fragmentShader,
						side: FrontSide$1,
						depthTest: false,
						depthWrite: false,
						fog: false
					})
				);

				planeMesh.geometry.deleteAttribute('normal');

				// enable code injection for non-built-in material
				Object.defineProperty(planeMesh.material, 'map', {

					get: function () {

						return this.uniforms.t2D.value;

					}

				});

				objects.update(planeMesh);

			}

			planeMesh.material.uniforms.t2D.value = background;

			if (background.matrixAutoUpdate === true) {

				background.updateMatrix();

			}

			planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);

			if (currentBackground !== background ||
				currentBackgroundVersion !== background.version ||
				currentTonemapping !== renderer.toneMapping) {

				planeMesh.material.needsUpdate = true;

				currentBackground = background;
				currentBackgroundVersion = background.version;
				currentTonemapping = renderer.toneMapping;

			}

			planeMesh.layers.enableAll();

			// push to the pre-sorted opaque render list
			renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);

		}

	}

	function setClear(color, alpha) {

		state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);

	}

	return {

		getClearColor: function () {

			return clearColor;

		},
		setClearColor: function (color, alpha = 1) {

			clearColor.set(color);
			clearAlpha = alpha;
			setClear(clearColor, clearAlpha);

		},
		getClearAlpha: function () {

			return clearAlpha;

		},
		setClearAlpha: function (alpha) {

			clearAlpha = alpha;
			setClear(clearColor, clearAlpha);

		},
		render: render

	};

}

function WebGLBindingStates$1(gl, extensions, attributes, capabilities) {

	const maxVertexAttributes = gl.getParameter(34921);

	const extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');
	const vaoAvailable = capabilities.isWebGL2 || extension !== null;

	const bindingStates = {};

	const defaultState = createBindingState(null);
	let currentState = defaultState;
	let forceUpdate = false;

	function setup(object, material, program, geometry, index) {

		let updateBuffers = false;

		if (vaoAvailable) {

			const state = getBindingState(geometry, program, material);

			if (currentState !== state) {

				currentState = state;
				bindVertexArrayObject(currentState.object);

			}

			updateBuffers = needsUpdate(object, geometry, program, index);

			if (updateBuffers) saveCache(object, geometry, program, index);

		} else {

			const wireframe = (material.wireframe === true);

			if (currentState.geometry !== geometry.id ||
				currentState.program !== program.id ||
				currentState.wireframe !== wireframe) {

				currentState.geometry = geometry.id;
				currentState.program = program.id;
				currentState.wireframe = wireframe;

				updateBuffers = true;

			}

		}

		if (index !== null) {

			attributes.update(index, 34963);

		}

		if (updateBuffers || forceUpdate) {

			forceUpdate = false;

			setupVertexAttributes(object, material, program, geometry);

			if (index !== null) {

				gl.bindBuffer(34963, attributes.get(index).buffer);

			}

		}

	}

	function createVertexArrayObject() {

		if (capabilities.isWebGL2) return gl.createVertexArray();

		return extension.createVertexArrayOES();

	}

	function bindVertexArrayObject(vao) {

		if (capabilities.isWebGL2) return gl.bindVertexArray(vao);

		return extension.bindVertexArrayOES(vao);

	}

	function deleteVertexArrayObject(vao) {

		if (capabilities.isWebGL2) return gl.deleteVertexArray(vao);

		return extension.deleteVertexArrayOES(vao);

	}

	function getBindingState(geometry, program, material) {

		const wireframe = (material.wireframe === true);

		let programMap = bindingStates[geometry.id];

		if (programMap === undefined) {

			programMap = {};
			bindingStates[geometry.id] = programMap;

		}

		let stateMap = programMap[program.id];

		if (stateMap === undefined) {

			stateMap = {};
			programMap[program.id] = stateMap;

		}

		let state = stateMap[wireframe];

		if (state === undefined) {

			state = createBindingState(createVertexArrayObject());
			stateMap[wireframe] = state;

		}

		return state;

	}

	function createBindingState(vao) {

		const newAttributes = [];
		const enabledAttributes = [];
		const attributeDivisors = [];

		for (let i = 0; i < maxVertexAttributes; i++) {

			newAttributes[i] = 0;
			enabledAttributes[i] = 0;
			attributeDivisors[i] = 0;

		}

		return {

			// for backward compatibility on non-VAO support browser
			geometry: null,
			program: null,
			wireframe: false,

			newAttributes: newAttributes,
			enabledAttributes: enabledAttributes,
			attributeDivisors: attributeDivisors,
			object: vao,
			attributes: {},
			index: null

		};

	}

	function needsUpdate(object, geometry, program, index) {

		const cachedAttributes = currentState.attributes;
		const geometryAttributes = geometry.attributes;

		let attributesNum = 0;

		const programAttributes = program.getAttributes();

		for (const name in programAttributes) {

			const programAttribute = programAttributes[name];

			if (programAttribute.location >= 0) {

				const cachedAttribute = cachedAttributes[name];
				let geometryAttribute = geometryAttributes[name];

				if (geometryAttribute === undefined) {

					if (name === 'instanceMatrix' && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
					if (name === 'instanceColor' && object.instanceColor) geometryAttribute = object.instanceColor;

				}

				if (cachedAttribute === undefined) return true;

				if (cachedAttribute.attribute !== geometryAttribute) return true;

				if (geometryAttribute && cachedAttribute.data !== geometryAttribute.data) return true;

				attributesNum++;

			}

		}

		if (currentState.attributesNum !== attributesNum) return true;

		if (currentState.index !== index) return true;

		return false;

	}

	function saveCache(object, geometry, program, index) {

		const cache = {};
		const attributes = geometry.attributes;
		let attributesNum = 0;

		const programAttributes = program.getAttributes();

		for (const name in programAttributes) {

			const programAttribute = programAttributes[name];

			if (programAttribute.location >= 0) {

				let attribute = attributes[name];

				if (attribute === undefined) {

					if (name === 'instanceMatrix' && object.instanceMatrix) attribute = object.instanceMatrix;
					if (name === 'instanceColor' && object.instanceColor) attribute = object.instanceColor;

				}

				const data = {};
				data.attribute = attribute;

				if (attribute && attribute.data) {

					data.data = attribute.data;

				}

				cache[name] = data;

				attributesNum++;

			}

		}

		currentState.attributes = cache;
		currentState.attributesNum = attributesNum;

		currentState.index = index;

	}

	function initAttributes() {

		const newAttributes = currentState.newAttributes;

		for (let i = 0, il = newAttributes.length; i < il; i++) {

			newAttributes[i] = 0;

		}

	}

	function enableAttribute(attribute) {

		enableAttributeAndDivisor(attribute, 0);

	}

	function enableAttributeAndDivisor(attribute, meshPerAttribute) {

		const newAttributes = currentState.newAttributes;
		const enabledAttributes = currentState.enabledAttributes;
		const attributeDivisors = currentState.attributeDivisors;

		newAttributes[attribute] = 1;

		if (enabledAttributes[attribute] === 0) {

			gl.enableVertexAttribArray(attribute);
			enabledAttributes[attribute] = 1;

		}

		if (attributeDivisors[attribute] !== meshPerAttribute) {

			const extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');

			extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);
			attributeDivisors[attribute] = meshPerAttribute;

		}

	}

	function disableUnusedAttributes() {

		const newAttributes = currentState.newAttributes;
		const enabledAttributes = currentState.enabledAttributes;

		for (let i = 0, il = enabledAttributes.length; i < il; i++) {

			if (enabledAttributes[i] !== newAttributes[i]) {

				gl.disableVertexAttribArray(i);
				enabledAttributes[i] = 0;

			}

		}

	}

	function vertexAttribPointer(index, size, type, normalized, stride, offset) {

		if (capabilities.isWebGL2 === true && (type === 5124 || type === 5125)) {

			gl.vertexAttribIPointer(index, size, type, stride, offset);

		} else {

			gl.vertexAttribPointer(index, size, type, normalized, stride, offset);

		}

	}

	function setupVertexAttributes(object, material, program, geometry) {

		if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {

			if (extensions.get('ANGLE_instanced_arrays') === null) return;

		}

		initAttributes();

		const geometryAttributes = geometry.attributes;

		const programAttributes = program.getAttributes();

		const materialDefaultAttributeValues = material.defaultAttributeValues;

		for (const name in programAttributes) {

			const programAttribute = programAttributes[name];

			if (programAttribute.location >= 0) {

				let geometryAttribute = geometryAttributes[name];

				if (geometryAttribute === undefined) {

					if (name === 'instanceMatrix' && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
					if (name === 'instanceColor' && object.instanceColor) geometryAttribute = object.instanceColor;

				}

				if (geometryAttribute !== undefined) {

					const normalized = geometryAttribute.normalized;
					const size = geometryAttribute.itemSize;

					const attribute = attributes.get(geometryAttribute);

					// TODO Attribute may not be available on context restore

					if (attribute === undefined) continue;

					const buffer = attribute.buffer;
					const type = attribute.type;
					const bytesPerElement = attribute.bytesPerElement;

					if (geometryAttribute.isInterleavedBufferAttribute) {

						const data = geometryAttribute.data;
						const stride = data.stride;
						const offset = geometryAttribute.offset;

						if (data.isInstancedInterleavedBuffer) {

							for (let i = 0; i < programAttribute.locationSize; i++) {

								enableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);

							}

							if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {

								geometry._maxInstanceCount = data.meshPerAttribute * data.count;

							}

						} else {

							for (let i = 0; i < programAttribute.locationSize; i++) {

								enableAttribute(programAttribute.location + i);

							}

						}

						gl.bindBuffer(34962, buffer);

						for (let i = 0; i < programAttribute.locationSize; i++) {

							vertexAttribPointer(
								programAttribute.location + i,
								size / programAttribute.locationSize,
								type,
								normalized,
								stride * bytesPerElement,
								(offset + (size / programAttribute.locationSize) * i) * bytesPerElement
							);

						}

					} else {

						if (geometryAttribute.isInstancedBufferAttribute) {

							for (let i = 0; i < programAttribute.locationSize; i++) {

								enableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);

							}

							if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {

								geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

							}

						} else {

							for (let i = 0; i < programAttribute.locationSize; i++) {

								enableAttribute(programAttribute.location + i);

							}

						}

						gl.bindBuffer(34962, buffer);

						for (let i = 0; i < programAttribute.locationSize; i++) {

							vertexAttribPointer(
								programAttribute.location + i,
								size / programAttribute.locationSize,
								type,
								normalized,
								size * bytesPerElement,
								(size / programAttribute.locationSize) * i * bytesPerElement
							);

						}

					}

				} else if (materialDefaultAttributeValues !== undefined) {

					const value = materialDefaultAttributeValues[name];

					if (value !== undefined) {

						switch (value.length) {

							case 2:
								gl.vertexAttrib2fv(programAttribute.location, value);
								break;

							case 3:
								gl.vertexAttrib3fv(programAttribute.location, value);
								break;

							case 4:
								gl.vertexAttrib4fv(programAttribute.location, value);
								break;

							default:
								gl.vertexAttrib1fv(programAttribute.location, value);

						}

					}

				}

			}

		}

		disableUnusedAttributes();

	}

	function dispose() {

		reset();

		for (const geometryId in bindingStates) {

			const programMap = bindingStates[geometryId];

			for (const programId in programMap) {

				const stateMap = programMap[programId];

				for (const wireframe in stateMap) {

					deleteVertexArrayObject(stateMap[wireframe].object);

					delete stateMap[wireframe];

				}

				delete programMap[programId];

			}

			delete bindingStates[geometryId];

		}

	}

	function releaseStatesOfGeometry(geometry) {

		if (bindingStates[geometry.id] === undefined) return;

		const programMap = bindingStates[geometry.id];

		for (const programId in programMap) {

			const stateMap = programMap[programId];

			for (const wireframe in stateMap) {

				deleteVertexArrayObject(stateMap[wireframe].object);

				delete stateMap[wireframe];

			}

			delete programMap[programId];

		}

		delete bindingStates[geometry.id];

	}

	function releaseStatesOfProgram(program) {

		for (const geometryId in bindingStates) {

			const programMap = bindingStates[geometryId];

			if (programMap[program.id] === undefined) continue;

			const stateMap = programMap[program.id];

			for (const wireframe in stateMap) {

				deleteVertexArrayObject(stateMap[wireframe].object);

				delete stateMap[wireframe];

			}

			delete programMap[program.id];

		}

	}

	function reset() {

		resetDefaultState();
		forceUpdate = true;

		if (currentState === defaultState) return;

		currentState = defaultState;
		bindVertexArrayObject(currentState.object);

	}

	// for backward-compatibility

	function resetDefaultState() {

		defaultState.geometry = null;
		defaultState.program = null;
		defaultState.wireframe = false;

	}

	return {

		setup: setup,
		reset: reset,
		resetDefaultState: resetDefaultState,
		dispose: dispose,
		releaseStatesOfGeometry: releaseStatesOfGeometry,
		releaseStatesOfProgram: releaseStatesOfProgram,

		initAttributes: initAttributes,
		enableAttribute: enableAttribute,
		disableUnusedAttributes: disableUnusedAttributes

	};

}

function WebGLBufferRenderer$1(gl, extensions, info, capabilities) {

	const isWebGL2 = capabilities.isWebGL2;

	let mode;

	function setMode(value) {

		mode = value;

	}

	function render(start, count) {

		gl.drawArrays(mode, start, count);

		info.update(count, mode, 1);

	}

	function renderInstances(start, count, primcount) {

		if (primcount === 0) return;

		let extension, methodName;

		if (isWebGL2) {

			extension = gl;
			methodName = 'drawArraysInstanced';

		} else {

			extension = extensions.get('ANGLE_instanced_arrays');
			methodName = 'drawArraysInstancedANGLE';

			if (extension === null) {

				console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
				return;

			}

		}

		extension[methodName](mode, start, count, primcount);

		info.update(count, mode, primcount);

	}

	//

	this.setMode = setMode;
	this.render = render;
	this.renderInstances = renderInstances;

}

function WebGLCapabilities$1(gl, extensions, parameters) {

	let maxAnisotropy;

	function getMaxAnisotropy() {

		if (maxAnisotropy !== undefined) return maxAnisotropy;

		if (extensions.has('EXT_texture_filter_anisotropic') === true) {

			const extension = extensions.get('EXT_texture_filter_anisotropic');

			maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);

		} else {

			maxAnisotropy = 0;

		}

		return maxAnisotropy;

	}

	function getMaxPrecision(precision) {

		if (precision === 'highp') {

			if (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 &&
				gl.getShaderPrecisionFormat(35632, 36338).precision > 0) {

				return 'highp';

			}

			precision = 'mediump';

		}

		if (precision === 'mediump') {

			if (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 &&
				gl.getShaderPrecisionFormat(35632, 36337).precision > 0) {

				return 'mediump';

			}

		}

		return 'lowp';

	}

	const isWebGL2 = (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) ||
		(typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext);

	let precision = parameters.precision !== undefined ? parameters.precision : 'highp';
	const maxPrecision = getMaxPrecision(precision);

	if (maxPrecision !== precision) {

		console.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');
		precision = maxPrecision;

	}

	const drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');

	const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;

	const maxTextures = gl.getParameter(34930);
	const maxVertexTextures = gl.getParameter(35660);
	const maxTextureSize = gl.getParameter(3379);
	const maxCubemapSize = gl.getParameter(34076);

	const maxAttributes = gl.getParameter(34921);
	const maxVertexUniforms = gl.getParameter(36347);
	const maxVaryings = gl.getParameter(36348);
	const maxFragmentUniforms = gl.getParameter(36349);

	const vertexTextures = maxVertexTextures > 0;
	const floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');
	const floatVertexTextures = vertexTextures && floatFragmentTextures;

	const maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;

	return {

		isWebGL2: isWebGL2,

		drawBuffers: drawBuffers,

		getMaxAnisotropy: getMaxAnisotropy,
		getMaxPrecision: getMaxPrecision,

		precision: precision,
		logarithmicDepthBuffer: logarithmicDepthBuffer,

		maxTextures: maxTextures,
		maxVertexTextures: maxVertexTextures,
		maxTextureSize: maxTextureSize,
		maxCubemapSize: maxCubemapSize,

		maxAttributes: maxAttributes,
		maxVertexUniforms: maxVertexUniforms,
		maxVaryings: maxVaryings,
		maxFragmentUniforms: maxFragmentUniforms,

		vertexTextures: vertexTextures,
		floatFragmentTextures: floatFragmentTextures,
		floatVertexTextures: floatVertexTextures,

		maxSamples: maxSamples

	};

}

function WebGLClipping$1(properties) {

	const scope = this;

	let globalState = null,
		numGlobalPlanes = 0,
		localClippingEnabled = false,
		renderingShadows = false;

	const plane = new Plane$1(),
		viewNormalMatrix = new Matrix3$1(),

		uniform = { value: null, needsUpdate: false };

	this.uniform = uniform;
	this.numPlanes = 0;
	this.numIntersection = 0;

	this.init = function (planes, enableLocalClipping, camera) {

		const enabled =
			planes.length !== 0 ||
			enableLocalClipping ||
			// enable state of previous frame - the clipping code has to
			// run another frame in order to reset the state:
			numGlobalPlanes !== 0 ||
			localClippingEnabled;

		localClippingEnabled = enableLocalClipping;

		globalState = projectPlanes(planes, camera, 0);
		numGlobalPlanes = planes.length;

		return enabled;

	};

	this.beginShadows = function () {

		renderingShadows = true;
		projectPlanes(null);

	};

	this.endShadows = function () {

		renderingShadows = false;
		resetGlobalState();

	};

	this.setState = function (material, camera, useCache) {

		const planes = material.clippingPlanes,
			clipIntersection = material.clipIntersection,
			clipShadows = material.clipShadows;

		const materialProperties = properties.get(material);

		if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {

			// there's no local clipping

			if (renderingShadows) {

				// there's no global clipping

				projectPlanes(null);

			} else {

				resetGlobalState();

			}

		} else {

			const nGlobal = renderingShadows ? 0 : numGlobalPlanes,
				lGlobal = nGlobal * 4;

			let dstArray = materialProperties.clippingState || null;

			uniform.value = dstArray; // ensure unique state

			dstArray = projectPlanes(planes, camera, lGlobal, useCache);

			for (let i = 0; i !== lGlobal; ++i) {

				dstArray[i] = globalState[i];

			}

			materialProperties.clippingState = dstArray;
			this.numIntersection = clipIntersection ? this.numPlanes : 0;
			this.numPlanes += nGlobal;

		}


	};

	function resetGlobalState() {

		if (uniform.value !== globalState) {

			uniform.value = globalState;
			uniform.needsUpdate = numGlobalPlanes > 0;

		}

		scope.numPlanes = numGlobalPlanes;
		scope.numIntersection = 0;

	}

	function projectPlanes(planes, camera, dstOffset, skipTransform) {

		const nPlanes = planes !== null ? planes.length : 0;
		let dstArray = null;

		if (nPlanes !== 0) {

			dstArray = uniform.value;

			if (skipTransform !== true || dstArray === null) {

				const flatSize = dstOffset + nPlanes * 4,
					viewMatrix = camera.matrixWorldInverse;

				viewNormalMatrix.getNormalMatrix(viewMatrix);

				if (dstArray === null || dstArray.length < flatSize) {

					dstArray = new Float32Array(flatSize);

				}

				for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {

					plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);

					plane.normal.toArray(dstArray, i4);
					dstArray[i4 + 3] = plane.constant;

				}

			}

			uniform.value = dstArray;
			uniform.needsUpdate = true;

		}

		scope.numPlanes = nPlanes;
		scope.numIntersection = 0;

		return dstArray;

	}

}

function WebGLCubeMaps$1(renderer) {

	let cubemaps = new WeakMap();

	function mapTextureMapping(texture, mapping) {

		if (mapping === EquirectangularReflectionMapping$1) {

			texture.mapping = CubeReflectionMapping$1;

		} else if (mapping === EquirectangularRefractionMapping$1) {

			texture.mapping = CubeRefractionMapping$1;

		}

		return texture;

	}

	function get(texture) {

		if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {

			const mapping = texture.mapping;

			if (mapping === EquirectangularReflectionMapping$1 || mapping === EquirectangularRefractionMapping$1) {

				if (cubemaps.has(texture)) {

					const cubemap = cubemaps.get(texture).texture;
					return mapTextureMapping(cubemap, texture.mapping);

				} else {

					const image = texture.image;

					if (image && image.height > 0) {

						const renderTarget = new WebGLCubeRenderTarget$1(image.height / 2);
						renderTarget.fromEquirectangularTexture(renderer, texture);
						cubemaps.set(texture, renderTarget);

						texture.addEventListener('dispose', onTextureDispose);

						return mapTextureMapping(renderTarget.texture, texture.mapping);

					} else {

						// image not yet ready. try the conversion next frame

						return null;

					}

				}

			}

		}

		return texture;

	}

	function onTextureDispose(event) {

		const texture = event.target;

		texture.removeEventListener('dispose', onTextureDispose);

		const cubemap = cubemaps.get(texture);

		if (cubemap !== undefined) {

			cubemaps.delete(texture);
			cubemap.dispose();

		}

	}

	function dispose() {

		cubemaps = new WeakMap();

	}

	return {
		get: get,
		dispose: dispose
	};

}

class OrthographicCamera$1 extends Camera$1 {

	constructor(left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000) {

		super();

		this.isOrthographicCamera = true;

		this.type = 'OrthographicCamera';

		this.zoom = 1;
		this.view = null;

		this.left = left;
		this.right = right;
		this.top = top;
		this.bottom = bottom;

		this.near = near;
		this.far = far;

		this.updateProjectionMatrix();

	}

	copy(source, recursive) {

		super.copy(source, recursive);

		this.left = source.left;
		this.right = source.right;
		this.top = source.top;
		this.bottom = source.bottom;
		this.near = source.near;
		this.far = source.far;

		this.zoom = source.zoom;
		this.view = source.view === null ? null : Object.assign({}, source.view);

		return this;

	}

	setViewOffset(fullWidth, fullHeight, x, y, width, height) {

		if (this.view === null) {

			this.view = {
				enabled: true,
				fullWidth: 1,
				fullHeight: 1,
				offsetX: 0,
				offsetY: 0,
				width: 1,
				height: 1
			};

		}

		this.view.enabled = true;
		this.view.fullWidth = fullWidth;
		this.view.fullHeight = fullHeight;
		this.view.offsetX = x;
		this.view.offsetY = y;
		this.view.width = width;
		this.view.height = height;

		this.updateProjectionMatrix();

	}

	clearViewOffset() {

		if (this.view !== null) {

			this.view.enabled = false;

		}

		this.updateProjectionMatrix();

	}

	updateProjectionMatrix() {

		const dx = (this.right - this.left) / (2 * this.zoom);
		const dy = (this.top - this.bottom) / (2 * this.zoom);
		const cx = (this.right + this.left) / 2;
		const cy = (this.top + this.bottom) / 2;

		let left = cx - dx;
		let right = cx + dx;
		let top = cy + dy;
		let bottom = cy - dy;

		if (this.view !== null && this.view.enabled) {

			const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
			const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;

			left += scaleW * this.view.offsetX;
			right = left + scaleW * this.view.width;
			top -= scaleH * this.view.offsetY;
			bottom = top - scaleH * this.view.height;

		}

		this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);

		this.projectionMatrixInverse.copy(this.projectionMatrix).invert();

	}

	toJSON(meta) {

		const data = super.toJSON(meta);

		data.object.zoom = this.zoom;
		data.object.left = this.left;
		data.object.right = this.right;
		data.object.top = this.top;
		data.object.bottom = this.bottom;
		data.object.near = this.near;
		data.object.far = this.far;

		if (this.view !== null) data.object.view = Object.assign({}, this.view);

		return data;

	}

}

const LOD_MIN$1 = 4;

// The standard deviations (radians) associated with the extra mips. These are
// chosen to approximate a Trowbridge-Reitz distribution function times the
// geometric shadowing function. These sigma values squared must match the
// variance #defines in cube_uv_reflection_fragment.glsl.js.
const EXTRA_LOD_SIGMA$1 = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];

// The maximum length of the blur for loop. Smaller sigmas will use fewer
// samples and exit early, but not recompile the shader.
const MAX_SAMPLES$1 = 20;

const _flatCamera$1 = /*@__PURE__*/ new OrthographicCamera$1();
const _clearColor$1 = /*@__PURE__*/ new Color$1();
let _oldTarget$1 = null;

// Golden Ratio
const PHI$1 = (1 + Math.sqrt(5)) / 2;
const INV_PHI$1 = 1 / PHI$1;

// Vertices of a dodecahedron (except the opposites, which represent the
// same axis), used as axis directions evenly spread on a sphere.
const _axisDirections$1 = [
	/*@__PURE__*/ new Vector3$1(1, 1, 1),
	/*@__PURE__*/ new Vector3$1(- 1, 1, 1),
	/*@__PURE__*/ new Vector3$1(1, 1, - 1),
	/*@__PURE__*/ new Vector3$1(- 1, 1, - 1),
	/*@__PURE__*/ new Vector3$1(0, PHI$1, INV_PHI$1),
	/*@__PURE__*/ new Vector3$1(0, PHI$1, - INV_PHI$1),
	/*@__PURE__*/ new Vector3$1(INV_PHI$1, 0, PHI$1),
	/*@__PURE__*/ new Vector3$1(- INV_PHI$1, 0, PHI$1),
	/*@__PURE__*/ new Vector3$1(PHI$1, INV_PHI$1, 0),
	/*@__PURE__*/ new Vector3$1(- PHI$1, INV_PHI$1, 0)];

/**
 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
 * (PMREM) from a cubeMap environment texture. This allows different levels of
 * blur to be quickly accessed based on material roughness. It is packed into a
 * special CubeUV format that allows us to perform custom interpolation so that
 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
 * higher roughness levels. In this way we maintain resolution to smoothly
 * interpolate diffuse lighting while limiting sampling computation.
 *
 * Paper: Fast, Accurate Image-Based Lighting
 * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
*/

class PMREMGenerator$1 {

	constructor(renderer) {

		this._renderer = renderer;
		this._pingPongRenderTarget = null;

		this._lodMax = 0;
		this._cubeSize = 0;
		this._lodPlanes = [];
		this._sizeLods = [];
		this._sigmas = [];

		this._blurMaterial = null;
		this._cubemapMaterial = null;
		this._equirectMaterial = null;

		this._compileMaterial(this._blurMaterial);

	}

	/**
	 * Generates a PMREM from a supplied Scene, which can be faster than using an
	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
	 * in radians to be applied to the scene before PMREM generation. Optional near
	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
	 * is placed at the origin).
	 */
	fromScene(scene, sigma = 0, near = 0.1, far = 100) {

		_oldTarget$1 = this._renderer.getRenderTarget();

		this._setSize(256);

		const cubeUVRenderTarget = this._allocateTargets();
		cubeUVRenderTarget.depthBuffer = true;

		this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);

		if (sigma > 0) {

			this._blur(cubeUVRenderTarget, 0, 0, sigma);

		}

		this._applyPMREM(cubeUVRenderTarget);
		this._cleanup(cubeUVRenderTarget);

		return cubeUVRenderTarget;

	}

	/**
	 * Generates a PMREM from an equirectangular texture, which can be either LDR
	 * or HDR. The ideal input image size is 1k (1024 x 512),
	 * as this matches best with the 256 x 256 cubemap output.
	 */
	fromEquirectangular(equirectangular, renderTarget = null) {

		return this._fromTexture(equirectangular, renderTarget);

	}

	/**
	 * Generates a PMREM from an cubemap texture, which can be either LDR
	 * or HDR. The ideal input cube size is 256 x 256,
	 * as this matches best with the 256 x 256 cubemap output.
	 */
	fromCubemap(cubemap, renderTarget = null) {

		return this._fromTexture(cubemap, renderTarget);

	}

	/**
	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */
	compileCubemapShader() {

		if (this._cubemapMaterial === null) {

			this._cubemapMaterial = _getCubemapMaterial();
			this._compileMaterial(this._cubemapMaterial);

		}

	}

	/**
	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */
	compileEquirectangularShader() {

		if (this._equirectMaterial === null) {

			this._equirectMaterial = _getEquirectMaterial();
			this._compileMaterial(this._equirectMaterial);

		}

	}

	/**
	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
	 * one of them will cause any others to also become unusable.
	 */
	dispose() {

		this._dispose();

		if (this._cubemapMaterial !== null) this._cubemapMaterial.dispose();
		if (this._equirectMaterial !== null) this._equirectMaterial.dispose();

	}

	// private interface

	_setSize(cubeSize) {

		this._lodMax = Math.floor(Math.log2(cubeSize));
		this._cubeSize = Math.pow(2, this._lodMax);

	}

	_dispose() {

		if (this._blurMaterial !== null) this._blurMaterial.dispose();

		if (this._pingPongRenderTarget !== null) this._pingPongRenderTarget.dispose();

		for (let i = 0; i < this._lodPlanes.length; i++) {

			this._lodPlanes[i].dispose();

		}

	}

	_cleanup(outputTarget) {

		this._renderer.setRenderTarget(_oldTarget$1);
		outputTarget.scissorTest = false;
		_setViewport$1(outputTarget, 0, 0, outputTarget.width, outputTarget.height);

	}

	_fromTexture(texture, renderTarget) {

		if (texture.mapping === CubeReflectionMapping$1 || texture.mapping === CubeRefractionMapping$1) {

			this._setSize(texture.image.length === 0 ? 16 : (texture.image[0].width || texture.image[0].image.width));

		} else { // Equirectangular

			this._setSize(texture.image.width / 4);

		}

		_oldTarget$1 = this._renderer.getRenderTarget();

		const cubeUVRenderTarget = renderTarget || this._allocateTargets();
		this._textureToCubeUV(texture, cubeUVRenderTarget);
		this._applyPMREM(cubeUVRenderTarget);
		this._cleanup(cubeUVRenderTarget);

		return cubeUVRenderTarget;

	}

	_allocateTargets() {

		const width = 3 * Math.max(this._cubeSize, 16 * 7);
		const height = 4 * this._cubeSize;

		const params = {
			magFilter: LinearFilter$1,
			minFilter: LinearFilter$1,
			generateMipmaps: false,
			type: HalfFloatType$1,
			format: RGBAFormat$1,
			encoding: LinearEncoding$1,
			depthBuffer: false
		};

		const cubeUVRenderTarget = _createRenderTarget$1(width, height, params);

		if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width) {

			if (this._pingPongRenderTarget !== null) {

				this._dispose();

			}

			this._pingPongRenderTarget = _createRenderTarget$1(width, height, params);

			const { _lodMax } = this;
			({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes$1(_lodMax));

			this._blurMaterial = _getBlurShader$1(_lodMax, width, height);

		}

		return cubeUVRenderTarget;

	}

	_compileMaterial(material) {

		const tmpMesh = new Mesh$1(this._lodPlanes[0], material);
		this._renderer.compile(tmpMesh, _flatCamera$1);

	}

	_sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {

		const fov = 90;
		const aspect = 1;
		const cubeCamera = new PerspectiveCamera$1(fov, aspect, near, far);
		const upSign = [1, - 1, 1, 1, 1, 1];
		const forwardSign = [1, 1, 1, - 1, - 1, - 1];
		const renderer = this._renderer;

		const originalAutoClear = renderer.autoClear;
		const toneMapping = renderer.toneMapping;
		renderer.getClearColor(_clearColor$1);

		renderer.toneMapping = NoToneMapping$1;
		renderer.autoClear = false;

		const backgroundMaterial = new MeshBasicMaterial$1({
			name: 'PMREM.Background',
			side: BackSide$1,
			depthWrite: false,
			depthTest: false,
		});

		const backgroundBox = new Mesh$1(new BoxGeometry$1(), backgroundMaterial);

		let useSolidColor = false;
		const background = scene.background;

		if (background) {

			if (background.isColor) {

				backgroundMaterial.color.copy(background);
				scene.background = null;
				useSolidColor = true;

			}

		} else {

			backgroundMaterial.color.copy(_clearColor$1);
			useSolidColor = true;

		}

		for (let i = 0; i < 6; i++) {

			const col = i % 3;

			if (col === 0) {

				cubeCamera.up.set(0, upSign[i], 0);
				cubeCamera.lookAt(forwardSign[i], 0, 0);

			} else if (col === 1) {

				cubeCamera.up.set(0, 0, upSign[i]);
				cubeCamera.lookAt(0, forwardSign[i], 0);

			} else {

				cubeCamera.up.set(0, upSign[i], 0);
				cubeCamera.lookAt(0, 0, forwardSign[i]);

			}

			const size = this._cubeSize;

			_setViewport$1(cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size);

			renderer.setRenderTarget(cubeUVRenderTarget);

			if (useSolidColor) {

				renderer.render(backgroundBox, cubeCamera);

			}

			renderer.render(scene, cubeCamera);

		}

		backgroundBox.geometry.dispose();
		backgroundBox.material.dispose();

		renderer.toneMapping = toneMapping;
		renderer.autoClear = originalAutoClear;
		scene.background = background;

	}

	_textureToCubeUV(texture, cubeUVRenderTarget) {

		const renderer = this._renderer;

		const isCubeTexture = (texture.mapping === CubeReflectionMapping$1 || texture.mapping === CubeRefractionMapping$1);

		if (isCubeTexture) {

			if (this._cubemapMaterial === null) {

				this._cubemapMaterial = _getCubemapMaterial();

			}

			this._cubemapMaterial.uniforms.flipEnvMap.value = (texture.isRenderTargetTexture === false) ? - 1 : 1;

		} else {

			if (this._equirectMaterial === null) {

				this._equirectMaterial = _getEquirectMaterial();

			}

		}

		const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
		const mesh = new Mesh$1(this._lodPlanes[0], material);

		const uniforms = material.uniforms;

		uniforms['envMap'].value = texture;

		const size = this._cubeSize;

		_setViewport$1(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);

		renderer.setRenderTarget(cubeUVRenderTarget);
		renderer.render(mesh, _flatCamera$1);

	}

	_applyPMREM(cubeUVRenderTarget) {

		const renderer = this._renderer;
		const autoClear = renderer.autoClear;
		renderer.autoClear = false;

		for (let i = 1; i < this._lodPlanes.length; i++) {

			const sigma = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]);

			const poleAxis = _axisDirections$1[(i - 1) % _axisDirections$1.length];

			this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);

		}

		renderer.autoClear = autoClear;

	}

	/**
	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
	 * vertically and horizontally, but this breaks down on a cube. Here we apply
	 * the blur latitudinally (around the poles), and then longitudinally (towards
	 * the poles) to approximate the orthogonally-separable blur. It is least
	 * accurate at the poles, but still does a decent job.
	 */
	_blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {

		const pingPongRenderTarget = this._pingPongRenderTarget;

		this._halfBlur(
			cubeUVRenderTarget,
			pingPongRenderTarget,
			lodIn,
			lodOut,
			sigma,
			'latitudinal',
			poleAxis);

		this._halfBlur(
			pingPongRenderTarget,
			cubeUVRenderTarget,
			lodOut,
			lodOut,
			sigma,
			'longitudinal',
			poleAxis);

	}

	_halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {

		const renderer = this._renderer;
		const blurMaterial = this._blurMaterial;

		if (direction !== 'latitudinal' && direction !== 'longitudinal') {

			console.error(
				'blur direction must be either latitudinal or longitudinal!');

		}

		// Number of standard deviations at which to cut off the discrete approximation.
		const STANDARD_DEVIATIONS = 3;

		const blurMesh = new Mesh$1(this._lodPlanes[lodOut], blurMaterial);
		const blurUniforms = blurMaterial.uniforms;

		const pixels = this._sizeLods[lodIn] - 1;
		const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES$1 - 1);
		const sigmaPixels = sigmaRadians / radiansPerPixel;
		const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES$1;

		if (samples > MAX_SAMPLES$1) {

			console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES$1}`);

		}

		const weights = [];
		let sum = 0;

		for (let i = 0; i < MAX_SAMPLES$1; ++i) {

			const x = i / sigmaPixels;
			const weight = Math.exp(- x * x / 2);
			weights.push(weight);

			if (i === 0) {

				sum += weight;

			} else if (i < samples) {

				sum += 2 * weight;

			}

		}

		for (let i = 0; i < weights.length; i++) {

			weights[i] = weights[i] / sum;

		}

		blurUniforms['envMap'].value = targetIn.texture;
		blurUniforms['samples'].value = samples;
		blurUniforms['weights'].value = weights;
		blurUniforms['latitudinal'].value = direction === 'latitudinal';

		if (poleAxis) {

			blurUniforms['poleAxis'].value = poleAxis;

		}

		const { _lodMax } = this;
		blurUniforms['dTheta'].value = radiansPerPixel;
		blurUniforms['mipInt'].value = _lodMax - lodIn;

		const outputSize = this._sizeLods[lodOut];
		const x = 3 * outputSize * (lodOut > _lodMax - LOD_MIN$1 ? lodOut - _lodMax + LOD_MIN$1 : 0);
		const y = 4 * (this._cubeSize - outputSize);

		_setViewport$1(targetOut, x, y, 3 * outputSize, 2 * outputSize);
		renderer.setRenderTarget(targetOut);
		renderer.render(blurMesh, _flatCamera$1);

	}

}



function _createPlanes$1(lodMax) {

	const lodPlanes = [];
	const sizeLods = [];
	const sigmas = [];

	let lod = lodMax;

	const totalLods = lodMax - LOD_MIN$1 + 1 + EXTRA_LOD_SIGMA$1.length;

	for (let i = 0; i < totalLods; i++) {

		const sizeLod = Math.pow(2, lod);
		sizeLods.push(sizeLod);
		let sigma = 1.0 / sizeLod;

		if (i > lodMax - LOD_MIN$1) {

			sigma = EXTRA_LOD_SIGMA$1[i - lodMax + LOD_MIN$1 - 1];

		} else if (i === 0) {

			sigma = 0;

		}

		sigmas.push(sigma);

		const texelSize = 1.0 / (sizeLod - 2);
		const min = - texelSize;
		const max = 1 + texelSize;
		const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];

		const cubeFaces = 6;
		const vertices = 6;
		const positionSize = 3;
		const uvSize = 2;
		const faceIndexSize = 1;

		const position = new Float32Array(positionSize * vertices * cubeFaces);
		const uv = new Float32Array(uvSize * vertices * cubeFaces);
		const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);

		for (let face = 0; face < cubeFaces; face++) {

			const x = (face % 3) * 2 / 3 - 1;
			const y = face > 2 ? 0 : - 1;
			const coordinates = [
				x, y, 0,
				x + 2 / 3, y, 0,
				x + 2 / 3, y + 1, 0,
				x, y, 0,
				x + 2 / 3, y + 1, 0,
				x, y + 1, 0
			];
			position.set(coordinates, positionSize * vertices * face);
			uv.set(uv1, uvSize * vertices * face);
			const fill = [face, face, face, face, face, face];
			faceIndex.set(fill, faceIndexSize * vertices * face);

		}

		const planes = new BufferGeometry$1();
		planes.setAttribute('position', new BufferAttribute$1(position, positionSize));
		planes.setAttribute('uv', new BufferAttribute$1(uv, uvSize));
		planes.setAttribute('faceIndex', new BufferAttribute$1(faceIndex, faceIndexSize));
		lodPlanes.push(planes);

		if (lod > LOD_MIN$1) {

			lod--;

		}

	}

	return { lodPlanes, sizeLods, sigmas };

}

function _createRenderTarget$1(width, height, params) {

	const cubeUVRenderTarget = new WebGLRenderTarget$1(width, height, params);
	cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping$1;
	cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
	cubeUVRenderTarget.scissorTest = true;
	return cubeUVRenderTarget;

}

function _setViewport$1(target, x, y, width, height) {

	target.viewport.set(x, y, width, height);
	target.scissor.set(x, y, width, height);

}

function _getBlurShader$1(lodMax, width, height) {

	const weights = new Float32Array(MAX_SAMPLES$1);
	const poleAxis = new Vector3$1(0, 1, 0);
	const shaderMaterial = new ShaderMaterial$1({

		name: 'SphericalGaussianBlur',

		defines: {
			'n': MAX_SAMPLES$1,
			'CUBEUV_TEXEL_WIDTH': 1.0 / width,
			'CUBEUV_TEXEL_HEIGHT': 1.0 / height,
			'CUBEUV_MAX_MIP': `${lodMax}.0`,
		},

		uniforms: {
			'envMap': { value: null },
			'samples': { value: 1 },
			'weights': { value: weights },
			'latitudinal': { value: false },
			'dTheta': { value: 0 },
			'mipInt': { value: 0 },
			'poleAxis': { value: poleAxis }
		},

		vertexShader: _getCommonVertexShader$1(),

		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,

		blending: NoBlending$1,
		depthTest: false,
		depthWrite: false

	});

	return shaderMaterial;

}

function _getEquirectMaterial() {

	return new ShaderMaterial$1({

		name: 'EquirectangularToCubeUV',

		uniforms: {
			'envMap': { value: null }
		},

		vertexShader: _getCommonVertexShader$1(),

		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,

		blending: NoBlending$1,
		depthTest: false,
		depthWrite: false

	});

}

function _getCubemapMaterial() {

	return new ShaderMaterial$1({

		name: 'CubemapToCubeUV',

		uniforms: {
			'envMap': { value: null },
			'flipEnvMap': { value: - 1 }
		},

		vertexShader: _getCommonVertexShader$1(),

		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,

		blending: NoBlending$1,
		depthTest: false,
		depthWrite: false

	});

}

function _getCommonVertexShader$1() {

	return /* glsl */`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;

}

function WebGLCubeUVMaps$1(renderer) {

	let cubeUVmaps = new WeakMap();

	let pmremGenerator = null;

	function get(texture) {

		if (texture && texture.isTexture) {

			const mapping = texture.mapping;

			const isEquirectMap = (mapping === EquirectangularReflectionMapping$1 || mapping === EquirectangularRefractionMapping$1);
			const isCubeMap = (mapping === CubeReflectionMapping$1 || mapping === CubeRefractionMapping$1);

			// equirect/cube map to cubeUV conversion

			if (isEquirectMap || isCubeMap) {

				if (texture.isRenderTargetTexture && texture.needsPMREMUpdate === true) {

					texture.needsPMREMUpdate = false;

					let renderTarget = cubeUVmaps.get(texture);

					if (pmremGenerator === null) pmremGenerator = new PMREMGenerator$1(renderer);

					renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture, renderTarget) : pmremGenerator.fromCubemap(texture, renderTarget);
					cubeUVmaps.set(texture, renderTarget);

					return renderTarget.texture;

				} else {

					if (cubeUVmaps.has(texture)) {

						return cubeUVmaps.get(texture).texture;

					} else {

						const image = texture.image;

						if ((isEquirectMap && image && image.height > 0) || (isCubeMap && image && isCubeTextureComplete(image))) {

							if (pmremGenerator === null) pmremGenerator = new PMREMGenerator$1(renderer);

							const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
							cubeUVmaps.set(texture, renderTarget);

							texture.addEventListener('dispose', onTextureDispose);

							return renderTarget.texture;

						} else {

							// image not yet ready. try the conversion next frame

							return null;

						}

					}

				}

			}

		}

		return texture;

	}

	function isCubeTextureComplete(image) {

		let count = 0;
		const length = 6;

		for (let i = 0; i < length; i++) {

			if (image[i] !== undefined) count++;

		}

		return count === length;


	}

	function onTextureDispose(event) {

		const texture = event.target;

		texture.removeEventListener('dispose', onTextureDispose);

		const cubemapUV = cubeUVmaps.get(texture);

		if (cubemapUV !== undefined) {

			cubeUVmaps.delete(texture);
			cubemapUV.dispose();

		}

	}

	function dispose() {

		cubeUVmaps = new WeakMap();

		if (pmremGenerator !== null) {

			pmremGenerator.dispose();
			pmremGenerator = null;

		}

	}

	return {
		get: get,
		dispose: dispose
	};

}

function WebGLExtensions$1(gl) {

	const extensions = {};

	function getExtension(name) {

		if (extensions[name] !== undefined) {

			return extensions[name];

		}

		let extension;

		switch (name) {

			case 'WEBGL_depth_texture':
				extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');
				break;

			case 'EXT_texture_filter_anisotropic':
				extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
				break;

			case 'WEBGL_compressed_texture_s3tc':
				extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
				break;

			case 'WEBGL_compressed_texture_pvrtc':
				extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');
				break;

			default:
				extension = gl.getExtension(name);

		}

		extensions[name] = extension;

		return extension;

	}

	return {

		has: function (name) {

			return getExtension(name) !== null;

		},

		init: function (capabilities) {

			if (capabilities.isWebGL2) {

				getExtension('EXT_color_buffer_float');

			} else {

				getExtension('WEBGL_depth_texture');
				getExtension('OES_texture_float');
				getExtension('OES_texture_half_float');
				getExtension('OES_texture_half_float_linear');
				getExtension('OES_standard_derivatives');
				getExtension('OES_element_index_uint');
				getExtension('OES_vertex_array_object');
				getExtension('ANGLE_instanced_arrays');

			}

			getExtension('OES_texture_float_linear');
			getExtension('EXT_color_buffer_half_float');
			getExtension('WEBGL_multisampled_render_to_texture');

		},

		get: function (name) {

			const extension = getExtension(name);

			if (extension === null) {

				console.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');

			}

			return extension;

		}

	};

}

function WebGLGeometries$1(gl, attributes, info, bindingStates) {

	const geometries = {};
	const wireframeAttributes = new WeakMap();

	function onGeometryDispose(event) {

		const geometry = event.target;

		if (geometry.index !== null) {

			attributes.remove(geometry.index);

		}

		for (const name in geometry.attributes) {

			attributes.remove(geometry.attributes[name]);

		}

		geometry.removeEventListener('dispose', onGeometryDispose);

		delete geometries[geometry.id];

		const attribute = wireframeAttributes.get(geometry);

		if (attribute) {

			attributes.remove(attribute);
			wireframeAttributes.delete(geometry);

		}

		bindingStates.releaseStatesOfGeometry(geometry);

		if (geometry.isInstancedBufferGeometry === true) {

			delete geometry._maxInstanceCount;

		}

		//

		info.memory.geometries--;

	}

	function get(object, geometry) {

		if (geometries[geometry.id] === true) return geometry;

		geometry.addEventListener('dispose', onGeometryDispose);

		geometries[geometry.id] = true;

		info.memory.geometries++;

		return geometry;

	}

	function update(geometry) {

		const geometryAttributes = geometry.attributes;

		// Updating index buffer in VAO now. See WebGLBindingStates.

		for (const name in geometryAttributes) {

			attributes.update(geometryAttributes[name], 34962);

		}

		// morph targets

		const morphAttributes = geometry.morphAttributes;

		for (const name in morphAttributes) {

			const array = morphAttributes[name];

			for (let i = 0, l = array.length; i < l; i++) {

				attributes.update(array[i], 34962);

			}

		}

	}

	function updateWireframeAttribute(geometry) {

		const indices = [];

		const geometryIndex = geometry.index;
		const geometryPosition = geometry.attributes.position;
		let version = 0;

		if (geometryIndex !== null) {

			const array = geometryIndex.array;
			version = geometryIndex.version;

			for (let i = 0, l = array.length; i < l; i += 3) {

				const a = array[i + 0];
				const b = array[i + 1];
				const c = array[i + 2];

				indices.push(a, b, b, c, c, a);

			}

		} else {

			const array = geometryPosition.array;
			version = geometryPosition.version;

			for (let i = 0, l = (array.length / 3) - 1; i < l; i += 3) {

				const a = i + 0;
				const b = i + 1;
				const c = i + 2;

				indices.push(a, b, b, c, c, a);

			}

		}

		const attribute = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute$1 : Uint16BufferAttribute$1)(indices, 1);
		attribute.version = version;

		// Updating index buffer in VAO now. See WebGLBindingStates

		//

		const previousAttribute = wireframeAttributes.get(geometry);

		if (previousAttribute) attributes.remove(previousAttribute);

		//

		wireframeAttributes.set(geometry, attribute);

	}

	function getWireframeAttribute(geometry) {

		const currentAttribute = wireframeAttributes.get(geometry);

		if (currentAttribute) {

			const geometryIndex = geometry.index;

			if (geometryIndex !== null) {

				// if the attribute is obsolete, create a new one

				if (currentAttribute.version < geometryIndex.version) {

					updateWireframeAttribute(geometry);

				}

			}

		} else {

			updateWireframeAttribute(geometry);

		}

		return wireframeAttributes.get(geometry);

	}

	return {

		get: get,
		update: update,

		getWireframeAttribute: getWireframeAttribute

	};

}

function WebGLIndexedBufferRenderer$1(gl, extensions, info, capabilities) {

	const isWebGL2 = capabilities.isWebGL2;

	let mode;

	function setMode(value) {

		mode = value;

	}

	let type, bytesPerElement;

	function setIndex(value) {

		type = value.type;
		bytesPerElement = value.bytesPerElement;

	}

	function render(start, count) {

		gl.drawElements(mode, count, type, start * bytesPerElement);

		info.update(count, mode, 1);

	}

	function renderInstances(start, count, primcount) {

		if (primcount === 0) return;

		let extension, methodName;

		if (isWebGL2) {

			extension = gl;
			methodName = 'drawElementsInstanced';

		} else {

			extension = extensions.get('ANGLE_instanced_arrays');
			methodName = 'drawElementsInstancedANGLE';

			if (extension === null) {

				console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
				return;

			}

		}

		extension[methodName](mode, count, type, start * bytesPerElement, primcount);

		info.update(count, mode, primcount);

	}

	//

	this.setMode = setMode;
	this.setIndex = setIndex;
	this.render = render;
	this.renderInstances = renderInstances;

}

function WebGLInfo$1(gl) {

	const memory = {
		geometries: 0,
		textures: 0
	};

	const render = {
		frame: 0,
		calls: 0,
		triangles: 0,
		points: 0,
		lines: 0
	};

	function update(count, mode, instanceCount) {

		render.calls++;

		switch (mode) {

			case 4:
				render.triangles += instanceCount * (count / 3);
				break;

			case 1:
				render.lines += instanceCount * (count / 2);
				break;

			case 3:
				render.lines += instanceCount * (count - 1);
				break;

			case 2:
				render.lines += instanceCount * count;
				break;

			case 0:
				render.points += instanceCount * count;
				break;

			default:
				console.error('THREE.WebGLInfo: Unknown draw mode:', mode);
				break;

		}

	}

	function reset() {

		render.frame++;
		render.calls = 0;
		render.triangles = 0;
		render.points = 0;
		render.lines = 0;

	}

	return {
		memory: memory,
		render: render,
		programs: null,
		autoReset: true,
		reset: reset,
		update: update
	};

}

function numericalSort$1(a, b) {

	return a[0] - b[0];

}

function absNumericalSort$1(a, b) {

	return Math.abs(b[1]) - Math.abs(a[1]);

}

function denormalize$1(morph, attribute) {

	let denominator = 1;
	const array = attribute.isInterleavedBufferAttribute ? attribute.data.array : attribute.array;

	if (array instanceof Int8Array) denominator = 127;
	else if (array instanceof Int16Array) denominator = 32767;
	else if (array instanceof Int32Array) denominator = 2147483647;
	else console.error('THREE.WebGLMorphtargets: Unsupported morph attribute data type: ', array);

	morph.divideScalar(denominator);

}

function WebGLMorphtargets$1(gl, capabilities, textures) {

	const influencesList = {};
	const morphInfluences = new Float32Array(8);
	const morphTextures = new WeakMap();
	const morph = new Vector4$1();

	const workInfluences = [];

	for (let i = 0; i < 8; i++) {

		workInfluences[i] = [i, 0];

	}

	function update(object, geometry, material, program) {

		const objectInfluences = object.morphTargetInfluences;

		if (capabilities.isWebGL2 === true) {

			// instead of using attributes, the WebGL 2 code path encodes morph targets
			// into an array of data textures. Each layer represents a single morph target.

			const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
			const morphTargetsCount = (morphAttribute !== undefined) ? morphAttribute.length : 0;

			let entry = morphTextures.get(geometry);

			if (entry === undefined || entry.count !== morphTargetsCount) {

				if (entry !== undefined) entry.texture.dispose();

				const hasMorphPosition = geometry.morphAttributes.position !== undefined;
				const hasMorphNormals = geometry.morphAttributes.normal !== undefined;
				const hasMorphColors = geometry.morphAttributes.color !== undefined;

				const morphTargets = geometry.morphAttributes.position || [];
				const morphNormals = geometry.morphAttributes.normal || [];
				const morphColors = geometry.morphAttributes.color || [];

				let vertexDataCount = 0;

				if (hasMorphPosition === true) vertexDataCount = 1;
				if (hasMorphNormals === true) vertexDataCount = 2;
				if (hasMorphColors === true) vertexDataCount = 3;

				let width = geometry.attributes.position.count * vertexDataCount;
				let height = 1;

				if (width > capabilities.maxTextureSize) {

					height = Math.ceil(width / capabilities.maxTextureSize);
					width = capabilities.maxTextureSize;

				}

				const buffer = new Float32Array(width * height * 4 * morphTargetsCount);

				const texture = new DataArrayTexture(buffer, width, height, morphTargetsCount);
				texture.type = FloatType$1;
				texture.needsUpdate = true;

				// fill buffer

				const vertexDataStride = vertexDataCount * 4;

				for (let i = 0; i < morphTargetsCount; i++) {

					const morphTarget = morphTargets[i];
					const morphNormal = morphNormals[i];
					const morphColor = morphColors[i];

					const offset = width * height * 4 * i;

					for (let j = 0; j < morphTarget.count; j++) {

						const stride = j * vertexDataStride;

						if (hasMorphPosition === true) {

							morph.fromBufferAttribute(morphTarget, j);

							if (morphTarget.normalized === true) denormalize$1(morph, morphTarget);

							buffer[offset + stride + 0] = morph.x;
							buffer[offset + stride + 1] = morph.y;
							buffer[offset + stride + 2] = morph.z;
							buffer[offset + stride + 3] = 0;

						}

						if (hasMorphNormals === true) {

							morph.fromBufferAttribute(morphNormal, j);

							if (morphNormal.normalized === true) denormalize$1(morph, morphNormal);

							buffer[offset + stride + 4] = morph.x;
							buffer[offset + stride + 5] = morph.y;
							buffer[offset + stride + 6] = morph.z;
							buffer[offset + stride + 7] = 0;

						}

						if (hasMorphColors === true) {

							morph.fromBufferAttribute(morphColor, j);

							if (morphColor.normalized === true) denormalize$1(morph, morphColor);

							buffer[offset + stride + 8] = morph.x;
							buffer[offset + stride + 9] = morph.y;
							buffer[offset + stride + 10] = morph.z;
							buffer[offset + stride + 11] = (morphColor.itemSize === 4) ? morph.w : 1;

						}

					}

				}

				entry = {
					count: morphTargetsCount,
					texture: texture,
					size: new Vector2$1(width, height)
				};

				morphTextures.set(geometry, entry);

				function disposeTexture() {

					texture.dispose();

					morphTextures.delete(geometry);

					geometry.removeEventListener('dispose', disposeTexture);

				}

				geometry.addEventListener('dispose', disposeTexture);

			}

			//

			let morphInfluencesSum = 0;

			for (let i = 0; i < objectInfluences.length; i++) {

				morphInfluencesSum += objectInfluences[i];

			}

			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;

			program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);
			program.getUniforms().setValue(gl, 'morphTargetInfluences', objectInfluences);

			program.getUniforms().setValue(gl, 'morphTargetsTexture', entry.texture, textures);
			program.getUniforms().setValue(gl, 'morphTargetsTextureSize', entry.size);


		} else {

			// When object doesn't have morph target influences defined, we treat it as a 0-length array
			// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences

			const length = objectInfluences === undefined ? 0 : objectInfluences.length;

			let influences = influencesList[geometry.id];

			if (influences === undefined || influences.length !== length) {

				// initialise list

				influences = [];

				for (let i = 0; i < length; i++) {

					influences[i] = [i, 0];

				}

				influencesList[geometry.id] = influences;

			}

			// Collect influences

			for (let i = 0; i < length; i++) {

				const influence = influences[i];

				influence[0] = i;
				influence[1] = objectInfluences[i];

			}

			influences.sort(absNumericalSort$1);

			for (let i = 0; i < 8; i++) {

				if (i < length && influences[i][1]) {

					workInfluences[i][0] = influences[i][0];
					workInfluences[i][1] = influences[i][1];

				} else {

					workInfluences[i][0] = Number.MAX_SAFE_INTEGER;
					workInfluences[i][1] = 0;

				}

			}

			workInfluences.sort(numericalSort$1);

			const morphTargets = geometry.morphAttributes.position;
			const morphNormals = geometry.morphAttributes.normal;

			let morphInfluencesSum = 0;

			for (let i = 0; i < 8; i++) {

				const influence = workInfluences[i];
				const index = influence[0];
				const value = influence[1];

				if (index !== Number.MAX_SAFE_INTEGER && value) {

					if (morphTargets && geometry.getAttribute('morphTarget' + i) !== morphTargets[index]) {

						geometry.setAttribute('morphTarget' + i, morphTargets[index]);

					}

					if (morphNormals && geometry.getAttribute('morphNormal' + i) !== morphNormals[index]) {

						geometry.setAttribute('morphNormal' + i, morphNormals[index]);

					}

					morphInfluences[i] = value;
					morphInfluencesSum += value;

				} else {

					if (morphTargets && geometry.hasAttribute('morphTarget' + i) === true) {

						geometry.deleteAttribute('morphTarget' + i);

					}

					if (morphNormals && geometry.hasAttribute('morphNormal' + i) === true) {

						geometry.deleteAttribute('morphNormal' + i);

					}

					morphInfluences[i] = 0;

				}

			}

			// GLSL shader uses formula baseinfluence * base + sum(target * influence)
			// This allows us to switch between absolute morphs and relative morphs without changing shader code
			// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;

			program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);
			program.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);

		}

	}

	return {

		update: update

	};

}

function WebGLObjects$1(gl, geometries, attributes, info) {

	let updateMap = new WeakMap();

	function update(object) {

		const frame = info.render.frame;

		const geometry = object.geometry;
		const buffergeometry = geometries.get(object, geometry);

		// Update once per frame

		if (updateMap.get(buffergeometry) !== frame) {

			geometries.update(buffergeometry);

			updateMap.set(buffergeometry, frame);

		}

		if (object.isInstancedMesh) {

			if (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {

				object.addEventListener('dispose', onInstancedMeshDispose);

			}

			attributes.update(object.instanceMatrix, 34962);

			if (object.instanceColor !== null) {

				attributes.update(object.instanceColor, 34962);

			}

		}

		return buffergeometry;

	}

	function dispose() {

		updateMap = new WeakMap();

	}

	function onInstancedMeshDispose(event) {

		const instancedMesh = event.target;

		instancedMesh.removeEventListener('dispose', onInstancedMeshDispose);

		attributes.remove(instancedMesh.instanceMatrix);

		if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);

	}

	return {

		update: update,
		dispose: dispose

	};

}

/**
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [textures] )
 *
 * 		uploads a uniform value(s)
 *  	the 'textures' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (textures factorizations):
 *
 * .upload( gl, seq, values, textures )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (textures factorizations):
 *
 * .setValue( gl, name, value, textures )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */

const emptyTexture$1 = new Texture$1();
const emptyArrayTexture = new DataArrayTexture();
const empty3dTexture = new Data3DTexture();
const emptyCubeTexture$1 = new CubeTexture$1();

// --- Utilities ---

// Array Caches (provide typed arrays for temporary by size)

const arrayCacheF32$1 = [];
const arrayCacheI32$1 = [];

// Float32Array caches used for uploading Matrix uniforms

const mat4array$1 = new Float32Array(16);
const mat3array$1 = new Float32Array(9);
const mat2array$1 = new Float32Array(4);

// Flattening for arrays of vectors and matrices

function flatten$1(array, nBlocks, blockSize) {

	const firstElem = array[0];

	if (firstElem <= 0 || firstElem > 0) return array;
	// unoptimized: ! isNaN( firstElem )
	// see http://jacksondunstan.com/articles/983

	const n = nBlocks * blockSize;
	let r = arrayCacheF32$1[n];

	if (r === undefined) {

		r = new Float32Array(n);
		arrayCacheF32$1[n] = r;

	}

	if (nBlocks !== 0) {

		firstElem.toArray(r, 0);

		for (let i = 1, offset = 0; i !== nBlocks; ++i) {

			offset += blockSize;
			array[i].toArray(r, offset);

		}

	}

	return r;

}

function arraysEqual$1(a, b) {

	if (a.length !== b.length) return false;

	for (let i = 0, l = a.length; i < l; i++) {

		if (a[i] !== b[i]) return false;

	}

	return true;

}

function copyArray$1(a, b) {

	for (let i = 0, l = b.length; i < l; i++) {

		a[i] = b[i];

	}

}

// Texture unit allocation

function allocTexUnits$1(textures, n) {

	let r = arrayCacheI32$1[n];

	if (r === undefined) {

		r = new Int32Array(n);
		arrayCacheI32$1[n] = r;

	}

	for (let i = 0; i !== n; ++i) {

		r[i] = textures.allocateTextureUnit();

	}

	return r;

}

// --- Setters ---

// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.

// Single scalar

function setValueV1f$1(gl, v) {

	const cache = this.cache;

	if (cache[0] === v) return;

	gl.uniform1f(this.addr, v);

	cache[0] = v;

}

// Single float vector (from flat array or THREE.VectorN)

function setValueV2f$1(gl, v) {

	const cache = this.cache;

	if (v.x !== undefined) {

		if (cache[0] !== v.x || cache[1] !== v.y) {

			gl.uniform2f(this.addr, v.x, v.y);

			cache[0] = v.x;
			cache[1] = v.y;

		}

	} else {

		if (arraysEqual$1(cache, v)) return;

		gl.uniform2fv(this.addr, v);

		copyArray$1(cache, v);

	}

}

function setValueV3f$1(gl, v) {

	const cache = this.cache;

	if (v.x !== undefined) {

		if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {

			gl.uniform3f(this.addr, v.x, v.y, v.z);

			cache[0] = v.x;
			cache[1] = v.y;
			cache[2] = v.z;

		}

	} else if (v.r !== undefined) {

		if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {

			gl.uniform3f(this.addr, v.r, v.g, v.b);

			cache[0] = v.r;
			cache[1] = v.g;
			cache[2] = v.b;

		}

	} else {

		if (arraysEqual$1(cache, v)) return;

		gl.uniform3fv(this.addr, v);

		copyArray$1(cache, v);

	}

}

function setValueV4f$1(gl, v) {

	const cache = this.cache;

	if (v.x !== undefined) {

		if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {

			gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);

			cache[0] = v.x;
			cache[1] = v.y;
			cache[2] = v.z;
			cache[3] = v.w;

		}

	} else {

		if (arraysEqual$1(cache, v)) return;

		gl.uniform4fv(this.addr, v);

		copyArray$1(cache, v);

	}

}

// Single matrix (from flat array or THREE.MatrixN)

function setValueM2$1(gl, v) {

	const cache = this.cache;
	const elements = v.elements;

	if (elements === undefined) {

		if (arraysEqual$1(cache, v)) return;

		gl.uniformMatrix2fv(this.addr, false, v);

		copyArray$1(cache, v);

	} else {

		if (arraysEqual$1(cache, elements)) return;

		mat2array$1.set(elements);

		gl.uniformMatrix2fv(this.addr, false, mat2array$1);

		copyArray$1(cache, elements);

	}

}

function setValueM3$1(gl, v) {

	const cache = this.cache;
	const elements = v.elements;

	if (elements === undefined) {

		if (arraysEqual$1(cache, v)) return;

		gl.uniformMatrix3fv(this.addr, false, v);

		copyArray$1(cache, v);

	} else {

		if (arraysEqual$1(cache, elements)) return;

		mat3array$1.set(elements);

		gl.uniformMatrix3fv(this.addr, false, mat3array$1);

		copyArray$1(cache, elements);

	}

}

function setValueM4$1(gl, v) {

	const cache = this.cache;
	const elements = v.elements;

	if (elements === undefined) {

		if (arraysEqual$1(cache, v)) return;

		gl.uniformMatrix4fv(this.addr, false, v);

		copyArray$1(cache, v);

	} else {

		if (arraysEqual$1(cache, elements)) return;

		mat4array$1.set(elements);

		gl.uniformMatrix4fv(this.addr, false, mat4array$1);

		copyArray$1(cache, elements);

	}

}

// Single integer / boolean

function setValueV1i$1(gl, v) {

	const cache = this.cache;

	if (cache[0] === v) return;

	gl.uniform1i(this.addr, v);

	cache[0] = v;

}

// Single integer / boolean vector (from flat array)

function setValueV2i$1(gl, v) {

	const cache = this.cache;

	if (arraysEqual$1(cache, v)) return;

	gl.uniform2iv(this.addr, v);

	copyArray$1(cache, v);

}

function setValueV3i$1(gl, v) {

	const cache = this.cache;

	if (arraysEqual$1(cache, v)) return;

	gl.uniform3iv(this.addr, v);

	copyArray$1(cache, v);

}

function setValueV4i$1(gl, v) {

	const cache = this.cache;

	if (arraysEqual$1(cache, v)) return;

	gl.uniform4iv(this.addr, v);

	copyArray$1(cache, v);

}

// Single unsigned integer

function setValueV1ui$1(gl, v) {

	const cache = this.cache;

	if (cache[0] === v) return;

	gl.uniform1ui(this.addr, v);

	cache[0] = v;

}

// Single unsigned integer vector (from flat array)

function setValueV2ui$1(gl, v) {

	const cache = this.cache;

	if (arraysEqual$1(cache, v)) return;

	gl.uniform2uiv(this.addr, v);

	copyArray$1(cache, v);

}

function setValueV3ui$1(gl, v) {

	const cache = this.cache;

	if (arraysEqual$1(cache, v)) return;

	gl.uniform3uiv(this.addr, v);

	copyArray$1(cache, v);

}

function setValueV4ui$1(gl, v) {

	const cache = this.cache;

	if (arraysEqual$1(cache, v)) return;

	gl.uniform4uiv(this.addr, v);

	copyArray$1(cache, v);

}


// Single texture (2D / Cube)

function setValueT1$1(gl, v, textures) {

	const cache = this.cache;
	const unit = textures.allocateTextureUnit();

	if (cache[0] !== unit) {

		gl.uniform1i(this.addr, unit);
		cache[0] = unit;

	}

	textures.setTexture2D(v || emptyTexture$1, unit);

}

function setValueT3D1$1(gl, v, textures) {

	const cache = this.cache;
	const unit = textures.allocateTextureUnit();

	if (cache[0] !== unit) {

		gl.uniform1i(this.addr, unit);
		cache[0] = unit;

	}

	textures.setTexture3D(v || empty3dTexture, unit);

}

function setValueT6$1(gl, v, textures) {

	const cache = this.cache;
	const unit = textures.allocateTextureUnit();

	if (cache[0] !== unit) {

		gl.uniform1i(this.addr, unit);
		cache[0] = unit;

	}

	textures.setTextureCube(v || emptyCubeTexture$1, unit);

}

function setValueT2DArray1$1(gl, v, textures) {

	const cache = this.cache;
	const unit = textures.allocateTextureUnit();

	if (cache[0] !== unit) {

		gl.uniform1i(this.addr, unit);
		cache[0] = unit;

	}

	textures.setTexture2DArray(v || emptyArrayTexture, unit);

}

// Helper to pick the right setter for the singular case

function getSingularSetter$1(type) {

	switch (type) {

		case 0x1406: return setValueV1f$1; // FLOAT
		case 0x8b50: return setValueV2f$1; // _VEC2
		case 0x8b51: return setValueV3f$1; // _VEC3
		case 0x8b52: return setValueV4f$1; // _VEC4

		case 0x8b5a: return setValueM2$1; // _MAT2
		case 0x8b5b: return setValueM3$1; // _MAT3
		case 0x8b5c: return setValueM4$1; // _MAT4

		case 0x1404: case 0x8b56: return setValueV1i$1; // INT, BOOL
		case 0x8b53: case 0x8b57: return setValueV2i$1; // _VEC2
		case 0x8b54: case 0x8b58: return setValueV3i$1; // _VEC3
		case 0x8b55: case 0x8b59: return setValueV4i$1; // _VEC4

		case 0x1405: return setValueV1ui$1; // UINT
		case 0x8dc6: return setValueV2ui$1; // _VEC2
		case 0x8dc7: return setValueV3ui$1; // _VEC3
		case 0x8dc8: return setValueV4ui$1; // _VEC4

		case 0x8b5e: // SAMPLER_2D
		case 0x8d66: // SAMPLER_EXTERNAL_OES
		case 0x8dca: // INT_SAMPLER_2D
		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
		case 0x8b62: // SAMPLER_2D_SHADOW
			return setValueT1$1;

		case 0x8b5f: // SAMPLER_3D
		case 0x8dcb: // INT_SAMPLER_3D
		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
			return setValueT3D1$1;

		case 0x8b60: // SAMPLER_CUBE
		case 0x8dcc: // INT_SAMPLER_CUBE
		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
		case 0x8dc5: // SAMPLER_CUBE_SHADOW
			return setValueT6$1;

		case 0x8dc1: // SAMPLER_2D_ARRAY
		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
			return setValueT2DArray1$1;

	}

}


// Array of scalars

function setValueV1fArray$1(gl, v) {

	gl.uniform1fv(this.addr, v);

}

// Array of vectors (from flat array or array of THREE.VectorN)

function setValueV2fArray$1(gl, v) {

	const data = flatten$1(v, this.size, 2);

	gl.uniform2fv(this.addr, data);

}

function setValueV3fArray$1(gl, v) {

	const data = flatten$1(v, this.size, 3);

	gl.uniform3fv(this.addr, data);

}

function setValueV4fArray$1(gl, v) {

	const data = flatten$1(v, this.size, 4);

	gl.uniform4fv(this.addr, data);

}

// Array of matrices (from flat array or array of THREE.MatrixN)

function setValueM2Array$1(gl, v) {

	const data = flatten$1(v, this.size, 4);

	gl.uniformMatrix2fv(this.addr, false, data);

}

function setValueM3Array$1(gl, v) {

	const data = flatten$1(v, this.size, 9);

	gl.uniformMatrix3fv(this.addr, false, data);

}

function setValueM4Array$1(gl, v) {

	const data = flatten$1(v, this.size, 16);

	gl.uniformMatrix4fv(this.addr, false, data);

}

// Array of integer / boolean

function setValueV1iArray$1(gl, v) {

	gl.uniform1iv(this.addr, v);

}

// Array of integer / boolean vectors (from flat array)

function setValueV2iArray$1(gl, v) {

	gl.uniform2iv(this.addr, v);

}

function setValueV3iArray$1(gl, v) {

	gl.uniform3iv(this.addr, v);

}

function setValueV4iArray$1(gl, v) {

	gl.uniform4iv(this.addr, v);

}

// Array of unsigned integer

function setValueV1uiArray$1(gl, v) {

	gl.uniform1uiv(this.addr, v);

}

// Array of unsigned integer vectors (from flat array)

function setValueV2uiArray$1(gl, v) {

	gl.uniform2uiv(this.addr, v);

}

function setValueV3uiArray$1(gl, v) {

	gl.uniform3uiv(this.addr, v);

}

function setValueV4uiArray$1(gl, v) {

	gl.uniform4uiv(this.addr, v);

}


// Array of textures (2D / 3D / Cube / 2DArray)

function setValueT1Array$1(gl, v, textures) {

	const n = v.length;

	const units = allocTexUnits$1(textures, n);

	gl.uniform1iv(this.addr, units);

	for (let i = 0; i !== n; ++i) {

		textures.setTexture2D(v[i] || emptyTexture$1, units[i]);

	}

}

function setValueT3DArray$1(gl, v, textures) {

	const n = v.length;

	const units = allocTexUnits$1(textures, n);

	gl.uniform1iv(this.addr, units);

	for (let i = 0; i !== n; ++i) {

		textures.setTexture3D(v[i] || empty3dTexture, units[i]);

	}

}

function setValueT6Array$1(gl, v, textures) {

	const n = v.length;

	const units = allocTexUnits$1(textures, n);

	gl.uniform1iv(this.addr, units);

	for (let i = 0; i !== n; ++i) {

		textures.setTextureCube(v[i] || emptyCubeTexture$1, units[i]);

	}

}

function setValueT2DArrayArray$1(gl, v, textures) {

	const n = v.length;

	const units = allocTexUnits$1(textures, n);

	gl.uniform1iv(this.addr, units);

	for (let i = 0; i !== n; ++i) {

		textures.setTexture2DArray(v[i] || emptyArrayTexture, units[i]);

	}

}


// Helper to pick the right setter for a pure (bottom-level) array

function getPureArraySetter$1(type) {

	switch (type) {

		case 0x1406: return setValueV1fArray$1; // FLOAT
		case 0x8b50: return setValueV2fArray$1; // _VEC2
		case 0x8b51: return setValueV3fArray$1; // _VEC3
		case 0x8b52: return setValueV4fArray$1; // _VEC4

		case 0x8b5a: return setValueM2Array$1; // _MAT2
		case 0x8b5b: return setValueM3Array$1; // _MAT3
		case 0x8b5c: return setValueM4Array$1; // _MAT4

		case 0x1404: case 0x8b56: return setValueV1iArray$1; // INT, BOOL
		case 0x8b53: case 0x8b57: return setValueV2iArray$1; // _VEC2
		case 0x8b54: case 0x8b58: return setValueV3iArray$1; // _VEC3
		case 0x8b55: case 0x8b59: return setValueV4iArray$1; // _VEC4

		case 0x1405: return setValueV1uiArray$1; // UINT
		case 0x8dc6: return setValueV2uiArray$1; // _VEC2
		case 0x8dc7: return setValueV3uiArray$1; // _VEC3
		case 0x8dc8: return setValueV4uiArray$1; // _VEC4

		case 0x8b5e: // SAMPLER_2D
		case 0x8d66: // SAMPLER_EXTERNAL_OES
		case 0x8dca: // INT_SAMPLER_2D
		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
		case 0x8b62: // SAMPLER_2D_SHADOW
			return setValueT1Array$1;

		case 0x8b5f: // SAMPLER_3D
		case 0x8dcb: // INT_SAMPLER_3D
		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
			return setValueT3DArray$1;

		case 0x8b60: // SAMPLER_CUBE
		case 0x8dcc: // INT_SAMPLER_CUBE
		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
		case 0x8dc5: // SAMPLER_CUBE_SHADOW
			return setValueT6Array$1;

		case 0x8dc1: // SAMPLER_2D_ARRAY
		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
			return setValueT2DArrayArray$1;

	}

}

// --- Uniform Classes ---

class SingleUniform$1 {

	constructor(id, activeInfo, addr) {

		this.id = id;
		this.addr = addr;
		this.cache = [];
		this.setValue = getSingularSetter$1(activeInfo.type);

		// this.path = activeInfo.name; // DEBUG

	}

}

class PureArrayUniform$1 {

	constructor(id, activeInfo, addr) {

		this.id = id;
		this.addr = addr;
		this.cache = [];
		this.size = activeInfo.size;
		this.setValue = getPureArraySetter$1(activeInfo.type);

		// this.path = activeInfo.name; // DEBUG

	}

}

class StructuredUniform$1 {

	constructor(id) {

		this.id = id;

		this.seq = [];
		this.map = {};

	}

	setValue(gl, value, textures) {

		const seq = this.seq;

		for (let i = 0, n = seq.length; i !== n; ++i) {

			const u = seq[i];
			u.setValue(gl, value[u.id], textures);

		}

	}

}

// --- Top-level ---

// Parser - builds up the property tree from the path strings

const RePathPart$1 = /(\w+)(\])?(\[|\.)?/g;

// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.

function addUniform$1(container, uniformObject) {

	container.seq.push(uniformObject);
	container.map[uniformObject.id] = uniformObject;

}

function parseUniform$1(activeInfo, addr, container) {

	const path = activeInfo.name,
		pathLength = path.length;

	// reset RegExp object, because of the early exit of a previous run
	RePathPart$1.lastIndex = 0;

	while (true) {

		const match = RePathPart$1.exec(path),
			matchEnd = RePathPart$1.lastIndex;

		let id = match[1];
		const idIsIndex = match[2] === ']',
			subscript = match[3];

		if (idIsIndex) id = id | 0; // convert to integer

		if (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {

			// bare name or "pure" bottom-level array "[0]" suffix

			addUniform$1(container, subscript === undefined ?
				new SingleUniform$1(id, activeInfo, addr) :
				new PureArrayUniform$1(id, activeInfo, addr));

			break;

		} else {

			// step into inner node / create it in case it doesn't exist

			const map = container.map;
			let next = map[id];

			if (next === undefined) {

				next = new StructuredUniform$1(id);
				addUniform$1(container, next);

			}

			container = next;

		}

	}

}

// Root Container

class WebGLUniforms$1 {

	constructor(gl, program) {

		this.seq = [];
		this.map = {};

		const n = gl.getProgramParameter(program, 35718);

		for (let i = 0; i < n; ++i) {

			const info = gl.getActiveUniform(program, i),
				addr = gl.getUniformLocation(program, info.name);

			parseUniform$1(info, addr, this);

		}

	}

	setValue(gl, name, value, textures) {

		const u = this.map[name];

		if (u !== undefined) u.setValue(gl, value, textures);

	}

	setOptional(gl, object, name) {

		const v = object[name];

		if (v !== undefined) this.setValue(gl, name, v);

	}

	static upload(gl, seq, values, textures) {

		for (let i = 0, n = seq.length; i !== n; ++i) {

			const u = seq[i],
				v = values[u.id];

			if (v.needsUpdate !== false) {

				// note: always updating when .needsUpdate is undefined
				u.setValue(gl, v.value, textures);

			}

		}

	}

	static seqWithValue(seq, values) {

		const r = [];

		for (let i = 0, n = seq.length; i !== n; ++i) {

			const u = seq[i];
			if (u.id in values) r.push(u);

		}

		return r;

	}

}

function WebGLShader$1(gl, type, string) {

	const shader = gl.createShader(type);

	gl.shaderSource(shader, string);
	gl.compileShader(shader);

	return shader;

}

let programIdCount$1 = 0;

function handleSource(string, errorLine) {

	const lines = string.split('\n');
	const lines2 = [];

	const from = Math.max(errorLine - 6, 0);
	const to = Math.min(errorLine + 6, lines.length);

	for (let i = from; i < to; i++) {

		const line = i + 1;
		lines2.push(`${line === errorLine ? '>' : ' '} ${line}: ${lines[i]}`);

	}

	return lines2.join('\n');

}

function getEncodingComponents$1(encoding) {

	switch (encoding) {

		case LinearEncoding$1:
			return ['Linear', '( value )'];
		case sRGBEncoding$1:
			return ['sRGB', '( value )'];
		default:
			console.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);
			return ['Linear', '( value )'];

	}

}

function getShaderErrors$1(gl, shader, type) {

	const status = gl.getShaderParameter(shader, 35713);
	const errors = gl.getShaderInfoLog(shader).trim();

	if (status && errors === '') return '';

	const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
	if (errorMatches) {

		// --enable-privileged-webgl-extension
		// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

		const errorLine = parseInt(errorMatches[1]);
		return type.toUpperCase() + '\n\n' + errors + '\n\n' + handleSource(gl.getShaderSource(shader), errorLine);

	} else {

		return errors;

	}

}

function getTexelEncodingFunction$1(functionName, encoding) {

	const components = getEncodingComponents$1(encoding);
	return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';

}

function getToneMappingFunction$1(functionName, toneMapping) {

	let toneMappingName;

	switch (toneMapping) {

		case LinearToneMapping$1:
			toneMappingName = 'Linear';
			break;

		case ReinhardToneMapping$1:
			toneMappingName = 'Reinhard';
			break;

		case CineonToneMapping$1:
			toneMappingName = 'OptimizedCineon';
			break;

		case ACESFilmicToneMapping$1:
			toneMappingName = 'ACESFilmic';
			break;

		case CustomToneMapping$1:
			toneMappingName = 'Custom';
			break;

		default:
			console.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);
			toneMappingName = 'Linear';

	}

	return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

}

function generateExtensions$1(parameters) {

	const chunks = [
		(parameters.extensionDerivatives || !!parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical') ? '#extension GL_OES_standard_derivatives : enable' : '',
		(parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',
		(parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers) ? '#extension GL_EXT_draw_buffers : require' : '',
		(parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''
	];

	return chunks.filter(filterEmptyLine$1).join('\n');

}

function generateDefines$1(defines) {

	const chunks = [];

	for (const name in defines) {

		const value = defines[name];

		if (value === false) continue;

		chunks.push('#define ' + name + ' ' + value);

	}

	return chunks.join('\n');

}

function fetchAttributeLocations$1(gl, program) {

	const attributes = {};

	const n = gl.getProgramParameter(program, 35721);

	for (let i = 0; i < n; i++) {

		const info = gl.getActiveAttrib(program, i);
		const name = info.name;

		let locationSize = 1;
		if (info.type === 35674) locationSize = 2;
		if (info.type === 35675) locationSize = 3;
		if (info.type === 35676) locationSize = 4;

		// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

		attributes[name] = {
			type: info.type,
			location: gl.getAttribLocation(program, name),
			locationSize: locationSize
		};

	}

	return attributes;

}

function filterEmptyLine$1(string) {

	return string !== '';

}

function replaceLightNums$1(string, parameters) {

	return string
		.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights)
		.replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights)
		.replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights)
		.replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights)
		.replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights)
		.replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows)
		.replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows)
		.replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);

}

function replaceClippingPlaneNums$1(string, parameters) {

	return string
		.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes)
		.replace(/UNION_CLIPPING_PLANES/g, (parameters.numClippingPlanes - parameters.numClipIntersection));

}

// Resolve Includes

const includePattern$1 = /^[ \t]*#include +<([\w\d./]+)>/gm;

function resolveIncludes$1(string) {

	return string.replace(includePattern$1, includeReplacer$1);

}

function includeReplacer$1(match, include) {

	const string = ShaderChunk$1[include];

	if (string === undefined) {

		throw new Error('Can not resolve #include <' + include + '>');

	}

	return resolveIncludes$1(string);

}

// Unroll Loops

const deprecatedUnrollLoopPattern$1 = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
const unrollLoopPattern$1 = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;

function unrollLoops$1(string) {

	return string
		.replace(unrollLoopPattern$1, loopReplacer$1)
		.replace(deprecatedUnrollLoopPattern$1, deprecatedLoopReplacer$1);

}

function deprecatedLoopReplacer$1(match, start, end, snippet) {

	console.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');
	return loopReplacer$1(match, start, end, snippet);

}

function loopReplacer$1(match, start, end, snippet) {

	let string = '';

	for (let i = parseInt(start); i < parseInt(end); i++) {

		string += snippet
			.replace(/\[\s*i\s*\]/g, '[ ' + i + ' ]')
			.replace(/UNROLLED_LOOP_INDEX/g, i);

	}

	return string;

}

//

function generatePrecision$1(parameters) {

	let precisionstring = 'precision ' + parameters.precision + ' float;\nprecision ' + parameters.precision + ' int;';

	if (parameters.precision === 'highp') {

		precisionstring += '\n#define HIGH_PRECISION';

	} else if (parameters.precision === 'mediump') {

		precisionstring += '\n#define MEDIUM_PRECISION';

	} else if (parameters.precision === 'lowp') {

		precisionstring += '\n#define LOW_PRECISION';

	}

	return precisionstring;

}

function generateShadowMapTypeDefine$1(parameters) {

	let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

	if (parameters.shadowMapType === PCFShadowMap$1) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

	} else if (parameters.shadowMapType === PCFSoftShadowMap$1) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

	} else if (parameters.shadowMapType === VSMShadowMap$1) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';

	}

	return shadowMapTypeDefine;

}

function generateEnvMapTypeDefine$1(parameters) {

	let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';

	if (parameters.envMap) {

		switch (parameters.envMapMode) {

			case CubeReflectionMapping$1:
			case CubeRefractionMapping$1:
				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
				break;

			case CubeUVReflectionMapping$1:
				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
				break;

		}

	}

	return envMapTypeDefine;

}

function generateEnvMapModeDefine$1(parameters) {

	let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';

	if (parameters.envMap) {

		switch (parameters.envMapMode) {

			case CubeRefractionMapping$1:

				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
				break;

		}

	}

	return envMapModeDefine;

}

function generateEnvMapBlendingDefine$1(parameters) {

	let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';

	if (parameters.envMap) {

		switch (parameters.combine) {

			case MultiplyOperation$1:
				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
				break;

			case MixOperation$1:
				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
				break;

			case AddOperation$1:
				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
				break;

		}

	}

	return envMapBlendingDefine;

}

function generateCubeUVSize(parameters) {

	const imageHeight = parameters.envMapCubeUVHeight;

	if (imageHeight === null) return null;

	const maxMip = Math.log2(imageHeight) - 2;

	const texelHeight = 1.0 / imageHeight;

	const texelWidth = 1.0 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));

	return { texelWidth, texelHeight, maxMip };

}

function WebGLProgram$1(renderer, cacheKey, parameters, bindingStates) {

	// TODO Send this event to Three.js DevTools
	// console.log( 'WebGLProgram', cacheKey );

	const gl = renderer.getContext();

	const defines = parameters.defines;

	let vertexShader = parameters.vertexShader;
	let fragmentShader = parameters.fragmentShader;

	const shadowMapTypeDefine = generateShadowMapTypeDefine$1(parameters);
	const envMapTypeDefine = generateEnvMapTypeDefine$1(parameters);
	const envMapModeDefine = generateEnvMapModeDefine$1(parameters);
	const envMapBlendingDefine = generateEnvMapBlendingDefine$1(parameters);
	const envMapCubeUVSize = generateCubeUVSize(parameters);

	const customExtensions = parameters.isWebGL2 ? '' : generateExtensions$1(parameters);

	const customDefines = generateDefines$1(defines);

	const program = gl.createProgram();

	let prefixVertex, prefixFragment;
	let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';

	if (parameters.isRawShaderMaterial) {

		prefixVertex = [

			customDefines

		].filter(filterEmptyLine$1).join('\n');

		if (prefixVertex.length > 0) {

			prefixVertex += '\n';

		}

		prefixFragment = [

			customExtensions,
			customDefines

		].filter(filterEmptyLine$1).join('\n');

		if (prefixFragment.length > 0) {

			prefixFragment += '\n';

		}

	} else {

		prefixVertex = [

			generatePrecision$1(parameters),

			'#define SHADER_NAME ' + parameters.shaderName,

			customDefines,

			parameters.instancing ? '#define USE_INSTANCING' : '',
			parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',

			parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

			(parameters.useFog && parameters.fog) ? '#define USE_FOG' : '',
			(parameters.useFog && parameters.fogExp2) ? '#define FOG_EXP2' : '',

			parameters.map ? '#define USE_MAP' : '',
			parameters.envMap ? '#define USE_ENVMAP' : '',
			parameters.envMap ? '#define ' + envMapModeDefine : '',
			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
			parameters.aoMap ? '#define USE_AOMAP' : '',
			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
			parameters.normalMap ? '#define USE_NORMALMAP' : '',
			(parameters.normalMap && parameters.objectSpaceNormalMap) ? '#define OBJECTSPACE_NORMALMAP' : '',
			(parameters.normalMap && parameters.tangentSpaceNormalMap) ? '#define TANGENTSPACE_NORMALMAP' : '',

			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',

			parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
			parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',

			parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',

			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
			parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',
			parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',

			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',

			parameters.transmission ? '#define USE_TRANSMISSION' : '',
			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
			parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',

			parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',
			parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',

			parameters.vertexTangents ? '#define USE_TANGENT' : '',
			parameters.vertexColors ? '#define USE_COLOR' : '',
			parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
			parameters.vertexUvs ? '#define USE_UV' : '',
			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',

			parameters.flatShading ? '#define FLAT_SHADED' : '',

			parameters.skinning ? '#define USE_SKINNING' : '',

			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
			(parameters.morphColors && parameters.isWebGL2) ? '#define USE_MORPHCOLORS' : '',
			(parameters.morphTargetsCount > 0 && parameters.isWebGL2) ? '#define MORPHTARGETS_TEXTURE' : '',
			(parameters.morphTargetsCount > 0 && parameters.isWebGL2) ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '',
			(parameters.morphTargetsCount > 0 && parameters.isWebGL2) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',
			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
			parameters.flipSided ? '#define FLIP_SIDED' : '',

			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
			(parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth) ? '#define USE_LOGDEPTHBUF_EXT' : '',

			'uniform mat4 modelMatrix;',
			'uniform mat4 modelViewMatrix;',
			'uniform mat4 projectionMatrix;',
			'uniform mat4 viewMatrix;',
			'uniform mat3 normalMatrix;',
			'uniform vec3 cameraPosition;',
			'uniform bool isOrthographic;',

			'#ifdef USE_INSTANCING',

			'	attribute mat4 instanceMatrix;',

			'#endif',

			'#ifdef USE_INSTANCING_COLOR',

			'	attribute vec3 instanceColor;',

			'#endif',

			'attribute vec3 position;',
			'attribute vec3 normal;',
			'attribute vec2 uv;',

			'#ifdef USE_TANGENT',

			'	attribute vec4 tangent;',

			'#endif',

			'#if defined( USE_COLOR_ALPHA )',

			'	attribute vec4 color;',

			'#elif defined( USE_COLOR )',

			'	attribute vec3 color;',

			'#endif',

			'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',

			'	attribute vec3 morphTarget0;',
			'	attribute vec3 morphTarget1;',
			'	attribute vec3 morphTarget2;',
			'	attribute vec3 morphTarget3;',

			'	#ifdef USE_MORPHNORMALS',

			'		attribute vec3 morphNormal0;',
			'		attribute vec3 morphNormal1;',
			'		attribute vec3 morphNormal2;',
			'		attribute vec3 morphNormal3;',

			'	#else',

			'		attribute vec3 morphTarget4;',
			'		attribute vec3 morphTarget5;',
			'		attribute vec3 morphTarget6;',
			'		attribute vec3 morphTarget7;',

			'	#endif',

			'#endif',

			'#ifdef USE_SKINNING',

			'	attribute vec4 skinIndex;',
			'	attribute vec4 skinWeight;',

			'#endif',

			'\n'

		].filter(filterEmptyLine$1).join('\n');

		prefixFragment = [

			customExtensions,

			generatePrecision$1(parameters),

			'#define SHADER_NAME ' + parameters.shaderName,

			customDefines,

			(parameters.useFog && parameters.fog) ? '#define USE_FOG' : '',
			(parameters.useFog && parameters.fogExp2) ? '#define FOG_EXP2' : '',

			parameters.map ? '#define USE_MAP' : '',
			parameters.matcap ? '#define USE_MATCAP' : '',
			parameters.envMap ? '#define USE_ENVMAP' : '',
			parameters.envMap ? '#define ' + envMapTypeDefine : '',
			parameters.envMap ? '#define ' + envMapModeDefine : '',
			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
			envMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '',
			envMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '',
			envMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '',
			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
			parameters.aoMap ? '#define USE_AOMAP' : '',
			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
			parameters.normalMap ? '#define USE_NORMALMAP' : '',
			(parameters.normalMap && parameters.objectSpaceNormalMap) ? '#define OBJECTSPACE_NORMALMAP' : '',
			(parameters.normalMap && parameters.tangentSpaceNormalMap) ? '#define TANGENTSPACE_NORMALMAP' : '',

			parameters.clearcoat ? '#define USE_CLEARCOAT' : '',
			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',

			parameters.iridescence ? '#define USE_IRIDESCENCE' : '',
			parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
			parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',

			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
			parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',
			parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',
			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',

			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
			parameters.alphaTest ? '#define USE_ALPHATEST' : '',

			parameters.sheen ? '#define USE_SHEEN' : '',
			parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',
			parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',

			parameters.transmission ? '#define USE_TRANSMISSION' : '',
			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
			parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',

			parameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',

			parameters.vertexTangents ? '#define USE_TANGENT' : '',
			parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',
			parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
			parameters.vertexUvs ? '#define USE_UV' : '',
			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',

			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

			parameters.flatShading ? '#define FLAT_SHADED' : '',

			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
			parameters.flipSided ? '#define FLIP_SIDED' : '',

			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

			parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

			parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',

			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
			(parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth) ? '#define USE_LOGDEPTHBUF_EXT' : '',

			'uniform mat4 viewMatrix;',
			'uniform vec3 cameraPosition;',
			'uniform bool isOrthographic;',

			(parameters.toneMapping !== NoToneMapping$1) ? '#define TONE_MAPPING' : '',
			(parameters.toneMapping !== NoToneMapping$1) ? ShaderChunk$1['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below
			(parameters.toneMapping !== NoToneMapping$1) ? getToneMappingFunction$1('toneMapping', parameters.toneMapping) : '',

			parameters.dithering ? '#define DITHERING' : '',
			parameters.opaque ? '#define OPAQUE' : '',

			ShaderChunk$1['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below
			getTexelEncodingFunction$1('linearToOutputTexel', parameters.outputEncoding),

			parameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',

			'\n'

		].filter(filterEmptyLine$1).join('\n');

	}

	vertexShader = resolveIncludes$1(vertexShader);
	vertexShader = replaceLightNums$1(vertexShader, parameters);
	vertexShader = replaceClippingPlaneNums$1(vertexShader, parameters);

	fragmentShader = resolveIncludes$1(fragmentShader);
	fragmentShader = replaceLightNums$1(fragmentShader, parameters);
	fragmentShader = replaceClippingPlaneNums$1(fragmentShader, parameters);

	vertexShader = unrollLoops$1(vertexShader);
	fragmentShader = unrollLoops$1(fragmentShader);

	if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {

		// GLSL 3.0 conversion for built-in materials and ShaderMaterial

		versionString = '#version 300 es\n';

		prefixVertex = [
			'precision mediump sampler2DArray;',
			'#define attribute in',
			'#define varying out',
			'#define texture2D texture'
		].join('\n') + '\n' + prefixVertex;

		prefixFragment = [
			'#define varying in',
			(parameters.glslVersion === GLSL3$1) ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',
			(parameters.glslVersion === GLSL3$1) ? '' : '#define gl_FragColor pc_fragColor',
			'#define gl_FragDepthEXT gl_FragDepth',
			'#define texture2D texture',
			'#define textureCube texture',
			'#define texture2DProj textureProj',
			'#define texture2DLodEXT textureLod',
			'#define texture2DProjLodEXT textureProjLod',
			'#define textureCubeLodEXT textureLod',
			'#define texture2DGradEXT textureGrad',
			'#define texture2DProjGradEXT textureProjGrad',
			'#define textureCubeGradEXT textureGrad'
		].join('\n') + '\n' + prefixFragment;

	}

	const vertexGlsl = versionString + prefixVertex + vertexShader;
	const fragmentGlsl = versionString + prefixFragment + fragmentShader;

	// console.log( '*VERTEX*', vertexGlsl );
	// console.log( '*FRAGMENT*', fragmentGlsl );

	const glVertexShader = WebGLShader$1(gl, 35633, vertexGlsl);
	const glFragmentShader = WebGLShader$1(gl, 35632, fragmentGlsl);

	gl.attachShader(program, glVertexShader);
	gl.attachShader(program, glFragmentShader);

	// Force a particular attribute to index 0.

	if (parameters.index0AttributeName !== undefined) {

		gl.bindAttribLocation(program, 0, parameters.index0AttributeName);

	} else if (parameters.morphTargets === true) {

		// programs with morphTargets displace position out of attribute 0
		gl.bindAttribLocation(program, 0, 'position');

	}

	gl.linkProgram(program);

	// check for link errors
	if (renderer.debug.checkShaderErrors) {

		const programLog = gl.getProgramInfoLog(program).trim();
		const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
		const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();

		let runnable = true;
		let haveDiagnostics = true;

		if (gl.getProgramParameter(program, 35714) === false) {

			runnable = false;

			const vertexErrors = getShaderErrors$1(gl, glVertexShader, 'vertex');
			const fragmentErrors = getShaderErrors$1(gl, glFragmentShader, 'fragment');

			console.error(
				'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +
				'VALIDATE_STATUS ' + gl.getProgramParameter(program, 35715) + '\n\n' +
				'Program Info Log: ' + programLog + '\n' +
				vertexErrors + '\n' +
				fragmentErrors
			);

		} else if (programLog !== '') {

			console.warn('THREE.WebGLProgram: Program Info Log:', programLog);

		} else if (vertexLog === '' || fragmentLog === '') {

			haveDiagnostics = false;

		}

		if (haveDiagnostics) {

			this.diagnostics = {

				runnable: runnable,

				programLog: programLog,

				vertexShader: {

					log: vertexLog,
					prefix: prefixVertex

				},

				fragmentShader: {

					log: fragmentLog,
					prefix: prefixFragment

				}

			};

		}

	}

	// Clean up

	// Crashes in iOS9 and iOS10. #18402
	// gl.detachShader( program, glVertexShader );
	// gl.detachShader( program, glFragmentShader );

	gl.deleteShader(glVertexShader);
	gl.deleteShader(glFragmentShader);

	// set up caching for uniform locations

	let cachedUniforms;

	this.getUniforms = function () {

		if (cachedUniforms === undefined) {

			cachedUniforms = new WebGLUniforms$1(gl, program);

		}

		return cachedUniforms;

	};

	// set up caching for attribute locations

	let cachedAttributes;

	this.getAttributes = function () {

		if (cachedAttributes === undefined) {

			cachedAttributes = fetchAttributeLocations$1(gl, program);

		}

		return cachedAttributes;

	};

	// free resource

	this.destroy = function () {

		bindingStates.releaseStatesOfProgram(this);

		gl.deleteProgram(program);
		this.program = undefined;

	};

	//

	this.name = parameters.shaderName;
	this.id = programIdCount$1++;
	this.cacheKey = cacheKey;
	this.usedTimes = 1;
	this.program = program;
	this.vertexShader = glVertexShader;
	this.fragmentShader = glFragmentShader;

	return this;

}

let _id$2 = 0;

class WebGLShaderCache {

	constructor() {

		this.shaderCache = new Map();
		this.materialCache = new Map();

	}

	update(material) {

		const vertexShader = material.vertexShader;
		const fragmentShader = material.fragmentShader;

		const vertexShaderStage = this._getShaderStage(vertexShader);
		const fragmentShaderStage = this._getShaderStage(fragmentShader);

		const materialShaders = this._getShaderCacheForMaterial(material);

		if (materialShaders.has(vertexShaderStage) === false) {

			materialShaders.add(vertexShaderStage);
			vertexShaderStage.usedTimes++;

		}

		if (materialShaders.has(fragmentShaderStage) === false) {

			materialShaders.add(fragmentShaderStage);
			fragmentShaderStage.usedTimes++;

		}

		return this;

	}

	remove(material) {

		const materialShaders = this.materialCache.get(material);

		for (const shaderStage of materialShaders) {

			shaderStage.usedTimes--;

			if (shaderStage.usedTimes === 0) this.shaderCache.delete(shaderStage.code);

		}

		this.materialCache.delete(material);

		return this;

	}

	getVertexShaderID(material) {

		return this._getShaderStage(material.vertexShader).id;

	}

	getFragmentShaderID(material) {

		return this._getShaderStage(material.fragmentShader).id;

	}

	dispose() {

		this.shaderCache.clear();
		this.materialCache.clear();

	}

	_getShaderCacheForMaterial(material) {

		const cache = this.materialCache;

		if (cache.has(material) === false) {

			cache.set(material, new Set());

		}

		return cache.get(material);

	}

	_getShaderStage(code) {

		const cache = this.shaderCache;

		if (cache.has(code) === false) {

			const stage = new WebGLShaderStage(code);
			cache.set(code, stage);

		}

		return cache.get(code);

	}

}

class WebGLShaderStage {

	constructor(code) {

		this.id = _id$2++;

		this.code = code;
		this.usedTimes = 0;

	}

}

function WebGLPrograms$1(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {

	const _programLayers = new Layers$1();
	const _customShaders = new WebGLShaderCache();
	const programs = [];

	const isWebGL2 = capabilities.isWebGL2;
	const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
	const vertexTextures = capabilities.vertexTextures;
	let precision = capabilities.precision;

	const shaderIDs = {
		MeshDepthMaterial: 'depth',
		MeshDistanceMaterial: 'distanceRGBA',
		MeshNormalMaterial: 'normal',
		MeshBasicMaterial: 'basic',
		MeshLambertMaterial: 'lambert',
		MeshPhongMaterial: 'phong',
		MeshToonMaterial: 'toon',
		MeshStandardMaterial: 'physical',
		MeshPhysicalMaterial: 'physical',
		MeshMatcapMaterial: 'matcap',
		LineBasicMaterial: 'basic',
		LineDashedMaterial: 'dashed',
		PointsMaterial: 'points',
		ShadowMaterial: 'shadow',
		SpriteMaterial: 'sprite'
	};

	function getParameters(material, lights, shadows, scene, object) {

		const fog = scene.fog;
		const geometry = object.geometry;
		const environment = material.isMeshStandardMaterial ? scene.environment : null;

		const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
		const envMapCubeUVHeight = (!!envMap) && (envMap.mapping === CubeUVReflectionMapping$1) ? envMap.image.height : null;

		const shaderID = shaderIDs[material.type];

		// heuristics to create shader parameters according to lights in the scene
		// (not to blow over maxLights budget)

		if (material.precision !== null) {

			precision = capabilities.getMaxPrecision(material.precision);

			if (precision !== material.precision) {

				console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');

			}

		}

		//

		const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
		const morphTargetsCount = (morphAttribute !== undefined) ? morphAttribute.length : 0;

		let morphTextureStride = 0;

		if (geometry.morphAttributes.position !== undefined) morphTextureStride = 1;
		if (geometry.morphAttributes.normal !== undefined) morphTextureStride = 2;
		if (geometry.morphAttributes.color !== undefined) morphTextureStride = 3;

		//

		let vertexShader, fragmentShader;
		let customVertexShaderID, customFragmentShaderID;

		if (shaderID) {

			const shader = ShaderLib$1[shaderID];

			vertexShader = shader.vertexShader;
			fragmentShader = shader.fragmentShader;

		} else {

			vertexShader = material.vertexShader;
			fragmentShader = material.fragmentShader;

			_customShaders.update(material);

			customVertexShaderID = _customShaders.getVertexShaderID(material);
			customFragmentShaderID = _customShaders.getFragmentShaderID(material);

		}

		const currentRenderTarget = renderer.getRenderTarget();

		const useAlphaTest = material.alphaTest > 0;
		const useClearcoat = material.clearcoat > 0;
		const useIridescence = material.iridescence > 0;

		const parameters = {

			isWebGL2: isWebGL2,

			shaderID: shaderID,
			shaderName: material.type,

			vertexShader: vertexShader,
			fragmentShader: fragmentShader,
			defines: material.defines,

			customVertexShaderID: customVertexShaderID,
			customFragmentShaderID: customFragmentShaderID,

			isRawShaderMaterial: material.isRawShaderMaterial === true,
			glslVersion: material.glslVersion,

			precision: precision,

			instancing: object.isInstancedMesh === true,
			instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,

			supportsVertexTextures: vertexTextures,
			outputEncoding: (currentRenderTarget === null) ? renderer.outputEncoding : (currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.encoding : LinearEncoding$1),
			map: !!material.map,
			matcap: !!material.matcap,
			envMap: !!envMap,
			envMapMode: envMap && envMap.mapping,
			envMapCubeUVHeight: envMapCubeUVHeight,
			lightMap: !!material.lightMap,
			aoMap: !!material.aoMap,
			emissiveMap: !!material.emissiveMap,
			bumpMap: !!material.bumpMap,
			normalMap: !!material.normalMap,
			objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap$1,
			tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap$1,

			decodeVideoTexture: !!material.map && (material.map.isVideoTexture === true) && (material.map.encoding === sRGBEncoding$1),

			clearcoat: useClearcoat,
			clearcoatMap: useClearcoat && !!material.clearcoatMap,
			clearcoatRoughnessMap: useClearcoat && !!material.clearcoatRoughnessMap,
			clearcoatNormalMap: useClearcoat && !!material.clearcoatNormalMap,

			iridescence: useIridescence,
			iridescenceMap: useIridescence && !!material.iridescenceMap,
			iridescenceThicknessMap: useIridescence && !!material.iridescenceThicknessMap,

			displacementMap: !!material.displacementMap,
			roughnessMap: !!material.roughnessMap,
			metalnessMap: !!material.metalnessMap,
			specularMap: !!material.specularMap,
			specularIntensityMap: !!material.specularIntensityMap,
			specularColorMap: !!material.specularColorMap,

			opaque: material.transparent === false && material.blending === NormalBlending$1,

			alphaMap: !!material.alphaMap,
			alphaTest: useAlphaTest,

			gradientMap: !!material.gradientMap,

			sheen: material.sheen > 0,
			sheenColorMap: !!material.sheenColorMap,
			sheenRoughnessMap: !!material.sheenRoughnessMap,

			transmission: material.transmission > 0,
			transmissionMap: !!material.transmissionMap,
			thicknessMap: !!material.thicknessMap,

			combine: material.combine,

			vertexTangents: (!!material.normalMap && !!geometry.attributes.tangent),
			vertexColors: material.vertexColors,
			vertexAlphas: material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4,
			vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.iridescenceMap || !!material.iridescenceThicknessMap || !!material.displacementMap || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || !!material.sheenColorMap || !!material.sheenRoughnessMap,
			uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.iridescenceMap || !!material.iridescenceThicknessMap || material.transmission > 0 || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || material.sheen > 0 || !!material.sheenColorMap || !!material.sheenRoughnessMap) && !!material.displacementMap,

			fog: !!fog,
			useFog: material.fog === true,
			fogExp2: (fog && fog.isFogExp2),

			flatShading: !!material.flatShading,

			sizeAttenuation: material.sizeAttenuation,
			logarithmicDepthBuffer: logarithmicDepthBuffer,

			skinning: object.isSkinnedMesh === true,

			morphTargets: geometry.morphAttributes.position !== undefined,
			morphNormals: geometry.morphAttributes.normal !== undefined,
			morphColors: geometry.morphAttributes.color !== undefined,
			morphTargetsCount: morphTargetsCount,
			morphTextureStride: morphTextureStride,

			numDirLights: lights.directional.length,
			numPointLights: lights.point.length,
			numSpotLights: lights.spot.length,
			numRectAreaLights: lights.rectArea.length,
			numHemiLights: lights.hemi.length,

			numDirLightShadows: lights.directionalShadowMap.length,
			numPointLightShadows: lights.pointShadowMap.length,
			numSpotLightShadows: lights.spotShadowMap.length,

			numClippingPlanes: clipping.numPlanes,
			numClipIntersection: clipping.numIntersection,

			dithering: material.dithering,

			shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
			shadowMapType: renderer.shadowMap.type,

			toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping$1,
			physicallyCorrectLights: renderer.physicallyCorrectLights,

			premultipliedAlpha: material.premultipliedAlpha,

			doubleSided: material.side === DoubleSide$1,
			flipSided: material.side === BackSide$1,

			useDepthPacking: !!material.depthPacking,
			depthPacking: material.depthPacking || 0,

			index0AttributeName: material.index0AttributeName,

			extensionDerivatives: material.extensions && material.extensions.derivatives,
			extensionFragDepth: material.extensions && material.extensions.fragDepth,
			extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
			extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,

			rendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),
			rendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),
			rendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),

			customProgramCacheKey: material.customProgramCacheKey()

		};

		return parameters;

	}

	function getProgramCacheKey(parameters) {

		const array = [];

		if (parameters.shaderID) {

			array.push(parameters.shaderID);

		} else {

			array.push(parameters.customVertexShaderID);
			array.push(parameters.customFragmentShaderID);

		}

		if (parameters.defines !== undefined) {

			for (const name in parameters.defines) {

				array.push(name);
				array.push(parameters.defines[name]);

			}

		}

		if (parameters.isRawShaderMaterial === false) {

			getProgramCacheKeyParameters(array, parameters);
			getProgramCacheKeyBooleans(array, parameters);
			array.push(renderer.outputEncoding);

		}

		array.push(parameters.customProgramCacheKey);

		return array.join();

	}

	function getProgramCacheKeyParameters(array, parameters) {

		array.push(parameters.precision);
		array.push(parameters.outputEncoding);
		array.push(parameters.envMapMode);
		array.push(parameters.envMapCubeUVHeight);
		array.push(parameters.combine);
		array.push(parameters.vertexUvs);
		array.push(parameters.fogExp2);
		array.push(parameters.sizeAttenuation);
		array.push(parameters.morphTargetsCount);
		array.push(parameters.morphAttributeCount);
		array.push(parameters.numDirLights);
		array.push(parameters.numPointLights);
		array.push(parameters.numSpotLights);
		array.push(parameters.numHemiLights);
		array.push(parameters.numRectAreaLights);
		array.push(parameters.numDirLightShadows);
		array.push(parameters.numPointLightShadows);
		array.push(parameters.numSpotLightShadows);
		array.push(parameters.shadowMapType);
		array.push(parameters.toneMapping);
		array.push(parameters.numClippingPlanes);
		array.push(parameters.numClipIntersection);
		array.push(parameters.depthPacking);

	}

	function getProgramCacheKeyBooleans(array, parameters) {

		_programLayers.disableAll();

		if (parameters.isWebGL2)
			_programLayers.enable(0);
		if (parameters.supportsVertexTextures)
			_programLayers.enable(1);
		if (parameters.instancing)
			_programLayers.enable(2);
		if (parameters.instancingColor)
			_programLayers.enable(3);
		if (parameters.map)
			_programLayers.enable(4);
		if (parameters.matcap)
			_programLayers.enable(5);
		if (parameters.envMap)
			_programLayers.enable(6);
		if (parameters.lightMap)
			_programLayers.enable(7);
		if (parameters.aoMap)
			_programLayers.enable(8);
		if (parameters.emissiveMap)
			_programLayers.enable(9);
		if (parameters.bumpMap)
			_programLayers.enable(10);
		if (parameters.normalMap)
			_programLayers.enable(11);
		if (parameters.objectSpaceNormalMap)
			_programLayers.enable(12);
		if (parameters.tangentSpaceNormalMap)
			_programLayers.enable(13);
		if (parameters.clearcoat)
			_programLayers.enable(14);
		if (parameters.clearcoatMap)
			_programLayers.enable(15);
		if (parameters.clearcoatRoughnessMap)
			_programLayers.enable(16);
		if (parameters.clearcoatNormalMap)
			_programLayers.enable(17);
		if (parameters.iridescence)
			_programLayers.enable(18);
		if (parameters.iridescenceMap)
			_programLayers.enable(19);
		if (parameters.iridescenceThicknessMap)
			_programLayers.enable(20);
		if (parameters.displacementMap)
			_programLayers.enable(21);
		if (parameters.specularMap)
			_programLayers.enable(22);
		if (parameters.roughnessMap)
			_programLayers.enable(23);
		if (parameters.metalnessMap)
			_programLayers.enable(24);
		if (parameters.gradientMap)
			_programLayers.enable(25);
		if (parameters.alphaMap)
			_programLayers.enable(26);
		if (parameters.alphaTest)
			_programLayers.enable(27);
		if (parameters.vertexColors)
			_programLayers.enable(28);
		if (parameters.vertexAlphas)
			_programLayers.enable(29);
		if (parameters.vertexUvs)
			_programLayers.enable(30);
		if (parameters.vertexTangents)
			_programLayers.enable(31);
		if (parameters.uvsVertexOnly)
			_programLayers.enable(32);
		if (parameters.fog)
			_programLayers.enable(33);

		array.push(_programLayers.mask);
		_programLayers.disableAll();

		if (parameters.useFog)
			_programLayers.enable(0);
		if (parameters.flatShading)
			_programLayers.enable(1);
		if (parameters.logarithmicDepthBuffer)
			_programLayers.enable(2);
		if (parameters.skinning)
			_programLayers.enable(3);
		if (parameters.morphTargets)
			_programLayers.enable(4);
		if (parameters.morphNormals)
			_programLayers.enable(5);
		if (parameters.morphColors)
			_programLayers.enable(6);
		if (parameters.premultipliedAlpha)
			_programLayers.enable(7);
		if (parameters.shadowMapEnabled)
			_programLayers.enable(8);
		if (parameters.physicallyCorrectLights)
			_programLayers.enable(9);
		if (parameters.doubleSided)
			_programLayers.enable(10);
		if (parameters.flipSided)
			_programLayers.enable(11);
		if (parameters.useDepthPacking)
			_programLayers.enable(12);
		if (parameters.dithering)
			_programLayers.enable(13);
		if (parameters.specularIntensityMap)
			_programLayers.enable(14);
		if (parameters.specularColorMap)
			_programLayers.enable(15);
		if (parameters.transmission)
			_programLayers.enable(16);
		if (parameters.transmissionMap)
			_programLayers.enable(17);
		if (parameters.thicknessMap)
			_programLayers.enable(18);
		if (parameters.sheen)
			_programLayers.enable(19);
		if (parameters.sheenColorMap)
			_programLayers.enable(20);
		if (parameters.sheenRoughnessMap)
			_programLayers.enable(21);
		if (parameters.decodeVideoTexture)
			_programLayers.enable(22);
		if (parameters.opaque)
			_programLayers.enable(23);

		array.push(_programLayers.mask);

	}

	function getUniforms(material) {

		const shaderID = shaderIDs[material.type];
		let uniforms;

		if (shaderID) {

			const shader = ShaderLib$1[shaderID];
			uniforms = UniformsUtils$1.clone(shader.uniforms);

		} else {

			uniforms = material.uniforms;

		}

		return uniforms;

	}

	function acquireProgram(parameters, cacheKey) {

		let program;

		// Check if code has been already compiled
		for (let p = 0, pl = programs.length; p < pl; p++) {

			const preexistingProgram = programs[p];

			if (preexistingProgram.cacheKey === cacheKey) {

				program = preexistingProgram;
				++program.usedTimes;

				break;

			}

		}

		if (program === undefined) {

			program = new WebGLProgram$1(renderer, cacheKey, parameters, bindingStates);
			programs.push(program);

		}

		return program;

	}

	function releaseProgram(program) {

		if (--program.usedTimes === 0) {

			// Remove from unordered set
			const i = programs.indexOf(program);
			programs[i] = programs[programs.length - 1];
			programs.pop();

			// Free WebGL resources
			program.destroy();

		}

	}

	function releaseShaderCache(material) {

		_customShaders.remove(material);

	}

	function dispose() {

		_customShaders.dispose();

	}

	return {
		getParameters: getParameters,
		getProgramCacheKey: getProgramCacheKey,
		getUniforms: getUniforms,
		acquireProgram: acquireProgram,
		releaseProgram: releaseProgram,
		releaseShaderCache: releaseShaderCache,
		// Exposed for resource monitoring & error feedback via renderer.info:
		programs: programs,
		dispose: dispose
	};

}

function WebGLProperties$1() {

	let properties = new WeakMap();

	function get(object) {

		let map = properties.get(object);

		if (map === undefined) {

			map = {};
			properties.set(object, map);

		}

		return map;

	}

	function remove(object) {

		properties.delete(object);

	}

	function update(object, key, value) {

		properties.get(object)[key] = value;

	}

	function dispose() {

		properties = new WeakMap();

	}

	return {
		get: get,
		remove: remove,
		update: update,
		dispose: dispose
	};

}

function painterSortStable$1(a, b) {

	if (a.groupOrder !== b.groupOrder) {

		return a.groupOrder - b.groupOrder;

	} else if (a.renderOrder !== b.renderOrder) {

		return a.renderOrder - b.renderOrder;

	} else if (a.material.id !== b.material.id) {

		return a.material.id - b.material.id;

	} else if (a.z !== b.z) {

		return a.z - b.z;

	} else {

		return a.id - b.id;

	}

}

function reversePainterSortStable$1(a, b) {

	if (a.groupOrder !== b.groupOrder) {

		return a.groupOrder - b.groupOrder;

	} else if (a.renderOrder !== b.renderOrder) {

		return a.renderOrder - b.renderOrder;

	} else if (a.z !== b.z) {

		return b.z - a.z;

	} else {

		return a.id - b.id;

	}

}


function WebGLRenderList$1() {

	const renderItems = [];
	let renderItemsIndex = 0;

	const opaque = [];
	const transmissive = [];
	const transparent = [];

	function init() {

		renderItemsIndex = 0;

		opaque.length = 0;
		transmissive.length = 0;
		transparent.length = 0;

	}

	function getNextRenderItem(object, geometry, material, groupOrder, z, group) {

		let renderItem = renderItems[renderItemsIndex];

		if (renderItem === undefined) {

			renderItem = {
				id: object.id,
				object: object,
				geometry: geometry,
				material: material,
				groupOrder: groupOrder,
				renderOrder: object.renderOrder,
				z: z,
				group: group
			};

			renderItems[renderItemsIndex] = renderItem;

		} else {

			renderItem.id = object.id;
			renderItem.object = object;
			renderItem.geometry = geometry;
			renderItem.material = material;
			renderItem.groupOrder = groupOrder;
			renderItem.renderOrder = object.renderOrder;
			renderItem.z = z;
			renderItem.group = group;

		}

		renderItemsIndex++;

		return renderItem;

	}

	function push(object, geometry, material, groupOrder, z, group) {

		const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);

		if (material.transmission > 0.0) {

			transmissive.push(renderItem);

		} else if (material.transparent === true) {

			transparent.push(renderItem);

		} else {

			opaque.push(renderItem);

		}

	}

	function unshift(object, geometry, material, groupOrder, z, group) {

		const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);

		if (material.transmission > 0.0) {

			transmissive.unshift(renderItem);

		} else if (material.transparent === true) {

			transparent.unshift(renderItem);

		} else {

			opaque.unshift(renderItem);

		}

	}

	function sort(customOpaqueSort, customTransparentSort) {

		if (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable$1);
		if (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable$1);
		if (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable$1);

	}

	function finish() {

		// Clear references from inactive renderItems in the list

		for (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {

			const renderItem = renderItems[i];

			if (renderItem.id === null) break;

			renderItem.id = null;
			renderItem.object = null;
			renderItem.geometry = null;
			renderItem.material = null;
			renderItem.group = null;

		}

	}

	return {

		opaque: opaque,
		transmissive: transmissive,
		transparent: transparent,

		init: init,
		push: push,
		unshift: unshift,
		finish: finish,

		sort: sort
	};

}

function WebGLRenderLists$1() {

	let lists = new WeakMap();

	function get(scene, renderCallDepth) {

		let list;

		if (lists.has(scene) === false) {

			list = new WebGLRenderList$1();
			lists.set(scene, [list]);

		} else {

			if (renderCallDepth >= lists.get(scene).length) {

				list = new WebGLRenderList$1();
				lists.get(scene).push(list);

			} else {

				list = lists.get(scene)[renderCallDepth];

			}

		}

		return list;

	}

	function dispose() {

		lists = new WeakMap();

	}

	return {
		get: get,
		dispose: dispose
	};

}

function UniformsCache$1() {

	const lights = {};

	return {

		get: function (light) {

			if (lights[light.id] !== undefined) {

				return lights[light.id];

			}

			let uniforms;

			switch (light.type) {

				case 'DirectionalLight':
					uniforms = {
						direction: new Vector3$1(),
						color: new Color$1()
					};
					break;

				case 'SpotLight':
					uniforms = {
						position: new Vector3$1(),
						direction: new Vector3$1(),
						color: new Color$1(),
						distance: 0,
						coneCos: 0,
						penumbraCos: 0,
						decay: 0
					};
					break;

				case 'PointLight':
					uniforms = {
						position: new Vector3$1(),
						color: new Color$1(),
						distance: 0,
						decay: 0
					};
					break;

				case 'HemisphereLight':
					uniforms = {
						direction: new Vector3$1(),
						skyColor: new Color$1(),
						groundColor: new Color$1()
					};
					break;

				case 'RectAreaLight':
					uniforms = {
						color: new Color$1(),
						position: new Vector3$1(),
						halfWidth: new Vector3$1(),
						halfHeight: new Vector3$1()
					};
					break;

			}

			lights[light.id] = uniforms;

			return uniforms;

		}

	};

}

function ShadowUniformsCache$1() {

	const lights = {};

	return {

		get: function (light) {

			if (lights[light.id] !== undefined) {

				return lights[light.id];

			}

			let uniforms;

			switch (light.type) {

				case 'DirectionalLight':
					uniforms = {
						shadowBias: 0,
						shadowNormalBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2$1()
					};
					break;

				case 'SpotLight':
					uniforms = {
						shadowBias: 0,
						shadowNormalBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2$1()
					};
					break;

				case 'PointLight':
					uniforms = {
						shadowBias: 0,
						shadowNormalBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2$1(),
						shadowCameraNear: 1,
						shadowCameraFar: 1000
					};
					break;

				// TODO (abelnation): set RectAreaLight shadow uniforms

			}

			lights[light.id] = uniforms;

			return uniforms;

		}

	};

}



let nextVersion$1 = 0;

function shadowCastingLightsFirst$1(lightA, lightB) {

	return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);

}

function WebGLLights$1(extensions, capabilities) {

	const cache = new UniformsCache$1();

	const shadowCache = ShadowUniformsCache$1();

	const state = {

		version: 0,

		hash: {
			directionalLength: - 1,
			pointLength: - 1,
			spotLength: - 1,
			rectAreaLength: - 1,
			hemiLength: - 1,

			numDirectionalShadows: - 1,
			numPointShadows: - 1,
			numSpotShadows: - 1
		},

		ambient: [0, 0, 0],
		probe: [],
		directional: [],
		directionalShadow: [],
		directionalShadowMap: [],
		directionalShadowMatrix: [],
		spot: [],
		spotShadow: [],
		spotShadowMap: [],
		spotShadowMatrix: [],
		rectArea: [],
		rectAreaLTC1: null,
		rectAreaLTC2: null,
		point: [],
		pointShadow: [],
		pointShadowMap: [],
		pointShadowMatrix: [],
		hemi: []

	};

	for (let i = 0; i < 9; i++) state.probe.push(new Vector3$1());

	const vector3 = new Vector3$1();
	const matrix4 = new Matrix4$1();
	const matrix42 = new Matrix4$1();

	function setup(lights, physicallyCorrectLights) {

		let r = 0, g = 0, b = 0;

		for (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);

		let directionalLength = 0;
		let pointLength = 0;
		let spotLength = 0;
		let rectAreaLength = 0;
		let hemiLength = 0;

		let numDirectionalShadows = 0;
		let numPointShadows = 0;
		let numSpotShadows = 0;

		lights.sort(shadowCastingLightsFirst$1);

		// artist-friendly light intensity scaling factor
		const scaleFactor = (physicallyCorrectLights !== true) ? Math.PI : 1;

		for (let i = 0, l = lights.length; i < l; i++) {

			const light = lights[i];

			const color = light.color;
			const intensity = light.intensity;
			const distance = light.distance;

			const shadowMap = (light.shadow && light.shadow.map) ? light.shadow.map.texture : null;

			if (light.isAmbientLight) {

				r += color.r * intensity * scaleFactor;
				g += color.g * intensity * scaleFactor;
				b += color.b * intensity * scaleFactor;

			} else if (light.isLightProbe) {

				for (let j = 0; j < 9; j++) {

					state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);

				}

			} else if (light.isDirectionalLight) {

				const uniforms = cache.get(light);

				uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);

				if (light.castShadow) {

					const shadow = light.shadow;

					const shadowUniforms = shadowCache.get(light);

					shadowUniforms.shadowBias = shadow.bias;
					shadowUniforms.shadowNormalBias = shadow.normalBias;
					shadowUniforms.shadowRadius = shadow.radius;
					shadowUniforms.shadowMapSize = shadow.mapSize;

					state.directionalShadow[directionalLength] = shadowUniforms;
					state.directionalShadowMap[directionalLength] = shadowMap;
					state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;

					numDirectionalShadows++;

				}

				state.directional[directionalLength] = uniforms;

				directionalLength++;

			} else if (light.isSpotLight) {

				const uniforms = cache.get(light);

				uniforms.position.setFromMatrixPosition(light.matrixWorld);

				uniforms.color.copy(color).multiplyScalar(intensity * scaleFactor);
				uniforms.distance = distance;

				uniforms.coneCos = Math.cos(light.angle);
				uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
				uniforms.decay = light.decay;

				if (light.castShadow) {

					const shadow = light.shadow;

					const shadowUniforms = shadowCache.get(light);

					shadowUniforms.shadowBias = shadow.bias;
					shadowUniforms.shadowNormalBias = shadow.normalBias;
					shadowUniforms.shadowRadius = shadow.radius;
					shadowUniforms.shadowMapSize = shadow.mapSize;

					state.spotShadow[spotLength] = shadowUniforms;
					state.spotShadowMap[spotLength] = shadowMap;
					state.spotShadowMatrix[spotLength] = light.shadow.matrix;

					numSpotShadows++;

				}

				state.spot[spotLength] = uniforms;

				spotLength++;

			} else if (light.isRectAreaLight) {

				const uniforms = cache.get(light);

				// (a) intensity is the total visible light emitted
				//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );

				// (b) intensity is the brightness of the light
				uniforms.color.copy(color).multiplyScalar(intensity);

				uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);
				uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);

				state.rectArea[rectAreaLength] = uniforms;

				rectAreaLength++;

			} else if (light.isPointLight) {

				const uniforms = cache.get(light);

				uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
				uniforms.distance = light.distance;
				uniforms.decay = light.decay;

				if (light.castShadow) {

					const shadow = light.shadow;

					const shadowUniforms = shadowCache.get(light);

					shadowUniforms.shadowBias = shadow.bias;
					shadowUniforms.shadowNormalBias = shadow.normalBias;
					shadowUniforms.shadowRadius = shadow.radius;
					shadowUniforms.shadowMapSize = shadow.mapSize;
					shadowUniforms.shadowCameraNear = shadow.camera.near;
					shadowUniforms.shadowCameraFar = shadow.camera.far;

					state.pointShadow[pointLength] = shadowUniforms;
					state.pointShadowMap[pointLength] = shadowMap;
					state.pointShadowMatrix[pointLength] = light.shadow.matrix;

					numPointShadows++;

				}

				state.point[pointLength] = uniforms;

				pointLength++;

			} else if (light.isHemisphereLight) {

				const uniforms = cache.get(light);

				uniforms.skyColor.copy(light.color).multiplyScalar(intensity * scaleFactor);
				uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity * scaleFactor);

				state.hemi[hemiLength] = uniforms;

				hemiLength++;

			}

		}

		if (rectAreaLength > 0) {

			if (capabilities.isWebGL2) {

				// WebGL 2

				state.rectAreaLTC1 = UniformsLib$1.LTC_FLOAT_1;
				state.rectAreaLTC2 = UniformsLib$1.LTC_FLOAT_2;

			} else {

				// WebGL 1

				if (extensions.has('OES_texture_float_linear') === true) {

					state.rectAreaLTC1 = UniformsLib$1.LTC_FLOAT_1;
					state.rectAreaLTC2 = UniformsLib$1.LTC_FLOAT_2;

				} else if (extensions.has('OES_texture_half_float_linear') === true) {

					state.rectAreaLTC1 = UniformsLib$1.LTC_HALF_1;
					state.rectAreaLTC2 = UniformsLib$1.LTC_HALF_2;

				} else {

					console.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');

				}

			}

		}

		state.ambient[0] = r;
		state.ambient[1] = g;
		state.ambient[2] = b;

		const hash = state.hash;

		if (hash.directionalLength !== directionalLength ||
			hash.pointLength !== pointLength ||
			hash.spotLength !== spotLength ||
			hash.rectAreaLength !== rectAreaLength ||
			hash.hemiLength !== hemiLength ||
			hash.numDirectionalShadows !== numDirectionalShadows ||
			hash.numPointShadows !== numPointShadows ||
			hash.numSpotShadows !== numSpotShadows) {

			state.directional.length = directionalLength;
			state.spot.length = spotLength;
			state.rectArea.length = rectAreaLength;
			state.point.length = pointLength;
			state.hemi.length = hemiLength;

			state.directionalShadow.length = numDirectionalShadows;
			state.directionalShadowMap.length = numDirectionalShadows;
			state.pointShadow.length = numPointShadows;
			state.pointShadowMap.length = numPointShadows;
			state.spotShadow.length = numSpotShadows;
			state.spotShadowMap.length = numSpotShadows;
			state.directionalShadowMatrix.length = numDirectionalShadows;
			state.pointShadowMatrix.length = numPointShadows;
			state.spotShadowMatrix.length = numSpotShadows;

			hash.directionalLength = directionalLength;
			hash.pointLength = pointLength;
			hash.spotLength = spotLength;
			hash.rectAreaLength = rectAreaLength;
			hash.hemiLength = hemiLength;

			hash.numDirectionalShadows = numDirectionalShadows;
			hash.numPointShadows = numPointShadows;
			hash.numSpotShadows = numSpotShadows;

			state.version = nextVersion$1++;

		}

	}

	function setupView(lights, camera) {

		let directionalLength = 0;
		let pointLength = 0;
		let spotLength = 0;
		let rectAreaLength = 0;
		let hemiLength = 0;

		const viewMatrix = camera.matrixWorldInverse;

		for (let i = 0, l = lights.length; i < l; i++) {

			const light = lights[i];

			if (light.isDirectionalLight) {

				const uniforms = state.directional[directionalLength];

				uniforms.direction.setFromMatrixPosition(light.matrixWorld);
				vector3.setFromMatrixPosition(light.target.matrixWorld);
				uniforms.direction.sub(vector3);
				uniforms.direction.transformDirection(viewMatrix);

				directionalLength++;

			} else if (light.isSpotLight) {

				const uniforms = state.spot[spotLength];

				uniforms.position.setFromMatrixPosition(light.matrixWorld);
				uniforms.position.applyMatrix4(viewMatrix);

				uniforms.direction.setFromMatrixPosition(light.matrixWorld);
				vector3.setFromMatrixPosition(light.target.matrixWorld);
				uniforms.direction.sub(vector3);
				uniforms.direction.transformDirection(viewMatrix);

				spotLength++;

			} else if (light.isRectAreaLight) {

				const uniforms = state.rectArea[rectAreaLength];

				uniforms.position.setFromMatrixPosition(light.matrixWorld);
				uniforms.position.applyMatrix4(viewMatrix);

				// extract local rotation of light to derive width/height half vectors
				matrix42.identity();
				matrix4.copy(light.matrixWorld);
				matrix4.premultiply(viewMatrix);
				matrix42.extractRotation(matrix4);

				uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);
				uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);

				uniforms.halfWidth.applyMatrix4(matrix42);
				uniforms.halfHeight.applyMatrix4(matrix42);

				rectAreaLength++;

			} else if (light.isPointLight) {

				const uniforms = state.point[pointLength];

				uniforms.position.setFromMatrixPosition(light.matrixWorld);
				uniforms.position.applyMatrix4(viewMatrix);

				pointLength++;

			} else if (light.isHemisphereLight) {

				const uniforms = state.hemi[hemiLength];

				uniforms.direction.setFromMatrixPosition(light.matrixWorld);
				uniforms.direction.transformDirection(viewMatrix);

				hemiLength++;

			}

		}

	}

	return {
		setup: setup,
		setupView: setupView,
		state: state
	};

}

function WebGLRenderState$1(extensions, capabilities) {

	const lights = new WebGLLights$1(extensions, capabilities);

	const lightsArray = [];
	const shadowsArray = [];

	function init() {

		lightsArray.length = 0;
		shadowsArray.length = 0;

	}

	function pushLight(light) {

		lightsArray.push(light);

	}

	function pushShadow(shadowLight) {

		shadowsArray.push(shadowLight);

	}

	function setupLights(physicallyCorrectLights) {

		lights.setup(lightsArray, physicallyCorrectLights);

	}

	function setupLightsView(camera) {

		lights.setupView(lightsArray, camera);

	}

	const state = {
		lightsArray: lightsArray,
		shadowsArray: shadowsArray,

		lights: lights
	};

	return {
		init: init,
		state: state,
		setupLights: setupLights,
		setupLightsView: setupLightsView,

		pushLight: pushLight,
		pushShadow: pushShadow
	};

}

function WebGLRenderStates$1(extensions, capabilities) {

	let renderStates = new WeakMap();

	function get(scene, renderCallDepth = 0) {

		let renderState;

		if (renderStates.has(scene) === false) {

			renderState = new WebGLRenderState$1(extensions, capabilities);
			renderStates.set(scene, [renderState]);

		} else {

			if (renderCallDepth >= renderStates.get(scene).length) {

				renderState = new WebGLRenderState$1(extensions, capabilities);
				renderStates.get(scene).push(renderState);

			} else {

				renderState = renderStates.get(scene)[renderCallDepth];

			}

		}

		return renderState;

	}

	function dispose() {

		renderStates = new WeakMap();

	}

	return {
		get: get,
		dispose: dispose
	};

}

class MeshDepthMaterial$1 extends Material$1 {

	constructor(parameters) {

		super();

		this.isMeshDepthMaterial = true;

		this.type = 'MeshDepthMaterial';

		this.depthPacking = BasicDepthPacking$1;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.setValues(parameters);

	}

	copy(source) {

		super.copy(source);

		this.depthPacking = source.depthPacking;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	}

}

class MeshDistanceMaterial$1 extends Material$1 {

	constructor(parameters) {

		super();

		this.isMeshDistanceMaterial = true;

		this.type = 'MeshDistanceMaterial';

		this.referencePosition = new Vector3$1();
		this.nearDistance = 1;
		this.farDistance = 1000;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.setValues(parameters);

	}

	copy(source) {

		super.copy(source);

		this.referencePosition.copy(source.referencePosition);
		this.nearDistance = source.nearDistance;
		this.farDistance = source.farDistance;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		return this;

	}

}

const vertex$h = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";

const fragment$h = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";

function WebGLShadowMap$1(_renderer, _objects, _capabilities) {

	let _frustum = new Frustum$1();

	const _shadowMapSize = new Vector2$1(),
		_viewportSize = new Vector2$1(),

		_viewport = new Vector4$1(),

		_depthMaterial = new MeshDepthMaterial$1({ depthPacking: RGBADepthPacking$1 }),
		_distanceMaterial = new MeshDistanceMaterial$1(),

		_materialCache = {},

		_maxTextureSize = _capabilities.maxTextureSize;

	const shadowSide = { 0: BackSide$1, 1: FrontSide$1, 2: DoubleSide$1 };

	const shadowMaterialVertical = new ShaderMaterial$1({
		defines: {
			VSM_SAMPLES: 8
		},
		uniforms: {
			shadow_pass: { value: null },
			resolution: { value: new Vector2$1() },
			radius: { value: 4.0 }
		},

		vertexShader: vertex$h,
		fragmentShader: fragment$h

	});

	const shadowMaterialHorizontal = shadowMaterialVertical.clone();
	shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;

	const fullScreenTri = new BufferGeometry$1();
	fullScreenTri.setAttribute(
		'position',
		new BufferAttribute$1(
			new Float32Array([- 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5]),
			3
		)
	);

	const fullScreenMesh = new Mesh$1(fullScreenTri, shadowMaterialVertical);

	const scope = this;

	this.enabled = false;

	this.autoUpdate = true;
	this.needsUpdate = false;

	this.type = PCFShadowMap$1;

	this.render = function (lights, scene, camera) {

		if (scope.enabled === false) return;
		if (scope.autoUpdate === false && scope.needsUpdate === false) return;

		if (lights.length === 0) return;

		const currentRenderTarget = _renderer.getRenderTarget();
		const activeCubeFace = _renderer.getActiveCubeFace();
		const activeMipmapLevel = _renderer.getActiveMipmapLevel();

		const _state = _renderer.state;

		// Set GL state for depth map.
		_state.setBlending(NoBlending$1);
		_state.buffers.color.setClear(1, 1, 1, 1);
		_state.buffers.depth.setTest(true);
		_state.setScissorTest(false);

		// render depth map

		for (let i = 0, il = lights.length; i < il; i++) {

			const light = lights[i];
			const shadow = light.shadow;

			if (shadow === undefined) {

				console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');
				continue;

			}

			if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;

			_shadowMapSize.copy(shadow.mapSize);

			const shadowFrameExtents = shadow.getFrameExtents();

			_shadowMapSize.multiply(shadowFrameExtents);

			_viewportSize.copy(shadow.mapSize);

			if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {

				if (_shadowMapSize.x > _maxTextureSize) {

					_viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
					_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
					shadow.mapSize.x = _viewportSize.x;

				}

				if (_shadowMapSize.y > _maxTextureSize) {

					_viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
					_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
					shadow.mapSize.y = _viewportSize.y;

				}

			}

			if (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap$1) {

				shadow.map = new WebGLRenderTarget$1(_shadowMapSize.x, _shadowMapSize.y);
				shadow.map.texture.name = light.name + '.shadowMap';

				shadow.mapPass = new WebGLRenderTarget$1(_shadowMapSize.x, _shadowMapSize.y);

				shadow.camera.updateProjectionMatrix();

			}

			if (shadow.map === null) {

				const pars = { minFilter: NearestFilter$1, magFilter: NearestFilter$1, format: RGBAFormat$1 };

				shadow.map = new WebGLRenderTarget$1(_shadowMapSize.x, _shadowMapSize.y, pars);
				shadow.map.texture.name = light.name + '.shadowMap';

				shadow.camera.updateProjectionMatrix();

			}

			_renderer.setRenderTarget(shadow.map);
			_renderer.clear();

			const viewportCount = shadow.getViewportCount();

			for (let vp = 0; vp < viewportCount; vp++) {

				const viewport = shadow.getViewport(vp);

				_viewport.set(
					_viewportSize.x * viewport.x,
					_viewportSize.y * viewport.y,
					_viewportSize.x * viewport.z,
					_viewportSize.y * viewport.w
				);

				_state.viewport(_viewport);

				shadow.updateMatrices(light, vp);

				_frustum = shadow.getFrustum();

				renderObject(scene, camera, shadow.camera, light, this.type);

			}

			// do blur pass for VSM

			if (!shadow.isPointLightShadow && this.type === VSMShadowMap$1) {

				VSMPass(shadow, camera);

			}

			shadow.needsUpdate = false;

		}

		scope.needsUpdate = false;

		_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);

	};

	function VSMPass(shadow, camera) {

		const geometry = _objects.update(fullScreenMesh);

		if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {

			shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
			shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;

			shadowMaterialVertical.needsUpdate = true;
			shadowMaterialHorizontal.needsUpdate = true;

		}

		// vertical pass

		shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
		shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
		shadowMaterialVertical.uniforms.radius.value = shadow.radius;
		_renderer.setRenderTarget(shadow.mapPass);
		_renderer.clear();
		_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);

		// horizontal pass

		shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
		shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
		shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
		_renderer.setRenderTarget(shadow.map);
		_renderer.clear();
		_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);

	}

	function getDepthMaterial(object, material, light, shadowCameraNear, shadowCameraFar, type) {

		let result = null;

		const customMaterial = (light.isPointLight === true) ? object.customDistanceMaterial : object.customDepthMaterial;

		if (customMaterial !== undefined) {

			result = customMaterial;

		} else {

			result = (light.isPointLight === true) ? _distanceMaterial : _depthMaterial;

		}

		if ((_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) ||
			(material.displacementMap && material.displacementScale !== 0) ||
			(material.alphaMap && material.alphaTest > 0)) {

			// in this case we need a unique material instance reflecting the
			// appropriate state

			const keyA = result.uuid, keyB = material.uuid;

			let materialsForVariant = _materialCache[keyA];

			if (materialsForVariant === undefined) {

				materialsForVariant = {};
				_materialCache[keyA] = materialsForVariant;

			}

			let cachedMaterial = materialsForVariant[keyB];

			if (cachedMaterial === undefined) {

				cachedMaterial = result.clone();
				materialsForVariant[keyB] = cachedMaterial;

			}

			result = cachedMaterial;

		}

		result.visible = material.visible;
		result.wireframe = material.wireframe;

		if (type === VSMShadowMap$1) {

			result.side = (material.shadowSide !== null) ? material.shadowSide : material.side;

		} else {

			result.side = (material.shadowSide !== null) ? material.shadowSide : shadowSide[material.side];

		}

		result.alphaMap = material.alphaMap;
		result.alphaTest = material.alphaTest;

		result.clipShadows = material.clipShadows;
		result.clippingPlanes = material.clippingPlanes;
		result.clipIntersection = material.clipIntersection;

		result.displacementMap = material.displacementMap;
		result.displacementScale = material.displacementScale;
		result.displacementBias = material.displacementBias;

		result.wireframeLinewidth = material.wireframeLinewidth;
		result.linewidth = material.linewidth;

		if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {

			result.referencePosition.setFromMatrixPosition(light.matrixWorld);
			result.nearDistance = shadowCameraNear;
			result.farDistance = shadowCameraFar;

		}

		return result;

	}

	function renderObject(object, camera, shadowCamera, light, type) {

		if (object.visible === false) return;

		const visible = object.layers.test(camera.layers);

		if (visible && (object.isMesh || object.isLine || object.isPoints)) {

			if ((object.castShadow || (object.receiveShadow && type === VSMShadowMap$1)) && (!object.frustumCulled || _frustum.intersectsObject(object))) {

				object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);

				const geometry = _objects.update(object);
				const material = object.material;

				if (Array.isArray(material)) {

					const groups = geometry.groups;

					for (let k = 0, kl = groups.length; k < kl; k++) {

						const group = groups[k];
						const groupMaterial = material[group.materialIndex];

						if (groupMaterial && groupMaterial.visible) {

							const depthMaterial = getDepthMaterial(object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);

							_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);

						}

					}

				} else if (material.visible) {

					const depthMaterial = getDepthMaterial(object, material, light, shadowCamera.near, shadowCamera.far, type);

					_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);

				}

			}

		}

		const children = object.children;

		for (let i = 0, l = children.length; i < l; i++) {

			renderObject(children[i], camera, shadowCamera, light, type);

		}

	}

}

function WebGLState$1(gl, extensions, capabilities) {

	const isWebGL2 = capabilities.isWebGL2;

	function ColorBuffer() {

		let locked = false;

		const color = new Vector4$1();
		let currentColorMask = null;
		const currentColorClear = new Vector4$1(0, 0, 0, 0);

		return {

			setMask: function (colorMask) {

				if (currentColorMask !== colorMask && !locked) {

					gl.colorMask(colorMask, colorMask, colorMask, colorMask);
					currentColorMask = colorMask;

				}

			},

			setLocked: function (lock) {

				locked = lock;

			},

			setClear: function (r, g, b, a, premultipliedAlpha) {

				if (premultipliedAlpha === true) {

					r *= a; g *= a; b *= a;

				}

				color.set(r, g, b, a);

				if (currentColorClear.equals(color) === false) {

					gl.clearColor(r, g, b, a);
					currentColorClear.copy(color);

				}

			},

			reset: function () {

				locked = false;

				currentColorMask = null;
				currentColorClear.set(- 1, 0, 0, 0); // set to invalid state

			}

		};

	}

	function DepthBuffer() {

		let locked = false;

		let currentDepthMask = null;
		let currentDepthFunc = null;
		let currentDepthClear = null;

		return {

			setTest: function (depthTest) {

				if (depthTest) {

					enable(2929);

				} else {

					disable(2929);

				}

			},

			setMask: function (depthMask) {

				if (currentDepthMask !== depthMask && !locked) {

					gl.depthMask(depthMask);
					currentDepthMask = depthMask;

				}

			},

			setFunc: function (depthFunc) {

				if (currentDepthFunc !== depthFunc) {

					if (depthFunc) {

						switch (depthFunc) {

							case NeverDepth$1:

								gl.depthFunc(512);
								break;

							case AlwaysDepth$1:

								gl.depthFunc(519);
								break;

							case LessDepth$1:

								gl.depthFunc(513);
								break;

							case LessEqualDepth$1:

								gl.depthFunc(515);
								break;

							case EqualDepth$1:

								gl.depthFunc(514);
								break;

							case GreaterEqualDepth$1:

								gl.depthFunc(518);
								break;

							case GreaterDepth$1:

								gl.depthFunc(516);
								break;

							case NotEqualDepth$1:

								gl.depthFunc(517);
								break;

							default:

								gl.depthFunc(515);

						}

					} else {

						gl.depthFunc(515);

					}

					currentDepthFunc = depthFunc;

				}

			},

			setLocked: function (lock) {

				locked = lock;

			},

			setClear: function (depth) {

				if (currentDepthClear !== depth) {

					gl.clearDepth(depth);
					currentDepthClear = depth;

				}

			},

			reset: function () {

				locked = false;

				currentDepthMask = null;
				currentDepthFunc = null;
				currentDepthClear = null;

			}

		};

	}

	function StencilBuffer() {

		let locked = false;

		let currentStencilMask = null;
		let currentStencilFunc = null;
		let currentStencilRef = null;
		let currentStencilFuncMask = null;
		let currentStencilFail = null;
		let currentStencilZFail = null;
		let currentStencilZPass = null;
		let currentStencilClear = null;

		return {

			setTest: function (stencilTest) {

				if (!locked) {

					if (stencilTest) {

						enable(2960);

					} else {

						disable(2960);

					}

				}

			},

			setMask: function (stencilMask) {

				if (currentStencilMask !== stencilMask && !locked) {

					gl.stencilMask(stencilMask);
					currentStencilMask = stencilMask;

				}

			},

			setFunc: function (stencilFunc, stencilRef, stencilMask) {

				if (currentStencilFunc !== stencilFunc ||
					currentStencilRef !== stencilRef ||
					currentStencilFuncMask !== stencilMask) {

					gl.stencilFunc(stencilFunc, stencilRef, stencilMask);

					currentStencilFunc = stencilFunc;
					currentStencilRef = stencilRef;
					currentStencilFuncMask = stencilMask;

				}

			},

			setOp: function (stencilFail, stencilZFail, stencilZPass) {

				if (currentStencilFail !== stencilFail ||
					currentStencilZFail !== stencilZFail ||
					currentStencilZPass !== stencilZPass) {

					gl.stencilOp(stencilFail, stencilZFail, stencilZPass);

					currentStencilFail = stencilFail;
					currentStencilZFail = stencilZFail;
					currentStencilZPass = stencilZPass;

				}

			},

			setLocked: function (lock) {

				locked = lock;

			},

			setClear: function (stencil) {

				if (currentStencilClear !== stencil) {

					gl.clearStencil(stencil);
					currentStencilClear = stencil;

				}

			},

			reset: function () {

				locked = false;

				currentStencilMask = null;
				currentStencilFunc = null;
				currentStencilRef = null;
				currentStencilFuncMask = null;
				currentStencilFail = null;
				currentStencilZFail = null;
				currentStencilZPass = null;
				currentStencilClear = null;

			}

		};

	}

	//

	const colorBuffer = new ColorBuffer();
	const depthBuffer = new DepthBuffer();
	const stencilBuffer = new StencilBuffer();

	let enabledCapabilities = {};

	let currentBoundFramebuffers = {};
	let currentDrawbuffers = new WeakMap();
	let defaultDrawbuffers = [];

	let currentProgram = null;

	let currentBlendingEnabled = false;
	let currentBlending = null;
	let currentBlendEquation = null;
	let currentBlendSrc = null;
	let currentBlendDst = null;
	let currentBlendEquationAlpha = null;
	let currentBlendSrcAlpha = null;
	let currentBlendDstAlpha = null;
	let currentPremultipledAlpha = false;

	let currentFlipSided = null;
	let currentCullFace = null;

	let currentLineWidth = null;

	let currentPolygonOffsetFactor = null;
	let currentPolygonOffsetUnits = null;

	const maxTextures = gl.getParameter(35661);

	let lineWidthAvailable = false;
	let version = 0;
	const glVersion = gl.getParameter(7938);

	if (glVersion.indexOf('WebGL') !== - 1) {

		version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
		lineWidthAvailable = (version >= 1.0);

	} else if (glVersion.indexOf('OpenGL ES') !== - 1) {

		version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
		lineWidthAvailable = (version >= 2.0);

	}

	let currentTextureSlot = null;
	let currentBoundTextures = {};

	const scissorParam = gl.getParameter(3088);
	const viewportParam = gl.getParameter(2978);

	const currentScissor = new Vector4$1().fromArray(scissorParam);
	const currentViewport = new Vector4$1().fromArray(viewportParam);

	function createTexture(type, target, count) {

		const data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.
		const texture = gl.createTexture();

		gl.bindTexture(type, texture);
		gl.texParameteri(type, 10241, 9728);
		gl.texParameteri(type, 10240, 9728);

		for (let i = 0; i < count; i++) {

			gl.texImage2D(target + i, 0, 6408, 1, 1, 0, 6408, 5121, data);

		}

		return texture;

	}

	const emptyTextures = {};
	emptyTextures[3553] = createTexture(3553, 3553, 1);
	emptyTextures[34067] = createTexture(34067, 34069, 6);

	// init

	colorBuffer.setClear(0, 0, 0, 1);
	depthBuffer.setClear(1);
	stencilBuffer.setClear(0);

	enable(2929);
	depthBuffer.setFunc(LessEqualDepth$1);

	setFlipSided(false);
	setCullFace(CullFaceBack$1);
	enable(2884);

	setBlending(NoBlending$1);

	//

	function enable(id) {

		if (enabledCapabilities[id] !== true) {

			gl.enable(id);
			enabledCapabilities[id] = true;

		}

	}

	function disable(id) {

		if (enabledCapabilities[id] !== false) {

			gl.disable(id);
			enabledCapabilities[id] = false;

		}

	}

	function bindFramebuffer(target, framebuffer) {

		if (currentBoundFramebuffers[target] !== framebuffer) {

			gl.bindFramebuffer(target, framebuffer);

			currentBoundFramebuffers[target] = framebuffer;

			if (isWebGL2) {

				// 36009 is equivalent to 36160

				if (target === 36009) {

					currentBoundFramebuffers[36160] = framebuffer;

				}

				if (target === 36160) {

					currentBoundFramebuffers[36009] = framebuffer;

				}

			}

			return true;

		}

		return false;

	}

	function drawBuffers(renderTarget, framebuffer) {

		let drawBuffers = defaultDrawbuffers;

		let needsUpdate = false;

		if (renderTarget) {

			drawBuffers = currentDrawbuffers.get(framebuffer);

			if (drawBuffers === undefined) {

				drawBuffers = [];
				currentDrawbuffers.set(framebuffer, drawBuffers);

			}

			if (renderTarget.isWebGLMultipleRenderTargets) {

				const textures = renderTarget.texture;

				if (drawBuffers.length !== textures.length || drawBuffers[0] !== 36064) {

					for (let i = 0, il = textures.length; i < il; i++) {

						drawBuffers[i] = 36064 + i;

					}

					drawBuffers.length = textures.length;

					needsUpdate = true;

				}

			} else {

				if (drawBuffers[0] !== 36064) {

					drawBuffers[0] = 36064;

					needsUpdate = true;

				}

			}

		} else {

			if (drawBuffers[0] !== 1029) {

				drawBuffers[0] = 1029;

				needsUpdate = true;

			}

		}

		if (needsUpdate) {

			if (capabilities.isWebGL2) {

				gl.drawBuffers(drawBuffers);

			} else {

				extensions.get('WEBGL_draw_buffers').drawBuffersWEBGL(drawBuffers);

			}

		}


	}

	function useProgram(program) {

		if (currentProgram !== program) {

			gl.useProgram(program);

			currentProgram = program;

			return true;

		}

		return false;

	}

	const equationToGL = {
		[AddEquation$1]: 32774,
		[SubtractEquation$1]: 32778,
		[ReverseSubtractEquation$1]: 32779
	};

	if (isWebGL2) {

		equationToGL[MinEquation$1] = 32775;
		equationToGL[MaxEquation$1] = 32776;

	} else {

		const extension = extensions.get('EXT_blend_minmax');

		if (extension !== null) {

			equationToGL[MinEquation$1] = extension.MIN_EXT;
			equationToGL[MaxEquation$1] = extension.MAX_EXT;

		}

	}

	const factorToGL = {
		[ZeroFactor$1]: 0,
		[OneFactor$1]: 1,
		[SrcColorFactor$1]: 768,
		[SrcAlphaFactor$1]: 770,
		[SrcAlphaSaturateFactor$1]: 776,
		[DstColorFactor$1]: 774,
		[DstAlphaFactor$1]: 772,
		[OneMinusSrcColorFactor$1]: 769,
		[OneMinusSrcAlphaFactor$1]: 771,
		[OneMinusDstColorFactor$1]: 775,
		[OneMinusDstAlphaFactor$1]: 773
	};

	function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {

		if (blending === NoBlending$1) {

			if (currentBlendingEnabled === true) {

				disable(3042);
				currentBlendingEnabled = false;

			}

			return;

		}

		if (currentBlendingEnabled === false) {

			enable(3042);
			currentBlendingEnabled = true;

		}

		if (blending !== CustomBlending$1) {

			if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {

				if (currentBlendEquation !== AddEquation$1 || currentBlendEquationAlpha !== AddEquation$1) {

					gl.blendEquation(32774);

					currentBlendEquation = AddEquation$1;
					currentBlendEquationAlpha = AddEquation$1;

				}

				if (premultipliedAlpha) {

					switch (blending) {

						case NormalBlending$1:
							gl.blendFuncSeparate(1, 771, 1, 771);
							break;

						case AdditiveBlending$1:
							gl.blendFunc(1, 1);
							break;

						case SubtractiveBlending$1:
							gl.blendFuncSeparate(0, 769, 0, 1);
							break;

						case MultiplyBlending$1:
							gl.blendFuncSeparate(0, 768, 0, 770);
							break;

						default:
							console.error('THREE.WebGLState: Invalid blending: ', blending);
							break;

					}

				} else {

					switch (blending) {

						case NormalBlending$1:
							gl.blendFuncSeparate(770, 771, 1, 771);
							break;

						case AdditiveBlending$1:
							gl.blendFunc(770, 1);
							break;

						case SubtractiveBlending$1:
							gl.blendFuncSeparate(0, 769, 0, 1);
							break;

						case MultiplyBlending$1:
							gl.blendFunc(0, 768);
							break;

						default:
							console.error('THREE.WebGLState: Invalid blending: ', blending);
							break;

					}

				}

				currentBlendSrc = null;
				currentBlendDst = null;
				currentBlendSrcAlpha = null;
				currentBlendDstAlpha = null;

				currentBlending = blending;
				currentPremultipledAlpha = premultipliedAlpha;

			}

			return;

		}

		// custom blending

		blendEquationAlpha = blendEquationAlpha || blendEquation;
		blendSrcAlpha = blendSrcAlpha || blendSrc;
		blendDstAlpha = blendDstAlpha || blendDst;

		if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {

			gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);

			currentBlendEquation = blendEquation;
			currentBlendEquationAlpha = blendEquationAlpha;

		}

		if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {

			gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);

			currentBlendSrc = blendSrc;
			currentBlendDst = blendDst;
			currentBlendSrcAlpha = blendSrcAlpha;
			currentBlendDstAlpha = blendDstAlpha;

		}

		currentBlending = blending;
		currentPremultipledAlpha = null;

	}

	function setMaterial(material, frontFaceCW) {

		material.side === DoubleSide$1
			? disable(2884)
			: enable(2884);

		let flipSided = (material.side === BackSide$1);
		if (frontFaceCW) flipSided = !flipSided;

		setFlipSided(flipSided);

		(material.blending === NormalBlending$1 && material.transparent === false)
			? setBlending(NoBlending$1)
			: setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);

		depthBuffer.setFunc(material.depthFunc);
		depthBuffer.setTest(material.depthTest);
		depthBuffer.setMask(material.depthWrite);
		colorBuffer.setMask(material.colorWrite);

		const stencilWrite = material.stencilWrite;
		stencilBuffer.setTest(stencilWrite);
		if (stencilWrite) {

			stencilBuffer.setMask(material.stencilWriteMask);
			stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
			stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);

		}

		setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);

		material.alphaToCoverage === true
			? enable(32926)
			: disable(32926);

	}

	//

	function setFlipSided(flipSided) {

		if (currentFlipSided !== flipSided) {

			if (flipSided) {

				gl.frontFace(2304);

			} else {

				gl.frontFace(2305);

			}

			currentFlipSided = flipSided;

		}

	}

	function setCullFace(cullFace) {

		if (cullFace !== CullFaceNone$1) {

			enable(2884);

			if (cullFace !== currentCullFace) {

				if (cullFace === CullFaceBack$1) {

					gl.cullFace(1029);

				} else if (cullFace === CullFaceFront$1) {

					gl.cullFace(1028);

				} else {

					gl.cullFace(1032);

				}

			}

		} else {

			disable(2884);

		}

		currentCullFace = cullFace;

	}

	function setLineWidth(width) {

		if (width !== currentLineWidth) {

			if (lineWidthAvailable) gl.lineWidth(width);

			currentLineWidth = width;

		}

	}

	function setPolygonOffset(polygonOffset, factor, units) {

		if (polygonOffset) {

			enable(32823);

			if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {

				gl.polygonOffset(factor, units);

				currentPolygonOffsetFactor = factor;
				currentPolygonOffsetUnits = units;

			}

		} else {

			disable(32823);

		}

	}

	function setScissorTest(scissorTest) {

		if (scissorTest) {

			enable(3089);

		} else {

			disable(3089);

		}

	}

	// texture

	function activeTexture(webglSlot) {

		if (webglSlot === undefined) webglSlot = 33984 + maxTextures - 1;

		if (currentTextureSlot !== webglSlot) {

			gl.activeTexture(webglSlot);
			currentTextureSlot = webglSlot;

		}

	}

	function bindTexture(webglType, webglTexture) {

		if (currentTextureSlot === null) {

			activeTexture();

		}

		let boundTexture = currentBoundTextures[currentTextureSlot];

		if (boundTexture === undefined) {

			boundTexture = { type: undefined, texture: undefined };
			currentBoundTextures[currentTextureSlot] = boundTexture;

		}

		if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {

			gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);

			boundTexture.type = webglType;
			boundTexture.texture = webglTexture;

		}

	}

	function unbindTexture() {

		const boundTexture = currentBoundTextures[currentTextureSlot];

		if (boundTexture !== undefined && boundTexture.type !== undefined) {

			gl.bindTexture(boundTexture.type, null);

			boundTexture.type = undefined;
			boundTexture.texture = undefined;

		}

	}

	function compressedTexImage2D() {

		try {

			gl.compressedTexImage2D.apply(gl, arguments);

		} catch (error) {

			console.error('THREE.WebGLState:', error);

		}

	}

	function texSubImage2D() {

		try {

			gl.texSubImage2D.apply(gl, arguments);

		} catch (error) {

			console.error('THREE.WebGLState:', error);

		}

	}

	function texSubImage3D() {

		try {

			gl.texSubImage3D.apply(gl, arguments);

		} catch (error) {

			console.error('THREE.WebGLState:', error);

		}

	}

	function compressedTexSubImage2D() {

		try {

			gl.compressedTexSubImage2D.apply(gl, arguments);

		} catch (error) {

			console.error('THREE.WebGLState:', error);

		}

	}

	function texStorage2D() {

		try {

			gl.texStorage2D.apply(gl, arguments);

		} catch (error) {

			console.error('THREE.WebGLState:', error);

		}

	}

	function texStorage3D() {

		try {

			gl.texStorage3D.apply(gl, arguments);

		} catch (error) {

			console.error('THREE.WebGLState:', error);

		}

	}

	function texImage2D() {

		try {

			gl.texImage2D.apply(gl, arguments);

		} catch (error) {

			console.error('THREE.WebGLState:', error);

		}

	}

	function texImage3D() {

		try {

			gl.texImage3D.apply(gl, arguments);

		} catch (error) {

			console.error('THREE.WebGLState:', error);

		}

	}

	//

	function scissor(scissor) {

		if (currentScissor.equals(scissor) === false) {

			gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);
			currentScissor.copy(scissor);

		}

	}

	function viewport(viewport) {

		if (currentViewport.equals(viewport) === false) {

			gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);
			currentViewport.copy(viewport);

		}

	}

	//

	function reset() {

		// reset state

		gl.disable(3042);
		gl.disable(2884);
		gl.disable(2929);
		gl.disable(32823);
		gl.disable(3089);
		gl.disable(2960);
		gl.disable(32926);

		gl.blendEquation(32774);
		gl.blendFunc(1, 0);
		gl.blendFuncSeparate(1, 0, 1, 0);

		gl.colorMask(true, true, true, true);
		gl.clearColor(0, 0, 0, 0);

		gl.depthMask(true);
		gl.depthFunc(513);
		gl.clearDepth(1);

		gl.stencilMask(0xffffffff);
		gl.stencilFunc(519, 0, 0xffffffff);
		gl.stencilOp(7680, 7680, 7680);
		gl.clearStencil(0);

		gl.cullFace(1029);
		gl.frontFace(2305);

		gl.polygonOffset(0, 0);

		gl.activeTexture(33984);

		gl.bindFramebuffer(36160, null);

		if (isWebGL2 === true) {

			gl.bindFramebuffer(36009, null);
			gl.bindFramebuffer(36008, null);

		}

		gl.useProgram(null);

		gl.lineWidth(1);

		gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
		gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

		// reset internals

		enabledCapabilities = {};

		currentTextureSlot = null;
		currentBoundTextures = {};

		currentBoundFramebuffers = {};
		currentDrawbuffers = new WeakMap();
		defaultDrawbuffers = [];

		currentProgram = null;

		currentBlendingEnabled = false;
		currentBlending = null;
		currentBlendEquation = null;
		currentBlendSrc = null;
		currentBlendDst = null;
		currentBlendEquationAlpha = null;
		currentBlendSrcAlpha = null;
		currentBlendDstAlpha = null;
		currentPremultipledAlpha = false;

		currentFlipSided = null;
		currentCullFace = null;

		currentLineWidth = null;

		currentPolygonOffsetFactor = null;
		currentPolygonOffsetUnits = null;

		currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
		currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);

		colorBuffer.reset();
		depthBuffer.reset();
		stencilBuffer.reset();

	}

	return {

		buffers: {
			color: colorBuffer,
			depth: depthBuffer,
			stencil: stencilBuffer
		},

		enable: enable,
		disable: disable,

		bindFramebuffer: bindFramebuffer,
		drawBuffers: drawBuffers,

		useProgram: useProgram,

		setBlending: setBlending,
		setMaterial: setMaterial,

		setFlipSided: setFlipSided,
		setCullFace: setCullFace,

		setLineWidth: setLineWidth,
		setPolygonOffset: setPolygonOffset,

		setScissorTest: setScissorTest,

		activeTexture: activeTexture,
		bindTexture: bindTexture,
		unbindTexture: unbindTexture,
		compressedTexImage2D: compressedTexImage2D,
		texImage2D: texImage2D,
		texImage3D: texImage3D,

		texStorage2D: texStorage2D,
		texStorage3D: texStorage3D,
		texSubImage2D: texSubImage2D,
		texSubImage3D: texSubImage3D,
		compressedTexSubImage2D: compressedTexSubImage2D,

		scissor: scissor,
		viewport: viewport,

		reset: reset

	};

}

function WebGLTextures$1(_gl, extensions, state, properties, capabilities, utils, info) {

	const isWebGL2 = capabilities.isWebGL2;
	const maxTextures = capabilities.maxTextures;
	const maxCubemapSize = capabilities.maxCubemapSize;
	const maxTextureSize = capabilities.maxTextureSize;
	const maxSamples = capabilities.maxSamples;
	const multisampledRTTExt = extensions.has('WEBGL_multisampled_render_to_texture') ? extensions.get('WEBGL_multisampled_render_to_texture') : null;
	const supportsInvalidateFramebuffer = /OculusBrowser/g.test(navigator.userAgent);

	const _videoTextures = new WeakMap();
	let _canvas;

	const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source

	// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
	// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
	// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).

	let useOffscreenCanvas = false;

	try {

		useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
			// eslint-disable-next-line compat/compat
			&& (new OffscreenCanvas(1, 1).getContext('2d')) !== null;

	} catch (err) {

		// Ignore any errors

	}

	function createCanvas(width, height) {

		// Use OffscreenCanvas when available. Specially needed in web workers

		return useOffscreenCanvas ?
			// eslint-disable-next-line compat/compat
			new OffscreenCanvas(width, height) : createElementNS$1('canvas');

	}

	function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {

		let scale = 1;

		// handle case if texture exceeds max size

		if (image.width > maxSize || image.height > maxSize) {

			scale = maxSize / Math.max(image.width, image.height);

		}

		// only perform resize if necessary

		if (scale < 1 || needsPowerOfTwo === true) {

			// only perform resize for certain image types

			if ((typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement) ||
				(typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement) ||
				(typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap)) {

				const floor = needsPowerOfTwo ? floorPowerOfTwo$1 : Math.floor;

				const width = floor(scale * image.width);
				const height = floor(scale * image.height);

				if (_canvas === undefined) _canvas = createCanvas(width, height);

				// cube textures can't reuse the same canvas

				const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;

				canvas.width = width;
				canvas.height = height;

				const context = canvas.getContext('2d');
				context.drawImage(image, 0, 0, width, height);

				console.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');

				return canvas;

			} else {

				if ('data' in image) {

					console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');

				}

				return image;

			}

		}

		return image;

	}

	function isPowerOfTwo$1$1(image) {

		return isPowerOfTwo$1(image.width) && isPowerOfTwo$1(image.height);

	}

	function textureNeedsPowerOfTwo(texture) {

		if (isWebGL2) return false;

		return (texture.wrapS !== ClampToEdgeWrapping$1 || texture.wrapT !== ClampToEdgeWrapping$1) ||
			(texture.minFilter !== NearestFilter$1 && texture.minFilter !== LinearFilter$1);

	}

	function textureNeedsGenerateMipmaps(texture, supportsMips) {

		return texture.generateMipmaps && supportsMips &&
			texture.minFilter !== NearestFilter$1 && texture.minFilter !== LinearFilter$1;

	}

	function generateMipmap(target) {

		_gl.generateMipmap(target);

	}

	function getInternalFormat(internalFormatName, glFormat, glType, encoding, isVideoTexture = false) {

		if (isWebGL2 === false) return glFormat;

		if (internalFormatName !== null) {

			if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];

			console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'');

		}

		let internalFormat = glFormat;

		if (glFormat === 6403) {

			if (glType === 5126) internalFormat = 33326;
			if (glType === 5131) internalFormat = 33325;
			if (glType === 5121) internalFormat = 33321;

		}

		if (glFormat === 33319) {

			if (glType === 5126) internalFormat = 33328;
			if (glType === 5131) internalFormat = 33327;
			if (glType === 5121) internalFormat = 33323;

		}

		if (glFormat === 6408) {

			if (glType === 5126) internalFormat = 34836;
			if (glType === 5131) internalFormat = 34842;
			if (glType === 5121) internalFormat = (encoding === sRGBEncoding$1 && isVideoTexture === false) ? 35907 : 32856;
			if (glType === 32819) internalFormat = 32854;
			if (glType === 32820) internalFormat = 32855;

		}

		if (internalFormat === 33325 || internalFormat === 33326 ||
			internalFormat === 33327 || internalFormat === 33328 ||
			internalFormat === 34842 || internalFormat === 34836) {

			extensions.get('EXT_color_buffer_float');

		}

		return internalFormat;

	}

	function getMipLevels(texture, image, supportsMips) {

		if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || (texture.isFramebufferTexture && texture.minFilter !== NearestFilter$1 && texture.minFilter !== LinearFilter$1)) {

			return Math.log2(Math.max(image.width, image.height)) + 1;

		} else if (texture.mipmaps !== undefined && texture.mipmaps.length > 0) {

			// user-defined mipmaps

			return texture.mipmaps.length;

		} else if (texture.isCompressedTexture && Array.isArray(texture.image)) {

			return image.mipmaps.length;

		} else {

			// texture without mipmaps (only base level)

			return 1;

		}

	}

	// Fallback filters for non-power-of-2 textures

	function filterFallback(f) {

		if (f === NearestFilter$1 || f === NearestMipmapNearestFilter$1 || f === NearestMipmapLinearFilter$1) {

			return 9728;

		}

		return 9729;

	}

	//

	function onTextureDispose(event) {

		const texture = event.target;

		texture.removeEventListener('dispose', onTextureDispose);

		deallocateTexture(texture);

		if (texture.isVideoTexture) {

			_videoTextures.delete(texture);

		}

	}

	function onRenderTargetDispose(event) {

		const renderTarget = event.target;

		renderTarget.removeEventListener('dispose', onRenderTargetDispose);

		deallocateRenderTarget(renderTarget);

	}

	//

	function deallocateTexture(texture) {

		const textureProperties = properties.get(texture);

		if (textureProperties.__webglInit === undefined) return;

		// check if it's necessary to remove the WebGLTexture object

		const source = texture.source;
		const webglTextures = _sources.get(source);

		if (webglTextures) {

			const webglTexture = webglTextures[textureProperties.__cacheKey];
			webglTexture.usedTimes--;

			// the WebGLTexture object is not used anymore, remove it

			if (webglTexture.usedTimes === 0) {

				deleteTexture(texture);

			}

			// remove the weak map entry if no WebGLTexture uses the source anymore

			if (Object.keys(webglTextures).length === 0) {

				_sources.delete(source);

			}

		}

		properties.remove(texture);

	}

	function deleteTexture(texture) {

		const textureProperties = properties.get(texture);
		_gl.deleteTexture(textureProperties.__webglTexture);

		const source = texture.source;
		const webglTextures = _sources.get(source);
		delete webglTextures[textureProperties.__cacheKey];

		info.memory.textures--;

	}

	function deallocateRenderTarget(renderTarget) {

		const texture = renderTarget.texture;

		const renderTargetProperties = properties.get(renderTarget);
		const textureProperties = properties.get(texture);

		if (textureProperties.__webglTexture !== undefined) {

			_gl.deleteTexture(textureProperties.__webglTexture);

			info.memory.textures--;

		}

		if (renderTarget.depthTexture) {

			renderTarget.depthTexture.dispose();

		}

		if (renderTarget.isWebGLCubeRenderTarget) {

			for (let i = 0; i < 6; i++) {

				_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
				if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);

			}

		} else {

			_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
			if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
			if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);

			if (renderTargetProperties.__webglColorRenderbuffer) {

				for (let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i++) {

					if (renderTargetProperties.__webglColorRenderbuffer[i]) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i]);

				}

			}

			if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);

		}

		if (renderTarget.isWebGLMultipleRenderTargets) {

			for (let i = 0, il = texture.length; i < il; i++) {

				const attachmentProperties = properties.get(texture[i]);

				if (attachmentProperties.__webglTexture) {

					_gl.deleteTexture(attachmentProperties.__webglTexture);

					info.memory.textures--;

				}

				properties.remove(texture[i]);

			}

		}

		properties.remove(texture);
		properties.remove(renderTarget);

	}

	//

	let textureUnits = 0;

	function resetTextureUnits() {

		textureUnits = 0;

	}

	function allocateTextureUnit() {

		const textureUnit = textureUnits;

		if (textureUnit >= maxTextures) {

			console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);

		}

		textureUnits += 1;

		return textureUnit;

	}

	function getTextureCacheKey(texture) {

		const array = [];

		array.push(texture.wrapS);
		array.push(texture.wrapT);
		array.push(texture.magFilter);
		array.push(texture.minFilter);
		array.push(texture.anisotropy);
		array.push(texture.internalFormat);
		array.push(texture.format);
		array.push(texture.type);
		array.push(texture.generateMipmaps);
		array.push(texture.premultiplyAlpha);
		array.push(texture.flipY);
		array.push(texture.unpackAlignment);
		array.push(texture.encoding);

		return array.join();

	}

	//

	function setTexture2D(texture, slot) {

		const textureProperties = properties.get(texture);

		if (texture.isVideoTexture) updateVideoTexture(texture);

		if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {

			const image = texture.image;

			if (image === null) {

				console.warn('THREE.WebGLRenderer: Texture marked for update but no image data found.');

			} else if (image.complete === false) {

				console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');

			} else {

				uploadTexture(textureProperties, texture, slot);
				return;

			}

		}

		state.activeTexture(33984 + slot);
		state.bindTexture(3553, textureProperties.__webglTexture);

	}

	function setTexture2DArray(texture, slot) {

		const textureProperties = properties.get(texture);

		if (texture.version > 0 && textureProperties.__version !== texture.version) {

			uploadTexture(textureProperties, texture, slot);
			return;

		}

		state.activeTexture(33984 + slot);
		state.bindTexture(35866, textureProperties.__webglTexture);

	}

	function setTexture3D(texture, slot) {

		const textureProperties = properties.get(texture);

		if (texture.version > 0 && textureProperties.__version !== texture.version) {

			uploadTexture(textureProperties, texture, slot);
			return;

		}

		state.activeTexture(33984 + slot);
		state.bindTexture(32879, textureProperties.__webglTexture);

	}

	function setTextureCube(texture, slot) {

		const textureProperties = properties.get(texture);

		if (texture.version > 0 && textureProperties.__version !== texture.version) {

			uploadCubeTexture(textureProperties, texture, slot);
			return;

		}

		state.activeTexture(33984 + slot);
		state.bindTexture(34067, textureProperties.__webglTexture);

	}

	const wrappingToGL = {
		[RepeatWrapping$1]: 10497,
		[ClampToEdgeWrapping$1]: 33071,
		[MirroredRepeatWrapping$1]: 33648
	};

	const filterToGL = {
		[NearestFilter$1]: 9728,
		[NearestMipmapNearestFilter$1]: 9984,
		[NearestMipmapLinearFilter$1]: 9986,

		[LinearFilter$1]: 9729,
		[LinearMipmapNearestFilter$1]: 9985,
		[LinearMipmapLinearFilter$1]: 9987
	};

	function setTextureParameters(textureType, texture, supportsMips) {

		if (supportsMips) {

			_gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]);
			_gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]);

			if (textureType === 32879 || textureType === 35866) {

				_gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]);

			}

			_gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]);
			_gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter]);

		} else {

			_gl.texParameteri(textureType, 10242, 33071);
			_gl.texParameteri(textureType, 10243, 33071);

			if (textureType === 32879 || textureType === 35866) {

				_gl.texParameteri(textureType, 32882, 33071);

			}

			if (texture.wrapS !== ClampToEdgeWrapping$1 || texture.wrapT !== ClampToEdgeWrapping$1) {

				console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');

			}

			_gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));
			_gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));

			if (texture.minFilter !== NearestFilter$1 && texture.minFilter !== LinearFilter$1) {

				console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');

			}

		}

		if (extensions.has('EXT_texture_filter_anisotropic') === true) {

			const extension = extensions.get('EXT_texture_filter_anisotropic');

			if (texture.type === FloatType$1 && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2
			if (isWebGL2 === false && (texture.type === HalfFloatType$1 && extensions.has('OES_texture_half_float_linear') === false)) return; // verify extension for WebGL 1 only

			if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {

				_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
				properties.get(texture).__currentAnisotropy = texture.anisotropy;

			}

		}

	}

	function initTexture(textureProperties, texture) {

		let forceUpload = false;

		if (textureProperties.__webglInit === undefined) {

			textureProperties.__webglInit = true;

			texture.addEventListener('dispose', onTextureDispose);

		}

		// create Source <-> WebGLTextures mapping if necessary

		const source = texture.source;
		let webglTextures = _sources.get(source);

		if (webglTextures === undefined) {

			webglTextures = {};
			_sources.set(source, webglTextures);

		}

		// check if there is already a WebGLTexture object for the given texture parameters

		const textureCacheKey = getTextureCacheKey(texture);

		if (textureCacheKey !== textureProperties.__cacheKey) {

			// if not, create a new instance of WebGLTexture

			if (webglTextures[textureCacheKey] === undefined) {

				// create new entry

				webglTextures[textureCacheKey] = {
					texture: _gl.createTexture(),
					usedTimes: 0
				};

				info.memory.textures++;

				// when a new instance of WebGLTexture was created, a texture upload is required
				// even if the image contents are identical

				forceUpload = true;

			}

			webglTextures[textureCacheKey].usedTimes++;

			// every time the texture cache key changes, it's necessary to check if an instance of
			// WebGLTexture can be deleted in order to avoid a memory leak.

			const webglTexture = webglTextures[textureProperties.__cacheKey];

			if (webglTexture !== undefined) {

				webglTextures[textureProperties.__cacheKey].usedTimes--;

				if (webglTexture.usedTimes === 0) {

					deleteTexture(texture);

				}

			}

			// store references to cache key and WebGLTexture object

			textureProperties.__cacheKey = textureCacheKey;
			textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;

		}

		return forceUpload;

	}

	function uploadTexture(textureProperties, texture, slot) {

		let textureType = 3553;

		if (texture.isDataArrayTexture) textureType = 35866;
		if (texture.isData3DTexture) textureType = 32879;

		const forceUpload = initTexture(textureProperties, texture);
		const source = texture.source;

		state.activeTexture(33984 + slot);
		state.bindTexture(textureType, textureProperties.__webglTexture);

		if (source.version !== source.__currentVersion || forceUpload === true) {

			_gl.pixelStorei(37440, texture.flipY);
			_gl.pixelStorei(37441, texture.premultiplyAlpha);
			_gl.pixelStorei(3317, texture.unpackAlignment);
			_gl.pixelStorei(37443, 0);

			const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1$1(texture.image) === false;
			let image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
			image = verifyColorSpace(texture, image);

			const supportsMips = isPowerOfTwo$1$1(image) || isWebGL2,
				glFormat = utils.convert(texture.format, texture.encoding);

			let glType = utils.convert(texture.type),
				glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture);

			setTextureParameters(textureType, texture, supportsMips);

			let mipmap;
			const mipmaps = texture.mipmaps;

			const useTexStorage = (isWebGL2 && texture.isVideoTexture !== true);
			const allocateMemory = (source.__currentVersion === undefined) || (forceUpload === true);
			const levels = getMipLevels(texture, image, supportsMips);

			if (texture.isDepthTexture) {

				// populate depth texture with dummy data

				glInternalFormat = 6402;

				if (isWebGL2) {

					if (texture.type === FloatType$1) {

						glInternalFormat = 36012;

					} else if (texture.type === UnsignedIntType$1) {

						glInternalFormat = 33190;

					} else if (texture.type === UnsignedInt248Type$1) {

						glInternalFormat = 35056;

					} else {

						glInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D

					}

				} else {

					if (texture.type === FloatType$1) {

						console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');

					}

				}

				// validation checks for WebGL 1

				if (texture.format === DepthFormat$1 && glInternalFormat === 6402) {

					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
					// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if (texture.type !== UnsignedShortType$1 && texture.type !== UnsignedIntType$1) {

						console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');

						texture.type = UnsignedIntType$1;
						glType = utils.convert(texture.type);

					}

				}

				if (texture.format === DepthStencilFormat$1 && glInternalFormat === 6402) {

					// Depth stencil textures need the DEPTH_STENCIL internal format
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					glInternalFormat = 34041;

					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
					// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if (texture.type !== UnsignedInt248Type$1) {

						console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');

						texture.type = UnsignedInt248Type$1;
						glType = utils.convert(texture.type);

					}

				}

				//

				if (allocateMemory) {

					if (useTexStorage) {

						state.texStorage2D(3553, 1, glInternalFormat, image.width, image.height);

					} else {

						state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);

					}

				}

			} else if (texture.isDataTexture) {

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if (mipmaps.length > 0 && supportsMips) {

					if (useTexStorage && allocateMemory) {

						state.texStorage2D(3553, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);

					}

					for (let i = 0, il = mipmaps.length; i < il; i++) {

						mipmap = mipmaps[i];

						if (useTexStorage) {

							state.texSubImage2D(3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);

						} else {

							state.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);

						}

					}

					texture.generateMipmaps = false;

				} else {

					if (useTexStorage) {

						if (allocateMemory) {

							state.texStorage2D(3553, levels, glInternalFormat, image.width, image.height);

						}

						state.texSubImage2D(3553, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);

					} else {

						state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);

					}

				}

			} else if (texture.isCompressedTexture) {

				if (useTexStorage && allocateMemory) {

					state.texStorage2D(3553, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);

				}

				for (let i = 0, il = mipmaps.length; i < il; i++) {

					mipmap = mipmaps[i];

					if (texture.format !== RGBAFormat$1) {

						if (glFormat !== null) {

							if (useTexStorage) {

								state.compressedTexSubImage2D(3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);

							} else {

								state.compressedTexImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);

							}

						} else {

							console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');

						}

					} else {

						if (useTexStorage) {

							state.texSubImage2D(3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);

						} else {

							state.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);

						}

					}

				}

			} else if (texture.isDataArrayTexture) {

				if (useTexStorage) {

					if (allocateMemory) {

						state.texStorage3D(35866, levels, glInternalFormat, image.width, image.height, image.depth);

					}

					state.texSubImage3D(35866, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);

				} else {

					state.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);

				}

			} else if (texture.isData3DTexture) {

				if (useTexStorage) {

					if (allocateMemory) {

						state.texStorage3D(32879, levels, glInternalFormat, image.width, image.height, image.depth);

					}

					state.texSubImage3D(32879, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);

				} else {

					state.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);

				}

			} else if (texture.isFramebufferTexture) {

				if (allocateMemory) {

					if (useTexStorage) {

						state.texStorage2D(3553, levels, glInternalFormat, image.width, image.height);

					} else {

						let width = image.width, height = image.height;

						for (let i = 0; i < levels; i++) {

							state.texImage2D(3553, i, glInternalFormat, width, height, 0, glFormat, glType, null);

							width >>= 1;
							height >>= 1;

						}

					}

				}

			} else {

				// regular Texture (image, video, canvas)

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if (mipmaps.length > 0 && supportsMips) {

					if (useTexStorage && allocateMemory) {

						state.texStorage2D(3553, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);

					}

					for (let i = 0, il = mipmaps.length; i < il; i++) {

						mipmap = mipmaps[i];

						if (useTexStorage) {

							state.texSubImage2D(3553, i, 0, 0, glFormat, glType, mipmap);

						} else {

							state.texImage2D(3553, i, glInternalFormat, glFormat, glType, mipmap);

						}

					}

					texture.generateMipmaps = false;

				} else {

					if (useTexStorage) {

						if (allocateMemory) {

							state.texStorage2D(3553, levels, glInternalFormat, image.width, image.height);

						}

						state.texSubImage2D(3553, 0, 0, 0, glFormat, glType, image);

					} else {

						state.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);

					}

				}

			}

			if (textureNeedsGenerateMipmaps(texture, supportsMips)) {

				generateMipmap(textureType);

			}

			source.__currentVersion = source.version;

			if (texture.onUpdate) texture.onUpdate(texture);

		}

		textureProperties.__version = texture.version;

	}

	function uploadCubeTexture(textureProperties, texture, slot) {

		if (texture.image.length !== 6) return;

		const forceUpload = initTexture(textureProperties, texture);
		const source = texture.source;

		state.activeTexture(33984 + slot);
		state.bindTexture(34067, textureProperties.__webglTexture);

		if (source.version !== source.__currentVersion || forceUpload === true) {

			_gl.pixelStorei(37440, texture.flipY);
			_gl.pixelStorei(37441, texture.premultiplyAlpha);
			_gl.pixelStorei(3317, texture.unpackAlignment);
			_gl.pixelStorei(37443, 0);

			const isCompressed = (texture.isCompressedTexture || texture.image[0].isCompressedTexture);
			const isDataTexture = (texture.image[0] && texture.image[0].isDataTexture);

			const cubeImage = [];

			for (let i = 0; i < 6; i++) {

				if (!isCompressed && !isDataTexture) {

					cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);

				} else {

					cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];

				}

				cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);

			}

			const image = cubeImage[0],
				supportsMips = isPowerOfTwo$1$1(image) || isWebGL2,
				glFormat = utils.convert(texture.format, texture.encoding),
				glType = utils.convert(texture.type),
				glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);

			const useTexStorage = (isWebGL2 && texture.isVideoTexture !== true);
			const allocateMemory = (source.__currentVersion === undefined) || (forceUpload === true);
			let levels = getMipLevels(texture, image, supportsMips);

			setTextureParameters(34067, texture, supportsMips);

			let mipmaps;

			if (isCompressed) {

				if (useTexStorage && allocateMemory) {

					state.texStorage2D(34067, levels, glInternalFormat, image.width, image.height);

				}

				for (let i = 0; i < 6; i++) {

					mipmaps = cubeImage[i].mipmaps;

					for (let j = 0; j < mipmaps.length; j++) {

						const mipmap = mipmaps[j];

						if (texture.format !== RGBAFormat$1) {

							if (glFormat !== null) {

								if (useTexStorage) {

									state.compressedTexSubImage2D(34069 + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);

								} else {

									state.compressedTexImage2D(34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);

								}

							} else {

								console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');

							}

						} else {

							if (useTexStorage) {

								state.texSubImage2D(34069 + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);

							} else {

								state.texImage2D(34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);

							}

						}

					}

				}

			} else {

				mipmaps = texture.mipmaps;

				if (useTexStorage && allocateMemory) {

					// TODO: Uniformly handle mipmap definitions
					// Normal textures and compressed cube textures define base level + mips with their mipmap array
					// Uncompressed cube textures use their mipmap array only for mips (no base level)

					if (mipmaps.length > 0) levels++;

					state.texStorage2D(34067, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);

				}

				for (let i = 0; i < 6; i++) {

					if (isDataTexture) {

						if (useTexStorage) {

							state.texSubImage2D(34069 + i, 0, 0, 0, cubeImage[i].width, cubeImage[i].height, glFormat, glType, cubeImage[i].data);

						} else {

							state.texImage2D(34069 + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);

						}

						for (let j = 0; j < mipmaps.length; j++) {

							const mipmap = mipmaps[j];
							const mipmapImage = mipmap.image[i].image;

							if (useTexStorage) {

								state.texSubImage2D(34069 + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);

							} else {

								state.texImage2D(34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);

							}

						}

					} else {

						if (useTexStorage) {

							state.texSubImage2D(34069 + i, 0, 0, 0, glFormat, glType, cubeImage[i]);

						} else {

							state.texImage2D(34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);

						}

						for (let j = 0; j < mipmaps.length; j++) {

							const mipmap = mipmaps[j];

							if (useTexStorage) {

								state.texSubImage2D(34069 + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);

							} else {

								state.texImage2D(34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);

							}

						}

					}

				}

			}

			if (textureNeedsGenerateMipmaps(texture, supportsMips)) {

				// We assume images for cube map have the same size.
				generateMipmap(34067);

			}

			source.__currentVersion = source.version;

			if (texture.onUpdate) texture.onUpdate(texture);

		}

		textureProperties.__version = texture.version;

	}

	// Render targets

	// Setup storage for target texture and bind it to correct framebuffer
	function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {

		const glFormat = utils.convert(texture.format, texture.encoding);
		const glType = utils.convert(texture.type);
		const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
		const renderTargetProperties = properties.get(renderTarget);

		if (!renderTargetProperties.__hasExternalTextures) {

			if (textureTarget === 32879 || textureTarget === 35866) {

				state.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);

			} else {

				state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);

			}

		}

		state.bindFramebuffer(36160, framebuffer);

		if (useMultisampledRTT(renderTarget)) {

			multisampledRTTExt.framebufferTexture2DMultisampleEXT(36160, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));

		} else {

			_gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(texture).__webglTexture, 0);

		}

		state.bindFramebuffer(36160, null);

	}


	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
	function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {

		_gl.bindRenderbuffer(36161, renderbuffer);

		if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {

			let glInternalFormat = 33189;

			if (isMultisample || useMultisampledRTT(renderTarget)) {

				const depthTexture = renderTarget.depthTexture;

				if (depthTexture && depthTexture.isDepthTexture) {

					if (depthTexture.type === FloatType$1) {

						glInternalFormat = 36012;

					} else if (depthTexture.type === UnsignedIntType$1) {

						glInternalFormat = 33190;

					}

				}

				const samples = getRenderTargetSamples(renderTarget);

				if (useMultisampledRTT(renderTarget)) {

					multisampledRTTExt.renderbufferStorageMultisampleEXT(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);

				} else {

					_gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);

				}

			} else {

				_gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);

			}

			_gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);

		} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {

			const samples = getRenderTargetSamples(renderTarget);

			if (isMultisample && useMultisampledRTT(renderTarget) === false) {

				_gl.renderbufferStorageMultisample(36161, samples, 35056, renderTarget.width, renderTarget.height);

			} else if (useMultisampledRTT(renderTarget)) {

				multisampledRTTExt.renderbufferStorageMultisampleEXT(36161, samples, 35056, renderTarget.width, renderTarget.height);

			} else {

				_gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);

			}


			_gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);

		} else {

			const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];

			for (let i = 0; i < textures.length; i++) {

				const texture = textures[i];

				const glFormat = utils.convert(texture.format, texture.encoding);
				const glType = utils.convert(texture.type);
				const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
				const samples = getRenderTargetSamples(renderTarget);

				if (isMultisample && useMultisampledRTT(renderTarget) === false) {

					_gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);

				} else if (useMultisampledRTT(renderTarget)) {

					multisampledRTTExt.renderbufferStorageMultisampleEXT(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);

				} else {

					_gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);

				}

			}

		}

		_gl.bindRenderbuffer(36161, null);

	}

	// Setup resources for a Depth Texture for a FBO (needs an extension)
	function setupDepthTexture(framebuffer, renderTarget) {

		const isCube = (renderTarget && renderTarget.isWebGLCubeRenderTarget);
		if (isCube) throw new Error('Depth Texture with cube render targets is not supported');

		state.bindFramebuffer(36160, framebuffer);

		if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {

			throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');

		}

		// upload an empty depth texture with framebuffer size
		if (!properties.get(renderTarget.depthTexture).__webglTexture ||
			renderTarget.depthTexture.image.width !== renderTarget.width ||
			renderTarget.depthTexture.image.height !== renderTarget.height) {

			renderTarget.depthTexture.image.width = renderTarget.width;
			renderTarget.depthTexture.image.height = renderTarget.height;
			renderTarget.depthTexture.needsUpdate = true;

		}

		setTexture2D(renderTarget.depthTexture, 0);

		const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
		const samples = getRenderTargetSamples(renderTarget);

		if (renderTarget.depthTexture.format === DepthFormat$1) {

			if (useMultisampledRTT(renderTarget)) {

				multisampledRTTExt.framebufferTexture2DMultisampleEXT(36160, 36096, 3553, webglDepthTexture, 0, samples);

			} else {

				_gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);

			}

		} else if (renderTarget.depthTexture.format === DepthStencilFormat$1) {

			if (useMultisampledRTT(renderTarget)) {

				multisampledRTTExt.framebufferTexture2DMultisampleEXT(36160, 33306, 3553, webglDepthTexture, 0, samples);

			} else {

				_gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);

			}

		} else {

			throw new Error('Unknown depthTexture format');

		}

	}

	// Setup GL resources for a non-texture depth buffer
	function setupDepthRenderbuffer(renderTarget) {

		const renderTargetProperties = properties.get(renderTarget);
		const isCube = (renderTarget.isWebGLCubeRenderTarget === true);

		if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {

			if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');

			setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);

		} else {

			if (isCube) {

				renderTargetProperties.__webglDepthbuffer = [];

				for (let i = 0; i < 6; i++) {

					state.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i]);
					renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
					setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);

				}

			} else {

				state.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);
				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
				setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);

			}

		}

		state.bindFramebuffer(36160, null);

	}

	// rebind framebuffer with external textures
	function rebindTextures(renderTarget, colorTexture, depthTexture) {

		const renderTargetProperties = properties.get(renderTarget);

		if (colorTexture !== undefined) {

			setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, 36064, 3553);

		}

		if (depthTexture !== undefined) {

			setupDepthRenderbuffer(renderTarget);

		}

	}

	// Set up GL resources for the render target
	function setupRenderTarget(renderTarget) {

		const texture = renderTarget.texture;

		const renderTargetProperties = properties.get(renderTarget);
		const textureProperties = properties.get(texture);

		renderTarget.addEventListener('dispose', onRenderTargetDispose);

		if (renderTarget.isWebGLMultipleRenderTargets !== true) {

			if (textureProperties.__webglTexture === undefined) {

				textureProperties.__webglTexture = _gl.createTexture();

			}

			textureProperties.__version = texture.version;
			info.memory.textures++;

		}

		const isCube = (renderTarget.isWebGLCubeRenderTarget === true);
		const isMultipleRenderTargets = (renderTarget.isWebGLMultipleRenderTargets === true);
		const supportsMips = isPowerOfTwo$1$1(renderTarget) || isWebGL2;

		// Setup framebuffer

		if (isCube) {

			renderTargetProperties.__webglFramebuffer = [];

			for (let i = 0; i < 6; i++) {

				renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();

			}

		} else {

			renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

			if (isMultipleRenderTargets) {

				if (capabilities.drawBuffers) {

					const textures = renderTarget.texture;

					for (let i = 0, il = textures.length; i < il; i++) {

						const attachmentProperties = properties.get(textures[i]);

						if (attachmentProperties.__webglTexture === undefined) {

							attachmentProperties.__webglTexture = _gl.createTexture();

							info.memory.textures++;

						}

					}

				} else {

					console.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');

				}

			}

			if ((isWebGL2 && renderTarget.samples > 0) && useMultisampledRTT(renderTarget) === false) {

				const textures = isMultipleRenderTargets ? texture : [texture];

				renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
				renderTargetProperties.__webglColorRenderbuffer = [];

				state.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);

				for (let i = 0; i < textures.length; i++) {

					const texture = textures[i];
					renderTargetProperties.__webglColorRenderbuffer[i] = _gl.createRenderbuffer();

					_gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer[i]);

					const glFormat = utils.convert(texture.format, texture.encoding);
					const glType = utils.convert(texture.type);
					const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
					const samples = getRenderTargetSamples(renderTarget);
					_gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);

					_gl.framebufferRenderbuffer(36160, 36064 + i, 36161, renderTargetProperties.__webglColorRenderbuffer[i]);

				}

				_gl.bindRenderbuffer(36161, null);

				if (renderTarget.depthBuffer) {

					renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
					setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);

				}

				state.bindFramebuffer(36160, null);

			}

		}

		// Setup color buffer

		if (isCube) {

			state.bindTexture(34067, textureProperties.__webglTexture);
			setTextureParameters(34067, texture, supportsMips);

			for (let i = 0; i < 6; i++) {

				setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, 36064, 34069 + i);

			}

			if (textureNeedsGenerateMipmaps(texture, supportsMips)) {

				generateMipmap(34067);

			}

			state.unbindTexture();

		} else if (isMultipleRenderTargets) {

			const textures = renderTarget.texture;

			for (let i = 0, il = textures.length; i < il; i++) {

				const attachment = textures[i];
				const attachmentProperties = properties.get(attachment);

				state.bindTexture(3553, attachmentProperties.__webglTexture);
				setTextureParameters(3553, attachment, supportsMips);
				setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + i, 3553);

				if (textureNeedsGenerateMipmaps(attachment, supportsMips)) {

					generateMipmap(3553);

				}

			}

			state.unbindTexture();

		} else {

			let glTextureType = 3553;

			if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {

				if (isWebGL2) {

					glTextureType = renderTarget.isWebGL3DRenderTarget ? 32879 : 35866;

				} else {

					console.error('THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.');

				}

			}

			state.bindTexture(glTextureType, textureProperties.__webglTexture);
			setTextureParameters(glTextureType, texture, supportsMips);
			setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType);

			if (textureNeedsGenerateMipmaps(texture, supportsMips)) {

				generateMipmap(glTextureType);

			}

			state.unbindTexture();

		}

		// Setup depth and stencil buffers

		if (renderTarget.depthBuffer) {

			setupDepthRenderbuffer(renderTarget);

		}

	}

	function updateRenderTargetMipmap(renderTarget) {

		const supportsMips = isPowerOfTwo$1$1(renderTarget) || isWebGL2;

		const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];

		for (let i = 0, il = textures.length; i < il; i++) {

			const texture = textures[i];

			if (textureNeedsGenerateMipmaps(texture, supportsMips)) {

				const target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;
				const webglTexture = properties.get(texture).__webglTexture;

				state.bindTexture(target, webglTexture);
				generateMipmap(target);
				state.unbindTexture();

			}

		}

	}

	function updateMultisampleRenderTarget(renderTarget) {

		if ((isWebGL2 && renderTarget.samples > 0) && useMultisampledRTT(renderTarget) === false) {

			const textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [renderTarget.texture];
			const width = renderTarget.width;
			const height = renderTarget.height;
			let mask = 16384;
			const invalidationArray = [];
			const depthStyle = renderTarget.stencilBuffer ? 33306 : 36096;
			const renderTargetProperties = properties.get(renderTarget);
			const isMultipleRenderTargets = (renderTarget.isWebGLMultipleRenderTargets === true);

			// If MRT we need to remove FBO attachments
			if (isMultipleRenderTargets) {

				for (let i = 0; i < textures.length; i++) {

					state.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);
					_gl.framebufferRenderbuffer(36160, 36064 + i, 36161, null);

					state.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);
					_gl.framebufferTexture2D(36009, 36064 + i, 3553, null, 0);

				}

			}

			state.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);
			state.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);

			for (let i = 0; i < textures.length; i++) {

				invalidationArray.push(36064 + i);

				if (renderTarget.depthBuffer) {

					invalidationArray.push(depthStyle);

				}

				const ignoreDepthValues = (renderTargetProperties.__ignoreDepthValues !== undefined) ? renderTargetProperties.__ignoreDepthValues : false;

				if (ignoreDepthValues === false) {

					if (renderTarget.depthBuffer) mask |= 256;
					if (renderTarget.stencilBuffer) mask |= 1024;

				}

				if (isMultipleRenderTargets) {

					_gl.framebufferRenderbuffer(36008, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer[i]);

				}

				if (ignoreDepthValues === true) {

					_gl.invalidateFramebuffer(36008, [depthStyle]);
					_gl.invalidateFramebuffer(36009, [depthStyle]);

				}

				if (isMultipleRenderTargets) {

					const webglTexture = properties.get(textures[i]).__webglTexture;
					_gl.framebufferTexture2D(36009, 36064, 3553, webglTexture, 0);

				}

				_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728);

				if (supportsInvalidateFramebuffer) {

					_gl.invalidateFramebuffer(36008, invalidationArray);

				}


			}

			state.bindFramebuffer(36008, null);
			state.bindFramebuffer(36009, null);

			// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments
			if (isMultipleRenderTargets) {

				for (let i = 0; i < textures.length; i++) {

					state.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);
					_gl.framebufferRenderbuffer(36160, 36064 + i, 36161, renderTargetProperties.__webglColorRenderbuffer[i]);

					const webglTexture = properties.get(textures[i]).__webglTexture;

					state.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);
					_gl.framebufferTexture2D(36009, 36064 + i, 3553, webglTexture, 0);

				}

			}

			state.bindFramebuffer(36009, renderTargetProperties.__webglMultisampledFramebuffer);

		}

	}

	function getRenderTargetSamples(renderTarget) {

		return Math.min(maxSamples, renderTarget.samples);

	}

	function useMultisampledRTT(renderTarget) {

		const renderTargetProperties = properties.get(renderTarget);

		return isWebGL2 && renderTarget.samples > 0 && extensions.has('WEBGL_multisampled_render_to_texture') === true && renderTargetProperties.__useRenderToTexture !== false;

	}

	function updateVideoTexture(texture) {

		const frame = info.render.frame;

		// Check the last frame we updated the VideoTexture

		if (_videoTextures.get(texture) !== frame) {

			_videoTextures.set(texture, frame);
			texture.update();

		}

	}

	function verifyColorSpace(texture, image) {

		const encoding = texture.encoding;
		const format = texture.format;
		const type = texture.type;

		if (texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat) return image;

		if (encoding !== LinearEncoding$1) {

			// sRGB

			if (encoding === sRGBEncoding$1) {

				if (isWebGL2 === false) {

					// in WebGL 1, try to use EXT_sRGB extension and unsized formats

					if (extensions.has('EXT_sRGB') === true && format === RGBAFormat$1) {

						texture.format = _SRGBAFormat;

						// it's not possible to generate mips in WebGL 1 with this extension

						texture.minFilter = LinearFilter$1;
						texture.generateMipmaps = false;

					} else {

						// slow fallback (CPU decode)

						image = ImageUtils$1.sRGBToLinear(image);

					}

				} else {

					// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format

					if (format !== RGBAFormat$1 || type !== UnsignedByteType$1) {

						console.warn('THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.');

					}

				}

			} else {

				console.error('THREE.WebGLTextures: Unsupported texture encoding:', encoding);

			}

		}

		return image;

	}

	//

	this.allocateTextureUnit = allocateTextureUnit;
	this.resetTextureUnits = resetTextureUnits;

	this.setTexture2D = setTexture2D;
	this.setTexture2DArray = setTexture2DArray;
	this.setTexture3D = setTexture3D;
	this.setTextureCube = setTextureCube;
	this.rebindTextures = rebindTextures;
	this.setupRenderTarget = setupRenderTarget;
	this.updateRenderTargetMipmap = updateRenderTargetMipmap;
	this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
	this.setupDepthRenderbuffer = setupDepthRenderbuffer;
	this.setupFrameBufferTexture = setupFrameBufferTexture;
	this.useMultisampledRTT = useMultisampledRTT;

}

function WebGLUtils$1(gl, extensions, capabilities) {

	const isWebGL2 = capabilities.isWebGL2;

	function convert(p, encoding = null) {

		let extension;

		if (p === UnsignedByteType$1) return 5121;
		if (p === UnsignedShort4444Type$1) return 32819;
		if (p === UnsignedShort5551Type$1) return 32820;

		if (p === ByteType$1) return 5120;
		if (p === ShortType$1) return 5122;
		if (p === UnsignedShortType$1) return 5123;
		if (p === IntType$1) return 5124;
		if (p === UnsignedIntType$1) return 5125;
		if (p === FloatType$1) return 5126;

		if (p === HalfFloatType$1) {

			if (isWebGL2) return 5131;

			extension = extensions.get('OES_texture_half_float');

			if (extension !== null) {

				return extension.HALF_FLOAT_OES;

			} else {

				return null;

			}

		}

		if (p === AlphaFormat$1) return 6406;
		if (p === RGBAFormat$1) return 6408;
		if (p === LuminanceFormat$1) return 6409;
		if (p === LuminanceAlphaFormat$1) return 6410;
		if (p === DepthFormat$1) return 6402;
		if (p === DepthStencilFormat$1) return 34041;
		if (p === RedFormat$1) return 6403;

		if (p === RGBFormat$1) {

			console.warn('THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228');
			return 6408;

		}

		// WebGL 1 sRGB fallback

		if (p === _SRGBAFormat) {

			extension = extensions.get('EXT_sRGB');

			if (extension !== null) {

				return extension.SRGB_ALPHA_EXT;

			} else {

				return null;

			}

		}

		// WebGL2 formats.

		if (p === RedIntegerFormat$1) return 36244;
		if (p === RGFormat$1) return 33319;
		if (p === RGIntegerFormat$1) return 33320;
		if (p === RGBAIntegerFormat$1) return 36249;

		// S3TC

		if (p === RGB_S3TC_DXT1_Format$1 || p === RGBA_S3TC_DXT1_Format$1 || p === RGBA_S3TC_DXT3_Format$1 || p === RGBA_S3TC_DXT5_Format$1) {

			if (encoding === sRGBEncoding$1) {

				extension = extensions.get('WEBGL_compressed_texture_s3tc_srgb');

				if (extension !== null) {

					if (p === RGB_S3TC_DXT1_Format$1) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
					if (p === RGBA_S3TC_DXT1_Format$1) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
					if (p === RGBA_S3TC_DXT3_Format$1) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
					if (p === RGBA_S3TC_DXT5_Format$1) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

				} else {

					return null;

				}

			} else {

				extension = extensions.get('WEBGL_compressed_texture_s3tc');

				if (extension !== null) {

					if (p === RGB_S3TC_DXT1_Format$1) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
					if (p === RGBA_S3TC_DXT1_Format$1) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
					if (p === RGBA_S3TC_DXT3_Format$1) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
					if (p === RGBA_S3TC_DXT5_Format$1) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

				} else {

					return null;

				}

			}

		}

		// PVRTC

		if (p === RGB_PVRTC_4BPPV1_Format$1 || p === RGB_PVRTC_2BPPV1_Format$1 || p === RGBA_PVRTC_4BPPV1_Format$1 || p === RGBA_PVRTC_2BPPV1_Format$1) {

			extension = extensions.get('WEBGL_compressed_texture_pvrtc');

			if (extension !== null) {

				if (p === RGB_PVRTC_4BPPV1_Format$1) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
				if (p === RGB_PVRTC_2BPPV1_Format$1) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
				if (p === RGBA_PVRTC_4BPPV1_Format$1) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
				if (p === RGBA_PVRTC_2BPPV1_Format$1) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

			} else {

				return null;

			}

		}

		// ETC1

		if (p === RGB_ETC1_Format$1) {

			extension = extensions.get('WEBGL_compressed_texture_etc1');

			if (extension !== null) {

				return extension.COMPRESSED_RGB_ETC1_WEBGL;

			} else {

				return null;

			}

		}

		// ETC2

		if (p === RGB_ETC2_Format$1 || p === RGBA_ETC2_EAC_Format$1) {

			extension = extensions.get('WEBGL_compressed_texture_etc');

			if (extension !== null) {

				if (p === RGB_ETC2_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
				if (p === RGBA_ETC2_EAC_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;

			} else {

				return null;

			}

		}

		// ASTC

		if (p === RGBA_ASTC_4x4_Format$1 || p === RGBA_ASTC_5x4_Format$1 || p === RGBA_ASTC_5x5_Format$1 ||
			p === RGBA_ASTC_6x5_Format$1 || p === RGBA_ASTC_6x6_Format$1 || p === RGBA_ASTC_8x5_Format$1 ||
			p === RGBA_ASTC_8x6_Format$1 || p === RGBA_ASTC_8x8_Format$1 || p === RGBA_ASTC_10x5_Format$1 ||
			p === RGBA_ASTC_10x6_Format$1 || p === RGBA_ASTC_10x8_Format$1 || p === RGBA_ASTC_10x10_Format$1 ||
			p === RGBA_ASTC_12x10_Format$1 || p === RGBA_ASTC_12x12_Format$1) {

			extension = extensions.get('WEBGL_compressed_texture_astc');

			if (extension !== null) {

				if (p === RGBA_ASTC_4x4_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
				if (p === RGBA_ASTC_5x4_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
				if (p === RGBA_ASTC_5x5_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
				if (p === RGBA_ASTC_6x5_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
				if (p === RGBA_ASTC_6x6_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
				if (p === RGBA_ASTC_8x5_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
				if (p === RGBA_ASTC_8x6_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
				if (p === RGBA_ASTC_8x8_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
				if (p === RGBA_ASTC_10x5_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
				if (p === RGBA_ASTC_10x6_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
				if (p === RGBA_ASTC_10x8_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
				if (p === RGBA_ASTC_10x10_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
				if (p === RGBA_ASTC_12x10_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
				if (p === RGBA_ASTC_12x12_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;

			} else {

				return null;

			}

		}

		// BPTC

		if (p === RGBA_BPTC_Format$1) {

			extension = extensions.get('EXT_texture_compression_bptc');

			if (extension !== null) {

				if (p === RGBA_BPTC_Format$1) return (encoding === sRGBEncoding$1) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;

			} else {

				return null;

			}

		}

		//

		if (p === UnsignedInt248Type$1) {

			if (isWebGL2) return 34042;

			extension = extensions.get('WEBGL_depth_texture');

			if (extension !== null) {

				return extension.UNSIGNED_INT_24_8_WEBGL;

			} else {

				return null;

			}

		}

		// if "p" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)

		return (gl[p] !== undefined) ? gl[p] : null;

	}

	return { convert: convert };

}

class ArrayCamera$1 extends PerspectiveCamera$1 {

	constructor(array = []) {

		super();

		this.isArrayCamera = true;

		this.cameras = array;

	}

}

class Group$1 extends Object3D$1 {

	constructor() {

		super();

		this.isGroup = true;

		this.type = 'Group';

	}

}

const _moveEvent$1 = { type: 'move' };

class WebXRController$1 {

	constructor() {

		this._targetRay = null;
		this._grip = null;
		this._hand = null;

	}

	getHandSpace() {

		if (this._hand === null) {

			this._hand = new Group$1();
			this._hand.matrixAutoUpdate = false;
			this._hand.visible = false;

			this._hand.joints = {};
			this._hand.inputState = { pinching: false };

		}

		return this._hand;

	}

	getTargetRaySpace() {

		if (this._targetRay === null) {

			this._targetRay = new Group$1();
			this._targetRay.matrixAutoUpdate = false;
			this._targetRay.visible = false;
			this._targetRay.hasLinearVelocity = false;
			this._targetRay.linearVelocity = new Vector3$1();
			this._targetRay.hasAngularVelocity = false;
			this._targetRay.angularVelocity = new Vector3$1();

		}

		return this._targetRay;

	}

	getGripSpace() {

		if (this._grip === null) {

			this._grip = new Group$1();
			this._grip.matrixAutoUpdate = false;
			this._grip.visible = false;
			this._grip.hasLinearVelocity = false;
			this._grip.linearVelocity = new Vector3$1();
			this._grip.hasAngularVelocity = false;
			this._grip.angularVelocity = new Vector3$1();

		}

		return this._grip;

	}

	dispatchEvent(event) {

		if (this._targetRay !== null) {

			this._targetRay.dispatchEvent(event);

		}

		if (this._grip !== null) {

			this._grip.dispatchEvent(event);

		}

		if (this._hand !== null) {

			this._hand.dispatchEvent(event);

		}

		return this;

	}

	disconnect(inputSource) {

		this.dispatchEvent({ type: 'disconnected', data: inputSource });

		if (this._targetRay !== null) {

			this._targetRay.visible = false;

		}

		if (this._grip !== null) {

			this._grip.visible = false;

		}

		if (this._hand !== null) {

			this._hand.visible = false;

		}

		return this;

	}

	update(inputSource, frame, referenceSpace) {

		let inputPose = null;
		let gripPose = null;
		let handPose = null;

		const targetRay = this._targetRay;
		const grip = this._grip;
		const hand = this._hand;

		if (inputSource && frame.session.visibilityState !== 'visible-blurred') {

			if (targetRay !== null) {

				inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);

				if (inputPose !== null) {

					targetRay.matrix.fromArray(inputPose.transform.matrix);
					targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);

					if (inputPose.linearVelocity) {

						targetRay.hasLinearVelocity = true;
						targetRay.linearVelocity.copy(inputPose.linearVelocity);

					} else {

						targetRay.hasLinearVelocity = false;

					}

					if (inputPose.angularVelocity) {

						targetRay.hasAngularVelocity = true;
						targetRay.angularVelocity.copy(inputPose.angularVelocity);

					} else {

						targetRay.hasAngularVelocity = false;

					}

					this.dispatchEvent(_moveEvent$1);

				}

			}

			if (hand && inputSource.hand) {

				handPose = true;

				for (const inputjoint of inputSource.hand.values()) {

					// Update the joints groups with the XRJoint poses
					const jointPose = frame.getJointPose(inputjoint, referenceSpace);

					if (hand.joints[inputjoint.jointName] === undefined) {

						// The transform of this joint will be updated with the joint pose on each frame
						const joint = new Group$1();
						joint.matrixAutoUpdate = false;
						joint.visible = false;
						hand.joints[inputjoint.jointName] = joint;
						// ??
						hand.add(joint);

					}

					const joint = hand.joints[inputjoint.jointName];

					if (jointPose !== null) {

						joint.matrix.fromArray(jointPose.transform.matrix);
						joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
						joint.jointRadius = jointPose.radius;

					}

					joint.visible = jointPose !== null;

				}

				// Custom events

				// Check pinchz
				const indexTip = hand.joints['index-finger-tip'];
				const thumbTip = hand.joints['thumb-tip'];
				const distance = indexTip.position.distanceTo(thumbTip.position);

				const distanceToPinch = 0.02;
				const threshold = 0.005;

				if (hand.inputState.pinching && distance > distanceToPinch + threshold) {

					hand.inputState.pinching = false;
					this.dispatchEvent({
						type: 'pinchend',
						handedness: inputSource.handedness,
						target: this
					});

				} else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {

					hand.inputState.pinching = true;
					this.dispatchEvent({
						type: 'pinchstart',
						handedness: inputSource.handedness,
						target: this
					});

				}

			} else {

				if (grip !== null && inputSource.gripSpace) {

					gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);

					if (gripPose !== null) {

						grip.matrix.fromArray(gripPose.transform.matrix);
						grip.matrix.decompose(grip.position, grip.rotation, grip.scale);

						if (gripPose.linearVelocity) {

							grip.hasLinearVelocity = true;
							grip.linearVelocity.copy(gripPose.linearVelocity);

						} else {

							grip.hasLinearVelocity = false;

						}

						if (gripPose.angularVelocity) {

							grip.hasAngularVelocity = true;
							grip.angularVelocity.copy(gripPose.angularVelocity);

						} else {

							grip.hasAngularVelocity = false;

						}

					}

				}

			}

		}

		if (targetRay !== null) {

			targetRay.visible = (inputPose !== null);

		}

		if (grip !== null) {

			grip.visible = (gripPose !== null);

		}

		if (hand !== null) {

			hand.visible = (handPose !== null);

		}

		return this;

	}

}

class DepthTexture$1 extends Texture$1 {

	constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {

		format = format !== undefined ? format : DepthFormat$1;

		if (format !== DepthFormat$1 && format !== DepthStencilFormat$1) {

			throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');

		}

		if (type === undefined && format === DepthFormat$1) type = UnsignedIntType$1;
		if (type === undefined && format === DepthStencilFormat$1) type = UnsignedInt248Type$1;

		super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);

		this.isDepthTexture = true;

		this.image = { width: width, height: height };

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter$1;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter$1;

		this.flipY = false;
		this.generateMipmaps = false;

	}


}

class WebXRManager$1 extends EventDispatcher$1 {

	constructor(renderer, gl) {

		super();

		const scope = this;

		let session = null;
		let framebufferScaleFactor = 1.0;

		let referenceSpace = null;
		let referenceSpaceType = 'local-floor';
		let customReferenceSpace = null;

		let pose = null;
		let glBinding = null;
		let glProjLayer = null;
		let glBaseLayer = null;
		let xrFrame = null;
		const attributes = gl.getContextAttributes();
		let initialRenderTarget = null;
		let newRenderTarget = null;

		const controllers = [];
		const inputSourcesMap = new Map();

		//

		const cameraL = new PerspectiveCamera$1();
		cameraL.layers.enable(1);
		cameraL.viewport = new Vector4$1();

		const cameraR = new PerspectiveCamera$1();
		cameraR.layers.enable(2);
		cameraR.viewport = new Vector4$1();

		const cameras = [cameraL, cameraR];

		const cameraVR = new ArrayCamera$1();
		cameraVR.layers.enable(1);
		cameraVR.layers.enable(2);

		let _currentDepthNear = null;
		let _currentDepthFar = null;

		//

		this.cameraAutoUpdate = true;
		this.enabled = false;

		this.isPresenting = false;

		this.getController = function (index) {

			let controller = controllers[index];

			if (controller === undefined) {

				controller = new WebXRController$1();
				controllers[index] = controller;

			}

			return controller.getTargetRaySpace();

		};

		this.getControllerGrip = function (index) {

			let controller = controllers[index];

			if (controller === undefined) {

				controller = new WebXRController$1();
				controllers[index] = controller;

			}

			return controller.getGripSpace();

		};

		this.getHand = function (index) {

			let controller = controllers[index];

			if (controller === undefined) {

				controller = new WebXRController$1();
				controllers[index] = controller;

			}

			return controller.getHandSpace();

		};

		//

		function onSessionEvent(event) {

			const controller = inputSourcesMap.get(event.inputSource);

			if (controller !== undefined) {

				controller.dispatchEvent({ type: event.type, data: event.inputSource });

			}

		}

		function onSessionEnd() {

			session.removeEventListener('select', onSessionEvent);
			session.removeEventListener('selectstart', onSessionEvent);
			session.removeEventListener('selectend', onSessionEvent);
			session.removeEventListener('squeeze', onSessionEvent);
			session.removeEventListener('squeezestart', onSessionEvent);
			session.removeEventListener('squeezeend', onSessionEvent);
			session.removeEventListener('end', onSessionEnd);
			session.removeEventListener('inputsourceschange', onInputSourcesChange);

			inputSourcesMap.forEach(function (controller, inputSource) {

				if (controller !== undefined) {

					controller.disconnect(inputSource);

				}

			});

			inputSourcesMap.clear();

			_currentDepthNear = null;
			_currentDepthFar = null;

			// restore framebuffer/rendering state

			renderer.setRenderTarget(initialRenderTarget);

			glBaseLayer = null;
			glProjLayer = null;
			glBinding = null;
			session = null;
			newRenderTarget = null;

			//

			animation.stop();

			scope.isPresenting = false;

			scope.dispatchEvent({ type: 'sessionend' });

		}

		this.setFramebufferScaleFactor = function (value) {

			framebufferScaleFactor = value;

			if (scope.isPresenting === true) {

				console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');

			}

		};

		this.setReferenceSpaceType = function (value) {

			referenceSpaceType = value;

			if (scope.isPresenting === true) {

				console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');

			}

		};

		this.getReferenceSpace = function () {

			return customReferenceSpace || referenceSpace;

		};

		this.setReferenceSpace = function (space) {

			customReferenceSpace = space;

		};

		this.getBaseLayer = function () {

			return glProjLayer !== null ? glProjLayer : glBaseLayer;

		};

		this.getBinding = function () {

			return glBinding;

		};

		this.getFrame = function () {

			return xrFrame;

		};

		this.getSession = function () {

			return session;

		};

		this.setSession = async function (value) {

			session = value;

			if (session !== null) {

				initialRenderTarget = renderer.getRenderTarget();

				session.addEventListener('select', onSessionEvent);
				session.addEventListener('selectstart', onSessionEvent);
				session.addEventListener('selectend', onSessionEvent);
				session.addEventListener('squeeze', onSessionEvent);
				session.addEventListener('squeezestart', onSessionEvent);
				session.addEventListener('squeezeend', onSessionEvent);
				session.addEventListener('end', onSessionEnd);
				session.addEventListener('inputsourceschange', onInputSourcesChange);

				if (attributes.xrCompatible !== true) {

					await gl.makeXRCompatible();

				}

				if ((session.renderState.layers === undefined) || (renderer.capabilities.isWebGL2 === false)) {

					const layerInit = {
						antialias: (session.renderState.layers === undefined) ? attributes.antialias : true,
						alpha: attributes.alpha,
						depth: attributes.depth,
						stencil: attributes.stencil,
						framebufferScaleFactor: framebufferScaleFactor
					};

					glBaseLayer = new XRWebGLLayer(session, gl, layerInit);

					session.updateRenderState({ baseLayer: glBaseLayer });

					newRenderTarget = new WebGLRenderTarget$1(
						glBaseLayer.framebufferWidth,
						glBaseLayer.framebufferHeight,
						{
							format: RGBAFormat$1,
							type: UnsignedByteType$1,
							encoding: renderer.outputEncoding
						}
					);

				} else {

					let depthFormat = null;
					let depthType = null;
					let glDepthFormat = null;

					if (attributes.depth) {

						glDepthFormat = attributes.stencil ? 35056 : 33190;
						depthFormat = attributes.stencil ? DepthStencilFormat$1 : DepthFormat$1;
						depthType = attributes.stencil ? UnsignedInt248Type$1 : UnsignedIntType$1;

					}

					const projectionlayerInit = {
						colorFormat: (renderer.outputEncoding === sRGBEncoding$1) ? 35907 : 32856,
						depthFormat: glDepthFormat,
						scaleFactor: framebufferScaleFactor
					};

					glBinding = new XRWebGLBinding(session, gl);

					glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);

					session.updateRenderState({ layers: [glProjLayer] });

					newRenderTarget = new WebGLRenderTarget$1(
						glProjLayer.textureWidth,
						glProjLayer.textureHeight,
						{
							format: RGBAFormat$1,
							type: UnsignedByteType$1,
							depthTexture: new DepthTexture$1(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat),
							stencilBuffer: attributes.stencil,
							encoding: renderer.outputEncoding,
							samples: attributes.antialias ? 4 : 0
						});

					const renderTargetProperties = renderer.properties.get(newRenderTarget);
					renderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;

				}

				newRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278

				// Set foveation to maximum.
				this.setFoveation(1.0);

				customReferenceSpace = null;
				referenceSpace = await session.requestReferenceSpace(referenceSpaceType);

				animation.setContext(session);
				animation.start();

				scope.isPresenting = true;

				scope.dispatchEvent({ type: 'sessionstart' });

			}

		};

		function onInputSourcesChange(event) {

			const inputSources = session.inputSources;

			// Assign controllers to available inputSources

			for (let i = 0; i < inputSources.length; i++) {

				const index = inputSources[i].handedness === 'right' ? 1 : 0;
				inputSourcesMap.set(inputSources[i], controllers[index]);

			}

			// Notify disconnected

			for (let i = 0; i < event.removed.length; i++) {

				const inputSource = event.removed[i];
				const controller = inputSourcesMap.get(inputSource);

				if (controller) {

					controller.dispatchEvent({ type: 'disconnected', data: inputSource });
					inputSourcesMap.delete(inputSource);

				}

			}

			// Notify connected

			for (let i = 0; i < event.added.length; i++) {

				const inputSource = event.added[i];
				const controller = inputSourcesMap.get(inputSource);

				if (controller) {

					controller.dispatchEvent({ type: 'connected', data: inputSource });

				}

			}

		}

		//

		const cameraLPos = new Vector3$1();
		const cameraRPos = new Vector3$1();

		/**
		 * Assumes 2 cameras that are parallel and share an X-axis, and that
		 * the cameras' projection and world matrices have already been set.
		 * And that near and far planes are identical for both cameras.
		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
		 */
		function setProjectionFromUnion(camera, cameraL, cameraR) {

			cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
			cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);

			const ipd = cameraLPos.distanceTo(cameraRPos);

			const projL = cameraL.projectionMatrix.elements;
			const projR = cameraR.projectionMatrix.elements;

			// VR systems will have identical far and near planes, and
			// most likely identical top and bottom frustum extents.
			// Use the left camera for these values.
			const near = projL[14] / (projL[10] - 1);
			const far = projL[14] / (projL[10] + 1);
			const topFov = (projL[9] + 1) / projL[5];
			const bottomFov = (projL[9] - 1) / projL[5];

			const leftFov = (projL[8] - 1) / projL[0];
			const rightFov = (projR[8] + 1) / projR[0];
			const left = near * leftFov;
			const right = near * rightFov;

			// Calculate the new camera's position offset from the
			// left camera. xOffset should be roughly half `ipd`.
			const zOffset = ipd / (- leftFov + rightFov);
			const xOffset = zOffset * - leftFov;

			// TODO: Better way to apply this offset?
			cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
			camera.translateX(xOffset);
			camera.translateZ(zOffset);
			camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
			camera.matrixWorldInverse.copy(camera.matrixWorld).invert();

			// Find the union of the frustum values of the cameras and scale
			// the values so that the near plane's position does not change in world space,
			// although must now be relative to the new union camera.
			const near2 = near + zOffset;
			const far2 = far + zOffset;
			const left2 = left - xOffset;
			const right2 = right + (ipd - xOffset);
			const top2 = topFov * far / far2 * near2;
			const bottom2 = bottomFov * far / far2 * near2;

			camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);

		}

		function updateCamera(camera, parent) {

			if (parent === null) {

				camera.matrixWorld.copy(camera.matrix);

			} else {

				camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);

			}

			camera.matrixWorldInverse.copy(camera.matrixWorld).invert();

		}

		this.updateCamera = function (camera) {

			if (session === null) return;

			cameraVR.near = cameraR.near = cameraL.near = camera.near;
			cameraVR.far = cameraR.far = cameraL.far = camera.far;

			if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {

				// Note that the new renderState won't apply until the next frame. See #18320

				session.updateRenderState({
					depthNear: cameraVR.near,
					depthFar: cameraVR.far
				});

				_currentDepthNear = cameraVR.near;
				_currentDepthFar = cameraVR.far;

			}

			const parent = camera.parent;
			const cameras = cameraVR.cameras;

			updateCamera(cameraVR, parent);

			for (let i = 0; i < cameras.length; i++) {

				updateCamera(cameras[i], parent);

			}

			cameraVR.matrixWorld.decompose(cameraVR.position, cameraVR.quaternion, cameraVR.scale);

			// update user camera and its children

			camera.position.copy(cameraVR.position);
			camera.quaternion.copy(cameraVR.quaternion);
			camera.scale.copy(cameraVR.scale);
			camera.matrix.copy(cameraVR.matrix);
			camera.matrixWorld.copy(cameraVR.matrixWorld);

			const children = camera.children;

			for (let i = 0, l = children.length; i < l; i++) {

				children[i].updateMatrixWorld(true);

			}

			// update projection matrix for proper view frustum culling

			if (cameras.length === 2) {

				setProjectionFromUnion(cameraVR, cameraL, cameraR);

			} else {

				// assume single camera setup (AR)

				cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);

			}

		};

		this.getCamera = function () {

			return cameraVR;

		};

		this.getFoveation = function () {

			if (glProjLayer !== null) {

				return glProjLayer.fixedFoveation;

			}

			if (glBaseLayer !== null) {

				return glBaseLayer.fixedFoveation;

			}

			return undefined;

		};

		this.setFoveation = function (foveation) {

			// 0 = no foveation = full resolution
			// 1 = maximum foveation = the edges render at lower resolution

			if (glProjLayer !== null) {

				glProjLayer.fixedFoveation = foveation;

			}

			if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined) {

				glBaseLayer.fixedFoveation = foveation;

			}

		};

		// Animation Loop

		let onAnimationFrameCallback = null;

		function onAnimationFrame(time, frame) {

			pose = frame.getViewerPose(customReferenceSpace || referenceSpace);
			xrFrame = frame;

			if (pose !== null) {

				const views = pose.views;

				if (glBaseLayer !== null) {

					renderer.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
					renderer.setRenderTarget(newRenderTarget);

				}

				let cameraVRNeedsUpdate = false;

				// check if it's necessary to rebuild cameraVR's camera list

				if (views.length !== cameraVR.cameras.length) {

					cameraVR.cameras.length = 0;
					cameraVRNeedsUpdate = true;

				}

				for (let i = 0; i < views.length; i++) {

					const view = views[i];

					let viewport = null;

					if (glBaseLayer !== null) {

						viewport = glBaseLayer.getViewport(view);

					} else {

						const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
						viewport = glSubImage.viewport;

						// For side-by-side projection, we only produce a single texture for both eyes.
						if (i === 0) {

							renderer.setRenderTargetTextures(
								newRenderTarget,
								glSubImage.colorTexture,
								glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture);

							renderer.setRenderTarget(newRenderTarget);

						}

					}

					let camera = cameras[i];

					if (camera === undefined) {

						camera = new PerspectiveCamera$1();
						camera.layers.enable(i);
						camera.viewport = new Vector4$1();
						cameras[i] = camera;

					}

					camera.matrix.fromArray(view.transform.matrix);
					camera.projectionMatrix.fromArray(view.projectionMatrix);
					camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);

					if (i === 0) {

						cameraVR.matrix.copy(camera.matrix);

					}

					if (cameraVRNeedsUpdate === true) {

						cameraVR.cameras.push(camera);

					}

				}

			}

			//

			const inputSources = session.inputSources;

			for (let i = 0; i < controllers.length; i++) {

				const inputSource = inputSources[i];
				const controller = inputSourcesMap.get(inputSource);

				if (controller !== undefined) {

					controller.update(inputSource, frame, customReferenceSpace || referenceSpace);

				}

			}

			if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);

			xrFrame = null;

		}

		const animation = new WebGLAnimation$1();

		animation.setAnimationLoop(onAnimationFrame);

		this.setAnimationLoop = function (callback) {

			onAnimationFrameCallback = callback;

		};

		this.dispose = function () { };

	}

}

function WebGLMaterials$1(renderer, properties) {

	function refreshFogUniforms(uniforms, fog) {

		uniforms.fogColor.value.copy(fog.color);

		if (fog.isFog) {

			uniforms.fogNear.value = fog.near;
			uniforms.fogFar.value = fog.far;

		} else if (fog.isFogExp2) {

			uniforms.fogDensity.value = fog.density;

		}

	}

	function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {

		if (material.isMeshBasicMaterial) {

			refreshUniformsCommon(uniforms, material);

		} else if (material.isMeshLambertMaterial) {

			refreshUniformsCommon(uniforms, material);

		} else if (material.isMeshToonMaterial) {

			refreshUniformsCommon(uniforms, material);
			refreshUniformsToon(uniforms, material);

		} else if (material.isMeshPhongMaterial) {

			refreshUniformsCommon(uniforms, material);
			refreshUniformsPhong(uniforms, material);

		} else if (material.isMeshStandardMaterial) {

			refreshUniformsCommon(uniforms, material);
			refreshUniformsStandard(uniforms, material);

			if (material.isMeshPhysicalMaterial) {

				refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);

			}

		} else if (material.isMeshMatcapMaterial) {

			refreshUniformsCommon(uniforms, material);
			refreshUniformsMatcap(uniforms, material);

		} else if (material.isMeshDepthMaterial) {

			refreshUniformsCommon(uniforms, material);

		} else if (material.isMeshDistanceMaterial) {

			refreshUniformsCommon(uniforms, material);
			refreshUniformsDistance(uniforms, material);

		} else if (material.isMeshNormalMaterial) {

			refreshUniformsCommon(uniforms, material);

		} else if (material.isLineBasicMaterial) {

			refreshUniformsLine(uniforms, material);

			if (material.isLineDashedMaterial) {

				refreshUniformsDash(uniforms, material);

			}

		} else if (material.isPointsMaterial) {

			refreshUniformsPoints(uniforms, material, pixelRatio, height);

		} else if (material.isSpriteMaterial) {

			refreshUniformsSprites(uniforms, material);

		} else if (material.isShadowMaterial) {

			uniforms.color.value.copy(material.color);
			uniforms.opacity.value = material.opacity;

		} else if (material.isShaderMaterial) {

			material.uniformsNeedUpdate = false; // #15581

		}

	}

	function refreshUniformsCommon(uniforms, material) {

		uniforms.opacity.value = material.opacity;

		if (material.color) {

			uniforms.diffuse.value.copy(material.color);

		}

		if (material.emissive) {

			uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);

		}

		if (material.map) {

			uniforms.map.value = material.map;

		}

		if (material.alphaMap) {

			uniforms.alphaMap.value = material.alphaMap;

		}

		if (material.bumpMap) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;
			if (material.side === BackSide$1) uniforms.bumpScale.value *= - 1;

		}

		if (material.displacementMap) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

		if (material.emissiveMap) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

		if (material.normalMap) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy(material.normalScale);
			if (material.side === BackSide$1) uniforms.normalScale.value.negate();

		}

		if (material.specularMap) {

			uniforms.specularMap.value = material.specularMap;

		}

		if (material.alphaTest > 0) {

			uniforms.alphaTest.value = material.alphaTest;

		}

		const envMap = properties.get(material).envMap;

		if (envMap) {

			uniforms.envMap.value = envMap;

			uniforms.flipEnvMap.value = (envMap.isCubeTexture && envMap.isRenderTargetTexture === false) ? - 1 : 1;

			uniforms.reflectivity.value = material.reflectivity;
			uniforms.ior.value = material.ior;
			uniforms.refractionRatio.value = material.refractionRatio;

		}

		if (material.lightMap) {

			uniforms.lightMap.value = material.lightMap;

			// artist-friendly light intensity scaling factor
			const scaleFactor = (renderer.physicallyCorrectLights !== true) ? Math.PI : 1;

			uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;

		}

		if (material.aoMap) {

			uniforms.aoMap.value = material.aoMap;
			uniforms.aoMapIntensity.value = material.aoMapIntensity;

		}

		// uv repeat and offset setting priorities
		// 1. color map
		// 2. specular map
		// 3. displacementMap map
		// 4. normal map
		// 5. bump map
		// 6. roughnessMap map
		// 7. metalnessMap map
		// 8. alphaMap map
		// 9. emissiveMap map
		// 10. clearcoat map
		// 11. clearcoat normal map
		// 12. clearcoat roughnessMap map
		// 13. iridescence map
		// 14. iridescence thickness map
		// 15. specular intensity map
		// 16. specular tint map
		// 17. transmission map
		// 18. thickness map

		let uvScaleMap;

		if (material.map) {

			uvScaleMap = material.map;

		} else if (material.specularMap) {

			uvScaleMap = material.specularMap;

		} else if (material.displacementMap) {

			uvScaleMap = material.displacementMap;

		} else if (material.normalMap) {

			uvScaleMap = material.normalMap;

		} else if (material.bumpMap) {

			uvScaleMap = material.bumpMap;

		} else if (material.roughnessMap) {

			uvScaleMap = material.roughnessMap;

		} else if (material.metalnessMap) {

			uvScaleMap = material.metalnessMap;

		} else if (material.alphaMap) {

			uvScaleMap = material.alphaMap;

		} else if (material.emissiveMap) {

			uvScaleMap = material.emissiveMap;

		} else if (material.clearcoatMap) {

			uvScaleMap = material.clearcoatMap;

		} else if (material.clearcoatNormalMap) {

			uvScaleMap = material.clearcoatNormalMap;

		} else if (material.clearcoatRoughnessMap) {

			uvScaleMap = material.clearcoatRoughnessMap;

		} else if (material.iridescenceMap) {

			uvScaleMap = material.iridescenceMap;

		} else if (material.iridescenceThicknessMap) {

			uvScaleMap = material.iridescenceThicknessMap;

		} else if (material.specularIntensityMap) {

			uvScaleMap = material.specularIntensityMap;

		} else if (material.specularColorMap) {

			uvScaleMap = material.specularColorMap;

		} else if (material.transmissionMap) {

			uvScaleMap = material.transmissionMap;

		} else if (material.thicknessMap) {

			uvScaleMap = material.thicknessMap;

		} else if (material.sheenColorMap) {

			uvScaleMap = material.sheenColorMap;

		} else if (material.sheenRoughnessMap) {

			uvScaleMap = material.sheenRoughnessMap;

		}

		if (uvScaleMap !== undefined) {

			// backwards compatibility
			if (uvScaleMap.isWebGLRenderTarget) {

				uvScaleMap = uvScaleMap.texture;

			}

			if (uvScaleMap.matrixAutoUpdate === true) {

				uvScaleMap.updateMatrix();

			}

			uniforms.uvTransform.value.copy(uvScaleMap.matrix);

		}

		// uv repeat and offset setting priorities for uv2
		// 1. ao map
		// 2. light map

		let uv2ScaleMap;

		if (material.aoMap) {

			uv2ScaleMap = material.aoMap;

		} else if (material.lightMap) {

			uv2ScaleMap = material.lightMap;

		}

		if (uv2ScaleMap !== undefined) {

			// backwards compatibility
			if (uv2ScaleMap.isWebGLRenderTarget) {

				uv2ScaleMap = uv2ScaleMap.texture;

			}

			if (uv2ScaleMap.matrixAutoUpdate === true) {

				uv2ScaleMap.updateMatrix();

			}

			uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);

		}

	}

	function refreshUniformsLine(uniforms, material) {

		uniforms.diffuse.value.copy(material.color);
		uniforms.opacity.value = material.opacity;

	}

	function refreshUniformsDash(uniforms, material) {

		uniforms.dashSize.value = material.dashSize;
		uniforms.totalSize.value = material.dashSize + material.gapSize;
		uniforms.scale.value = material.scale;

	}

	function refreshUniformsPoints(uniforms, material, pixelRatio, height) {

		uniforms.diffuse.value.copy(material.color);
		uniforms.opacity.value = material.opacity;
		uniforms.size.value = material.size * pixelRatio;
		uniforms.scale.value = height * 0.5;

		if (material.map) {

			uniforms.map.value = material.map;

		}

		if (material.alphaMap) {

			uniforms.alphaMap.value = material.alphaMap;

		}

		if (material.alphaTest > 0) {

			uniforms.alphaTest.value = material.alphaTest;

		}

		// uv repeat and offset setting priorities
		// 1. color map
		// 2. alpha map

		let uvScaleMap;

		if (material.map) {

			uvScaleMap = material.map;

		} else if (material.alphaMap) {

			uvScaleMap = material.alphaMap;

		}

		if (uvScaleMap !== undefined) {

			if (uvScaleMap.matrixAutoUpdate === true) {

				uvScaleMap.updateMatrix();

			}

			uniforms.uvTransform.value.copy(uvScaleMap.matrix);

		}

	}

	function refreshUniformsSprites(uniforms, material) {

		uniforms.diffuse.value.copy(material.color);
		uniforms.opacity.value = material.opacity;
		uniforms.rotation.value = material.rotation;

		if (material.map) {

			uniforms.map.value = material.map;

		}

		if (material.alphaMap) {

			uniforms.alphaMap.value = material.alphaMap;

		}

		if (material.alphaTest > 0) {

			uniforms.alphaTest.value = material.alphaTest;

		}

		// uv repeat and offset setting priorities
		// 1. color map
		// 2. alpha map

		let uvScaleMap;

		if (material.map) {

			uvScaleMap = material.map;

		} else if (material.alphaMap) {

			uvScaleMap = material.alphaMap;

		}

		if (uvScaleMap !== undefined) {

			if (uvScaleMap.matrixAutoUpdate === true) {

				uvScaleMap.updateMatrix();

			}

			uniforms.uvTransform.value.copy(uvScaleMap.matrix);

		}

	}

	function refreshUniformsPhong(uniforms, material) {

		uniforms.specular.value.copy(material.specular);
		uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )

	}

	function refreshUniformsToon(uniforms, material) {

		if (material.gradientMap) {

			uniforms.gradientMap.value = material.gradientMap;

		}

	}

	function refreshUniformsStandard(uniforms, material) {

		uniforms.roughness.value = material.roughness;
		uniforms.metalness.value = material.metalness;

		if (material.roughnessMap) {

			uniforms.roughnessMap.value = material.roughnessMap;

		}

		if (material.metalnessMap) {

			uniforms.metalnessMap.value = material.metalnessMap;

		}

		const envMap = properties.get(material).envMap;

		if (envMap) {

			//uniforms.envMap.value = material.envMap; // part of uniforms common
			uniforms.envMapIntensity.value = material.envMapIntensity;

		}

	}

	function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {

		uniforms.ior.value = material.ior; // also part of uniforms common

		if (material.sheen > 0) {

			uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);

			uniforms.sheenRoughness.value = material.sheenRoughness;

			if (material.sheenColorMap) {

				uniforms.sheenColorMap.value = material.sheenColorMap;

			}

			if (material.sheenRoughnessMap) {

				uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;

			}

		}

		if (material.clearcoat > 0) {

			uniforms.clearcoat.value = material.clearcoat;
			uniforms.clearcoatRoughness.value = material.clearcoatRoughness;

			if (material.clearcoatMap) {

				uniforms.clearcoatMap.value = material.clearcoatMap;

			}

			if (material.clearcoatRoughnessMap) {

				uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;

			}

			if (material.clearcoatNormalMap) {

				uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
				uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;

				if (material.side === BackSide$1) {

					uniforms.clearcoatNormalScale.value.negate();

				}

			}

		}

		if (material.iridescence > 0) {

			uniforms.iridescence.value = material.iridescence;
			uniforms.iridescenceIOR.value = material.iridescenceIOR;
			uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[0];
			uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[1];

			if (material.iridescenceMap) {

				uniforms.iridescenceMap.value = material.iridescenceMap;

			}

			if (material.iridescenceThicknessMap) {

				uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;

			}

		}

		if (material.transmission > 0) {

			uniforms.transmission.value = material.transmission;
			uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
			uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);

			if (material.transmissionMap) {

				uniforms.transmissionMap.value = material.transmissionMap;

			}

			uniforms.thickness.value = material.thickness;

			if (material.thicknessMap) {

				uniforms.thicknessMap.value = material.thicknessMap;

			}

			uniforms.attenuationDistance.value = material.attenuationDistance;
			uniforms.attenuationColor.value.copy(material.attenuationColor);

		}

		uniforms.specularIntensity.value = material.specularIntensity;
		uniforms.specularColor.value.copy(material.specularColor);

		if (material.specularIntensityMap) {

			uniforms.specularIntensityMap.value = material.specularIntensityMap;

		}

		if (material.specularColorMap) {

			uniforms.specularColorMap.value = material.specularColorMap;

		}

	}

	function refreshUniformsMatcap(uniforms, material) {

		if (material.matcap) {

			uniforms.matcap.value = material.matcap;

		}

	}

	function refreshUniformsDistance(uniforms, material) {

		uniforms.referencePosition.value.copy(material.referencePosition);
		uniforms.nearDistance.value = material.nearDistance;
		uniforms.farDistance.value = material.farDistance;

	}

	return {
		refreshFogUniforms: refreshFogUniforms,
		refreshMaterialUniforms: refreshMaterialUniforms
	};

}

function createCanvasElement$1() {

	const canvas = createElementNS$1('canvas');
	canvas.style.display = 'block';
	return canvas;

}

function WebGLRenderer$1(parameters = {}) {

	this.isWebGLRenderer = true;

	const _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement$1(),
		_context = parameters.context !== undefined ? parameters.context : null,

		_depth = parameters.depth !== undefined ? parameters.depth : true,
		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
		_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
		_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;

	let _alpha;

	if (_context !== null) {

		_alpha = _context.getContextAttributes().alpha;

	} else {

		_alpha = parameters.alpha !== undefined ? parameters.alpha : false;

	}

	let currentRenderList = null;
	let currentRenderState = null;

	// render() can be called from within a callback triggered by another render.
	// We track this so that the nested render call gets its list and state isolated from the parent render call.

	const renderListStack = [];
	const renderStateStack = [];

	// public properties

	this.domElement = _canvas;

	// Debug configuration container
	this.debug = {

		/**
		 * Enables error checking and reporting when shader programs are being compiled
		 * @type {boolean}
		 */
		checkShaderErrors: true
	};

	// clearing

	this.autoClear = true;
	this.autoClearColor = true;
	this.autoClearDepth = true;
	this.autoClearStencil = true;

	// scene graph

	this.sortObjects = true;

	// user-defined clipping

	this.clippingPlanes = [];
	this.localClippingEnabled = false;

	// physically based shading

	this.outputEncoding = LinearEncoding$1;

	// physical lights

	this.physicallyCorrectLights = false;

	// tone mapping

	this.toneMapping = NoToneMapping$1;
	this.toneMappingExposure = 1.0;

	//

	Object.defineProperties(this, {

		// @deprecated since r136, 0e21088102b4de7e0a0a33140620b7a3424b9e6d

		gammaFactor: {
			get: function () {

				console.warn('THREE.WebGLRenderer: .gammaFactor has been removed.');
				return 2;

			},
			set: function () {

				console.warn('THREE.WebGLRenderer: .gammaFactor has been removed.');

			}
		}

	});

	// internal properties

	const _this = this;

	let _isContextLost = false;

	// internal state cache

	let _currentActiveCubeFace = 0;
	let _currentActiveMipmapLevel = 0;
	let _currentRenderTarget = null;
	let _currentMaterialId = - 1;

	let _currentCamera = null;

	const _currentViewport = new Vector4$1();
	const _currentScissor = new Vector4$1();
	let _currentScissorTest = null;

	//

	let _width = _canvas.width;
	let _height = _canvas.height;

	let _pixelRatio = 1;
	let _opaqueSort = null;
	let _transparentSort = null;

	const _viewport = new Vector4$1(0, 0, _width, _height);
	const _scissor = new Vector4$1(0, 0, _width, _height);
	let _scissorTest = false;

	// frustum

	const _frustum = new Frustum$1();

	// clipping

	let _clippingEnabled = false;
	let _localClippingEnabled = false;

	// transmission

	let _transmissionRenderTarget = null;

	// camera matrices cache

	const _projScreenMatrix = new Matrix4$1();

	const _vector2 = new Vector2$1();
	const _vector3 = new Vector3$1();

	const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };

	function getTargetPixelRatio() {

		return _currentRenderTarget === null ? _pixelRatio : 1;

	}

	// initialize

	let _gl = _context;

	function getContext(contextNames, contextAttributes) {

		for (let i = 0; i < contextNames.length; i++) {

			const contextName = contextNames[i];
			const context = _canvas.getContext(contextName, contextAttributes);
			if (context !== null) return context;

		}

		return null;

	}

	try {

		const contextAttributes = {
			alpha: true,
			depth: _depth,
			stencil: _stencil,
			antialias: _antialias,
			premultipliedAlpha: _premultipliedAlpha,
			preserveDrawingBuffer: _preserveDrawingBuffer,
			powerPreference: _powerPreference,
			failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
		};

		// OffscreenCanvas does not have setAttribute, see #22811
		if ('setAttribute' in _canvas) _canvas.setAttribute('data-engine', `three.js r${REVISION$1}`);

		// event listeners must be registered before WebGL context is created, see #12753
		_canvas.addEventListener('webglcontextlost', onContextLost, false);
		_canvas.addEventListener('webglcontextrestored', onContextRestore, false);
		_canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);

		if (_gl === null) {

			const contextNames = ['webgl2', 'webgl', 'experimental-webgl'];

			if (_this.isWebGL1Renderer === true) {

				contextNames.shift();

			}

			_gl = getContext(contextNames, contextAttributes);

			if (_gl === null) {

				if (getContext(contextNames)) {

					throw new Error('Error creating WebGL context with your selected attributes.');

				} else {

					throw new Error('Error creating WebGL context.');

				}

			}

		}

		// Some experimental-webgl implementations do not have getShaderPrecisionFormat

		if (_gl.getShaderPrecisionFormat === undefined) {

			_gl.getShaderPrecisionFormat = function () {

				return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

			};

		}

	} catch (error) {

		console.error('THREE.WebGLRenderer: ' + error.message);
		throw error;

	}

	let extensions, capabilities, state, info;
	let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
	let programCache, materials, renderLists, renderStates, clipping, shadowMap;

	let background, morphtargets, bufferRenderer, indexedBufferRenderer;

	let utils, bindingStates;

	function initGLContext() {

		extensions = new WebGLExtensions$1(_gl);

		capabilities = new WebGLCapabilities$1(_gl, extensions, parameters);

		extensions.init(capabilities);

		utils = new WebGLUtils$1(_gl, extensions, capabilities);

		state = new WebGLState$1(_gl, extensions, capabilities);

		info = new WebGLInfo$1();
		properties = new WebGLProperties$1();
		textures = new WebGLTextures$1(_gl, extensions, state, properties, capabilities, utils, info);
		cubemaps = new WebGLCubeMaps$1(_this);
		cubeuvmaps = new WebGLCubeUVMaps$1(_this);
		attributes = new WebGLAttributes$1(_gl, capabilities);
		bindingStates = new WebGLBindingStates$1(_gl, extensions, attributes, capabilities);
		geometries = new WebGLGeometries$1(_gl, attributes, info, bindingStates);
		objects = new WebGLObjects$1(_gl, geometries, attributes, info);
		morphtargets = new WebGLMorphtargets$1(_gl, capabilities, textures);
		clipping = new WebGLClipping$1(properties);
		programCache = new WebGLPrograms$1(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);
		materials = new WebGLMaterials$1(_this, properties);
		renderLists = new WebGLRenderLists$1();
		renderStates = new WebGLRenderStates$1(extensions, capabilities);
		background = new WebGLBackground$1(_this, cubemaps, state, objects, _alpha, _premultipliedAlpha);
		shadowMap = new WebGLShadowMap$1(_this, objects, capabilities);

		bufferRenderer = new WebGLBufferRenderer$1(_gl, extensions, info, capabilities);
		indexedBufferRenderer = new WebGLIndexedBufferRenderer$1(_gl, extensions, info, capabilities);

		info.programs = programCache.programs;

		_this.capabilities = capabilities;
		_this.extensions = extensions;
		_this.properties = properties;
		_this.renderLists = renderLists;
		_this.shadowMap = shadowMap;
		_this.state = state;
		_this.info = info;

	}

	initGLContext();

	// xr

	const xr = new WebXRManager$1(_this, _gl);

	this.xr = xr;

	// API

	this.getContext = function () {

		return _gl;

	};

	this.getContextAttributes = function () {

		return _gl.getContextAttributes();

	};

	this.forceContextLoss = function () {

		const extension = extensions.get('WEBGL_lose_context');
		if (extension) extension.loseContext();

	};

	this.forceContextRestore = function () {

		const extension = extensions.get('WEBGL_lose_context');
		if (extension) extension.restoreContext();

	};

	this.getPixelRatio = function () {

		return _pixelRatio;

	};

	this.setPixelRatio = function (value) {

		if (value === undefined) return;

		_pixelRatio = value;

		this.setSize(_width, _height, false);

	};

	this.getSize = function (target) {

		return target.set(_width, _height);

	};

	this.setSize = function (width, height, updateStyle) {

		if (xr.isPresenting) {

			console.warn('THREE.WebGLRenderer: Can\'t change size while VR device is presenting.');
			return;

		}

		_width = width;
		_height = height;

		_canvas.width = Math.floor(width * _pixelRatio);
		_canvas.height = Math.floor(height * _pixelRatio);

		if (updateStyle !== false) {

			_canvas.style.width = width + 'px';
			_canvas.style.height = height + 'px';

		}

		this.setViewport(0, 0, width, height);

	};

	this.getDrawingBufferSize = function (target) {

		return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();

	};

	this.setDrawingBufferSize = function (width, height, pixelRatio) {

		_width = width;
		_height = height;

		_pixelRatio = pixelRatio;

		_canvas.width = Math.floor(width * pixelRatio);
		_canvas.height = Math.floor(height * pixelRatio);

		this.setViewport(0, 0, width, height);

	};

	this.getCurrentViewport = function (target) {

		return target.copy(_currentViewport);

	};

	this.getViewport = function (target) {

		return target.copy(_viewport);

	};

	this.setViewport = function (x, y, width, height) {

		if (x.isVector4) {

			_viewport.set(x.x, x.y, x.z, x.w);

		} else {

			_viewport.set(x, y, width, height);

		}

		state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());

	};

	this.getScissor = function (target) {

		return target.copy(_scissor);

	};

	this.setScissor = function (x, y, width, height) {

		if (x.isVector4) {

			_scissor.set(x.x, x.y, x.z, x.w);

		} else {

			_scissor.set(x, y, width, height);

		}

		state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());

	};

	this.getScissorTest = function () {

		return _scissorTest;

	};

	this.setScissorTest = function (boolean) {

		state.setScissorTest(_scissorTest = boolean);

	};

	this.setOpaqueSort = function (method) {

		_opaqueSort = method;

	};

	this.setTransparentSort = function (method) {

		_transparentSort = method;

	};

	// Clearing

	this.getClearColor = function (target) {

		return target.copy(background.getClearColor());

	};

	this.setClearColor = function () {

		background.setClearColor.apply(background, arguments);

	};

	this.getClearAlpha = function () {

		return background.getClearAlpha();

	};

	this.setClearAlpha = function () {

		background.setClearAlpha.apply(background, arguments);

	};

	this.clear = function (color = true, depth = true, stencil = true) {

		let bits = 0;

		if (color) bits |= 16384;
		if (depth) bits |= 256;
		if (stencil) bits |= 1024;

		_gl.clear(bits);

	};

	this.clearColor = function () {

		this.clear(true, false, false);

	};

	this.clearDepth = function () {

		this.clear(false, true, false);

	};

	this.clearStencil = function () {

		this.clear(false, false, true);

	};

	//

	this.dispose = function () {

		_canvas.removeEventListener('webglcontextlost', onContextLost, false);
		_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);
		_canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);

		renderLists.dispose();
		renderStates.dispose();
		properties.dispose();
		cubemaps.dispose();
		cubeuvmaps.dispose();
		objects.dispose();
		bindingStates.dispose();
		programCache.dispose();

		xr.dispose();

		xr.removeEventListener('sessionstart', onXRSessionStart);
		xr.removeEventListener('sessionend', onXRSessionEnd);

		if (_transmissionRenderTarget) {

			_transmissionRenderTarget.dispose();
			_transmissionRenderTarget = null;

		}

		animation.stop();

	};

	// Events

	function onContextLost(event) {

		event.preventDefault();

		console.log('THREE.WebGLRenderer: Context Lost.');

		_isContextLost = true;

	}

	function onContextRestore( /* event */) {

		console.log('THREE.WebGLRenderer: Context Restored.');

		_isContextLost = false;

		const infoAutoReset = info.autoReset;
		const shadowMapEnabled = shadowMap.enabled;
		const shadowMapAutoUpdate = shadowMap.autoUpdate;
		const shadowMapNeedsUpdate = shadowMap.needsUpdate;
		const shadowMapType = shadowMap.type;

		initGLContext();

		info.autoReset = infoAutoReset;
		shadowMap.enabled = shadowMapEnabled;
		shadowMap.autoUpdate = shadowMapAutoUpdate;
		shadowMap.needsUpdate = shadowMapNeedsUpdate;
		shadowMap.type = shadowMapType;

	}

	function onContextCreationError(event) {

		console.error('THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage);

	}

	function onMaterialDispose(event) {

		const material = event.target;

		material.removeEventListener('dispose', onMaterialDispose);

		deallocateMaterial(material);

	}

	// Buffer deallocation

	function deallocateMaterial(material) {

		releaseMaterialProgramReferences(material);

		properties.remove(material);

	}


	function releaseMaterialProgramReferences(material) {

		const programs = properties.get(material).programs;

		if (programs !== undefined) {

			programs.forEach(function (program) {

				programCache.releaseProgram(program);

			});

			if (material.isShaderMaterial) {

				programCache.releaseShaderCache(material);

			}

		}

	}

	// Buffer rendering

	this.renderBufferDirect = function (camera, scene, geometry, material, object, group) {

		if (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)

		const frontFaceCW = (object.isMesh && object.matrixWorld.determinant() < 0);

		const program = setProgram(camera, scene, geometry, material, object);

		state.setMaterial(material, frontFaceCW);

		//

		let index = geometry.index;
		const position = geometry.attributes.position;

		//

		if (index === null) {

			if (position === undefined || position.count === 0) return;

		} else if (index.count === 0) {

			return;

		}

		//

		let rangeFactor = 1;

		if (material.wireframe === true) {

			index = geometries.getWireframeAttribute(geometry);
			rangeFactor = 2;

		}

		bindingStates.setup(object, material, program, geometry, index);

		let attribute;
		let renderer = bufferRenderer;

		if (index !== null) {

			attribute = attributes.get(index);

			renderer = indexedBufferRenderer;
			renderer.setIndex(attribute);

		}

		//

		const dataCount = (index !== null) ? index.count : position.count;

		const rangeStart = geometry.drawRange.start * rangeFactor;
		const rangeCount = geometry.drawRange.count * rangeFactor;

		const groupStart = group !== null ? group.start * rangeFactor : 0;
		const groupCount = group !== null ? group.count * rangeFactor : Infinity;

		const drawStart = Math.max(rangeStart, groupStart);
		const drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;

		const drawCount = Math.max(0, drawEnd - drawStart + 1);

		if (drawCount === 0) return;

		//

		if (object.isMesh) {

			if (material.wireframe === true) {

				state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
				renderer.setMode(1);

			} else {

				renderer.setMode(4);

			}

		} else if (object.isLine) {

			let lineWidth = material.linewidth;

			if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material

			state.setLineWidth(lineWidth * getTargetPixelRatio());

			if (object.isLineSegments) {

				renderer.setMode(1);

			} else if (object.isLineLoop) {

				renderer.setMode(2);

			} else {

				renderer.setMode(3);

			}

		} else if (object.isPoints) {

			renderer.setMode(0);

		} else if (object.isSprite) {

			renderer.setMode(4);

		}

		if (object.isInstancedMesh) {

			renderer.renderInstances(drawStart, drawCount, object.count);

		} else if (geometry.isInstancedBufferGeometry) {

			const instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);

			renderer.renderInstances(drawStart, drawCount, instanceCount);

		} else {

			renderer.render(drawStart, drawCount);

		}

	};

	// Compile

	this.compile = function (scene, camera) {

		currentRenderState = renderStates.get(scene);
		currentRenderState.init();

		renderStateStack.push(currentRenderState);

		scene.traverseVisible(function (object) {

			if (object.isLight && object.layers.test(camera.layers)) {

				currentRenderState.pushLight(object);

				if (object.castShadow) {

					currentRenderState.pushShadow(object);

				}

			}

		});

		currentRenderState.setupLights(_this.physicallyCorrectLights);

		scene.traverse(function (object) {

			const material = object.material;

			if (material) {

				if (Array.isArray(material)) {

					for (let i = 0; i < material.length; i++) {

						const material2 = material[i];

						getProgram(material2, scene, object);

					}

				} else {

					getProgram(material, scene, object);

				}

			}

		});

		renderStateStack.pop();
		currentRenderState = null;

	};

	// Animation Loop

	let onAnimationFrameCallback = null;

	function onAnimationFrame(time) {

		if (onAnimationFrameCallback) onAnimationFrameCallback(time);

	}

	function onXRSessionStart() {

		animation.stop();

	}

	function onXRSessionEnd() {

		animation.start();

	}

	const animation = new WebGLAnimation$1();
	animation.setAnimationLoop(onAnimationFrame);

	if (typeof self !== 'undefined') animation.setContext(self);

	this.setAnimationLoop = function (callback) {

		onAnimationFrameCallback = callback;
		xr.setAnimationLoop(callback);

		(callback === null) ? animation.stop() : animation.start();

	};

	xr.addEventListener('sessionstart', onXRSessionStart);
	xr.addEventListener('sessionend', onXRSessionEnd);

	// Rendering

	this.render = function (scene, camera) {

		if (camera !== undefined && camera.isCamera !== true) {

			console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');
			return;

		}

		if (_isContextLost === true) return;

		// update scene graph

		if (scene.autoUpdate === true) scene.updateMatrixWorld();

		// update camera matrices and frustum

		if (camera.parent === null) camera.updateMatrixWorld();

		if (xr.enabled === true && xr.isPresenting === true) {

			if (xr.cameraAutoUpdate === true) xr.updateCamera(camera);

			camera = xr.getCamera(); // use XR camera for rendering

		}

		//
		if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);

		currentRenderState = renderStates.get(scene, renderStateStack.length);
		currentRenderState.init();

		renderStateStack.push(currentRenderState);

		_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
		_frustum.setFromProjectionMatrix(_projScreenMatrix);

		_localClippingEnabled = this.localClippingEnabled;
		_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);

		currentRenderList = renderLists.get(scene, renderListStack.length);
		currentRenderList.init();

		renderListStack.push(currentRenderList);

		projectObject(scene, camera, 0, _this.sortObjects);

		currentRenderList.finish();

		if (_this.sortObjects === true) {

			currentRenderList.sort(_opaqueSort, _transparentSort);

		}

		//

		if (_clippingEnabled === true) clipping.beginShadows();

		const shadowsArray = currentRenderState.state.shadowsArray;

		shadowMap.render(shadowsArray, scene, camera);

		if (_clippingEnabled === true) clipping.endShadows();

		//

		if (this.info.autoReset === true) this.info.reset();

		//

		background.render(currentRenderList, scene);

		// render scene

		currentRenderState.setupLights(_this.physicallyCorrectLights);

		if (camera.isArrayCamera) {

			const cameras = camera.cameras;

			for (let i = 0, l = cameras.length; i < l; i++) {

				const camera2 = cameras[i];

				renderScene(currentRenderList, scene, camera2, camera2.viewport);

			}

		} else {

			renderScene(currentRenderList, scene, camera);

		}

		//

		if (_currentRenderTarget !== null) {

			// resolve multisample renderbuffers to a single-sample texture if necessary

			textures.updateMultisampleRenderTarget(_currentRenderTarget);

			// Generate mipmap if we're using any kind of mipmap filtering

			textures.updateRenderTargetMipmap(_currentRenderTarget);

		}

		//

		if (scene.isScene === true) scene.onAfterRender(_this, scene, camera);

		// _gl.finish();

		bindingStates.resetDefaultState();
		_currentMaterialId = - 1;
		_currentCamera = null;

		renderStateStack.pop();

		if (renderStateStack.length > 0) {

			currentRenderState = renderStateStack[renderStateStack.length - 1];

		} else {

			currentRenderState = null;

		}

		renderListStack.pop();

		if (renderListStack.length > 0) {

			currentRenderList = renderListStack[renderListStack.length - 1];

		} else {

			currentRenderList = null;

		}

	};

	function projectObject(object, camera, groupOrder, sortObjects) {

		if (object.visible === false) return;

		const visible = object.layers.test(camera.layers);

		if (visible) {

			if (object.isGroup) {

				groupOrder = object.renderOrder;

			} else if (object.isLOD) {

				if (object.autoUpdate === true) object.update(camera);

			} else if (object.isLight) {

				currentRenderState.pushLight(object);

				if (object.castShadow) {

					currentRenderState.pushShadow(object);

				}

			} else if (object.isSprite) {

				if (!object.frustumCulled || _frustum.intersectsSprite(object)) {

					if (sortObjects) {

						_vector3.setFromMatrixPosition(object.matrixWorld)
							.applyMatrix4(_projScreenMatrix);

					}

					const geometry = objects.update(object);
					const material = object.material;

					if (material.visible) {

						currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);

					}

				}

			} else if (object.isMesh || object.isLine || object.isPoints) {

				if (object.isSkinnedMesh) {

					// update skeleton only once in a frame

					if (object.skeleton.frame !== info.render.frame) {

						object.skeleton.update();
						object.skeleton.frame = info.render.frame;

					}

				}

				if (!object.frustumCulled || _frustum.intersectsObject(object)) {

					if (sortObjects) {

						_vector3.setFromMatrixPosition(object.matrixWorld)
							.applyMatrix4(_projScreenMatrix);

					}

					const geometry = objects.update(object);
					const material = object.material;

					if (Array.isArray(material)) {

						const groups = geometry.groups;

						for (let i = 0, l = groups.length; i < l; i++) {

							const group = groups[i];
							const groupMaterial = material[group.materialIndex];

							if (groupMaterial && groupMaterial.visible) {

								currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);

							}

						}

					} else if (material.visible) {

						currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);

					}

				}

			}

		}

		const children = object.children;

		for (let i = 0, l = children.length; i < l; i++) {

			projectObject(children[i], camera, groupOrder, sortObjects);

		}

	}

	function renderScene(currentRenderList, scene, camera, viewport) {

		const opaqueObjects = currentRenderList.opaque;
		const transmissiveObjects = currentRenderList.transmissive;
		const transparentObjects = currentRenderList.transparent;

		currentRenderState.setupLightsView(camera);

		if (transmissiveObjects.length > 0) renderTransmissionPass(opaqueObjects, scene, camera);

		if (viewport) state.viewport(_currentViewport.copy(viewport));

		if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);
		if (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene, camera);
		if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera);

		// Ensure depth buffer writing is enabled so it can be cleared on next render

		state.buffers.depth.setTest(true);
		state.buffers.depth.setMask(true);
		state.buffers.color.setMask(true);

		state.setPolygonOffset(false);

	}

	function renderTransmissionPass(opaqueObjects, scene, camera) {

		const isWebGL2 = capabilities.isWebGL2;

		if (_transmissionRenderTarget === null) {

			_transmissionRenderTarget = new WebGLRenderTarget$1(1, 1, {
				generateMipmaps: true,
				type: extensions.has('EXT_color_buffer_half_float') ? HalfFloatType$1 : UnsignedByteType$1,
				minFilter: LinearMipmapLinearFilter$1,
				samples: (isWebGL2 && _antialias === true) ? 4 : 0
			});

		}

		_this.getDrawingBufferSize(_vector2);

		if (isWebGL2) {

			_transmissionRenderTarget.setSize(_vector2.x, _vector2.y);

		} else {

			_transmissionRenderTarget.setSize(floorPowerOfTwo$1(_vector2.x), floorPowerOfTwo$1(_vector2.y));

		}

		//

		const currentRenderTarget = _this.getRenderTarget();
		_this.setRenderTarget(_transmissionRenderTarget);
		_this.clear();

		// Turn off the features which can affect the frag color for opaque objects pass.
		// Otherwise they are applied twice in opaque objects pass and transmission objects pass.
		const currentToneMapping = _this.toneMapping;
		_this.toneMapping = NoToneMapping$1;

		renderObjects(opaqueObjects, scene, camera);

		_this.toneMapping = currentToneMapping;

		textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
		textures.updateRenderTargetMipmap(_transmissionRenderTarget);

		_this.setRenderTarget(currentRenderTarget);

	}

	function renderObjects(renderList, scene, camera) {

		const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;

		for (let i = 0, l = renderList.length; i < l; i++) {

			const renderItem = renderList[i];

			const object = renderItem.object;
			const geometry = renderItem.geometry;
			const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
			const group = renderItem.group;

			if (object.layers.test(camera.layers)) {

				renderObject(object, scene, camera, geometry, material, group);

			}

		}

	}

	function renderObject(object, scene, camera, geometry, material, group) {

		object.onBeforeRender(_this, scene, camera, geometry, material, group);

		object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
		object.normalMatrix.getNormalMatrix(object.modelViewMatrix);

		material.onBeforeRender(_this, scene, camera, geometry, object, group);

		if (material.transparent === true && material.side === DoubleSide$1) {

			material.side = BackSide$1;
			material.needsUpdate = true;
			_this.renderBufferDirect(camera, scene, geometry, material, object, group);

			material.side = FrontSide$1;
			material.needsUpdate = true;
			_this.renderBufferDirect(camera, scene, geometry, material, object, group);

			material.side = DoubleSide$1;

		} else {

			_this.renderBufferDirect(camera, scene, geometry, material, object, group);

		}

		object.onAfterRender(_this, scene, camera, geometry, material, group);

	}

	function getProgram(material, scene, object) {

		if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

		const materialProperties = properties.get(material);

		const lights = currentRenderState.state.lights;
		const shadowsArray = currentRenderState.state.shadowsArray;

		const lightsStateVersion = lights.state.version;

		const parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
		const programCacheKey = programCache.getProgramCacheKey(parameters);

		let programs = materialProperties.programs;

		// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change

		materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
		materialProperties.fog = scene.fog;
		materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);

		if (programs === undefined) {

			// new material

			material.addEventListener('dispose', onMaterialDispose);

			programs = new Map();
			materialProperties.programs = programs;

		}

		let program = programs.get(programCacheKey);

		if (program !== undefined) {

			// early out if program and light state is identical

			if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {

				updateCommonMaterialProperties(material, parameters);

				return program;

			}

		} else {

			parameters.uniforms = programCache.getUniforms(material);

			material.onBuild(object, parameters, _this);

			material.onBeforeCompile(parameters, _this);

			program = programCache.acquireProgram(parameters, programCacheKey);
			programs.set(programCacheKey, program);

			materialProperties.uniforms = parameters.uniforms;

		}

		const uniforms = materialProperties.uniforms;

		if ((!material.isShaderMaterial && !material.isRawShaderMaterial) || material.clipping === true) {

			uniforms.clippingPlanes = clipping.uniform;

		}

		updateCommonMaterialProperties(material, parameters);

		// store the light setup it was created for

		materialProperties.needsLights = materialNeedsLights(material);
		materialProperties.lightsStateVersion = lightsStateVersion;

		if (materialProperties.needsLights) {

			// wire up the material to this renderer's lighting state

			uniforms.ambientLightColor.value = lights.state.ambient;
			uniforms.lightProbe.value = lights.state.probe;
			uniforms.directionalLights.value = lights.state.directional;
			uniforms.directionalLightShadows.value = lights.state.directionalShadow;
			uniforms.spotLights.value = lights.state.spot;
			uniforms.spotLightShadows.value = lights.state.spotShadow;
			uniforms.rectAreaLights.value = lights.state.rectArea;
			uniforms.ltc_1.value = lights.state.rectAreaLTC1;
			uniforms.ltc_2.value = lights.state.rectAreaLTC2;
			uniforms.pointLights.value = lights.state.point;
			uniforms.pointLightShadows.value = lights.state.pointShadow;
			uniforms.hemisphereLights.value = lights.state.hemi;

			uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
			uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
			uniforms.spotShadowMap.value = lights.state.spotShadowMap;
			uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
			uniforms.pointShadowMap.value = lights.state.pointShadowMap;
			uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
			// TODO (abelnation): add area lights shadow info to uniforms

		}

		const progUniforms = program.getUniforms();
		const uniformsList = WebGLUniforms$1.seqWithValue(progUniforms.seq, uniforms);

		materialProperties.currentProgram = program;
		materialProperties.uniformsList = uniformsList;

		return program;

	}

	function updateCommonMaterialProperties(material, parameters) {

		const materialProperties = properties.get(material);

		materialProperties.outputEncoding = parameters.outputEncoding;
		materialProperties.instancing = parameters.instancing;
		materialProperties.skinning = parameters.skinning;
		materialProperties.morphTargets = parameters.morphTargets;
		materialProperties.morphNormals = parameters.morphNormals;
		materialProperties.morphColors = parameters.morphColors;
		materialProperties.morphTargetsCount = parameters.morphTargetsCount;
		materialProperties.numClippingPlanes = parameters.numClippingPlanes;
		materialProperties.numIntersection = parameters.numClipIntersection;
		materialProperties.vertexAlphas = parameters.vertexAlphas;
		materialProperties.vertexTangents = parameters.vertexTangents;
		materialProperties.toneMapping = parameters.toneMapping;

	}

	function setProgram(camera, scene, geometry, material, object) {

		if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

		textures.resetTextureUnits();

		const fog = scene.fog;
		const environment = material.isMeshStandardMaterial ? scene.environment : null;
		const encoding = (_currentRenderTarget === null) ? _this.outputEncoding : (_currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.encoding : LinearEncoding$1);
		const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
		const vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;
		const vertexTangents = !!material.normalMap && !!geometry.attributes.tangent;
		const morphTargets = !!geometry.morphAttributes.position;
		const morphNormals = !!geometry.morphAttributes.normal;
		const morphColors = !!geometry.morphAttributes.color;
		const toneMapping = material.toneMapped ? _this.toneMapping : NoToneMapping$1;

		const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
		const morphTargetsCount = (morphAttribute !== undefined) ? morphAttribute.length : 0;

		const materialProperties = properties.get(material);
		const lights = currentRenderState.state.lights;

		if (_clippingEnabled === true) {

			if (_localClippingEnabled === true || camera !== _currentCamera) {

				const useCache =
					camera === _currentCamera &&
					material.id === _currentMaterialId;

				// we might want to call this function with some ClippingGroup
				// object instead of the material, once it becomes feasible
				// (#8465, #8379)
				clipping.setState(material, camera, useCache);

			}

		}

		//

		let needsProgramChange = false;

		if (material.version === materialProperties.__version) {

			if (materialProperties.needsLights && (materialProperties.lightsStateVersion !== lights.state.version)) {

				needsProgramChange = true;

			} else if (materialProperties.outputEncoding !== encoding) {

				needsProgramChange = true;

			} else if (object.isInstancedMesh && materialProperties.instancing === false) {

				needsProgramChange = true;

			} else if (!object.isInstancedMesh && materialProperties.instancing === true) {

				needsProgramChange = true;

			} else if (object.isSkinnedMesh && materialProperties.skinning === false) {

				needsProgramChange = true;

			} else if (!object.isSkinnedMesh && materialProperties.skinning === true) {

				needsProgramChange = true;

			} else if (materialProperties.envMap !== envMap) {

				needsProgramChange = true;

			} else if (material.fog === true && materialProperties.fog !== fog) {

				needsProgramChange = true;

			} else if (materialProperties.numClippingPlanes !== undefined &&
				(materialProperties.numClippingPlanes !== clipping.numPlanes ||
					materialProperties.numIntersection !== clipping.numIntersection)) {

				needsProgramChange = true;

			} else if (materialProperties.vertexAlphas !== vertexAlphas) {

				needsProgramChange = true;

			} else if (materialProperties.vertexTangents !== vertexTangents) {

				needsProgramChange = true;

			} else if (materialProperties.morphTargets !== morphTargets) {

				needsProgramChange = true;

			} else if (materialProperties.morphNormals !== morphNormals) {

				needsProgramChange = true;

			} else if (materialProperties.morphColors !== morphColors) {

				needsProgramChange = true;

			} else if (materialProperties.toneMapping !== toneMapping) {

				needsProgramChange = true;

			} else if (capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount) {

				needsProgramChange = true;

			}

		} else {

			needsProgramChange = true;
			materialProperties.__version = material.version;

		}

		//

		let program = materialProperties.currentProgram;

		if (needsProgramChange === true) {

			program = getProgram(material, scene, object);

		}

		let refreshProgram = false;
		let refreshMaterial = false;
		let refreshLights = false;

		const p_uniforms = program.getUniforms(),
			m_uniforms = materialProperties.uniforms;

		if (state.useProgram(program.program)) {

			refreshProgram = true;
			refreshMaterial = true;
			refreshLights = true;

		}

		if (material.id !== _currentMaterialId) {

			_currentMaterialId = material.id;

			refreshMaterial = true;

		}

		if (refreshProgram || _currentCamera !== camera) {

			p_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);

			if (capabilities.logarithmicDepthBuffer) {

				p_uniforms.setValue(_gl, 'logDepthBufFC',
					2.0 / (Math.log(camera.far + 1.0) / Math.LN2));

			}

			if (_currentCamera !== camera) {

				_currentCamera = camera;

				// lighting uniforms depend on the camera so enforce an update
				// now, in case this material supports lights - or later, when
				// the next material that does gets activated:

				refreshMaterial = true;		// set to true on material change
				refreshLights = true;		// remains set until update done

			}

			// load material specific uniforms
			// (shader material also gets them for the sake of genericity)

			if (material.isShaderMaterial ||
				material.isMeshPhongMaterial ||
				material.isMeshToonMaterial ||
				material.isMeshStandardMaterial ||
				material.envMap) {

				const uCamPos = p_uniforms.map.cameraPosition;

				if (uCamPos !== undefined) {

					uCamPos.setValue(_gl,
						_vector3.setFromMatrixPosition(camera.matrixWorld));

				}

			}

			if (material.isMeshPhongMaterial ||
				material.isMeshToonMaterial ||
				material.isMeshLambertMaterial ||
				material.isMeshBasicMaterial ||
				material.isMeshStandardMaterial ||
				material.isShaderMaterial) {

				p_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);

			}

			if (material.isMeshPhongMaterial ||
				material.isMeshToonMaterial ||
				material.isMeshLambertMaterial ||
				material.isMeshBasicMaterial ||
				material.isMeshStandardMaterial ||
				material.isShaderMaterial ||
				material.isShadowMaterial ||
				object.isSkinnedMesh) {

				p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);

			}

		}

		// skinning and morph target uniforms must be set even if material didn't change
		// auto-setting of texture unit for bone and morph texture must go before other textures
		// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures

		if (object.isSkinnedMesh) {

			p_uniforms.setOptional(_gl, object, 'bindMatrix');
			p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');

			const skeleton = object.skeleton;

			if (skeleton) {

				if (capabilities.floatVertexTextures) {

					if (skeleton.boneTexture === null) skeleton.computeBoneTexture();

					p_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);
					p_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);

				} else {

					console.warn('THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.');

				}

			}

		}

		const morphAttributes = geometry.morphAttributes;

		if (morphAttributes.position !== undefined || morphAttributes.normal !== undefined || (morphAttributes.color !== undefined && capabilities.isWebGL2 === true)) {

			morphtargets.update(object, geometry, material, program);

		}


		if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {

			materialProperties.receiveShadow = object.receiveShadow;
			p_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);

		}

		if (refreshMaterial) {

			p_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);

			if (materialProperties.needsLights) {

				// the current material requires lighting info

				// note: all lighting uniforms are always set correctly
				// they simply reference the renderer's state for their
				// values
				//
				// use the current material's .needsUpdate flags to set
				// the GL state when required

				markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);

			}

			// refresh uniforms common to several materials

			if (fog && material.fog === true) {

				materials.refreshFogUniforms(m_uniforms, fog);

			}

			materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);

			WebGLUniforms$1.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);

		}

		if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {

			WebGLUniforms$1.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
			material.uniformsNeedUpdate = false;

		}

		if (material.isSpriteMaterial) {

			p_uniforms.setValue(_gl, 'center', object.center);

		}

		// common matrices

		p_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);
		p_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);
		p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);

		return program;

	}

	// If uniforms are marked as clean, they don't need to be loaded to the GPU.

	function markUniformsLightsNeedsUpdate(uniforms, value) {

		uniforms.ambientLightColor.needsUpdate = value;
		uniforms.lightProbe.needsUpdate = value;

		uniforms.directionalLights.needsUpdate = value;
		uniforms.directionalLightShadows.needsUpdate = value;
		uniforms.pointLights.needsUpdate = value;
		uniforms.pointLightShadows.needsUpdate = value;
		uniforms.spotLights.needsUpdate = value;
		uniforms.spotLightShadows.needsUpdate = value;
		uniforms.rectAreaLights.needsUpdate = value;
		uniforms.hemisphereLights.needsUpdate = value;

	}

	function materialNeedsLights(material) {

		return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||
			material.isMeshStandardMaterial || material.isShadowMaterial ||
			(material.isShaderMaterial && material.lights === true);

	}

	this.getActiveCubeFace = function () {

		return _currentActiveCubeFace;

	};

	this.getActiveMipmapLevel = function () {

		return _currentActiveMipmapLevel;

	};

	this.getRenderTarget = function () {

		return _currentRenderTarget;

	};

	this.setRenderTargetTextures = function (renderTarget, colorTexture, depthTexture) {

		properties.get(renderTarget.texture).__webglTexture = colorTexture;
		properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;

		const renderTargetProperties = properties.get(renderTarget);
		renderTargetProperties.__hasExternalTextures = true;

		if (renderTargetProperties.__hasExternalTextures) {

			renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;

			if (!renderTargetProperties.__autoAllocateDepthBuffer) {

				// The multisample_render_to_texture extension doesn't work properly if there
				// are midframe flushes and an external depth buffer. Disable use of the extension.
				if (extensions.has('WEBGL_multisampled_render_to_texture') === true) {

					console.warn('THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided');
					renderTargetProperties.__useRenderToTexture = false;

				}

			}

		}

	};

	this.setRenderTargetFramebuffer = function (renderTarget, defaultFramebuffer) {

		const renderTargetProperties = properties.get(renderTarget);
		renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
		renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;

	};

	this.setRenderTarget = function (renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {

		_currentRenderTarget = renderTarget;
		_currentActiveCubeFace = activeCubeFace;
		_currentActiveMipmapLevel = activeMipmapLevel;

		let useDefaultFramebuffer = true;

		if (renderTarget) {

			const renderTargetProperties = properties.get(renderTarget);

			if (renderTargetProperties.__useDefaultFramebuffer !== undefined) {

				// We need to make sure to rebind the framebuffer.
				state.bindFramebuffer(36160, null);
				useDefaultFramebuffer = false;

			} else if (renderTargetProperties.__webglFramebuffer === undefined) {

				textures.setupRenderTarget(renderTarget);

			} else if (renderTargetProperties.__hasExternalTextures) {

				// Color and depth texture must be rebound in order for the swapchain to update.
				textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);

			}

		}

		let framebuffer = null;
		let isCube = false;
		let isRenderTarget3D = false;

		if (renderTarget) {

			const texture = renderTarget.texture;

			if (texture.isData3DTexture || texture.isDataArrayTexture) {

				isRenderTarget3D = true;

			}

			const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;

			if (renderTarget.isWebGLCubeRenderTarget) {

				framebuffer = __webglFramebuffer[activeCubeFace];
				isCube = true;

			} else if ((capabilities.isWebGL2 && renderTarget.samples > 0) && textures.useMultisampledRTT(renderTarget) === false) {

				framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;

			} else {

				framebuffer = __webglFramebuffer;

			}

			_currentViewport.copy(renderTarget.viewport);
			_currentScissor.copy(renderTarget.scissor);
			_currentScissorTest = renderTarget.scissorTest;

		} else {

			_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
			_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
			_currentScissorTest = _scissorTest;

		}

		const framebufferBound = state.bindFramebuffer(36160, framebuffer);

		if (framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer) {

			state.drawBuffers(renderTarget, framebuffer);

		}

		state.viewport(_currentViewport);
		state.scissor(_currentScissor);
		state.setScissorTest(_currentScissorTest);

		if (isCube) {

			const textureProperties = properties.get(renderTarget.texture);
			_gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);

		} else if (isRenderTarget3D) {

			const textureProperties = properties.get(renderTarget.texture);
			const layer = activeCubeFace || 0;
			_gl.framebufferTextureLayer(36160, 36064, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);

		}

		_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings

	};

	this.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {

		if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {

			console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');
			return;

		}

		let framebuffer = properties.get(renderTarget).__webglFramebuffer;

		if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {

			framebuffer = framebuffer[activeCubeFaceIndex];

		}

		if (framebuffer) {

			state.bindFramebuffer(36160, framebuffer);

			try {

				const texture = renderTarget.texture;
				const textureFormat = texture.format;
				const textureType = texture.type;

				if (textureFormat !== RGBAFormat$1 && utils.convert(textureFormat) !== _gl.getParameter(35739)) {

					console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');
					return;

				}

				const halfFloatSupportedByExt = (textureType === HalfFloatType$1) && (extensions.has('EXT_color_buffer_half_float') || (capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float')));

				if (textureType !== UnsignedByteType$1 && utils.convert(textureType) !== _gl.getParameter(35738) && // Edge and Chrome Mac < 52 (#9513)
					!(textureType === FloatType$1 && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox
					!halfFloatSupportedByExt) {

					console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');
					return;

				}

				// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

				if ((x >= 0 && x <= (renderTarget.width - width)) && (y >= 0 && y <= (renderTarget.height - height))) {

					_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);

				}

			} finally {

				// restore framebuffer of current render target if necessary

				const framebuffer = (_currentRenderTarget !== null) ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
				state.bindFramebuffer(36160, framebuffer);

			}

		}

	};

	this.copyFramebufferToTexture = function (position, texture, level = 0) {

		const levelScale = Math.pow(2, - level);
		const width = Math.floor(texture.image.width * levelScale);
		const height = Math.floor(texture.image.height * levelScale);

		textures.setTexture2D(texture, 0);

		_gl.copyTexSubImage2D(3553, level, 0, 0, position.x, position.y, width, height);

		state.unbindTexture();

	};

	this.copyTextureToTexture = function (position, srcTexture, dstTexture, level = 0) {

		const width = srcTexture.image.width;
		const height = srcTexture.image.height;
		const glFormat = utils.convert(dstTexture.format);
		const glType = utils.convert(dstTexture.type);

		textures.setTexture2D(dstTexture, 0);

		// As another texture upload may have changed pixelStorei
		// parameters, make sure they are correct for the dstTexture
		_gl.pixelStorei(37440, dstTexture.flipY);
		_gl.pixelStorei(37441, dstTexture.premultiplyAlpha);
		_gl.pixelStorei(3317, dstTexture.unpackAlignment);

		if (srcTexture.isDataTexture) {

			_gl.texSubImage2D(3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);

		} else {

			if (srcTexture.isCompressedTexture) {

				_gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);

			} else {

				_gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image);

			}

		}

		// Generate mipmaps only when copying level 0
		if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(3553);

		state.unbindTexture();

	};

	this.copyTextureToTexture3D = function (sourceBox, position, srcTexture, dstTexture, level = 0) {

		if (_this.isWebGL1Renderer) {

			console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');
			return;

		}

		const width = sourceBox.max.x - sourceBox.min.x + 1;
		const height = sourceBox.max.y - sourceBox.min.y + 1;
		const depth = sourceBox.max.z - sourceBox.min.z + 1;
		const glFormat = utils.convert(dstTexture.format);
		const glType = utils.convert(dstTexture.type);
		let glTarget;

		if (dstTexture.isData3DTexture) {

			textures.setTexture3D(dstTexture, 0);
			glTarget = 32879;

		} else if (dstTexture.isDataArrayTexture) {

			textures.setTexture2DArray(dstTexture, 0);
			glTarget = 35866;

		} else {

			console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');
			return;

		}

		_gl.pixelStorei(37440, dstTexture.flipY);
		_gl.pixelStorei(37441, dstTexture.premultiplyAlpha);
		_gl.pixelStorei(3317, dstTexture.unpackAlignment);

		const unpackRowLen = _gl.getParameter(3314);
		const unpackImageHeight = _gl.getParameter(32878);
		const unpackSkipPixels = _gl.getParameter(3316);
		const unpackSkipRows = _gl.getParameter(3315);
		const unpackSkipImages = _gl.getParameter(32877);

		const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;

		_gl.pixelStorei(3314, image.width);
		_gl.pixelStorei(32878, image.height);
		_gl.pixelStorei(3316, sourceBox.min.x);
		_gl.pixelStorei(3315, sourceBox.min.y);
		_gl.pixelStorei(32877, sourceBox.min.z);

		if (srcTexture.isDataTexture || srcTexture.isData3DTexture) {

			_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data);

		} else {

			if (srcTexture.isCompressedTexture) {

				console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.');
				_gl.compressedTexSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data);

			} else {

				_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image);

			}

		}

		_gl.pixelStorei(3314, unpackRowLen);
		_gl.pixelStorei(32878, unpackImageHeight);
		_gl.pixelStorei(3316, unpackSkipPixels);
		_gl.pixelStorei(3315, unpackSkipRows);
		_gl.pixelStorei(32877, unpackSkipImages);

		// Generate mipmaps only when copying level 0
		if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);

		state.unbindTexture();

	};

	this.initTexture = function (texture) {

		textures.setTexture2D(texture, 0);

		state.unbindTexture();

	};

	this.resetState = function () {

		_currentActiveCubeFace = 0;
		_currentActiveMipmapLevel = 0;
		_currentRenderTarget = null;

		state.reset();
		bindingStates.reset();

	};

	if (typeof __THREE_DEVTOOLS__ !== 'undefined') {

		__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', { detail: this }));

	}

}

class WebGL1Renderer$1 extends WebGLRenderer$1 { }

WebGL1Renderer$1.prototype.isWebGL1Renderer = true;

class Scene$1 extends Object3D$1 {

	constructor() {

		super();

		this.isScene = true;

		this.type = 'Scene';

		this.background = null;
		this.environment = null;
		this.fog = null;

		this.overrideMaterial = null;

		this.autoUpdate = true; // checked by the renderer

		if (typeof __THREE_DEVTOOLS__ !== 'undefined') {

			__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', { detail: this }));

		}

	}

	copy(source, recursive) {

		super.copy(source, recursive);

		if (source.background !== null) this.background = source.background.clone();
		if (source.environment !== null) this.environment = source.environment.clone();
		if (source.fog !== null) this.fog = source.fog.clone();

		if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();

		this.autoUpdate = source.autoUpdate;
		this.matrixAutoUpdate = source.matrixAutoUpdate;

		return this;

	}

	toJSON(meta) {

		const data = super.toJSON(meta);

		if (this.fog !== null) data.object.fog = this.fog.toJSON();

		return data;

	}

}

class SpriteMaterial$1 extends Material$1 {

	constructor(parameters) {

		super();

		this.isSpriteMaterial = true;

		this.type = 'SpriteMaterial';

		this.color = new Color$1(0xffffff);

		this.map = null;

		this.alphaMap = null;

		this.rotation = 0;

		this.sizeAttenuation = true;

		this.transparent = true;

		this.fog = true;

		this.setValues(parameters);

	}

	copy(source) {

		super.copy(source);

		this.color.copy(source.color);

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.rotation = source.rotation;

		this.sizeAttenuation = source.sizeAttenuation;

		this.fog = source.fog;

		return this;

	}

}

class LineBasicMaterial$1 extends Material$1 {

	constructor(parameters) {

		super();

		this.isLineBasicMaterial = true;

		this.type = 'LineBasicMaterial';

		this.color = new Color$1(0xffffff);

		this.linewidth = 1;
		this.linecap = 'round';
		this.linejoin = 'round';

		this.fog = true;

		this.setValues(parameters);

	}


	copy(source) {

		super.copy(source);

		this.color.copy(source.color);

		this.linewidth = source.linewidth;
		this.linecap = source.linecap;
		this.linejoin = source.linejoin;

		this.fog = source.fog;

		return this;

	}

}

const _start$1$1 = /*@__PURE__*/ new Vector3$1();
const _end$1$1 = /*@__PURE__*/ new Vector3$1();
const _inverseMatrix$1$1 = /*@__PURE__*/ new Matrix4$1();
const _ray$1$1 = /*@__PURE__*/ new Ray$1();
const _sphere$1$1 = /*@__PURE__*/ new Sphere$1();

class Line$1 extends Object3D$1 {

	constructor(geometry = new BufferGeometry$1(), material = new LineBasicMaterial$1()) {

		super();

		this.isLine = true;

		this.type = 'Line';

		this.geometry = geometry;
		this.material = material;

		this.updateMorphTargets();

	}

	copy(source, recursive) {

		super.copy(source, recursive);

		this.material = source.material;
		this.geometry = source.geometry;

		return this;

	}

	computeLineDistances() {

		const geometry = this.geometry;

		// we assume non-indexed geometry

		if (geometry.index === null) {

			const positionAttribute = geometry.attributes.position;
			const lineDistances = [0];

			for (let i = 1, l = positionAttribute.count; i < l; i++) {

				_start$1$1.fromBufferAttribute(positionAttribute, i - 1);
				_end$1$1.fromBufferAttribute(positionAttribute, i);

				lineDistances[i] = lineDistances[i - 1];
				lineDistances[i] += _start$1$1.distanceTo(_end$1$1);

			}

			geometry.setAttribute('lineDistance', new Float32BufferAttribute$1(lineDistances, 1));

		} else {

			console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');

		}

		return this;

	}

	raycast(raycaster, intersects) {

		const geometry = this.geometry;
		const matrixWorld = this.matrixWorld;
		const threshold = raycaster.params.Line.threshold;
		const drawRange = geometry.drawRange;

		// Checking boundingSphere distance to ray

		if (geometry.boundingSphere === null) geometry.computeBoundingSphere();

		_sphere$1$1.copy(geometry.boundingSphere);
		_sphere$1$1.applyMatrix4(matrixWorld);
		_sphere$1$1.radius += threshold;

		if (raycaster.ray.intersectsSphere(_sphere$1$1) === false) return;

		//

		_inverseMatrix$1$1.copy(matrixWorld).invert();
		_ray$1$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1$1);

		const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
		const localThresholdSq = localThreshold * localThreshold;

		const vStart = new Vector3$1();
		const vEnd = new Vector3$1();
		const interSegment = new Vector3$1();
		const interRay = new Vector3$1();
		const step = this.isLineSegments ? 2 : 1;

		const index = geometry.index;
		const attributes = geometry.attributes;
		const positionAttribute = attributes.position;

		if (index !== null) {

			const start = Math.max(0, drawRange.start);
			const end = Math.min(index.count, (drawRange.start + drawRange.count));

			for (let i = start, l = end - 1; i < l; i += step) {

				const a = index.getX(i);
				const b = index.getX(i + 1);

				vStart.fromBufferAttribute(positionAttribute, a);
				vEnd.fromBufferAttribute(positionAttribute, b);

				const distSq = _ray$1$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);

				if (distSq > localThresholdSq) continue;

				interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation

				const distance = raycaster.ray.origin.distanceTo(interRay);

				if (distance < raycaster.near || distance > raycaster.far) continue;

				intersects.push({

					distance: distance,
					// What do we want? intersection point on the ray or on the segment??
					// point: raycaster.ray.at( distance ),
					point: interSegment.clone().applyMatrix4(this.matrixWorld),
					index: i,
					face: null,
					faceIndex: null,
					object: this

				});

			}

		} else {

			const start = Math.max(0, drawRange.start);
			const end = Math.min(positionAttribute.count, (drawRange.start + drawRange.count));

			for (let i = start, l = end - 1; i < l; i += step) {

				vStart.fromBufferAttribute(positionAttribute, i);
				vEnd.fromBufferAttribute(positionAttribute, i + 1);

				const distSq = _ray$1$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);

				if (distSq > localThresholdSq) continue;

				interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation

				const distance = raycaster.ray.origin.distanceTo(interRay);

				if (distance < raycaster.near || distance > raycaster.far) continue;

				intersects.push({

					distance: distance,
					// What do we want? intersection point on the ray or on the segment??
					// point: raycaster.ray.at( distance ),
					point: interSegment.clone().applyMatrix4(this.matrixWorld),
					index: i,
					face: null,
					faceIndex: null,
					object: this

				});

			}

		}

	}

	updateMorphTargets() {

		const geometry = this.geometry;

		const morphAttributes = geometry.morphAttributes;
		const keys = Object.keys(morphAttributes);

		if (keys.length > 0) {

			const morphAttribute = morphAttributes[keys[0]];

			if (morphAttribute !== undefined) {

				this.morphTargetInfluences = [];
				this.morphTargetDictionary = {};

				for (let m = 0, ml = morphAttribute.length; m < ml; m++) {

					const name = morphAttribute[m].name || String(m);

					this.morphTargetInfluences.push(0);
					this.morphTargetDictionary[name] = m;

				}

			}

		}

	}

}

const _start$2 = /*@__PURE__*/ new Vector3$1();
const _end$2 = /*@__PURE__*/ new Vector3$1();

class LineSegments$1 extends Line$1 {

	constructor(geometry, material) {

		super(geometry, material);

		this.isLineSegments = true;

		this.type = 'LineSegments';

	}

	computeLineDistances() {

		const geometry = this.geometry;

		// we assume non-indexed geometry

		if (geometry.index === null) {

			const positionAttribute = geometry.attributes.position;
			const lineDistances = [];

			for (let i = 0, l = positionAttribute.count; i < l; i += 2) {

				_start$2.fromBufferAttribute(positionAttribute, i);
				_end$2.fromBufferAttribute(positionAttribute, i + 1);

				lineDistances[i] = (i === 0) ? 0 : lineDistances[i - 1];
				lineDistances[i + 1] = lineDistances[i] + _start$2.distanceTo(_end$2);

			}

			geometry.setAttribute('lineDistance', new Float32BufferAttribute$1(lineDistances, 1));

		} else {

			console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');

		}

		return this;

	}

}

class PointsMaterial$1 extends Material$1 {

	constructor(parameters) {

		super();

		this.isPointsMaterial = true;

		this.type = 'PointsMaterial';

		this.color = new Color$1(0xffffff);

		this.map = null;

		this.alphaMap = null;

		this.size = 1;
		this.sizeAttenuation = true;

		this.fog = true;

		this.setValues(parameters);

	}

	copy(source) {

		super.copy(source);

		this.color.copy(source.color);

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.size = source.size;
		this.sizeAttenuation = source.sizeAttenuation;

		this.fog = source.fog;

		return this;

	}

}

//

new Vector3$1();

new Vector3$1();
new Vector3$1();
new Vector3$1();
new Triangle$1();

class ShadowMaterial$1 extends Material$1 {

	constructor(parameters) {

		super();

		this.isShadowMaterial = true;

		this.type = 'ShadowMaterial';

		this.color = new Color$1(0x000000);
		this.transparent = true;

		this.fog = true;

		this.setValues(parameters);

	}

	copy(source) {

		super.copy(source);

		this.color.copy(source.color);

		this.fog = source.fog;

		return this;

	}

}

class RawShaderMaterial$1 extends ShaderMaterial$1 {

	constructor(parameters) {

		super(parameters);

		this.isRawShaderMaterial = true;

		this.type = 'RawShaderMaterial';

	}

}

class MeshStandardMaterial$1 extends Material$1 {

	constructor(parameters) {

		super();

		this.isMeshStandardMaterial = true;

		this.defines = { 'STANDARD': '' };

		this.type = 'MeshStandardMaterial';

		this.color = new Color$1(0xffffff); // diffuse
		this.roughness = 1.0;
		this.metalness = 0.0;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color$1(0x000000);
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap$1;
		this.normalScale = new Vector2$1(1, 1);

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.roughnessMap = null;

		this.metalnessMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.envMapIntensity = 1.0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.flatShading = false;

		this.fog = true;

		this.setValues(parameters);

	}

	copy(source) {

		super.copy(source);

		this.defines = { 'STANDARD': '' };

		this.color.copy(source.color);
		this.roughness = source.roughness;
		this.metalness = source.metalness;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy(source.emissive);
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy(source.normalScale);

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.roughnessMap = source.roughnessMap;

		this.metalnessMap = source.metalnessMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.envMapIntensity = source.envMapIntensity;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.flatShading = source.flatShading;

		this.fog = source.fog;

		return this;

	}

}

class MeshPhysicalMaterial$1 extends MeshStandardMaterial$1 {

	constructor(parameters) {

		super();

		this.isMeshPhysicalMaterial = true;

		this.defines = {

			'STANDARD': '',
			'PHYSICAL': ''

		};

		this.type = 'MeshPhysicalMaterial';

		this.clearcoatMap = null;
		this.clearcoatRoughness = 0.0;
		this.clearcoatRoughnessMap = null;
		this.clearcoatNormalScale = new Vector2$1(1, 1);
		this.clearcoatNormalMap = null;

		this.ior = 1.5;

		Object.defineProperty(this, 'reflectivity', {
			get: function () {

				return (clamp$1(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1));

			},
			set: function (reflectivity) {

				this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);

			}
		});

		this.iridescenceMap = null;
		this.iridescenceIOR = 1.3;
		this.iridescenceThicknessRange = [100, 400];
		this.iridescenceThicknessMap = null;

		this.sheenColor = new Color$1(0x000000);
		this.sheenColorMap = null;
		this.sheenRoughness = 1.0;
		this.sheenRoughnessMap = null;

		this.transmissionMap = null;

		this.thickness = 0;
		this.thicknessMap = null;
		this.attenuationDistance = 0.0;
		this.attenuationColor = new Color$1(1, 1, 1);

		this.specularIntensity = 1.0;
		this.specularIntensityMap = null;
		this.specularColor = new Color$1(1, 1, 1);
		this.specularColorMap = null;

		this._sheen = 0.0;
		this._clearcoat = 0;
		this._iridescence = 0;
		this._transmission = 0;

		this.setValues(parameters);

	}

	get sheen() {

		return this._sheen;

	}

	set sheen(value) {

		if (this._sheen > 0 !== value > 0) {

			this.version++;

		}

		this._sheen = value;

	}

	get clearcoat() {

		return this._clearcoat;

	}

	set clearcoat(value) {

		if (this._clearcoat > 0 !== value > 0) {

			this.version++;

		}

		this._clearcoat = value;

	}

	get iridescence() {

		return this._iridescence;

	}

	set iridescence(value) {

		if (this._iridescence > 0 !== value > 0) {

			this.version++;

		}

		this._iridescence = value;

	}

	get transmission() {

		return this._transmission;

	}

	set transmission(value) {

		if (this._transmission > 0 !== value > 0) {

			this.version++;

		}

		this._transmission = value;

	}

	copy(source) {

		super.copy(source);

		this.defines = {

			'STANDARD': '',
			'PHYSICAL': ''

		};

		this.clearcoat = source.clearcoat;
		this.clearcoatMap = source.clearcoatMap;
		this.clearcoatRoughness = source.clearcoatRoughness;
		this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
		this.clearcoatNormalMap = source.clearcoatNormalMap;
		this.clearcoatNormalScale.copy(source.clearcoatNormalScale);

		this.ior = source.ior;

		this.iridescence = source.iridescence;
		this.iridescenceMap = source.iridescenceMap;
		this.iridescenceIOR = source.iridescenceIOR;
		this.iridescenceThicknessRange = [...source.iridescenceThicknessRange];
		this.iridescenceThicknessMap = source.iridescenceThicknessMap;

		this.sheen = source.sheen;
		this.sheenColor.copy(source.sheenColor);
		this.sheenColorMap = source.sheenColorMap;
		this.sheenRoughness = source.sheenRoughness;
		this.sheenRoughnessMap = source.sheenRoughnessMap;

		this.transmission = source.transmission;
		this.transmissionMap = source.transmissionMap;

		this.thickness = source.thickness;
		this.thicknessMap = source.thicknessMap;
		this.attenuationDistance = source.attenuationDistance;
		this.attenuationColor.copy(source.attenuationColor);

		this.specularIntensity = source.specularIntensity;
		this.specularIntensityMap = source.specularIntensityMap;
		this.specularColor.copy(source.specularColor);
		this.specularColorMap = source.specularColorMap;

		return this;

	}

}

class MeshPhongMaterial$1 extends Material$1 {

	constructor(parameters) {

		super();

		this.isMeshPhongMaterial = true;

		this.type = 'MeshPhongMaterial';

		this.color = new Color$1(0xffffff); // diffuse
		this.specular = new Color$1(0x111111);
		this.shininess = 30;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color$1(0x000000);
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap$1;
		this.normalScale = new Vector2$1(1, 1);

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation$1;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.flatShading = false;

		this.fog = true;

		this.setValues(parameters);

	}

	copy(source) {

		super.copy(source);

		this.color.copy(source.color);
		this.specular.copy(source.specular);
		this.shininess = source.shininess;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy(source.emissive);
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy(source.normalScale);

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.flatShading = source.flatShading;

		this.fog = source.fog;

		return this;

	}

}

class MeshToonMaterial$1 extends Material$1 {

	constructor(parameters) {

		super();

		this.isMeshToonMaterial = true;

		this.defines = { 'TOON': '' };

		this.type = 'MeshToonMaterial';

		this.color = new Color$1(0xffffff);

		this.map = null;
		this.gradientMap = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color$1(0x000000);
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap$1;
		this.normalScale = new Vector2$1(1, 1);

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.alphaMap = null;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.fog = true;

		this.setValues(parameters);

	}

	copy(source) {

		super.copy(source);

		this.color.copy(source.color);

		this.map = source.map;
		this.gradientMap = source.gradientMap;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy(source.emissive);
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy(source.normalScale);

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.alphaMap = source.alphaMap;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.fog = source.fog;

		return this;

	}

}

class MeshNormalMaterial$1 extends Material$1 {

	constructor(parameters) {

		super();

		this.isMeshNormalMaterial = true;

		this.type = 'MeshNormalMaterial';

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap$1;
		this.normalScale = new Vector2$1(1, 1);

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.flatShading = false;

		this.setValues(parameters);

	}

	copy(source) {

		super.copy(source);

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy(source.normalScale);

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.flatShading = source.flatShading;

		return this;

	}

}

class MeshLambertMaterial$1 extends Material$1 {

	constructor(parameters) {

		super();

		this.isMeshLambertMaterial = true;

		this.type = 'MeshLambertMaterial';

		this.color = new Color$1(0xffffff); // diffuse

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color$1(0x000000);
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation$1;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.fog = true;

		this.setValues(parameters);

	}

	copy(source) {

		super.copy(source);

		this.color.copy(source.color);

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy(source.emissive);
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.fog = source.fog;

		return this;

	}

}

class MeshMatcapMaterial$1 extends Material$1 {

	constructor(parameters) {

		super();

		this.isMeshMatcapMaterial = true;

		this.defines = { 'MATCAP': '' };

		this.type = 'MeshMatcapMaterial';

		this.color = new Color$1(0xffffff); // diffuse

		this.matcap = null;

		this.map = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap$1;
		this.normalScale = new Vector2$1(1, 1);

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.alphaMap = null;

		this.flatShading = false;

		this.fog = true;

		this.setValues(parameters);

	}


	copy(source) {

		super.copy(source);

		this.defines = { 'MATCAP': '' };

		this.color.copy(source.color);

		this.matcap = source.matcap;

		this.map = source.map;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy(source.normalScale);

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.alphaMap = source.alphaMap;

		this.flatShading = source.flatShading;

		this.fog = source.fog;

		return this;

	}

}

class LineDashedMaterial$1 extends LineBasicMaterial$1 {

	constructor(parameters) {

		super();

		this.isLineDashedMaterial = true;

		this.type = 'LineDashedMaterial';

		this.scale = 1;
		this.dashSize = 3;
		this.gapSize = 1;

		this.setValues(parameters);

	}

	copy(source) {

		super.copy(source);

		this.scale = source.scale;
		this.dashSize = source.dashSize;
		this.gapSize = source.gapSize;

		return this;

	}

}

const materialLib = {
	ShadowMaterial: ShadowMaterial$1,
	SpriteMaterial: SpriteMaterial$1,
	RawShaderMaterial: RawShaderMaterial$1,
	ShaderMaterial: ShaderMaterial$1,
	PointsMaterial: PointsMaterial$1,
	MeshPhysicalMaterial: MeshPhysicalMaterial$1,
	MeshStandardMaterial: MeshStandardMaterial$1,
	MeshPhongMaterial: MeshPhongMaterial$1,
	MeshToonMaterial: MeshToonMaterial$1,
	MeshNormalMaterial: MeshNormalMaterial$1,
	MeshLambertMaterial: MeshLambertMaterial$1,
	MeshDepthMaterial: MeshDepthMaterial$1,
	MeshDistanceMaterial: MeshDistanceMaterial$1,
	MeshBasicMaterial: MeshBasicMaterial$1,
	MeshMatcapMaterial: MeshMatcapMaterial$1,
	LineDashedMaterial: LineDashedMaterial$1,
	LineBasicMaterial: LineBasicMaterial$1,
	Material: Material$1
};

Material$1.fromType = function (type) {

	return new materialLib[type]();

};

class Light$1 extends Object3D$1 {

	constructor(color, intensity = 1) {

		super();

		this.isLight = true;

		this.type = 'Light';

		this.color = new Color$1(color);
		this.intensity = intensity;

	}

	dispose() {

		// Empty here in base class; some subclasses override.

	}

	copy(source, recursive) {

		super.copy(source, recursive);

		this.color.copy(source.color);
		this.intensity = source.intensity;

		return this;

	}

	toJSON(meta) {

		const data = super.toJSON(meta);

		data.object.color = this.color.getHex();
		data.object.intensity = this.intensity;

		if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();

		if (this.distance !== undefined) data.object.distance = this.distance;
		if (this.angle !== undefined) data.object.angle = this.angle;
		if (this.decay !== undefined) data.object.decay = this.decay;
		if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;

		if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();

		return data;

	}

}

const _projScreenMatrix$1$1 = /*@__PURE__*/ new Matrix4$1();
const _lightPositionWorld$1$1 = /*@__PURE__*/ new Vector3$1();
const _lookTarget$1$1 = /*@__PURE__*/ new Vector3$1();

class LightShadow$1 {

	constructor(camera) {

		this.camera = camera;

		this.bias = 0;
		this.normalBias = 0;
		this.radius = 1;
		this.blurSamples = 8;

		this.mapSize = new Vector2$1(512, 512);

		this.map = null;
		this.mapPass = null;
		this.matrix = new Matrix4$1();

		this.autoUpdate = true;
		this.needsUpdate = false;

		this._frustum = new Frustum$1();
		this._frameExtents = new Vector2$1(1, 1);

		this._viewportCount = 1;

		this._viewports = [

			new Vector4$1(0, 0, 1, 1)

		];

	}

	getViewportCount() {

		return this._viewportCount;

	}

	getFrustum() {

		return this._frustum;

	}

	updateMatrices(light) {

		const shadowCamera = this.camera;
		const shadowMatrix = this.matrix;

		_lightPositionWorld$1$1.setFromMatrixPosition(light.matrixWorld);
		shadowCamera.position.copy(_lightPositionWorld$1$1);

		_lookTarget$1$1.setFromMatrixPosition(light.target.matrixWorld);
		shadowCamera.lookAt(_lookTarget$1$1);
		shadowCamera.updateMatrixWorld();

		_projScreenMatrix$1$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
		this._frustum.setFromProjectionMatrix(_projScreenMatrix$1$1);

		shadowMatrix.set(
			0.5, 0.0, 0.0, 0.5,
			0.0, 0.5, 0.0, 0.5,
			0.0, 0.0, 0.5, 0.5,
			0.0, 0.0, 0.0, 1.0
		);

		shadowMatrix.multiply(shadowCamera.projectionMatrix);
		shadowMatrix.multiply(shadowCamera.matrixWorldInverse);

	}

	getViewport(viewportIndex) {

		return this._viewports[viewportIndex];

	}

	getFrameExtents() {

		return this._frameExtents;

	}

	dispose() {

		if (this.map) {

			this.map.dispose();

		}

		if (this.mapPass) {

			this.mapPass.dispose();

		}

	}

	copy(source) {

		this.camera = source.camera.clone();

		this.bias = source.bias;
		this.radius = source.radius;

		this.mapSize.copy(source.mapSize);

		return this;

	}

	clone() {

		return new this.constructor().copy(this);

	}

	toJSON() {

		const object = {};

		if (this.bias !== 0) object.bias = this.bias;
		if (this.normalBias !== 0) object.normalBias = this.normalBias;
		if (this.radius !== 1) object.radius = this.radius;
		if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();

		object.camera = this.camera.toJSON(false).object;
		delete object.camera.matrix;

		return object;

	}

}

class DirectionalLightShadow$1 extends LightShadow$1 {

	constructor() {

		super(new OrthographicCamera$1(- 5, 5, 5, - 5, 0.5, 500));

		this.isDirectionalLightShadow = true;

	}

}

class DirectionalLight$1 extends Light$1 {

	constructor(color, intensity) {

		super(color, intensity);

		this.isDirectionalLight = true;

		this.type = 'DirectionalLight';

		this.position.copy(Object3D$1.DefaultUp);
		this.updateMatrix();

		this.target = new Object3D$1();

		this.shadow = new DirectionalLightShadow$1();

	}

	dispose() {

		this.shadow.dispose();

	}

	copy(source) {

		super.copy(source);

		this.target = source.target.clone();
		this.shadow = source.shadow.clone();

		return this;

	}

}

class AmbientLight$1 extends Light$1 {

	constructor(color, intensity) {

		super(color, intensity);

		this.isAmbientLight = true;

		this.type = 'AmbientLight';

	}

}

// Characters [].:/ are reserved for track binding syntax.
const _RESERVED_CHARS_RE$1 = '\\[\\]\\.:\\/';

// Attempts to allow node names from any language. ES5's `\w` regexp matches
// only latin characters, and the unicode \p{L} is not yet supported. So
// instead, we exclude reserved characters and match everything else.
const _wordChar$1 = '[^' + _RESERVED_CHARS_RE$1 + ']';
const _wordCharOrDot$1 = '[^' + _RESERVED_CHARS_RE$1.replace('\\.', '') + ']';

// Parent directories, delimited by '/' or ':'. Currently unused, but must
// be matched to parse the rest of the track name.
/((?:WC+[\/:])*)/.source.replace('WC', _wordChar$1);

// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
/(WCOD+)?/.source.replace('WCOD', _wordCharOrDot$1);

// Object on target node, and accessor. May not contain reserved
// characters. Accessor may contain any character except closing bracket.
/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC', _wordChar$1);

// Property and accessor. May not contain reserved characters. Accessor may
// contain any non-bracket characters.
/\.(WC+)(?:\[(.+)\])?/.source.replace('WC', _wordChar$1);

/**
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
 * The azimuthal angle (theta) is measured from the positive z-axis.
 */

class Spherical {

	constructor(radius = 1, phi = 0, theta = 0) {

		this.radius = radius;
		this.phi = phi; // polar angle
		this.theta = theta; // azimuthal angle

		return this;

	}

	set(radius, phi, theta) {

		this.radius = radius;
		this.phi = phi;
		this.theta = theta;

		return this;

	}

	copy(other) {

		this.radius = other.radius;
		this.phi = other.phi;
		this.theta = other.theta;

		return this;

	}

	// restrict phi to be between EPS and PI-EPS
	makeSafe() {

		const EPS = 0.000001;
		this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));

		return this;

	}

	setFromVector3(v) {

		return this.setFromCartesianCoords(v.x, v.y, v.z);

	}

	setFromCartesianCoords(x, y, z) {

		this.radius = Math.sqrt(x * x + y * y + z * z);

		if (this.radius === 0) {

			this.theta = 0;
			this.phi = 0;

		} else {

			this.theta = Math.atan2(x, z);
			this.phi = Math.acos(clamp$1(y / this.radius, - 1, 1));

		}

		return this;

	}

	clone() {

		return new this.constructor().copy(this);

	}

}

class GridHelper$1 extends LineSegments$1 {

	constructor(size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888) {

		color1 = new Color$1(color1);
		color2 = new Color$1(color2);

		const center = divisions / 2;
		const step = size / divisions;
		const halfSize = size / 2;

		const vertices = [], colors = [];

		for (let i = 0, j = 0, k = - halfSize; i <= divisions; i++, k += step) {

			vertices.push(- halfSize, 0, k, halfSize, 0, k);
			vertices.push(k, 0, - halfSize, k, 0, halfSize);

			const color = i === center ? color1 : color2;

			color.toArray(colors, j); j += 3;
			color.toArray(colors, j); j += 3;
			color.toArray(colors, j); j += 3;
			color.toArray(colors, j); j += 3;

		}

		const geometry = new BufferGeometry$1();
		geometry.setAttribute('position', new Float32BufferAttribute$1(vertices, 3));
		geometry.setAttribute('color', new Float32BufferAttribute$1(colors, 3));

		const material = new LineBasicMaterial$1({ vertexColors: true, toneMapped: false });

		super(geometry, material);

		this.type = 'GridHelper';

	}

}

class AxesHelper extends LineSegments$1 {

	constructor(size = 1) {

		const vertices = [
			0, 0, 0, size, 0, 0,
			0, 0, 0, 0, size, 0,
			0, 0, 0, 0, 0, size
		];

		const colors = [
			1, 0, 0, 1, 0.6, 0,
			0, 1, 0, 0.6, 1, 0,
			0, 0, 1, 0, 0.6, 1
		];

		const geometry = new BufferGeometry$1();
		geometry.setAttribute('position', new Float32BufferAttribute$1(vertices, 3));
		geometry.setAttribute('color', new Float32BufferAttribute$1(colors, 3));

		const material = new LineBasicMaterial$1({ vertexColors: true, toneMapped: false });

		super(geometry, material);

		this.type = 'AxesHelper';

	}

	setColors(xAxisColor, yAxisColor, zAxisColor) {

		const color = new Color$1();
		const array = this.geometry.attributes.color.array;

		color.set(xAxisColor);
		color.toArray(array, 0);
		color.toArray(array, 3);

		color.set(yAxisColor);
		color.toArray(array, 6);
		color.toArray(array, 9);

		color.set(zAxisColor);
		color.toArray(array, 12);
		color.toArray(array, 15);

		this.geometry.attributes.color.needsUpdate = true;

		return this;

	}

	dispose() {

		this.geometry.dispose();
		this.material.dispose();

	}

}

const _baseTable = new Uint32Array(512);
const _shiftTable = new Uint32Array(512);

for (let i = 0; i < 256; ++i) {

	const e = i - 127;

	// very small number (0, -0)

	if (e < - 27) {

		_baseTable[i] = 0x0000;
		_baseTable[i | 0x100] = 0x8000;
		_shiftTable[i] = 24;
		_shiftTable[i | 0x100] = 24;

		// small number (denorm)

	} else if (e < - 14) {

		_baseTable[i] = 0x0400 >> (- e - 14);
		_baseTable[i | 0x100] = (0x0400 >> (- e - 14)) | 0x8000;
		_shiftTable[i] = - e - 1;
		_shiftTable[i | 0x100] = - e - 1;

		// normal number

	} else if (e <= 15) {

		_baseTable[i] = (e + 15) << 10;
		_baseTable[i | 0x100] = ((e + 15) << 10) | 0x8000;
		_shiftTable[i] = 13;
		_shiftTable[i | 0x100] = 13;

		// large number (Infinity, -Infinity)

	} else if (e < 128) {

		_baseTable[i] = 0x7c00;
		_baseTable[i | 0x100] = 0xfc00;
		_shiftTable[i] = 24;
		_shiftTable[i | 0x100] = 24;

		// stay (NaN, Infinity, -Infinity)

	} else {

		_baseTable[i] = 0x7c00;
		_baseTable[i | 0x100] = 0xfc00;
		_shiftTable[i] = 13;
		_shiftTable[i | 0x100] = 13;

	}

}

// float16 to float32 helpers

const _mantissaTable = new Uint32Array(2048);
const _exponentTable = new Uint32Array(64);
const _offsetTable = new Uint32Array(64);

for (let i = 1; i < 1024; ++i) {

	let m = i << 13; // zero pad mantissa bits
	let e = 0; // zero exponent

	// normalized
	while ((m & 0x00800000) === 0) {

		m <<= 1;
		e -= 0x00800000; // decrement exponent

	}

	m &= ~0x00800000; // clear leading 1 bit
	e += 0x38800000; // adjust bias

	_mantissaTable[i] = m | e;

}

for (let i = 1024; i < 2048; ++i) {

	_mantissaTable[i] = 0x38000000 + ((i - 1024) << 13);

}

for (let i = 1; i < 31; ++i) {

	_exponentTable[i] = i << 23;

}

_exponentTable[31] = 0x47800000;
_exponentTable[32] = 0x80000000;
for (let i = 33; i < 63; ++i) {

	_exponentTable[i] = 0x80000000 + ((i - 32) << 23);

}

_exponentTable[63] = 0xc7800000;

for (let i = 1; i < 64; ++i) {

	if (i !== 32) {

		_offsetTable[i] = 1024;

	}

}

if (typeof __THREE_DEVTOOLS__ !== 'undefined') {

	__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {
		detail: {
			revision: REVISION$1,
		}
	}));

}

if (typeof window !== 'undefined') {

	if (window.__THREE__) {

		console.warn('WARNING: Multiple instances of Three.js being imported.');

	} else {

		window.__THREE__ = REVISION$1;

	}

}

// This set of controls performs orbiting, dollying (zooming), and panning.
// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
//
//    Orbit - left mouse / touch: one-finger move
//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move

const _changeEvent = { type: 'change' };
const _startEvent = { type: 'start' };
const _endEvent = { type: 'end' };

class OrbitControls extends EventDispatcher$1 {

	constructor(object, domElement) {

		super();

		if (domElement === undefined) console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.');
		if (domElement === document) console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.');

		this.object = object;
		this.domElement = domElement;
		this.domElement.style.touchAction = 'none'; // disable touch scroll

		// Set to false to disable this control
		this.enabled = true;

		// "target" sets the location of focus, where the object orbits around
		this.target = new Vector3$1();

		// How far you can dolly in and out ( PerspectiveCamera only )
		this.minDistance = 0;
		this.maxDistance = Infinity;

		// How far you can zoom in and out ( OrthographicCamera only )
		this.minZoom = 0;
		this.maxZoom = Infinity;

		// How far you can orbit vertically, upper and lower limits.
		// Range is 0 to Math.PI radians.
		this.minPolarAngle = 0; // radians
		this.maxPolarAngle = Math.PI; // radians

		// How far you can orbit horizontally, upper and lower limits.
		// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )
		this.minAzimuthAngle = - Infinity; // radians
		this.maxAzimuthAngle = Infinity; // radians

		// Set to true to enable damping (inertia)
		// If damping is enabled, you must call controls.update() in your animation loop
		this.enableDamping = false;
		this.dampingFactor = 0.05;

		// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
		// Set to false to disable zooming
		this.enableZoom = true;
		this.zoomSpeed = 1.0;

		// Set to false to disable rotating
		this.enableRotate = true;
		this.rotateSpeed = 1.0;

		// Set to false to disable panning
		this.enablePan = true;
		this.panSpeed = 1.0;
		this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up
		this.keyPanSpeed = 7.0;	// pixels moved per arrow key push

		// Set to true to automatically rotate around the target
		// If auto-rotate is enabled, you must call controls.update() in your animation loop
		this.autoRotate = false;
		this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60

		// The four arrow keys
		this.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };

		// Mouse buttons
		this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };

		// Touch fingers
		this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };

		// for reset
		this.target0 = this.target.clone();
		this.position0 = this.object.position.clone();
		this.zoom0 = this.object.zoom;

		// the target DOM element for key events
		this._domElementKeyEvents = null;

		//
		// public methods
		//

		this.getPolarAngle = function () {

			return spherical.phi;

		};

		this.getAzimuthalAngle = function () {

			return spherical.theta;

		};

		this.getDistance = function () {

			return this.object.position.distanceTo(this.target);

		};

		this.listenToKeyEvents = function (domElement) {

			domElement.addEventListener('keydown', onKeyDown);
			this._domElementKeyEvents = domElement;

		};

		this.saveState = function () {

			scope.target0.copy(scope.target);
			scope.position0.copy(scope.object.position);
			scope.zoom0 = scope.object.zoom;

		};

		this.reset = function () {

			scope.target.copy(scope.target0);
			scope.object.position.copy(scope.position0);
			scope.object.zoom = scope.zoom0;

			scope.object.updateProjectionMatrix();
			scope.dispatchEvent(_changeEvent);

			scope.update();

			state = STATE.NONE;

		};

		// this method is exposed, but perhaps it would be better if we can make it private...
		this.update = function () {

			const offset = new Vector3$1();

			// so camera.up is the orbit axis
			const quat = new Quaternion$1().setFromUnitVectors(object.up, new Vector3$1(0, 1, 0));
			const quatInverse = quat.clone().invert();

			const lastPosition = new Vector3$1();
			const lastQuaternion = new Quaternion$1();

			const twoPI = 2 * Math.PI;

			return function update() {

				const position = scope.object.position;

				offset.copy(position).sub(scope.target);

				// rotate offset to "y-axis-is-up" space
				offset.applyQuaternion(quat);

				// angle from z-axis around y-axis
				spherical.setFromVector3(offset);

				if (scope.autoRotate && state === STATE.NONE) {

					rotateLeft(getAutoRotationAngle());

				}

				if (scope.enableDamping) {

					spherical.theta += sphericalDelta.theta * scope.dampingFactor;
					spherical.phi += sphericalDelta.phi * scope.dampingFactor;

				} else {

					spherical.theta += sphericalDelta.theta;
					spherical.phi += sphericalDelta.phi;

				}

				// restrict theta to be between desired limits

				let min = scope.minAzimuthAngle;
				let max = scope.maxAzimuthAngle;

				if (isFinite(min) && isFinite(max)) {

					if (min < - Math.PI) min += twoPI; else if (min > Math.PI) min -= twoPI;

					if (max < - Math.PI) max += twoPI; else if (max > Math.PI) max -= twoPI;

					if (min <= max) {

						spherical.theta = Math.max(min, Math.min(max, spherical.theta));

					} else {

						spherical.theta = (spherical.theta > (min + max) / 2) ?
							Math.max(min, spherical.theta) :
							Math.min(max, spherical.theta);

					}

				}

				// restrict phi to be between desired limits
				spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));

				spherical.makeSafe();


				spherical.radius *= scale;

				// restrict radius to be between desired limits
				spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius));

				// move target to panned location

				if (scope.enableDamping === true) {

					scope.target.addScaledVector(panOffset, scope.dampingFactor);

				} else {

					scope.target.add(panOffset);

				}

				offset.setFromSpherical(spherical);

				// rotate offset back to "camera-up-vector-is-up" space
				offset.applyQuaternion(quatInverse);

				position.copy(scope.target).add(offset);

				scope.object.lookAt(scope.target);

				if (scope.enableDamping === true) {

					sphericalDelta.theta *= (1 - scope.dampingFactor);
					sphericalDelta.phi *= (1 - scope.dampingFactor);

					panOffset.multiplyScalar(1 - scope.dampingFactor);

				} else {

					sphericalDelta.set(0, 0, 0);

					panOffset.set(0, 0, 0);

				}

				scale = 1;

				// update condition is:
				// min(camera displacement, camera rotation in radians)^2 > EPS
				// using small-angle approximation cos(x/2) = 1 - x^2 / 8

				if (zoomChanged ||
					lastPosition.distanceToSquared(scope.object.position) > EPS ||
					8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {

					scope.dispatchEvent(_changeEvent);

					lastPosition.copy(scope.object.position);
					lastQuaternion.copy(scope.object.quaternion);
					zoomChanged = false;

					return true;

				}

				return false;

			};

		}();

		this.dispose = function () {

			scope.domElement.removeEventListener('contextmenu', onContextMenu);

			scope.domElement.removeEventListener('pointerdown', onPointerDown);
			scope.domElement.removeEventListener('pointercancel', onPointerCancel);
			scope.domElement.removeEventListener('wheel', onMouseWheel);

			scope.domElement.removeEventListener('pointermove', onPointerMove);
			scope.domElement.removeEventListener('pointerup', onPointerUp);


			if (scope._domElementKeyEvents !== null) {

				scope._domElementKeyEvents.removeEventListener('keydown', onKeyDown);

			}

			//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

		};

		//
		// internals
		//

		const scope = this;

		const STATE = {
			NONE: - 1,
			ROTATE: 0,
			DOLLY: 1,
			PAN: 2,
			TOUCH_ROTATE: 3,
			TOUCH_PAN: 4,
			TOUCH_DOLLY_PAN: 5,
			TOUCH_DOLLY_ROTATE: 6
		};

		let state = STATE.NONE;

		const EPS = 0.000001;

		// current position in spherical coordinates
		const spherical = new Spherical();
		const sphericalDelta = new Spherical();

		let scale = 1;
		const panOffset = new Vector3$1();
		let zoomChanged = false;

		const rotateStart = new Vector2$1();
		const rotateEnd = new Vector2$1();
		const rotateDelta = new Vector2$1();

		const panStart = new Vector2$1();
		const panEnd = new Vector2$1();
		const panDelta = new Vector2$1();

		const dollyStart = new Vector2$1();
		const dollyEnd = new Vector2$1();
		const dollyDelta = new Vector2$1();

		const pointers = [];
		const pointerPositions = {};

		function getAutoRotationAngle() {

			return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

		}

		function getZoomScale() {

			return Math.pow(0.95, scope.zoomSpeed);

		}

		function rotateLeft(angle) {

			sphericalDelta.theta -= angle;

		}

		function rotateUp(angle) {

			sphericalDelta.phi -= angle;

		}

		const panLeft = function () {

			const v = new Vector3$1();

			return function panLeft(distance, objectMatrix) {

				v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix
				v.multiplyScalar(- distance);

				panOffset.add(v);

			};

		}();

		const panUp = function () {

			const v = new Vector3$1();

			return function panUp(distance, objectMatrix) {

				if (scope.screenSpacePanning === true) {

					v.setFromMatrixColumn(objectMatrix, 1);

				} else {

					v.setFromMatrixColumn(objectMatrix, 0);
					v.crossVectors(scope.object.up, v);

				}

				v.multiplyScalar(distance);

				panOffset.add(v);

			};

		}();

		// deltaX and deltaY are in pixels; right and down are positive
		const pan = function () {

			const offset = new Vector3$1();

			return function pan(deltaX, deltaY) {

				const element = scope.domElement;

				if (scope.object.isPerspectiveCamera) {

					// perspective
					const position = scope.object.position;
					offset.copy(position).sub(scope.target);
					let targetDistance = offset.length();

					// half of the fov is center to top of screen
					targetDistance *= Math.tan((scope.object.fov / 2) * Math.PI / 180.0);

					// we use only clientHeight here so aspect ratio does not distort speed
					panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);
					panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);

				} else if (scope.object.isOrthographicCamera) {

					// orthographic
					panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);
					panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);

				} else {

					// camera neither orthographic nor perspective
					console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');
					scope.enablePan = false;

				}

			};

		}();

		function dollyOut(dollyScale) {

			if (scope.object.isPerspectiveCamera) {

				scale /= dollyScale;

			} else if (scope.object.isOrthographicCamera) {

				scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));
				scope.object.updateProjectionMatrix();
				zoomChanged = true;

			} else {

				console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');
				scope.enableZoom = false;

			}

		}

		function dollyIn(dollyScale) {

			if (scope.object.isPerspectiveCamera) {

				scale *= dollyScale;

			} else if (scope.object.isOrthographicCamera) {

				scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));
				scope.object.updateProjectionMatrix();
				zoomChanged = true;

			} else {

				console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');
				scope.enableZoom = false;

			}

		}

		//
		// event callbacks - update the object state
		//

		function handleMouseDownRotate(event) {

			rotateStart.set(event.clientX, event.clientY);

		}

		function handleMouseDownDolly(event) {

			dollyStart.set(event.clientX, event.clientY);

		}

		function handleMouseDownPan(event) {

			panStart.set(event.clientX, event.clientY);

		}

		function handleMouseMoveRotate(event) {

			rotateEnd.set(event.clientX, event.clientY);

			rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);

			const element = scope.domElement;

			rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight); // yes, height

			rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);

			rotateStart.copy(rotateEnd);

			scope.update();

		}

		function handleMouseMoveDolly(event) {

			dollyEnd.set(event.clientX, event.clientY);

			dollyDelta.subVectors(dollyEnd, dollyStart);

			if (dollyDelta.y > 0) {

				dollyOut(getZoomScale());

			} else if (dollyDelta.y < 0) {

				dollyIn(getZoomScale());

			}

			dollyStart.copy(dollyEnd);

			scope.update();

		}

		function handleMouseMovePan(event) {

			panEnd.set(event.clientX, event.clientY);

			panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);

			pan(panDelta.x, panDelta.y);

			panStart.copy(panEnd);

			scope.update();

		}

		function handleMouseWheel(event) {

			if (event.deltaY < 0) {

				dollyIn(getZoomScale());

			} else if (event.deltaY > 0) {

				dollyOut(getZoomScale());

			}

			scope.update();

		}

		function handleKeyDown(event) {

			let needsUpdate = false;

			switch (event.code) {

				case scope.keys.UP:
					pan(0, scope.keyPanSpeed);
					needsUpdate = true;
					break;

				case scope.keys.BOTTOM:
					pan(0, - scope.keyPanSpeed);
					needsUpdate = true;
					break;

				case scope.keys.LEFT:
					pan(scope.keyPanSpeed, 0);
					needsUpdate = true;
					break;

				case scope.keys.RIGHT:
					pan(- scope.keyPanSpeed, 0);
					needsUpdate = true;
					break;

			}

			if (needsUpdate) {

				// prevent the browser from scrolling on cursor keys
				event.preventDefault();

				scope.update();

			}


		}

		function handleTouchStartRotate() {

			if (pointers.length === 1) {

				rotateStart.set(pointers[0].pageX, pointers[0].pageY);

			} else {

				const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
				const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);

				rotateStart.set(x, y);

			}

		}

		function handleTouchStartPan() {

			if (pointers.length === 1) {

				panStart.set(pointers[0].pageX, pointers[0].pageY);

			} else {

				const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
				const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);

				panStart.set(x, y);

			}

		}

		function handleTouchStartDolly() {

			const dx = pointers[0].pageX - pointers[1].pageX;
			const dy = pointers[0].pageY - pointers[1].pageY;

			const distance = Math.sqrt(dx * dx + dy * dy);

			dollyStart.set(0, distance);

		}

		function handleTouchStartDollyPan() {

			if (scope.enableZoom) handleTouchStartDolly();

			if (scope.enablePan) handleTouchStartPan();

		}

		function handleTouchStartDollyRotate() {

			if (scope.enableZoom) handleTouchStartDolly();

			if (scope.enableRotate) handleTouchStartRotate();

		}

		function handleTouchMoveRotate(event) {

			if (pointers.length == 1) {

				rotateEnd.set(event.pageX, event.pageY);

			} else {

				const position = getSecondPointerPosition(event);

				const x = 0.5 * (event.pageX + position.x);
				const y = 0.5 * (event.pageY + position.y);

				rotateEnd.set(x, y);

			}

			rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);

			const element = scope.domElement;

			rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight); // yes, height

			rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);

			rotateStart.copy(rotateEnd);

		}

		function handleTouchMovePan(event) {

			if (pointers.length === 1) {

				panEnd.set(event.pageX, event.pageY);

			} else {

				const position = getSecondPointerPosition(event);

				const x = 0.5 * (event.pageX + position.x);
				const y = 0.5 * (event.pageY + position.y);

				panEnd.set(x, y);

			}

			panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);

			pan(panDelta.x, panDelta.y);

			panStart.copy(panEnd);

		}

		function handleTouchMoveDolly(event) {

			const position = getSecondPointerPosition(event);

			const dx = event.pageX - position.x;
			const dy = event.pageY - position.y;

			const distance = Math.sqrt(dx * dx + dy * dy);

			dollyEnd.set(0, distance);

			dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));

			dollyOut(dollyDelta.y);

			dollyStart.copy(dollyEnd);

		}

		function handleTouchMoveDollyPan(event) {

			if (scope.enableZoom) handleTouchMoveDolly(event);

			if (scope.enablePan) handleTouchMovePan(event);

		}

		function handleTouchMoveDollyRotate(event) {

			if (scope.enableZoom) handleTouchMoveDolly(event);

			if (scope.enableRotate) handleTouchMoveRotate(event);

		}

		//
		// event handlers - FSM: listen for events and reset state
		//

		function onPointerDown(event) {

			if (scope.enabled === false) return;

			if (pointers.length === 0) {

				scope.domElement.setPointerCapture(event.pointerId);

				scope.domElement.addEventListener('pointermove', onPointerMove);
				scope.domElement.addEventListener('pointerup', onPointerUp);

			}

			//

			addPointer(event);

			if (event.pointerType === 'touch') {

				onTouchStart(event);

			} else {

				onMouseDown(event);

			}

		}

		function onPointerMove(event) {

			if (scope.enabled === false) return;

			if (event.pointerType === 'touch') {

				onTouchMove(event);

			} else {

				onMouseMove(event);

			}

		}

		function onPointerUp(event) {

			removePointer(event);

			if (pointers.length === 0) {

				scope.domElement.releasePointerCapture(event.pointerId);

				scope.domElement.removeEventListener('pointermove', onPointerMove);
				scope.domElement.removeEventListener('pointerup', onPointerUp);

			}

			scope.dispatchEvent(_endEvent);

			state = STATE.NONE;

		}

		function onPointerCancel(event) {

			removePointer(event);

		}

		function onMouseDown(event) {

			let mouseAction;

			switch (event.button) {

				case 0:

					mouseAction = scope.mouseButtons.LEFT;
					break;

				case 1:

					mouseAction = scope.mouseButtons.MIDDLE;
					break;

				case 2:

					mouseAction = scope.mouseButtons.RIGHT;
					break;

				default:

					mouseAction = - 1;

			}

			switch (mouseAction) {

				case MOUSE.DOLLY:

					if (scope.enableZoom === false) return;

					handleMouseDownDolly(event);

					state = STATE.DOLLY;

					break;

				case MOUSE.ROTATE:

					if (event.ctrlKey || event.metaKey || event.shiftKey) {

						if (scope.enablePan === false) return;

						handleMouseDownPan(event);

						state = STATE.PAN;

					} else {

						if (scope.enableRotate === false) return;

						handleMouseDownRotate(event);

						state = STATE.ROTATE;

					}

					break;

				case MOUSE.PAN:

					if (event.ctrlKey || event.metaKey || event.shiftKey) {

						if (scope.enableRotate === false) return;

						handleMouseDownRotate(event);

						state = STATE.ROTATE;

					} else {

						if (scope.enablePan === false) return;

						handleMouseDownPan(event);

						state = STATE.PAN;

					}

					break;

				default:

					state = STATE.NONE;

			}

			if (state !== STATE.NONE) {

				scope.dispatchEvent(_startEvent);

			}

		}

		function onMouseMove(event) {

			if (scope.enabled === false) return;

			switch (state) {

				case STATE.ROTATE:

					if (scope.enableRotate === false) return;

					handleMouseMoveRotate(event);

					break;

				case STATE.DOLLY:

					if (scope.enableZoom === false) return;

					handleMouseMoveDolly(event);

					break;

				case STATE.PAN:

					if (scope.enablePan === false) return;

					handleMouseMovePan(event);

					break;

			}

		}

		function onMouseWheel(event) {

			if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE) return;

			event.preventDefault();

			scope.dispatchEvent(_startEvent);

			handleMouseWheel(event);

			scope.dispatchEvent(_endEvent);

		}

		function onKeyDown(event) {

			if (scope.enabled === false || scope.enablePan === false) return;

			handleKeyDown(event);

		}

		function onTouchStart(event) {

			trackPointer(event);

			switch (pointers.length) {

				case 1:

					switch (scope.touches.ONE) {

						case TOUCH.ROTATE:

							if (scope.enableRotate === false) return;

							handleTouchStartRotate();

							state = STATE.TOUCH_ROTATE;

							break;

						case TOUCH.PAN:

							if (scope.enablePan === false) return;

							handleTouchStartPan();

							state = STATE.TOUCH_PAN;

							break;

						default:

							state = STATE.NONE;

					}

					break;

				case 2:

					switch (scope.touches.TWO) {

						case TOUCH.DOLLY_PAN:

							if (scope.enableZoom === false && scope.enablePan === false) return;

							handleTouchStartDollyPan();

							state = STATE.TOUCH_DOLLY_PAN;

							break;

						case TOUCH.DOLLY_ROTATE:

							if (scope.enableZoom === false && scope.enableRotate === false) return;

							handleTouchStartDollyRotate();

							state = STATE.TOUCH_DOLLY_ROTATE;

							break;

						default:

							state = STATE.NONE;

					}

					break;

				default:

					state = STATE.NONE;

			}

			if (state !== STATE.NONE) {

				scope.dispatchEvent(_startEvent);

			}

		}

		function onTouchMove(event) {

			trackPointer(event);

			switch (state) {

				case STATE.TOUCH_ROTATE:

					if (scope.enableRotate === false) return;

					handleTouchMoveRotate(event);

					scope.update();

					break;

				case STATE.TOUCH_PAN:

					if (scope.enablePan === false) return;

					handleTouchMovePan(event);

					scope.update();

					break;

				case STATE.TOUCH_DOLLY_PAN:

					if (scope.enableZoom === false && scope.enablePan === false) return;

					handleTouchMoveDollyPan(event);

					scope.update();

					break;

				case STATE.TOUCH_DOLLY_ROTATE:

					if (scope.enableZoom === false && scope.enableRotate === false) return;

					handleTouchMoveDollyRotate(event);

					scope.update();

					break;

				default:

					state = STATE.NONE;

			}

		}

		function onContextMenu(event) {

			if (scope.enabled === false) return;

			event.preventDefault();

		}

		function addPointer(event) {

			pointers.push(event);

		}

		function removePointer(event) {

			delete pointerPositions[event.pointerId];

			for (let i = 0; i < pointers.length; i++) {

				if (pointers[i].pointerId == event.pointerId) {

					pointers.splice(i, 1);
					return;

				}

			}

		}

		function trackPointer(event) {

			let position = pointerPositions[event.pointerId];

			if (position === undefined) {

				position = new Vector2$1();
				pointerPositions[event.pointerId] = position;

			}

			position.set(event.pageX, event.pageY);

		}

		function getSecondPointerPosition(event) {

			const pointer = (event.pointerId === pointers[0].pointerId) ? pointers[1] : pointers[0];

			return pointerPositions[pointer.pointerId];

		}

		//

		scope.domElement.addEventListener('contextmenu', onContextMenu);

		scope.domElement.addEventListener('pointerdown', onPointerDown);
		scope.domElement.addEventListener('pointercancel', onPointerCancel);
		scope.domElement.addEventListener('wheel', onMouseWheel, { passive: false });

		// force an update at start

		this.update();

	}

}

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
	for (var prop in b || (b = {}))
		if (__hasOwnProp.call(b, prop))
			__defNormalProp(a, prop, b[prop]);
	if (__getOwnPropSymbols)
		for (var prop of __getOwnPropSymbols(b)) {
			if (__propIsEnum.call(b, prop))
				__defNormalProp(a, prop, b[prop]);
		}
	return a;
};
var __require = (x) => {
	if (typeof require !== "undefined")
		return require(x);
	throw new Error('Dynamic require of "' + x + '" is not supported');
};
var __commonJS = (cb, mod) => function __require2() {
	return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __async = (__this, __arguments, generator) => {
	return new Promise((resolve, reject) => {
		var fulfilled = (value) => {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		};
		var rejected = (value) => {
			try {
				step(generator.throw(value));
			} catch (e) {
				reject(e);
			}
		};
		var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
		step((generator = generator.apply(__this, __arguments)).next());
	});
};

// (disabled):crypto
var require_crypto = __commonJS({
	"(disabled):crypto"() {
	}
});

// dist/web-ifc-mt.js
var require_web_ifc_mt = __commonJS({
	"dist/web-ifc-mt.js"(exports, module) {
		var WebIFCWasm2 = function () {
			var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
			if (typeof __filename !== "undefined")
				_scriptDir = _scriptDir || __filename;
			return function (WebIFCWasm3) {
				WebIFCWasm3 = WebIFCWasm3 || {};
				function GROWABLE_HEAP_I8() {
					if (wasmMemory.buffer != buffer) {
						updateGlobalBufferAndViews(wasmMemory.buffer);
					}
					return HEAP8;
				}
				function GROWABLE_HEAP_U8() {
					if (wasmMemory.buffer != buffer) {
						updateGlobalBufferAndViews(wasmMemory.buffer);
					}
					return HEAPU8;
				}
				function GROWABLE_HEAP_I16() {
					if (wasmMemory.buffer != buffer) {
						updateGlobalBufferAndViews(wasmMemory.buffer);
					}
					return HEAP16;
				}
				function GROWABLE_HEAP_U16() {
					if (wasmMemory.buffer != buffer) {
						updateGlobalBufferAndViews(wasmMemory.buffer);
					}
					return HEAPU16;
				}
				function GROWABLE_HEAP_I32() {
					if (wasmMemory.buffer != buffer) {
						updateGlobalBufferAndViews(wasmMemory.buffer);
					}
					return HEAP32;
				}
				function GROWABLE_HEAP_U32() {
					if (wasmMemory.buffer != buffer) {
						updateGlobalBufferAndViews(wasmMemory.buffer);
					}
					return HEAPU32;
				}
				function GROWABLE_HEAP_F32() {
					if (wasmMemory.buffer != buffer) {
						updateGlobalBufferAndViews(wasmMemory.buffer);
					}
					return HEAPF32;
				}
				function GROWABLE_HEAP_F64() {
					if (wasmMemory.buffer != buffer) {
						updateGlobalBufferAndViews(wasmMemory.buffer);
					}
					return HEAPF64;
				}
				var Module = typeof WebIFCWasm3 !== "undefined" ? WebIFCWasm3 : {};
				var readyPromiseResolve, readyPromiseReject;
				Module["ready"] = new Promise(function (resolve, reject) {
					readyPromiseResolve = resolve;
					readyPromiseReject = reject;
				});
				var moduleOverrides = {};
				var key;
				for (key in Module) {
					if (Module.hasOwnProperty(key)) {
						moduleOverrides[key] = Module[key];
					}
				}
				var thisProgram = "./this.program";
				var quit_ = function (status, toThrow) {
					throw toThrow;
				};
				var ENVIRONMENT_IS_WEB = false;
				var ENVIRONMENT_IS_WORKER = false;
				var ENVIRONMENT_IS_NODE = false;
				var ENVIRONMENT_IS_SHELL = false;
				ENVIRONMENT_IS_WEB = typeof window === "object";
				ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
				ENVIRONMENT_IS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";
				ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
				var ENVIRONMENT_IS_PTHREAD = Module["ENVIRONMENT_IS_PTHREAD"] || false;
				if (ENVIRONMENT_IS_PTHREAD) {
					buffer = Module["buffer"];
				}
				var scriptDirectory = "";
				function locateFile(path) {
					if (Module["locateFile"]) {
						return Module["locateFile"](path, scriptDirectory);
					}
					return scriptDirectory + path;
				}
				var read_, readBinary;
				var nodeFS;
				var nodePath;
				if (ENVIRONMENT_IS_NODE) {
					if (ENVIRONMENT_IS_WORKER) {
						scriptDirectory = __require("path").dirname(scriptDirectory) + "/";
					} else {
						scriptDirectory = __dirname + "/";
					}
					read_ = function shell_read(filename, binary) {
						if (!nodeFS)
							nodeFS = __require("fs");
						if (!nodePath)
							nodePath = __require("path");
						filename = nodePath["normalize"](filename);
						return nodeFS["readFileSync"](filename, binary ? null : "utf8");
					};
					readBinary = function readBinary2(filename) {
						var ret = read_(filename, true);
						if (!ret.buffer) {
							ret = new Uint8Array(ret);
						}
						assert(ret.buffer);
						return ret;
					};
					if (process["argv"].length > 1) {
						thisProgram = process["argv"][1].replace(/\\/g, "/");
					}
					process["argv"].slice(2);
					process["on"]("uncaughtException", function (ex) {
						if (!(ex instanceof ExitStatus)) {
							throw ex;
						}
					});
					process["on"]("unhandledRejection", abort);
					quit_ = function (status) {
						process["exit"](status);
					};
					Module["inspect"] = function () {
						return "[Emscripten Module object]";
					};
					var nodeWorkerThreads;
					try {
						nodeWorkerThreads = __require("worker_threads");
					} catch (e) {
						console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?');
						throw e;
					}
					global.Worker = nodeWorkerThreads.Worker;
				} else if (ENVIRONMENT_IS_SHELL) {
					if (typeof read != "undefined") {
						read_ = function shell_read(f) {
							return read(f);
						};
					}
					readBinary = function readBinary2(f) {
						var data;
						if (typeof readbuffer === "function") {
							return new Uint8Array(readbuffer(f));
						}
						data = read(f, "binary");
						assert(typeof data === "object");
						return data;
					};
					if (typeof scriptArgs != "undefined") {
						scriptArgs;
					}
					if (typeof quit === "function") {
						quit_ = function (status) {
							quit(status);
						};
					}
					if (typeof print !== "undefined") {
						if (typeof console === "undefined")
							console = {};
						console.log = print;
						console.warn = console.error = typeof printErr !== "undefined" ? printErr : print;
					}
				} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
					if (ENVIRONMENT_IS_WORKER) {
						scriptDirectory = self.location.href;
					} else if (typeof document !== "undefined" && document.currentScript) {
						scriptDirectory = document.currentScript.src;
					}
					if (_scriptDir) {
						scriptDirectory = _scriptDir;
					}
					if (scriptDirectory.indexOf("blob:") !== 0) {
						scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
					} else {
						scriptDirectory = "";
					}
					if (ENVIRONMENT_IS_NODE) {
						read_ = function shell_read(filename, binary) {
							if (!nodeFS)
								nodeFS = __require("fs");
							if (!nodePath)
								nodePath = __require("path");
							filename = nodePath["normalize"](filename);
							return nodeFS["readFileSync"](filename, binary ? null : "utf8");
						};
						readBinary = function readBinary2(filename) {
							var ret = read_(filename, true);
							if (!ret.buffer) {
								ret = new Uint8Array(ret);
							}
							assert(ret.buffer);
							return ret;
						};
					} else {
						read_ = function shell_read(url) {
							var xhr = new XMLHttpRequest();
							xhr.open("GET", url, false);
							xhr.send(null);
							return xhr.responseText;
						};
						if (ENVIRONMENT_IS_WORKER) {
							readBinary = function readBinary2(url) {
								var xhr = new XMLHttpRequest();
								xhr.open("GET", url, false);
								xhr.responseType = "arraybuffer";
								xhr.send(null);
								return new Uint8Array(xhr.response);
							};
						}
					}
				} else;
				if (ENVIRONMENT_IS_NODE) {
					if (typeof performance === "undefined") {
						global.performance = __require("perf_hooks").performance;
					}
				}
				var out = Module["print"] || console.log.bind(console);
				var err = Module["printErr"] || console.warn.bind(console);
				for (key in moduleOverrides) {
					if (moduleOverrides.hasOwnProperty(key)) {
						Module[key] = moduleOverrides[key];
					}
				}
				moduleOverrides = null;
				if (Module["arguments"])
					Module["arguments"];
				if (Module["thisProgram"])
					thisProgram = Module["thisProgram"];
				if (Module["quit"])
					quit_ = Module["quit"];
				var STACK_ALIGN = 16;
				function alignMemory(size, factor) {
					if (!factor)
						factor = STACK_ALIGN;
					return Math.ceil(size / factor) * factor;
				}
				function warnOnce(text) {
					if (!warnOnce.shown)
						warnOnce.shown = {};
					if (!warnOnce.shown[text]) {
						warnOnce.shown[text] = 1;
						err(text);
					}
				}
				var wasmBinary;
				if (Module["wasmBinary"])
					wasmBinary = Module["wasmBinary"];
				var noExitRuntime;
				if (Module["noExitRuntime"])
					noExitRuntime = Module["noExitRuntime"];
				if (typeof WebAssembly !== "object") {
					abort("no native wasm support detected");
				}
				var wasmMemory;
				var wasmModule;
				var threadInfoStruct = 0;
				var ABORT = false;
				function assert(condition, text) {
					if (!condition) {
						abort("Assertion failed: " + text);
					}
				}
				function UTF8ArrayToString(heap, idx, maxBytesToRead) {
					idx >>>= 0;
					var endIdx = idx + maxBytesToRead;
					var str = "";
					while (!(idx >= endIdx)) {
						var u0 = heap[idx++ >>> 0];
						if (!u0)
							return str;
						if (!(u0 & 128)) {
							str += String.fromCharCode(u0);
							continue;
						}
						var u1 = heap[idx++ >>> 0] & 63;
						if ((u0 & 224) == 192) {
							str += String.fromCharCode((u0 & 31) << 6 | u1);
							continue;
						}
						var u2 = heap[idx++ >>> 0] & 63;
						if ((u0 & 240) == 224) {
							u0 = (u0 & 15) << 12 | u1 << 6 | u2;
						} else {
							u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++ >>> 0] & 63;
						}
						if (u0 < 65536) {
							str += String.fromCharCode(u0);
						} else {
							var ch = u0 - 65536;
							str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
						}
					}
					return str;
				}
				function UTF8ToString(ptr, maxBytesToRead) {
					ptr >>>= 0;
					return ptr ? UTF8ArrayToString(GROWABLE_HEAP_U8(), ptr, maxBytesToRead) : "";
				}
				function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
					outIdx >>>= 0;
					if (!(maxBytesToWrite > 0))
						return 0;
					var startIdx = outIdx;
					var endIdx = outIdx + maxBytesToWrite - 1;
					for (var i = 0; i < str.length; ++i) {
						var u = str.charCodeAt(i);
						if (u >= 55296 && u <= 57343) {
							var u1 = str.charCodeAt(++i);
							u = 65536 + ((u & 1023) << 10) | u1 & 1023;
						}
						if (u <= 127) {
							if (outIdx >= endIdx)
								break;
							heap[outIdx++ >>> 0] = u;
						} else if (u <= 2047) {
							if (outIdx + 1 >= endIdx)
								break;
							heap[outIdx++ >>> 0] = 192 | u >> 6;
							heap[outIdx++ >>> 0] = 128 | u & 63;
						} else if (u <= 65535) {
							if (outIdx + 2 >= endIdx)
								break;
							heap[outIdx++ >>> 0] = 224 | u >> 12;
							heap[outIdx++ >>> 0] = 128 | u >> 6 & 63;
							heap[outIdx++ >>> 0] = 128 | u & 63;
						} else {
							if (outIdx + 3 >= endIdx)
								break;
							heap[outIdx++ >>> 0] = 240 | u >> 18;
							heap[outIdx++ >>> 0] = 128 | u >> 12 & 63;
							heap[outIdx++ >>> 0] = 128 | u >> 6 & 63;
							heap[outIdx++ >>> 0] = 128 | u & 63;
						}
					}
					heap[outIdx >>> 0] = 0;
					return outIdx - startIdx;
				}
				function stringToUTF8(str, outPtr, maxBytesToWrite) {
					return stringToUTF8Array(str, GROWABLE_HEAP_U8(), outPtr, maxBytesToWrite);
				}
				function lengthBytesUTF8(str) {
					var len = 0;
					for (var i = 0; i < str.length; ++i) {
						var u = str.charCodeAt(i);
						if (u >= 55296 && u <= 57343)
							u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
						if (u <= 127)
							++len;
						else if (u <= 2047)
							len += 2;
						else if (u <= 65535)
							len += 3;
						else
							len += 4;
					}
					return len;
				}
				function UTF16ToString(ptr, maxBytesToRead) {
					var str = "";
					for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
						var codeUnit = GROWABLE_HEAP_I16()[ptr + i * 2 >> 1];
						if (codeUnit == 0)
							break;
						str += String.fromCharCode(codeUnit);
					}
					return str;
				}
				function stringToUTF16(str, outPtr, maxBytesToWrite) {
					if (maxBytesToWrite === void 0) {
						maxBytesToWrite = 2147483647;
					}
					if (maxBytesToWrite < 2)
						return 0;
					maxBytesToWrite -= 2;
					var startPtr = outPtr;
					var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
					for (var i = 0; i < numCharsToWrite; ++i) {
						var codeUnit = str.charCodeAt(i);
						GROWABLE_HEAP_I16()[outPtr >> 1] = codeUnit;
						outPtr += 2;
					}
					GROWABLE_HEAP_I16()[outPtr >> 1] = 0;
					return outPtr - startPtr;
				}
				function lengthBytesUTF16(str) {
					return str.length * 2;
				}
				function UTF32ToString(ptr, maxBytesToRead) {
					var i = 0;
					var str = "";
					while (!(i >= maxBytesToRead / 4)) {
						var utf32 = GROWABLE_HEAP_I32()[ptr + i * 4 >> 2];
						if (utf32 == 0)
							break;
						++i;
						if (utf32 >= 65536) {
							var ch = utf32 - 65536;
							str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
						} else {
							str += String.fromCharCode(utf32);
						}
					}
					return str;
				}
				function stringToUTF32(str, outPtr, maxBytesToWrite) {
					outPtr >>>= 0;
					if (maxBytesToWrite === void 0) {
						maxBytesToWrite = 2147483647;
					}
					if (maxBytesToWrite < 4)
						return 0;
					var startPtr = outPtr;
					var endPtr = startPtr + maxBytesToWrite - 4;
					for (var i = 0; i < str.length; ++i) {
						var codeUnit = str.charCodeAt(i);
						if (codeUnit >= 55296 && codeUnit <= 57343) {
							var trailSurrogate = str.charCodeAt(++i);
							codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
						}
						GROWABLE_HEAP_I32()[outPtr >> 2] = codeUnit;
						outPtr += 4;
						if (outPtr + 4 > endPtr)
							break;
					}
					GROWABLE_HEAP_I32()[outPtr >> 2] = 0;
					return outPtr - startPtr;
				}
				function lengthBytesUTF32(str) {
					var len = 0;
					for (var i = 0; i < str.length; ++i) {
						var codeUnit = str.charCodeAt(i);
						if (codeUnit >= 55296 && codeUnit <= 57343)
							++i;
						len += 4;
					}
					return len;
				}
				function writeArrayToMemory(array, buffer2) {
					GROWABLE_HEAP_I8().set(array, buffer2);
				}
				function writeAsciiToMemory(str, buffer2, dontAddNull) {
					for (var i = 0; i < str.length; ++i) {
						GROWABLE_HEAP_I8()[buffer2++ >> 0] = str.charCodeAt(i);
					}
					if (!dontAddNull)
						GROWABLE_HEAP_I8()[buffer2 >> 0] = 0;
				}
				function alignUp(x, multiple) {
					if (x % multiple > 0) {
						x += multiple - x % multiple;
					}
					return x;
				}
				var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
				function updateGlobalBufferAndViews(buf) {
					buffer = buf;
					Module["HEAP8"] = HEAP8 = new Int8Array(buf);
					Module["HEAP16"] = HEAP16 = new Int16Array(buf);
					Module["HEAP32"] = HEAP32 = new Int32Array(buf);
					Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
					Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
					Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
					Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
					Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
				}
				var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;
				if (ENVIRONMENT_IS_PTHREAD) {
					wasmMemory = Module["wasmMemory"];
					buffer = Module["buffer"];
				} else {
					if (Module["wasmMemory"]) {
						wasmMemory = Module["wasmMemory"];
					} else {
						wasmMemory = new WebAssembly.Memory({ "initial": INITIAL_MEMORY / 65536, "maximum": 4294967296 / 65536, "shared": true });
						if (!(wasmMemory.buffer instanceof SharedArrayBuffer)) {
							err("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag");
							if (ENVIRONMENT_IS_NODE) {
								console.log("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)");
							}
							throw Error("bad memory");
						}
					}
				}
				if (wasmMemory) {
					buffer = wasmMemory.buffer;
				}
				INITIAL_MEMORY = buffer.byteLength;
				updateGlobalBufferAndViews(buffer);
				var wasmTable;
				var __ATPRERUN__ = [];
				var __ATINIT__ = [];
				var __ATMAIN__ = [];
				var __ATPOSTRUN__ = [];
				function preRun() {
					if (ENVIRONMENT_IS_PTHREAD)
						return;
					if (Module["preRun"]) {
						if (typeof Module["preRun"] == "function")
							Module["preRun"] = [Module["preRun"]];
						while (Module["preRun"].length) {
							addOnPreRun(Module["preRun"].shift());
						}
					}
					callRuntimeCallbacks(__ATPRERUN__);
				}
				function initRuntime() {
					if (!Module["noFSInit"] && !FS.init.initialized)
						FS.init();
					callRuntimeCallbacks(__ATINIT__);
				}
				function preMain() {
					if (ENVIRONMENT_IS_PTHREAD)
						return;
					FS.ignorePermissions = false;
					callRuntimeCallbacks(__ATMAIN__);
				}
				function postRun() {
					if (ENVIRONMENT_IS_PTHREAD)
						return;
					if (Module["postRun"]) {
						if (typeof Module["postRun"] == "function")
							Module["postRun"] = [Module["postRun"]];
						while (Module["postRun"].length) {
							addOnPostRun(Module["postRun"].shift());
						}
					}
					callRuntimeCallbacks(__ATPOSTRUN__);
				}
				function addOnPreRun(cb) {
					__ATPRERUN__.unshift(cb);
				}
				function addOnPostRun(cb) {
					__ATPOSTRUN__.unshift(cb);
				}
				var runDependencies = 0;
				var dependenciesFulfilled = null;
				function addRunDependency(id) {
					assert(!ENVIRONMENT_IS_PTHREAD, "addRunDependency cannot be used in a pthread worker");
					runDependencies++;
					if (Module["monitorRunDependencies"]) {
						Module["monitorRunDependencies"](runDependencies);
					}
				}
				function removeRunDependency(id) {
					runDependencies--;
					if (Module["monitorRunDependencies"]) {
						Module["monitorRunDependencies"](runDependencies);
					}
					if (runDependencies == 0) {
						if (dependenciesFulfilled) {
							var callback = dependenciesFulfilled;
							dependenciesFulfilled = null;
							callback();
						}
					}
				}
				Module["preloadedImages"] = {};
				Module["preloadedAudios"] = {};
				function abort(what) {
					if (Module["onAbort"]) {
						Module["onAbort"](what);
					}
					if (ENVIRONMENT_IS_PTHREAD)
						console.error("Pthread aborting at " + new Error().stack);
					what += "";
					err(what);
					ABORT = true;
					what = "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
					var e = new WebAssembly.RuntimeError(what);
					readyPromiseReject(e);
					throw e;
				}
				function hasPrefix(str, prefix) {
					return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;
				}
				var dataURIPrefix = "data:application/octet-stream;base64,";
				function isDataURI(filename) {
					return hasPrefix(filename, dataURIPrefix);
				}
				var fileURIPrefix = "file://";
				function isFileURI(filename) {
					return hasPrefix(filename, fileURIPrefix);
				}
				var wasmBinaryFile = "web-ifc-mt.wasm";
				if (!isDataURI(wasmBinaryFile)) {
					wasmBinaryFile = locateFile(wasmBinaryFile);
				}
				function getBinary() {
					try {
						if (wasmBinary) {
							return new Uint8Array(wasmBinary);
						}
						if (readBinary) {
							return readBinary(wasmBinaryFile);
						} else {
							throw "both async and sync fetching of the wasm failed";
						}
					} catch (err2) {
						abort(err2);
					}
				}
				function getBinaryPromise() {
					if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === "function" && !isFileURI(wasmBinaryFile)) {
						return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function (response) {
							if (!response["ok"]) {
								throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
							}
							return response["arrayBuffer"]();
						}).catch(function () {
							return getBinary();
						});
					}
					return Promise.resolve().then(getBinary);
				}
				function createWasm() {
					var info = { "a": asmLibraryArg };
					function receiveInstance(instance, module2) {
						var exports3 = instance.exports;
						Module["asm"] = exports3;
						wasmTable = Module["asm"]["pa"];
						wasmModule = module2;
						if (!ENVIRONMENT_IS_PTHREAD) {
							var numWorkersToLoad = PThread.unusedWorkers.length;
							PThread.unusedWorkers.forEach(function (w) {
								PThread.loadWasmModuleToWorker(w, function () {
									if (!--numWorkersToLoad)
										removeRunDependency();
								});
							});
						}
					}
					if (!ENVIRONMENT_IS_PTHREAD) {
						addRunDependency();
					}
					function receiveInstantiatedSource(output) {
						receiveInstance(output["instance"], output["module"]);
					}
					function instantiateArrayBuffer(receiver) {
						return getBinaryPromise().then(function (binary) {
							return WebAssembly.instantiate(binary, info);
						}).then(receiver, function (reason) {
							err("failed to asynchronously prepare wasm: " + reason);
							abort(reason);
						});
					}
					function instantiateAsync() {
						if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === "function") {
							return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function (response) {
								var result = WebAssembly.instantiateStreaming(response, info);
								return result.then(receiveInstantiatedSource, function (reason) {
									err("wasm streaming compile failed: " + reason);
									err("falling back to ArrayBuffer instantiation");
									return instantiateArrayBuffer(receiveInstantiatedSource);
								});
							});
						} else {
							return instantiateArrayBuffer(receiveInstantiatedSource);
						}
					}
					if (Module["instantiateWasm"]) {
						try {
							var exports2 = Module["instantiateWasm"](info, receiveInstance);
							return exports2;
						} catch (e) {
							err("Module.instantiateWasm callback failed with error: " + e);
							return false;
						}
					}
					instantiateAsync().catch(readyPromiseReject);
					return {};
				}
				var tempDouble;
				var tempI64;
				var ASM_CONSTS = {
					41793: function ($0, $1) {
						setTimeout(function () {
							_do_emscripten_dispatch_to_thread($0, $1);
						}, 0);
					}, 41871: function () {
						throw "Canceled!";
					}
				};
				function initPthreadsJS() {
					PThread.initRuntime();
				}
				function callRuntimeCallbacks(callbacks) {
					while (callbacks.length > 0) {
						var callback = callbacks.shift();
						if (typeof callback == "function") {
							callback(Module);
							continue;
						}
						var func = callback.func;
						if (typeof func === "number") {
							if (callback.arg === void 0) {
								wasmTable.get(func)();
							} else {
								wasmTable.get(func)(callback.arg);
							}
						} else {
							func(callback.arg === void 0 ? null : callback.arg);
						}
					}
				}
				function dynCallLegacy(sig, ptr, args) {
					if (args && args.length) {
						return Module["dynCall_" + sig].apply(null, [ptr].concat(args));
					}
					return Module["dynCall_" + sig].call(null, ptr);
				}
				function dynCall(sig, ptr, args) {
					if (sig.indexOf("j") != -1) {
						return dynCallLegacy(sig, ptr, args);
					}
					return wasmTable.get(ptr).apply(null, args);
				}
				Module["dynCall"] = dynCall;
				var __pthread_ptr = 0;
				var __pthread_is_main_runtime_thread = 0;
				var __pthread_is_main_browser_thread = 0;
				function registerPthreadPtr(pthreadPtr, isMainBrowserThread, isMainRuntimeThread) {
					pthreadPtr = pthreadPtr | 0;
					isMainBrowserThread = isMainBrowserThread | 0;
					isMainRuntimeThread = isMainRuntimeThread | 0;
					__pthread_ptr = pthreadPtr;
					__pthread_is_main_browser_thread = isMainBrowserThread;
					__pthread_is_main_runtime_thread = isMainRuntimeThread;
				}
				Module["registerPthreadPtr"] = registerPthreadPtr;
				var ERRNO_CODES = { EPERM: 63, ENOENT: 44, ESRCH: 71, EINTR: 27, EIO: 29, ENXIO: 60, E2BIG: 1, ENOEXEC: 45, EBADF: 8, ECHILD: 12, EAGAIN: 6, EWOULDBLOCK: 6, ENOMEM: 48, EACCES: 2, EFAULT: 21, ENOTBLK: 105, EBUSY: 10, EEXIST: 20, EXDEV: 75, ENODEV: 43, ENOTDIR: 54, EISDIR: 31, EINVAL: 28, ENFILE: 41, EMFILE: 33, ENOTTY: 59, ETXTBSY: 74, EFBIG: 22, ENOSPC: 51, ESPIPE: 70, EROFS: 69, EMLINK: 34, EPIPE: 64, EDOM: 18, ERANGE: 68, ENOMSG: 49, EIDRM: 24, ECHRNG: 106, EL2NSYNC: 156, EL3HLT: 107, EL3RST: 108, ELNRNG: 109, EUNATCH: 110, ENOCSI: 111, EL2HLT: 112, EDEADLK: 16, ENOLCK: 46, EBADE: 113, EBADR: 114, EXFULL: 115, ENOANO: 104, EBADRQC: 103, EBADSLT: 102, EDEADLOCK: 16, EBFONT: 101, ENOSTR: 100, ENODATA: 116, ETIME: 117, ENOSR: 118, ENONET: 119, ENOPKG: 120, EREMOTE: 121, ENOLINK: 47, EADV: 122, ESRMNT: 123, ECOMM: 124, EPROTO: 65, EMULTIHOP: 36, EDOTDOT: 125, EBADMSG: 9, ENOTUNIQ: 126, EBADFD: 127, EREMCHG: 128, ELIBACC: 129, ELIBBAD: 130, ELIBSCN: 131, ELIBMAX: 132, ELIBEXEC: 133, ENOSYS: 52, ENOTEMPTY: 55, ENAMETOOLONG: 37, ELOOP: 32, EOPNOTSUPP: 138, EPFNOSUPPORT: 139, ECONNRESET: 15, ENOBUFS: 42, EAFNOSUPPORT: 5, EPROTOTYPE: 67, ENOTSOCK: 57, ENOPROTOOPT: 50, ESHUTDOWN: 140, ECONNREFUSED: 14, EADDRINUSE: 3, ECONNABORTED: 13, ENETUNREACH: 40, ENETDOWN: 38, ETIMEDOUT: 73, EHOSTDOWN: 142, EHOSTUNREACH: 23, EINPROGRESS: 26, EALREADY: 7, EDESTADDRREQ: 17, EMSGSIZE: 35, EPROTONOSUPPORT: 66, ESOCKTNOSUPPORT: 137, EADDRNOTAVAIL: 4, ENETRESET: 39, EISCONN: 30, ENOTCONN: 53, ETOOMANYREFS: 141, EUSERS: 136, EDQUOT: 19, ESTALE: 72, ENOTSUP: 138, ENOMEDIUM: 148, EILSEQ: 25, EOVERFLOW: 61, ECANCELED: 11, ENOTRECOVERABLE: 56, EOWNERDEAD: 62, ESTRPIPE: 135 };
				function _emscripten_futex_wake(addr, count) {
					if (addr <= 0 || addr > GROWABLE_HEAP_I8().length || addr & true || count < 0)
						return -28;
					if (count == 0)
						return 0;
					if (count >= 2147483647)
						count = Infinity;
					var mainThreadWaitAddress = Atomics.load(GROWABLE_HEAP_I32(), PThread.mainThreadFutex >> 2);
					var mainThreadWoken = 0;
					if (mainThreadWaitAddress == addr) {
						var loadedAddr = Atomics.compareExchange(GROWABLE_HEAP_I32(), PThread.mainThreadFutex >> 2, mainThreadWaitAddress, 0);
						if (loadedAddr == mainThreadWaitAddress) {
							--count;
							mainThreadWoken = 1;
							if (count <= 0)
								return 1;
						}
					}
					var ret = Atomics.notify(GROWABLE_HEAP_I32(), addr >> 2, count);
					if (ret >= 0)
						return ret + mainThreadWoken;
					throw "Atomics.notify returned an unexpected value " + ret;
				}
				Module["_emscripten_futex_wake"] = _emscripten_futex_wake;
				function killThread(pthread_ptr) {
					if (ENVIRONMENT_IS_PTHREAD)
						throw "Internal Error! killThread() can only ever be called from main application thread!";
					if (!pthread_ptr)
						throw "Internal Error! Null pthread_ptr in killThread!";
					GROWABLE_HEAP_I32()[pthread_ptr + 12 >> 2] = 0;
					var pthread = PThread.pthreads[pthread_ptr];
					pthread.worker.terminate();
					PThread.freeThreadData(pthread);
					PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(pthread.worker), 1);
					pthread.worker.pthread = void 0;
				}
				function cancelThread(pthread_ptr) {
					if (ENVIRONMENT_IS_PTHREAD)
						throw "Internal Error! cancelThread() can only ever be called from main application thread!";
					if (!pthread_ptr)
						throw "Internal Error! Null pthread_ptr in cancelThread!";
					var pthread = PThread.pthreads[pthread_ptr];
					pthread.worker.postMessage({ "cmd": "cancel" });
				}
				function cleanupThread(pthread_ptr) {
					if (ENVIRONMENT_IS_PTHREAD)
						throw "Internal Error! cleanupThread() can only ever be called from main application thread!";
					if (!pthread_ptr)
						throw "Internal Error! Null pthread_ptr in cleanupThread!";
					GROWABLE_HEAP_I32()[pthread_ptr + 12 >> 2] = 0;
					var pthread = PThread.pthreads[pthread_ptr];
					if (pthread) {
						var worker = pthread.worker;
						PThread.returnWorkerToPool(worker);
					}
				}
				var PThread = {
					MAIN_THREAD_ID: 1, mainThreadInfo: { schedPolicy: 0, schedPrio: 0 }, unusedWorkers: [], runningWorkers: [], initMainThreadBlock: function () {
						var pthreadPoolSize = navigator.hardwareConcurrency;
						for (var i = 0; i < pthreadPoolSize; ++i) {
							PThread.allocateUnusedWorker();
						}
					}, initRuntime: function () {
						PThread.mainThreadBlock = _malloc(232);
						for (var i = 0; i < 232 / 4; ++i)
							GROWABLE_HEAP_U32()[PThread.mainThreadBlock / 4 + i] = 0;
						GROWABLE_HEAP_I32()[PThread.mainThreadBlock + 12 >> 2] = PThread.mainThreadBlock;
						var headPtr = PThread.mainThreadBlock + 156;
						GROWABLE_HEAP_I32()[headPtr >> 2] = headPtr;
						var tlsMemory = _malloc(512);
						for (var i = 0; i < 128; ++i)
							GROWABLE_HEAP_U32()[tlsMemory / 4 + i] = 0;
						Atomics.store(GROWABLE_HEAP_U32(), PThread.mainThreadBlock + 104 >> 2, tlsMemory);
						Atomics.store(GROWABLE_HEAP_U32(), PThread.mainThreadBlock + 40 >> 2, PThread.mainThreadBlock);
						Atomics.store(GROWABLE_HEAP_U32(), PThread.mainThreadBlock + 44 >> 2, 42);
						PThread.initShared();
						registerPthreadPtr(PThread.mainThreadBlock, !ENVIRONMENT_IS_WORKER, 1);
						_emscripten_register_main_browser_thread_id(PThread.mainThreadBlock);
					}, initWorker: function () {
						PThread.initShared();
						readyPromiseResolve(Module);
					}, initShared: function () {
						PThread.mainThreadFutex = _main_thread_futex;
					}, pthreads: {}, threadExitHandlers: [], setThreadStatus: function () {
					}, runExitHandlers: function () {
						while (PThread.threadExitHandlers.length > 0) {
							PThread.threadExitHandlers.pop()();
						}
						if (ENVIRONMENT_IS_PTHREAD && threadInfoStruct)
							___pthread_tsd_run_dtors();
					}, threadExit: function (exitCode) {
						var tb = _pthread_self();
						if (tb) {
							Atomics.store(GROWABLE_HEAP_U32(), tb + 4 >> 2, exitCode);
							Atomics.store(GROWABLE_HEAP_U32(), tb + 0 >> 2, 1);
							Atomics.store(GROWABLE_HEAP_U32(), tb + 60 >> 2, 1);
							Atomics.store(GROWABLE_HEAP_U32(), tb + 64 >> 2, 0);
							PThread.runExitHandlers();
							_emscripten_futex_wake(tb + 0, 2147483647);
							registerPthreadPtr(0, 0, 0);
							threadInfoStruct = 0;
							if (ENVIRONMENT_IS_PTHREAD) {
								postMessage({ "cmd": "exit" });
							}
						}
					}, threadCancel: function () {
						PThread.runExitHandlers();
						Atomics.store(GROWABLE_HEAP_U32(), threadInfoStruct + 4 >> 2, -1);
						Atomics.store(GROWABLE_HEAP_U32(), threadInfoStruct + 0 >> 2, 1);
						_emscripten_futex_wake(threadInfoStruct + 0, 2147483647);
						threadInfoStruct = 0;
						registerPthreadPtr(0, 0, 0);
						postMessage({ "cmd": "cancelDone" });
					}, terminateAllThreads: function () {
						for (var t in PThread.pthreads) {
							var pthread = PThread.pthreads[t];
							if (pthread && pthread.worker) {
								PThread.returnWorkerToPool(pthread.worker);
							}
						}
						PThread.pthreads = {};
						for (var i = 0; i < PThread.unusedWorkers.length; ++i) {
							var worker = PThread.unusedWorkers[i];
							worker.terminate();
						}
						PThread.unusedWorkers = [];
						for (var i = 0; i < PThread.runningWorkers.length; ++i) {
							var worker = PThread.runningWorkers[i];
							var pthread = worker.pthread;
							PThread.freeThreadData(pthread);
							worker.terminate();
						}
						PThread.runningWorkers = [];
					}, freeThreadData: function (pthread) {
						if (!pthread)
							return;
						if (pthread.threadInfoStruct) {
							var tlsMemory = GROWABLE_HEAP_I32()[pthread.threadInfoStruct + 104 >> 2];
							GROWABLE_HEAP_I32()[pthread.threadInfoStruct + 104 >> 2] = 0;
							_free(tlsMemory);
							_free(pthread.threadInfoStruct);
						}
						pthread.threadInfoStruct = 0;
						if (pthread.allocatedOwnStack && pthread.stackBase)
							_free(pthread.stackBase);
						pthread.stackBase = 0;
						if (pthread.worker)
							pthread.worker.pthread = null;
					}, returnWorkerToPool: function (worker) {
						delete PThread.pthreads[worker.pthread.thread];
						PThread.unusedWorkers.push(worker);
						PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(worker), 1);
						PThread.freeThreadData(worker.pthread);
						worker.pthread = void 0;
					}, receiveObjectTransfer: function (data) {
					}, loadWasmModuleToWorker: function (worker, onFinishedLoading) {
						worker.onmessage = function (e) {
							var d = e["data"];
							var cmd = d["cmd"];
							if (worker.pthread)
								PThread.currentProxiedOperationCallerThread = worker.pthread.threadInfoStruct;
							if (d["targetThread"] && d["targetThread"] != _pthread_self()) {
								var thread = PThread.pthreads[d.targetThread];
								if (thread) {
									thread.worker.postMessage(e.data, d["transferList"]);
								} else {
									console.error('Internal error! Worker sent a message "' + cmd + '" to target pthread ' + d["targetThread"] + ", but that thread no longer exists!");
								}
								PThread.currentProxiedOperationCallerThread = void 0;
								return;
							}
							if (cmd === "processQueuedMainThreadWork") {
								_emscripten_main_thread_process_queued_calls();
							} else if (cmd === "spawnThread") {
								spawnThread(e.data);
							} else if (cmd === "cleanupThread") {
								cleanupThread(d["thread"]);
							} else if (cmd === "killThread") {
								killThread(d["thread"]);
							} else if (cmd === "cancelThread") {
								cancelThread(d["thread"]);
							} else if (cmd === "loaded") {
								worker.loaded = true;
								if (onFinishedLoading)
									onFinishedLoading(worker);
								if (worker.runPthread) {
									worker.runPthread();
									delete worker.runPthread;
								}
							} else if (cmd === "print") {
								out("Thread " + d["threadId"] + ": " + d["text"]);
							} else if (cmd === "printErr") {
								err("Thread " + d["threadId"] + ": " + d["text"]);
							} else if (cmd === "alert") {
								alert("Thread " + d["threadId"] + ": " + d["text"]);
							} else if (cmd === "exit") {
								var detached = worker.pthread && Atomics.load(GROWABLE_HEAP_U32(), worker.pthread.thread + 68 >> 2);
								if (detached) {
									PThread.returnWorkerToPool(worker);
								}
							} else if (cmd === "cancelDone") {
								PThread.returnWorkerToPool(worker);
							} else if (cmd === "objectTransfer") {
								PThread.receiveObjectTransfer(e.data);
							} else if (e.data.target === "setimmediate") {
								worker.postMessage(e.data);
							} else {
								err("worker sent an unknown command " + cmd);
							}
							PThread.currentProxiedOperationCallerThread = void 0;
						};
						worker.onerror = function (e) {
							err("pthread sent an error! " + e.filename + ":" + e.lineno + ": " + e.message);
						};
						if (ENVIRONMENT_IS_NODE) {
							worker.on("message", function (data) {
								worker.onmessage({ data });
							});
							worker.on("error", function (data) {
								worker.onerror(data);
							});
							worker.on("exit", function (data) {
							});
						}
						worker.postMessage({ "cmd": "load", "urlOrBlob": Module["mainScriptUrlOrBlob"] || _scriptDir, "wasmMemory": wasmMemory, "wasmModule": wasmModule });
					}, allocateUnusedWorker: function () {
						var pthreadMainJs = locateFile("web-ifc-mt.worker.js");
						PThread.unusedWorkers.push(new Worker(pthreadMainJs));
					}, getNewWorker: function () {
						if (PThread.unusedWorkers.length == 0) {
							PThread.allocateUnusedWorker();
							PThread.loadWasmModuleToWorker(PThread.unusedWorkers[0]);
						}
						if (PThread.unusedWorkers.length > 0)
							return PThread.unusedWorkers.pop();
						else
							return null;
					}, busySpinWait: function (msecs) {
						var t = performance.now() + msecs;
						while (performance.now() < t) {
						}
					}
				};
				function establishStackSpace(stackTop, stackMax) {
					_emscripten_stack_set_limits(stackTop, stackMax);
					stackRestore(stackTop);
				}
				Module["establishStackSpace"] = establishStackSpace;
				function getNoExitRuntime() {
					return noExitRuntime;
				}
				Module["getNoExitRuntime"] = getNoExitRuntime;
				function ___assert_fail(condition, filename, line, func) {
					abort("Assertion failed: " + UTF8ToString(condition) + ", at: " + [filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function"]);
				}
				var _emscripten_get_now;
				if (ENVIRONMENT_IS_NODE) {
					_emscripten_get_now = function () {
						var t = process["hrtime"]();
						return t[0] * 1e3 + t[1] / 1e6;
					};
				} else if (ENVIRONMENT_IS_PTHREAD) {
					_emscripten_get_now = function () {
						return performance.now() - Module["__performance_now_clock_drift"];
					};
				} else if (typeof dateNow !== "undefined") {
					_emscripten_get_now = dateNow;
				} else
					_emscripten_get_now = function () {
						return performance.now();
					};
				var _emscripten_get_now_is_monotonic = true;
				function setErrNo(value) {
					GROWABLE_HEAP_I32()[___errno_location() >> 2] = value;
					return value;
				}
				function _clock_gettime(clk_id, tp) {
					var now;
					if (clk_id === 0) {
						now = Date.now();
					} else if ((clk_id === 1 || clk_id === 4) && _emscripten_get_now_is_monotonic) {
						now = _emscripten_get_now();
					} else {
						setErrNo(28);
						return -1;
					}
					GROWABLE_HEAP_I32()[tp >> 2] = now / 1e3 | 0;
					GROWABLE_HEAP_I32()[tp + 4 >> 2] = now % 1e3 * 1e3 * 1e3 | 0;
					return 0;
				}
				var ExceptionInfoAttrs = { DESTRUCTOR_OFFSET: 0, REFCOUNT_OFFSET: 4, TYPE_OFFSET: 8, CAUGHT_OFFSET: 12, RETHROWN_OFFSET: 13, SIZE: 16 };
				function ___cxa_allocate_exception(size) {
					return _malloc(size + ExceptionInfoAttrs.SIZE) + ExceptionInfoAttrs.SIZE;
				}
				function _atexit(func, arg) {
					if (ENVIRONMENT_IS_PTHREAD)
						return _emscripten_proxy_to_main_thread_js(1, 1, func, arg);
				}
				function ExceptionInfo(excPtr) {
					this.excPtr = excPtr;
					this.ptr = excPtr - ExceptionInfoAttrs.SIZE;
					this.set_type = function (type) {
						GROWABLE_HEAP_I32()[this.ptr + ExceptionInfoAttrs.TYPE_OFFSET >> 2] = type;
					};
					this.get_type = function () {
						return GROWABLE_HEAP_I32()[this.ptr + ExceptionInfoAttrs.TYPE_OFFSET >> 2];
					};
					this.set_destructor = function (destructor) {
						GROWABLE_HEAP_I32()[this.ptr + ExceptionInfoAttrs.DESTRUCTOR_OFFSET >> 2] = destructor;
					};
					this.get_destructor = function () {
						return GROWABLE_HEAP_I32()[this.ptr + ExceptionInfoAttrs.DESTRUCTOR_OFFSET >> 2];
					};
					this.set_refcount = function (refcount) {
						GROWABLE_HEAP_I32()[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2] = refcount;
					};
					this.set_caught = function (caught) {
						caught = caught ? 1 : 0;
						GROWABLE_HEAP_I8()[this.ptr + ExceptionInfoAttrs.CAUGHT_OFFSET >> 0] = caught;
					};
					this.get_caught = function () {
						return GROWABLE_HEAP_I8()[this.ptr + ExceptionInfoAttrs.CAUGHT_OFFSET >> 0] != 0;
					};
					this.set_rethrown = function (rethrown) {
						rethrown = rethrown ? 1 : 0;
						GROWABLE_HEAP_I8()[this.ptr + ExceptionInfoAttrs.RETHROWN_OFFSET >> 0] = rethrown;
					};
					this.get_rethrown = function () {
						return GROWABLE_HEAP_I8()[this.ptr + ExceptionInfoAttrs.RETHROWN_OFFSET >> 0] != 0;
					};
					this.init = function (type, destructor) {
						this.set_type(type);
						this.set_destructor(destructor);
						this.set_refcount(0);
						this.set_caught(false);
						this.set_rethrown(false);
					};
					this.add_ref = function () {
						Atomics.add(GROWABLE_HEAP_I32(), this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2, 1);
					};
					this.release_ref = function () {
						var prev = Atomics.sub(GROWABLE_HEAP_I32(), this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2, 1);
						return prev === 1;
					};
				}
				function ___cxa_throw(ptr, type, destructor) {
					var info = new ExceptionInfo(ptr);
					info.init(type, destructor);
					throw ptr;
				}
				var PATH = {
					splitPath: function (filename) {
						var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
						return splitPathRe.exec(filename).slice(1);
					}, normalizeArray: function (parts, allowAboveRoot) {
						var up = 0;
						for (var i = parts.length - 1; i >= 0; i--) {
							var last = parts[i];
							if (last === ".") {
								parts.splice(i, 1);
							} else if (last === "..") {
								parts.splice(i, 1);
								up++;
							} else if (up) {
								parts.splice(i, 1);
								up--;
							}
						}
						if (allowAboveRoot) {
							for (; up; up--) {
								parts.unshift("..");
							}
						}
						return parts;
					}, normalize: function (path) {
						var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
						path = PATH.normalizeArray(path.split("/").filter(function (p) {
							return !!p;
						}), !isAbsolute).join("/");
						if (!path && !isAbsolute) {
							path = ".";
						}
						if (path && trailingSlash) {
							path += "/";
						}
						return (isAbsolute ? "/" : "") + path;
					}, dirname: function (path) {
						var result = PATH.splitPath(path), root = result[0], dir = result[1];
						if (!root && !dir) {
							return ".";
						}
						if (dir) {
							dir = dir.substr(0, dir.length - 1);
						}
						return root + dir;
					}, basename: function (path) {
						if (path === "/")
							return "/";
						path = PATH.normalize(path);
						path = path.replace(/\/$/, "");
						var lastSlash = path.lastIndexOf("/");
						if (lastSlash === -1)
							return path;
						return path.substr(lastSlash + 1);
					}, extname: function (path) {
						return PATH.splitPath(path)[3];
					}, join: function () {
						var paths = Array.prototype.slice.call(arguments, 0);
						return PATH.normalize(paths.join("/"));
					}, join2: function (l, r) {
						return PATH.normalize(l + "/" + r);
					}
				};
				function getRandomDevice() {
					if (typeof crypto === "object" && typeof crypto["getRandomValues"] === "function") {
						var randomBuffer = new Uint8Array(1);
						return function () {
							crypto.getRandomValues(randomBuffer);
							return randomBuffer[0];
						};
					} else if (ENVIRONMENT_IS_NODE) {
						try {
							var crypto_module = require_crypto();
							return function () {
								return crypto_module["randomBytes"](1)[0];
							};
						} catch (e) {
						}
					}
					return function () {
						abort("randomDevice");
					};
				}
				var PATH_FS = {
					resolve: function () {
						var resolvedPath = "", resolvedAbsolute = false;
						for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
							var path = i >= 0 ? arguments[i] : FS.cwd();
							if (typeof path !== "string") {
								throw new TypeError("Arguments to path.resolve must be strings");
							} else if (!path) {
								return "";
							}
							resolvedPath = path + "/" + resolvedPath;
							resolvedAbsolute = path.charAt(0) === "/";
						}
						resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(function (p) {
							return !!p;
						}), !resolvedAbsolute).join("/");
						return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
					}, relative: function (from, to) {
						from = PATH_FS.resolve(from).substr(1);
						to = PATH_FS.resolve(to).substr(1);
						function trim(arr) {
							var start = 0;
							for (; start < arr.length; start++) {
								if (arr[start] !== "")
									break;
							}
							var end = arr.length - 1;
							for (; end >= 0; end--) {
								if (arr[end] !== "")
									break;
							}
							if (start > end)
								return [];
							return arr.slice(start, end - start + 1);
						}
						var fromParts = trim(from.split("/"));
						var toParts = trim(to.split("/"));
						var length = Math.min(fromParts.length, toParts.length);
						var samePartsLength = length;
						for (var i = 0; i < length; i++) {
							if (fromParts[i] !== toParts[i]) {
								samePartsLength = i;
								break;
							}
						}
						var outputParts = [];
						for (var i = samePartsLength; i < fromParts.length; i++) {
							outputParts.push("..");
						}
						outputParts = outputParts.concat(toParts.slice(samePartsLength));
						return outputParts.join("/");
					}
				};
				var TTY = {
					ttys: [], init: function () {
					}, shutdown: function () {
					}, register: function (dev, ops) {
						TTY.ttys[dev] = { input: [], output: [], ops };
						FS.registerDevice(dev, TTY.stream_ops);
					}, stream_ops: {
						open: function (stream) {
							var tty = TTY.ttys[stream.node.rdev];
							if (!tty) {
								throw new FS.ErrnoError(43);
							}
							stream.tty = tty;
							stream.seekable = false;
						}, close: function (stream) {
							stream.tty.ops.flush(stream.tty);
						}, flush: function (stream) {
							stream.tty.ops.flush(stream.tty);
						}, read: function (stream, buffer2, offset, length, pos) {
							if (!stream.tty || !stream.tty.ops.get_char) {
								throw new FS.ErrnoError(60);
							}
							var bytesRead = 0;
							for (var i = 0; i < length; i++) {
								var result;
								try {
									result = stream.tty.ops.get_char(stream.tty);
								} catch (e) {
									throw new FS.ErrnoError(29);
								}
								if (result === void 0 && bytesRead === 0) {
									throw new FS.ErrnoError(6);
								}
								if (result === null || result === void 0)
									break;
								bytesRead++;
								buffer2[offset + i] = result;
							}
							if (bytesRead) {
								stream.node.timestamp = Date.now();
							}
							return bytesRead;
						}, write: function (stream, buffer2, offset, length, pos) {
							if (!stream.tty || !stream.tty.ops.put_char) {
								throw new FS.ErrnoError(60);
							}
							try {
								for (var i = 0; i < length; i++) {
									stream.tty.ops.put_char(stream.tty, buffer2[offset + i]);
								}
							} catch (e) {
								throw new FS.ErrnoError(29);
							}
							if (length) {
								stream.node.timestamp = Date.now();
							}
							return i;
						}
					}, default_tty_ops: {
						get_char: function (tty) {
							if (!tty.input.length) {
								var result = null;
								if (ENVIRONMENT_IS_NODE) {
									var BUFSIZE = 256;
									var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
									var bytesRead = 0;
									try {
										bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
									} catch (e) {
										if (e.toString().indexOf("EOF") != -1)
											bytesRead = 0;
										else
											throw e;
									}
									if (bytesRead > 0) {
										result = buf.slice(0, bytesRead).toString("utf-8");
									} else {
										result = null;
									}
								} else if (typeof window != "undefined" && typeof window.prompt == "function") {
									result = window.prompt("Input: ");
									if (result !== null) {
										result += "\n";
									}
								} else if (typeof readline == "function") {
									result = readline();
									if (result !== null) {
										result += "\n";
									}
								}
								if (!result) {
									return null;
								}
								tty.input = intArrayFromString(result, true);
							}
							return tty.input.shift();
						}, put_char: function (tty, val) {
							if (val === null || val === 10) {
								out(UTF8ArrayToString(tty.output, 0));
								tty.output = [];
							} else {
								if (val != 0)
									tty.output.push(val);
							}
						}, flush: function (tty) {
							if (tty.output && tty.output.length > 0) {
								out(UTF8ArrayToString(tty.output, 0));
								tty.output = [];
							}
						}
					}, default_tty1_ops: {
						put_char: function (tty, val) {
							if (val === null || val === 10) {
								err(UTF8ArrayToString(tty.output, 0));
								tty.output = [];
							} else {
								if (val != 0)
									tty.output.push(val);
							}
						}, flush: function (tty) {
							if (tty.output && tty.output.length > 0) {
								err(UTF8ArrayToString(tty.output, 0));
								tty.output = [];
							}
						}
					}
				};
				function mmapAlloc(size) {
					var alignedSize = alignMemory(size, 16384);
					var ptr = _malloc(alignedSize);
					while (size < alignedSize)
						GROWABLE_HEAP_I8()[ptr + size++] = 0;
					return ptr;
				}
				var MEMFS = {
					ops_table: null, mount: function (mount) {
						return MEMFS.createNode(null, "/", 16384 | 511, 0);
					}, createNode: function (parent, name2, mode, dev) {
						if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
							throw new FS.ErrnoError(63);
						}
						if (!MEMFS.ops_table) {
							MEMFS.ops_table = { dir: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr, lookup: MEMFS.node_ops.lookup, mknod: MEMFS.node_ops.mknod, rename: MEMFS.node_ops.rename, unlink: MEMFS.node_ops.unlink, rmdir: MEMFS.node_ops.rmdir, readdir: MEMFS.node_ops.readdir, symlink: MEMFS.node_ops.symlink }, stream: { llseek: MEMFS.stream_ops.llseek } }, file: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr }, stream: { llseek: MEMFS.stream_ops.llseek, read: MEMFS.stream_ops.read, write: MEMFS.stream_ops.write, allocate: MEMFS.stream_ops.allocate, mmap: MEMFS.stream_ops.mmap, msync: MEMFS.stream_ops.msync } }, link: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr, readlink: MEMFS.node_ops.readlink }, stream: {} }, chrdev: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr }, stream: FS.chrdev_stream_ops } };
						}
						var node = FS.createNode(parent, name2, mode, dev);
						if (FS.isDir(node.mode)) {
							node.node_ops = MEMFS.ops_table.dir.node;
							node.stream_ops = MEMFS.ops_table.dir.stream;
							node.contents = {};
						} else if (FS.isFile(node.mode)) {
							node.node_ops = MEMFS.ops_table.file.node;
							node.stream_ops = MEMFS.ops_table.file.stream;
							node.usedBytes = 0;
							node.contents = null;
						} else if (FS.isLink(node.mode)) {
							node.node_ops = MEMFS.ops_table.link.node;
							node.stream_ops = MEMFS.ops_table.link.stream;
						} else if (FS.isChrdev(node.mode)) {
							node.node_ops = MEMFS.ops_table.chrdev.node;
							node.stream_ops = MEMFS.ops_table.chrdev.stream;
						}
						node.timestamp = Date.now();
						if (parent) {
							parent.contents[name2] = node;
						}
						return node;
					}, getFileDataAsRegularArray: function (node) {
						if (node.contents && node.contents.subarray) {
							var arr = [];
							for (var i = 0; i < node.usedBytes; ++i)
								arr.push(node.contents[i]);
							return arr;
						}
						return node.contents;
					}, getFileDataAsTypedArray: function (node) {
						if (!node.contents)
							return new Uint8Array(0);
						if (node.contents.subarray)
							return node.contents.subarray(0, node.usedBytes);
						return new Uint8Array(node.contents);
					}, expandFileStorage: function (node, newCapacity) {
						newCapacity >>>= 0;
						var prevCapacity = node.contents ? node.contents.length : 0;
						if (prevCapacity >= newCapacity)
							return;
						var CAPACITY_DOUBLING_MAX = 1024 * 1024;
						newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0);
						if (prevCapacity != 0)
							newCapacity = Math.max(newCapacity, 256);
						var oldContents = node.contents;
						node.contents = new Uint8Array(newCapacity);
						if (node.usedBytes > 0)
							node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
						return;
					}, resizeFileStorage: function (node, newSize) {
						newSize >>>= 0;
						if (node.usedBytes == newSize)
							return;
						if (newSize == 0) {
							node.contents = null;
							node.usedBytes = 0;
							return;
						}
						if (!node.contents || node.contents.subarray) {
							var oldContents = node.contents;
							node.contents = new Uint8Array(newSize);
							if (oldContents) {
								node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
							}
							node.usedBytes = newSize;
							return;
						}
						if (!node.contents)
							node.contents = [];
						if (node.contents.length > newSize)
							node.contents.length = newSize;
						else
							while (node.contents.length < newSize)
								node.contents.push(0);
						node.usedBytes = newSize;
					}, node_ops: {
						getattr: function (node) {
							var attr = {};
							attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
							attr.ino = node.id;
							attr.mode = node.mode;
							attr.nlink = 1;
							attr.uid = 0;
							attr.gid = 0;
							attr.rdev = node.rdev;
							if (FS.isDir(node.mode)) {
								attr.size = 4096;
							} else if (FS.isFile(node.mode)) {
								attr.size = node.usedBytes;
							} else if (FS.isLink(node.mode)) {
								attr.size = node.link.length;
							} else {
								attr.size = 0;
							}
							attr.atime = new Date(node.timestamp);
							attr.mtime = new Date(node.timestamp);
							attr.ctime = new Date(node.timestamp);
							attr.blksize = 4096;
							attr.blocks = Math.ceil(attr.size / attr.blksize);
							return attr;
						}, setattr: function (node, attr) {
							if (attr.mode !== void 0) {
								node.mode = attr.mode;
							}
							if (attr.timestamp !== void 0) {
								node.timestamp = attr.timestamp;
							}
							if (attr.size !== void 0) {
								MEMFS.resizeFileStorage(node, attr.size);
							}
						}, lookup: function (parent, name2) {
							throw FS.genericErrors[44];
						}, mknod: function (parent, name2, mode, dev) {
							return MEMFS.createNode(parent, name2, mode, dev);
						}, rename: function (old_node, new_dir, new_name) {
							if (FS.isDir(old_node.mode)) {
								var new_node;
								try {
									new_node = FS.lookupNode(new_dir, new_name);
								} catch (e) {
								}
								if (new_node) {
									for (var i in new_node.contents) {
										throw new FS.ErrnoError(55);
									}
								}
							}
							delete old_node.parent.contents[old_node.name];
							old_node.name = new_name;
							new_dir.contents[new_name] = old_node;
							old_node.parent = new_dir;
						}, unlink: function (parent, name2) {
							delete parent.contents[name2];
						}, rmdir: function (parent, name2) {
							var node = FS.lookupNode(parent, name2);
							for (var i in node.contents) {
								throw new FS.ErrnoError(55);
							}
							delete parent.contents[name2];
						}, readdir: function (node) {
							var entries = [".", ".."];
							for (var key2 in node.contents) {
								if (!node.contents.hasOwnProperty(key2)) {
									continue;
								}
								entries.push(key2);
							}
							return entries;
						}, symlink: function (parent, newname, oldpath) {
							var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
							node.link = oldpath;
							return node;
						}, readlink: function (node) {
							if (!FS.isLink(node.mode)) {
								throw new FS.ErrnoError(28);
							}
							return node.link;
						}
					}, stream_ops: {
						read: function (stream, buffer2, offset, length, position) {
							var contents = stream.node.contents;
							if (position >= stream.node.usedBytes)
								return 0;
							var size = Math.min(stream.node.usedBytes - position, length);
							if (size > 8 && contents.subarray) {
								buffer2.set(contents.subarray(position, position + size), offset);
							} else {
								for (var i = 0; i < size; i++)
									buffer2[offset + i] = contents[position + i];
							}
							return size;
						}, write: function (stream, buffer2, offset, length, position, canOwn) {
							if (buffer2.buffer === GROWABLE_HEAP_I8().buffer) {
								canOwn = false;
							}
							if (!length)
								return 0;
							var node = stream.node;
							node.timestamp = Date.now();
							if (buffer2.subarray && (!node.contents || node.contents.subarray)) {
								if (canOwn) {
									node.contents = buffer2.subarray(offset, offset + length);
									node.usedBytes = length;
									return length;
								} else if (node.usedBytes === 0 && position === 0) {
									node.contents = buffer2.slice(offset, offset + length);
									node.usedBytes = length;
									return length;
								} else if (position + length <= node.usedBytes) {
									node.contents.set(buffer2.subarray(offset, offset + length), position);
									return length;
								}
							}
							MEMFS.expandFileStorage(node, position + length);
							if (node.contents.subarray && buffer2.subarray) {
								node.contents.set(buffer2.subarray(offset, offset + length), position);
							} else {
								for (var i = 0; i < length; i++) {
									node.contents[position + i] = buffer2[offset + i];
								}
							}
							node.usedBytes = Math.max(node.usedBytes, position + length);
							return length;
						}, llseek: function (stream, offset, whence) {
							var position = offset;
							if (whence === 1) {
								position += stream.position;
							} else if (whence === 2) {
								if (FS.isFile(stream.node.mode)) {
									position += stream.node.usedBytes;
								}
							}
							if (position < 0) {
								throw new FS.ErrnoError(28);
							}
							return position;
						}, allocate: function (stream, offset, length) {
							MEMFS.expandFileStorage(stream.node, offset + length);
							stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
						}, mmap: function (stream, address, length, position, prot, flags) {
							assert(address === 0);
							if (!FS.isFile(stream.node.mode)) {
								throw new FS.ErrnoError(43);
							}
							var ptr;
							var allocated;
							var contents = stream.node.contents;
							if (!(flags & 2) && contents.buffer === buffer) {
								allocated = false;
								ptr = contents.byteOffset;
							} else {
								if (position > 0 || position + length < contents.length) {
									if (contents.subarray) {
										contents = contents.subarray(position, position + length);
									} else {
										contents = Array.prototype.slice.call(contents, position, position + length);
									}
								}
								allocated = true;
								ptr = mmapAlloc(length);
								if (!ptr) {
									throw new FS.ErrnoError(48);
								}
								ptr >>>= 0;
								GROWABLE_HEAP_I8().set(contents, ptr);
							}
							return { ptr, allocated };
						}, msync: function (stream, buffer2, offset, length, mmapFlags) {
							if (!FS.isFile(stream.node.mode)) {
								throw new FS.ErrnoError(43);
							}
							if (mmapFlags & 2) {
								return 0;
							}
							MEMFS.stream_ops.write(stream, buffer2, 0, length, offset, false);
							return 0;
						}
					}
				};
				var FS = {
					root: null, mounts: [], devices: {}, streams: [], nextInode: 1, nameTable: null, currentPath: "/", initialized: false, ignorePermissions: true, trackingDelegate: {}, tracking: { openFlags: { READ: 1, WRITE: 2 } }, ErrnoError: null, genericErrors: {}, filesystems: null, syncFSRequests: 0, lookupPath: function (path, opts) {
						path = PATH_FS.resolve(FS.cwd(), path);
						opts = opts || {};
						if (!path)
							return { path: "", node: null };
						var defaults = { follow_mount: true, recurse_count: 0 };
						for (var key2 in defaults) {
							if (opts[key2] === void 0) {
								opts[key2] = defaults[key2];
							}
						}
						if (opts.recurse_count > 8) {
							throw new FS.ErrnoError(32);
						}
						var parts = PATH.normalizeArray(path.split("/").filter(function (p) {
							return !!p;
						}), false);
						var current = FS.root;
						var current_path = "/";
						for (var i = 0; i < parts.length; i++) {
							var islast = i === parts.length - 1;
							if (islast && opts.parent) {
								break;
							}
							current = FS.lookupNode(current, parts[i]);
							current_path = PATH.join2(current_path, parts[i]);
							if (FS.isMountpoint(current)) {
								if (!islast || islast && opts.follow_mount) {
									current = current.mounted.root;
								}
							}
							if (!islast || opts.follow) {
								var count = 0;
								while (FS.isLink(current.mode)) {
									var link = FS.readlink(current_path);
									current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
									var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
									current = lookup.node;
									if (count++ > 40) {
										throw new FS.ErrnoError(32);
									}
								}
							}
						}
						return { path: current_path, node: current };
					}, getPath: function (node) {
						var path;
						while (true) {
							if (FS.isRoot(node)) {
								var mount = node.mount.mountpoint;
								if (!path)
									return mount;
								return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
							}
							path = path ? node.name + "/" + path : node.name;
							node = node.parent;
						}
					}, hashName: function (parentid, name2) {
						var hash = 0;
						for (var i = 0; i < name2.length; i++) {
							hash = (hash << 5) - hash + name2.charCodeAt(i) | 0;
						}
						return (parentid + hash >>> 0) % FS.nameTable.length;
					}, hashAddNode: function (node) {
						var hash = FS.hashName(node.parent.id, node.name);
						node.name_next = FS.nameTable[hash];
						FS.nameTable[hash] = node;
					}, hashRemoveNode: function (node) {
						var hash = FS.hashName(node.parent.id, node.name);
						if (FS.nameTable[hash] === node) {
							FS.nameTable[hash] = node.name_next;
						} else {
							var current = FS.nameTable[hash];
							while (current) {
								if (current.name_next === node) {
									current.name_next = node.name_next;
									break;
								}
								current = current.name_next;
							}
						}
					}, lookupNode: function (parent, name2) {
						var errCode = FS.mayLookup(parent);
						if (errCode) {
							throw new FS.ErrnoError(errCode, parent);
						}
						var hash = FS.hashName(parent.id, name2);
						for (var node = FS.nameTable[hash]; node; node = node.name_next) {
							var nodeName = node.name;
							if (node.parent.id === parent.id && nodeName === name2) {
								return node;
							}
						}
						return FS.lookup(parent, name2);
					}, createNode: function (parent, name2, mode, rdev) {
						var node = new FS.FSNode(parent, name2, mode, rdev);
						FS.hashAddNode(node);
						return node;
					}, destroyNode: function (node) {
						FS.hashRemoveNode(node);
					}, isRoot: function (node) {
						return node === node.parent;
					}, isMountpoint: function (node) {
						return !!node.mounted;
					}, isFile: function (mode) {
						return (mode & 61440) === 32768;
					}, isDir: function (mode) {
						return (mode & 61440) === 16384;
					}, isLink: function (mode) {
						return (mode & 61440) === 40960;
					}, isChrdev: function (mode) {
						return (mode & 61440) === 8192;
					}, isBlkdev: function (mode) {
						return (mode & 61440) === 24576;
					}, isFIFO: function (mode) {
						return (mode & 61440) === 4096;
					}, isSocket: function (mode) {
						return (mode & 49152) === 49152;
					}, flagModes: { "r": 0, "r+": 2, "w": 577, "w+": 578, "a": 1089, "a+": 1090 }, modeStringToFlags: function (str) {
						var flags = FS.flagModes[str];
						if (typeof flags === "undefined") {
							throw new Error("Unknown file open mode: " + str);
						}
						return flags;
					}, flagsToPermissionString: function (flag) {
						var perms = ["r", "w", "rw"][flag & 3];
						if (flag & 512) {
							perms += "w";
						}
						return perms;
					}, nodePermissions: function (node, perms) {
						if (FS.ignorePermissions) {
							return 0;
						}
						if (perms.indexOf("r") !== -1 && !(node.mode & 292)) {
							return 2;
						} else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) {
							return 2;
						} else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) {
							return 2;
						}
						return 0;
					}, mayLookup: function (dir) {
						var errCode = FS.nodePermissions(dir, "x");
						if (errCode)
							return errCode;
						if (!dir.node_ops.lookup)
							return 2;
						return 0;
					}, mayCreate: function (dir, name2) {
						try {
							var node = FS.lookupNode(dir, name2);
							return 20;
						} catch (e) {
						}
						return FS.nodePermissions(dir, "wx");
					}, mayDelete: function (dir, name2, isdir) {
						var node;
						try {
							node = FS.lookupNode(dir, name2);
						} catch (e) {
							return e.errno;
						}
						var errCode = FS.nodePermissions(dir, "wx");
						if (errCode) {
							return errCode;
						}
						if (isdir) {
							if (!FS.isDir(node.mode)) {
								return 54;
							}
							if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
								return 10;
							}
						} else {
							if (FS.isDir(node.mode)) {
								return 31;
							}
						}
						return 0;
					}, mayOpen: function (node, flags) {
						if (!node) {
							return 44;
						}
						if (FS.isLink(node.mode)) {
							return 32;
						} else if (FS.isDir(node.mode)) {
							if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {
								return 31;
							}
						}
						return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
					}, MAX_OPEN_FDS: 4096, nextfd: function (fd_start, fd_end) {
						fd_start = fd_start || 0;
						fd_end = fd_end || FS.MAX_OPEN_FDS;
						for (var fd = fd_start; fd <= fd_end; fd++) {
							if (!FS.streams[fd]) {
								return fd;
							}
						}
						throw new FS.ErrnoError(33);
					}, getStream: function (fd) {
						return FS.streams[fd];
					}, createStream: function (stream, fd_start, fd_end) {
						if (!FS.FSStream) {
							FS.FSStream = function () {
							};
							FS.FSStream.prototype = {
								object: {
									get: function () {
										return this.node;
									}, set: function (val) {
										this.node = val;
									}
								}, isRead: {
									get: function () {
										return (this.flags & 2097155) !== 1;
									}
								}, isWrite: {
									get: function () {
										return (this.flags & 2097155) !== 0;
									}
								}, isAppend: {
									get: function () {
										return this.flags & 1024;
									}
								}
							};
						}
						var newStream = new FS.FSStream();
						for (var p in stream) {
							newStream[p] = stream[p];
						}
						stream = newStream;
						var fd = FS.nextfd(fd_start, fd_end);
						stream.fd = fd;
						FS.streams[fd] = stream;
						return stream;
					}, closeStream: function (fd) {
						FS.streams[fd] = null;
					}, chrdev_stream_ops: {
						open: function (stream) {
							var device = FS.getDevice(stream.node.rdev);
							stream.stream_ops = device.stream_ops;
							if (stream.stream_ops.open) {
								stream.stream_ops.open(stream);
							}
						}, llseek: function () {
							throw new FS.ErrnoError(70);
						}
					}, major: function (dev) {
						return dev >> 8;
					}, minor: function (dev) {
						return dev & 255;
					}, makedev: function (ma, mi) {
						return ma << 8 | mi;
					}, registerDevice: function (dev, ops) {
						FS.devices[dev] = { stream_ops: ops };
					}, getDevice: function (dev) {
						return FS.devices[dev];
					}, getMounts: function (mount) {
						var mounts = [];
						var check = [mount];
						while (check.length) {
							var m = check.pop();
							mounts.push(m);
							check.push.apply(check, m.mounts);
						}
						return mounts;
					}, syncfs: function (populate, callback) {
						if (typeof populate === "function") {
							callback = populate;
							populate = false;
						}
						FS.syncFSRequests++;
						if (FS.syncFSRequests > 1) {
							err("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work");
						}
						var mounts = FS.getMounts(FS.root.mount);
						var completed = 0;
						function doCallback(errCode) {
							FS.syncFSRequests--;
							return callback(errCode);
						}
						function done(errCode) {
							if (errCode) {
								if (!done.errored) {
									done.errored = true;
									return doCallback(errCode);
								}
								return;
							}
							if (++completed >= mounts.length) {
								doCallback(null);
							}
						}
						mounts.forEach(function (mount) {
							if (!mount.type.syncfs) {
								return done(null);
							}
							mount.type.syncfs(mount, populate, done);
						});
					}, mount: function (type, opts, mountpoint) {
						var root = mountpoint === "/";
						var pseudo = !mountpoint;
						var node;
						if (root && FS.root) {
							throw new FS.ErrnoError(10);
						} else if (!root && !pseudo) {
							var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
							mountpoint = lookup.path;
							node = lookup.node;
							if (FS.isMountpoint(node)) {
								throw new FS.ErrnoError(10);
							}
							if (!FS.isDir(node.mode)) {
								throw new FS.ErrnoError(54);
							}
						}
						var mount = { type, opts, mountpoint, mounts: [] };
						var mountRoot = type.mount(mount);
						mountRoot.mount = mount;
						mount.root = mountRoot;
						if (root) {
							FS.root = mountRoot;
						} else if (node) {
							node.mounted = mount;
							if (node.mount) {
								node.mount.mounts.push(mount);
							}
						}
						return mountRoot;
					}, unmount: function (mountpoint) {
						var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
						if (!FS.isMountpoint(lookup.node)) {
							throw new FS.ErrnoError(28);
						}
						var node = lookup.node;
						var mount = node.mounted;
						var mounts = FS.getMounts(mount);
						Object.keys(FS.nameTable).forEach(function (hash) {
							var current = FS.nameTable[hash];
							while (current) {
								var next = current.name_next;
								if (mounts.indexOf(current.mount) !== -1) {
									FS.destroyNode(current);
								}
								current = next;
							}
						});
						node.mounted = null;
						var idx = node.mount.mounts.indexOf(mount);
						node.mount.mounts.splice(idx, 1);
					}, lookup: function (parent, name2) {
						return parent.node_ops.lookup(parent, name2);
					}, mknod: function (path, mode, dev) {
						var lookup = FS.lookupPath(path, { parent: true });
						var parent = lookup.node;
						var name2 = PATH.basename(path);
						if (!name2 || name2 === "." || name2 === "..") {
							throw new FS.ErrnoError(28);
						}
						var errCode = FS.mayCreate(parent, name2);
						if (errCode) {
							throw new FS.ErrnoError(errCode);
						}
						if (!parent.node_ops.mknod) {
							throw new FS.ErrnoError(63);
						}
						return parent.node_ops.mknod(parent, name2, mode, dev);
					}, create: function (path, mode) {
						mode = mode !== void 0 ? mode : 438;
						mode &= 4095;
						mode |= 32768;
						return FS.mknod(path, mode, 0);
					}, mkdir: function (path, mode) {
						mode = mode !== void 0 ? mode : 511;
						mode &= 511 | 512;
						mode |= 16384;
						return FS.mknod(path, mode, 0);
					}, mkdirTree: function (path, mode) {
						var dirs = path.split("/");
						var d = "";
						for (var i = 0; i < dirs.length; ++i) {
							if (!dirs[i])
								continue;
							d += "/" + dirs[i];
							try {
								FS.mkdir(d, mode);
							} catch (e) {
								if (e.errno != 20)
									throw e;
							}
						}
					}, mkdev: function (path, mode, dev) {
						if (typeof dev === "undefined") {
							dev = mode;
							mode = 438;
						}
						mode |= 8192;
						return FS.mknod(path, mode, dev);
					}, symlink: function (oldpath, newpath) {
						if (!PATH_FS.resolve(oldpath)) {
							throw new FS.ErrnoError(44);
						}
						var lookup = FS.lookupPath(newpath, { parent: true });
						var parent = lookup.node;
						if (!parent) {
							throw new FS.ErrnoError(44);
						}
						var newname = PATH.basename(newpath);
						var errCode = FS.mayCreate(parent, newname);
						if (errCode) {
							throw new FS.ErrnoError(errCode);
						}
						if (!parent.node_ops.symlink) {
							throw new FS.ErrnoError(63);
						}
						return parent.node_ops.symlink(parent, newname, oldpath);
					}, rename: function (old_path, new_path) {
						var old_dirname = PATH.dirname(old_path);
						var new_dirname = PATH.dirname(new_path);
						var old_name = PATH.basename(old_path);
						var new_name = PATH.basename(new_path);
						var lookup, old_dir, new_dir;
						lookup = FS.lookupPath(old_path, { parent: true });
						old_dir = lookup.node;
						lookup = FS.lookupPath(new_path, { parent: true });
						new_dir = lookup.node;
						if (!old_dir || !new_dir)
							throw new FS.ErrnoError(44);
						if (old_dir.mount !== new_dir.mount) {
							throw new FS.ErrnoError(75);
						}
						var old_node = FS.lookupNode(old_dir, old_name);
						var relative = PATH_FS.relative(old_path, new_dirname);
						if (relative.charAt(0) !== ".") {
							throw new FS.ErrnoError(28);
						}
						relative = PATH_FS.relative(new_path, old_dirname);
						if (relative.charAt(0) !== ".") {
							throw new FS.ErrnoError(55);
						}
						var new_node;
						try {
							new_node = FS.lookupNode(new_dir, new_name);
						} catch (e) {
						}
						if (old_node === new_node) {
							return;
						}
						var isdir = FS.isDir(old_node.mode);
						var errCode = FS.mayDelete(old_dir, old_name, isdir);
						if (errCode) {
							throw new FS.ErrnoError(errCode);
						}
						errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
						if (errCode) {
							throw new FS.ErrnoError(errCode);
						}
						if (!old_dir.node_ops.rename) {
							throw new FS.ErrnoError(63);
						}
						if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
							throw new FS.ErrnoError(10);
						}
						if (new_dir !== old_dir) {
							errCode = FS.nodePermissions(old_dir, "w");
							if (errCode) {
								throw new FS.ErrnoError(errCode);
							}
						}
						try {
							if (FS.trackingDelegate["willMovePath"]) {
								FS.trackingDelegate["willMovePath"](old_path, new_path);
							}
						} catch (e) {
							err("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
						}
						FS.hashRemoveNode(old_node);
						try {
							old_dir.node_ops.rename(old_node, new_dir, new_name);
						} catch (e) {
							throw e;
						} finally {
							FS.hashAddNode(old_node);
						}
						try {
							if (FS.trackingDelegate["onMovePath"])
								FS.trackingDelegate["onMovePath"](old_path, new_path);
						} catch (e) {
							err("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
						}
					}, rmdir: function (path) {
						var lookup = FS.lookupPath(path, { parent: true });
						var parent = lookup.node;
						var name2 = PATH.basename(path);
						var node = FS.lookupNode(parent, name2);
						var errCode = FS.mayDelete(parent, name2, true);
						if (errCode) {
							throw new FS.ErrnoError(errCode);
						}
						if (!parent.node_ops.rmdir) {
							throw new FS.ErrnoError(63);
						}
						if (FS.isMountpoint(node)) {
							throw new FS.ErrnoError(10);
						}
						try {
							if (FS.trackingDelegate["willDeletePath"]) {
								FS.trackingDelegate["willDeletePath"](path);
							}
						} catch (e) {
							err("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
						}
						parent.node_ops.rmdir(parent, name2);
						FS.destroyNode(node);
						try {
							if (FS.trackingDelegate["onDeletePath"])
								FS.trackingDelegate["onDeletePath"](path);
						} catch (e) {
							err("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
						}
					}, readdir: function (path) {
						var lookup = FS.lookupPath(path, { follow: true });
						var node = lookup.node;
						if (!node.node_ops.readdir) {
							throw new FS.ErrnoError(54);
						}
						return node.node_ops.readdir(node);
					}, unlink: function (path) {
						var lookup = FS.lookupPath(path, { parent: true });
						var parent = lookup.node;
						var name2 = PATH.basename(path);
						var node = FS.lookupNode(parent, name2);
						var errCode = FS.mayDelete(parent, name2, false);
						if (errCode) {
							throw new FS.ErrnoError(errCode);
						}
						if (!parent.node_ops.unlink) {
							throw new FS.ErrnoError(63);
						}
						if (FS.isMountpoint(node)) {
							throw new FS.ErrnoError(10);
						}
						try {
							if (FS.trackingDelegate["willDeletePath"]) {
								FS.trackingDelegate["willDeletePath"](path);
							}
						} catch (e) {
							err("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
						}
						parent.node_ops.unlink(parent, name2);
						FS.destroyNode(node);
						try {
							if (FS.trackingDelegate["onDeletePath"])
								FS.trackingDelegate["onDeletePath"](path);
						} catch (e) {
							err("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
						}
					}, readlink: function (path) {
						var lookup = FS.lookupPath(path);
						var link = lookup.node;
						if (!link) {
							throw new FS.ErrnoError(44);
						}
						if (!link.node_ops.readlink) {
							throw new FS.ErrnoError(28);
						}
						return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
					}, stat: function (path, dontFollow) {
						var lookup = FS.lookupPath(path, { follow: !dontFollow });
						var node = lookup.node;
						if (!node) {
							throw new FS.ErrnoError(44);
						}
						if (!node.node_ops.getattr) {
							throw new FS.ErrnoError(63);
						}
						return node.node_ops.getattr(node);
					}, lstat: function (path) {
						return FS.stat(path, true);
					}, chmod: function (path, mode, dontFollow) {
						var node;
						if (typeof path === "string") {
							var lookup = FS.lookupPath(path, { follow: !dontFollow });
							node = lookup.node;
						} else {
							node = path;
						}
						if (!node.node_ops.setattr) {
							throw new FS.ErrnoError(63);
						}
						node.node_ops.setattr(node, { mode: mode & 4095 | node.mode & ~4095, timestamp: Date.now() });
					}, lchmod: function (path, mode) {
						FS.chmod(path, mode, true);
					}, fchmod: function (fd, mode) {
						var stream = FS.getStream(fd);
						if (!stream) {
							throw new FS.ErrnoError(8);
						}
						FS.chmod(stream.node, mode);
					}, chown: function (path, uid, gid, dontFollow) {
						var node;
						if (typeof path === "string") {
							var lookup = FS.lookupPath(path, { follow: !dontFollow });
							node = lookup.node;
						} else {
							node = path;
						}
						if (!node.node_ops.setattr) {
							throw new FS.ErrnoError(63);
						}
						node.node_ops.setattr(node, { timestamp: Date.now() });
					}, lchown: function (path, uid, gid) {
						FS.chown(path, uid, gid, true);
					}, fchown: function (fd, uid, gid) {
						var stream = FS.getStream(fd);
						if (!stream) {
							throw new FS.ErrnoError(8);
						}
						FS.chown(stream.node, uid, gid);
					}, truncate: function (path, len) {
						if (len < 0) {
							throw new FS.ErrnoError(28);
						}
						var node;
						if (typeof path === "string") {
							var lookup = FS.lookupPath(path, { follow: true });
							node = lookup.node;
						} else {
							node = path;
						}
						if (!node.node_ops.setattr) {
							throw new FS.ErrnoError(63);
						}
						if (FS.isDir(node.mode)) {
							throw new FS.ErrnoError(31);
						}
						if (!FS.isFile(node.mode)) {
							throw new FS.ErrnoError(28);
						}
						var errCode = FS.nodePermissions(node, "w");
						if (errCode) {
							throw new FS.ErrnoError(errCode);
						}
						node.node_ops.setattr(node, { size: len, timestamp: Date.now() });
					}, ftruncate: function (fd, len) {
						var stream = FS.getStream(fd);
						if (!stream) {
							throw new FS.ErrnoError(8);
						}
						if ((stream.flags & 2097155) === 0) {
							throw new FS.ErrnoError(28);
						}
						FS.truncate(stream.node, len);
					}, utime: function (path, atime, mtime) {
						var lookup = FS.lookupPath(path, { follow: true });
						var node = lookup.node;
						node.node_ops.setattr(node, { timestamp: Math.max(atime, mtime) });
					}, open: function (path, flags, mode, fd_start, fd_end) {
						if (path === "") {
							throw new FS.ErrnoError(44);
						}
						flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
						mode = typeof mode === "undefined" ? 438 : mode;
						if (flags & 64) {
							mode = mode & 4095 | 32768;
						} else {
							mode = 0;
						}
						var node;
						if (typeof path === "object") {
							node = path;
						} else {
							path = PATH.normalize(path);
							try {
								var lookup = FS.lookupPath(path, { follow: !(flags & 131072) });
								node = lookup.node;
							} catch (e) {
							}
						}
						var created = false;
						if (flags & 64) {
							if (node) {
								if (flags & 128) {
									throw new FS.ErrnoError(20);
								}
							} else {
								node = FS.mknod(path, mode, 0);
								created = true;
							}
						}
						if (!node) {
							throw new FS.ErrnoError(44);
						}
						if (FS.isChrdev(node.mode)) {
							flags &= ~512;
						}
						if (flags & 65536 && !FS.isDir(node.mode)) {
							throw new FS.ErrnoError(54);
						}
						if (!created) {
							var errCode = FS.mayOpen(node, flags);
							if (errCode) {
								throw new FS.ErrnoError(errCode);
							}
						}
						if (flags & 512) {
							FS.truncate(node, 0);
						}
						flags &= ~(128 | 512 | 131072);
						var stream = FS.createStream({ node, path: FS.getPath(node), flags, seekable: true, position: 0, stream_ops: node.stream_ops, ungotten: [], error: false }, fd_start, fd_end);
						if (stream.stream_ops.open) {
							stream.stream_ops.open(stream);
						}
						if (Module["logReadFiles"] && !(flags & 1)) {
							if (!FS.readFiles)
								FS.readFiles = {};
							if (!(path in FS.readFiles)) {
								FS.readFiles[path] = 1;
								err("FS.trackingDelegate error on read file: " + path);
							}
						}
						try {
							if (FS.trackingDelegate["onOpenFile"]) {
								var trackingFlags = 0;
								if ((flags & 2097155) !== 1) {
									trackingFlags |= FS.tracking.openFlags.READ;
								}
								if ((flags & 2097155) !== 0) {
									trackingFlags |= FS.tracking.openFlags.WRITE;
								}
								FS.trackingDelegate["onOpenFile"](path, trackingFlags);
							}
						} catch (e) {
							err("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
						}
						return stream;
					}, close: function (stream) {
						if (FS.isClosed(stream)) {
							throw new FS.ErrnoError(8);
						}
						if (stream.getdents)
							stream.getdents = null;
						try {
							if (stream.stream_ops.close) {
								stream.stream_ops.close(stream);
							}
						} catch (e) {
							throw e;
						} finally {
							FS.closeStream(stream.fd);
						}
						stream.fd = null;
					}, isClosed: function (stream) {
						return stream.fd === null;
					}, llseek: function (stream, offset, whence) {
						if (FS.isClosed(stream)) {
							throw new FS.ErrnoError(8);
						}
						if (!stream.seekable || !stream.stream_ops.llseek) {
							throw new FS.ErrnoError(70);
						}
						if (whence != 0 && whence != 1 && whence != 2) {
							throw new FS.ErrnoError(28);
						}
						stream.position = stream.stream_ops.llseek(stream, offset, whence);
						stream.ungotten = [];
						return stream.position;
					}, read: function (stream, buffer2, offset, length, position) {
						offset >>>= 0;
						if (length < 0 || position < 0) {
							throw new FS.ErrnoError(28);
						}
						if (FS.isClosed(stream)) {
							throw new FS.ErrnoError(8);
						}
						if ((stream.flags & 2097155) === 1) {
							throw new FS.ErrnoError(8);
						}
						if (FS.isDir(stream.node.mode)) {
							throw new FS.ErrnoError(31);
						}
						if (!stream.stream_ops.read) {
							throw new FS.ErrnoError(28);
						}
						var seeking = typeof position !== "undefined";
						if (!seeking) {
							position = stream.position;
						} else if (!stream.seekable) {
							throw new FS.ErrnoError(70);
						}
						var bytesRead = stream.stream_ops.read(stream, buffer2, offset, length, position);
						if (!seeking)
							stream.position += bytesRead;
						return bytesRead;
					}, write: function (stream, buffer2, offset, length, position, canOwn) {
						offset >>>= 0;
						if (length < 0 || position < 0) {
							throw new FS.ErrnoError(28);
						}
						if (FS.isClosed(stream)) {
							throw new FS.ErrnoError(8);
						}
						if ((stream.flags & 2097155) === 0) {
							throw new FS.ErrnoError(8);
						}
						if (FS.isDir(stream.node.mode)) {
							throw new FS.ErrnoError(31);
						}
						if (!stream.stream_ops.write) {
							throw new FS.ErrnoError(28);
						}
						if (stream.seekable && stream.flags & 1024) {
							FS.llseek(stream, 0, 2);
						}
						var seeking = typeof position !== "undefined";
						if (!seeking) {
							position = stream.position;
						} else if (!stream.seekable) {
							throw new FS.ErrnoError(70);
						}
						var bytesWritten = stream.stream_ops.write(stream, buffer2, offset, length, position, canOwn);
						if (!seeking)
							stream.position += bytesWritten;
						try {
							if (stream.path && FS.trackingDelegate["onWriteToFile"])
								FS.trackingDelegate["onWriteToFile"](stream.path);
						} catch (e) {
							err("FS.trackingDelegate['onWriteToFile']('" + stream.path + "') threw an exception: " + e.message);
						}
						return bytesWritten;
					}, allocate: function (stream, offset, length) {
						if (FS.isClosed(stream)) {
							throw new FS.ErrnoError(8);
						}
						if (offset < 0 || length <= 0) {
							throw new FS.ErrnoError(28);
						}
						if ((stream.flags & 2097155) === 0) {
							throw new FS.ErrnoError(8);
						}
						if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
							throw new FS.ErrnoError(43);
						}
						if (!stream.stream_ops.allocate) {
							throw new FS.ErrnoError(138);
						}
						stream.stream_ops.allocate(stream, offset, length);
					}, mmap: function (stream, address, length, position, prot, flags) {
						address >>>= 0;
						if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
							throw new FS.ErrnoError(2);
						}
						if ((stream.flags & 2097155) === 1) {
							throw new FS.ErrnoError(2);
						}
						if (!stream.stream_ops.mmap) {
							throw new FS.ErrnoError(43);
						}
						return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
					}, msync: function (stream, buffer2, offset, length, mmapFlags) {
						offset >>>= 0;
						if (!stream || !stream.stream_ops.msync) {
							return 0;
						}
						return stream.stream_ops.msync(stream, buffer2, offset, length, mmapFlags);
					}, munmap: function (stream) {
						return 0;
					}, ioctl: function (stream, cmd, arg) {
						if (!stream.stream_ops.ioctl) {
							throw new FS.ErrnoError(59);
						}
						return stream.stream_ops.ioctl(stream, cmd, arg);
					}, readFile: function (path, opts) {
						opts = opts || {};
						opts.flags = opts.flags || 0;
						opts.encoding = opts.encoding || "binary";
						if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
							throw new Error('Invalid encoding type "' + opts.encoding + '"');
						}
						var ret;
						var stream = FS.open(path, opts.flags);
						var stat = FS.stat(path);
						var length = stat.size;
						var buf = new Uint8Array(length);
						FS.read(stream, buf, 0, length, 0);
						if (opts.encoding === "utf8") {
							ret = UTF8ArrayToString(buf, 0);
						} else if (opts.encoding === "binary") {
							ret = buf;
						}
						FS.close(stream);
						return ret;
					}, writeFile: function (path, data, opts) {
						opts = opts || {};
						opts.flags = opts.flags || 577;
						var stream = FS.open(path, opts.flags, opts.mode);
						if (typeof data === "string") {
							var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
							var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
							FS.write(stream, buf, 0, actualNumBytes, void 0, opts.canOwn);
						} else if (ArrayBuffer.isView(data)) {
							FS.write(stream, data, 0, data.byteLength, void 0, opts.canOwn);
						} else {
							throw new Error("Unsupported data type");
						}
						FS.close(stream);
					}, cwd: function () {
						return FS.currentPath;
					}, chdir: function (path) {
						var lookup = FS.lookupPath(path, { follow: true });
						if (lookup.node === null) {
							throw new FS.ErrnoError(44);
						}
						if (!FS.isDir(lookup.node.mode)) {
							throw new FS.ErrnoError(54);
						}
						var errCode = FS.nodePermissions(lookup.node, "x");
						if (errCode) {
							throw new FS.ErrnoError(errCode);
						}
						FS.currentPath = lookup.path;
					}, createDefaultDirectories: function () {
						FS.mkdir("/tmp");
						FS.mkdir("/home");
						FS.mkdir("/home/web_user");
					}, createDefaultDevices: function () {
						FS.mkdir("/dev");
						FS.registerDevice(FS.makedev(1, 3), {
							read: function () {
								return 0;
							}, write: function (stream, buffer2, offset, length, pos) {
								return length;
							}
						});
						FS.mkdev("/dev/null", FS.makedev(1, 3));
						TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
						TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
						FS.mkdev("/dev/tty", FS.makedev(5, 0));
						FS.mkdev("/dev/tty1", FS.makedev(6, 0));
						var random_device = getRandomDevice();
						FS.createDevice("/dev", "random", random_device);
						FS.createDevice("/dev", "urandom", random_device);
						FS.mkdir("/dev/shm");
						FS.mkdir("/dev/shm/tmp");
					}, createSpecialDirectories: function () {
						FS.mkdir("/proc");
						FS.mkdir("/proc/self");
						FS.mkdir("/proc/self/fd");
						FS.mount({
							mount: function () {
								var node = FS.createNode("/proc/self", "fd", 16384 | 511, 73);
								node.node_ops = {
									lookup: function (parent, name2) {
										var fd = +name2;
										var stream = FS.getStream(fd);
										if (!stream)
											throw new FS.ErrnoError(8);
										var ret = {
											parent: null, mount: { mountpoint: "fake" }, node_ops: {
												readlink: function () {
													return stream.path;
												}
											}
										};
										ret.parent = ret;
										return ret;
									}
								};
								return node;
							}
						}, {}, "/proc/self/fd");
					}, createStandardStreams: function () {
						if (Module["stdin"]) {
							FS.createDevice("/dev", "stdin", Module["stdin"]);
						} else {
							FS.symlink("/dev/tty", "/dev/stdin");
						}
						if (Module["stdout"]) {
							FS.createDevice("/dev", "stdout", null, Module["stdout"]);
						} else {
							FS.symlink("/dev/tty", "/dev/stdout");
						}
						if (Module["stderr"]) {
							FS.createDevice("/dev", "stderr", null, Module["stderr"]);
						} else {
							FS.symlink("/dev/tty1", "/dev/stderr");
						}
						FS.open("/dev/stdin", 0);
						FS.open("/dev/stdout", 1);
						FS.open("/dev/stderr", 1);
					}, ensureErrnoError: function () {
						if (FS.ErrnoError)
							return;
						FS.ErrnoError = function ErrnoError(errno, node) {
							this.node = node;
							this.setErrno = function (errno2) {
								this.errno = errno2;
							};
							this.setErrno(errno);
							this.message = "FS error";
						};
						FS.ErrnoError.prototype = new Error();
						FS.ErrnoError.prototype.constructor = FS.ErrnoError;
						[44].forEach(function (code) {
							FS.genericErrors[code] = new FS.ErrnoError(code);
							FS.genericErrors[code].stack = "<generic error, no stack>";
						});
					}, staticInit: function () {
						FS.ensureErrnoError();
						FS.nameTable = new Array(4096);
						FS.mount(MEMFS, {}, "/");
						FS.createDefaultDirectories();
						FS.createDefaultDevices();
						FS.createSpecialDirectories();
						FS.filesystems = { "MEMFS": MEMFS };
					}, init: function (input, output, error) {
						FS.init.initialized = true;
						FS.ensureErrnoError();
						Module["stdin"] = input || Module["stdin"];
						Module["stdout"] = output || Module["stdout"];
						Module["stderr"] = error || Module["stderr"];
						FS.createStandardStreams();
					}, quit: function () {
						FS.init.initialized = false;
						var fflush = Module["_fflush"];
						if (fflush)
							fflush(0);
						for (var i = 0; i < FS.streams.length; i++) {
							var stream = FS.streams[i];
							if (!stream) {
								continue;
							}
							FS.close(stream);
						}
					}, getMode: function (canRead, canWrite) {
						var mode = 0;
						if (canRead)
							mode |= 292 | 73;
						if (canWrite)
							mode |= 146;
						return mode;
					}, findObject: function (path, dontResolveLastLink) {
						var ret = FS.analyzePath(path, dontResolveLastLink);
						if (ret.exists) {
							return ret.object;
						} else {
							return null;
						}
					}, analyzePath: function (path, dontResolveLastLink) {
						try {
							var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
							path = lookup.path;
						} catch (e) {
						}
						var ret = { isRoot: false, exists: false, error: 0, name: null, path: null, object: null, parentExists: false, parentPath: null, parentObject: null };
						try {
							var lookup = FS.lookupPath(path, { parent: true });
							ret.parentExists = true;
							ret.parentPath = lookup.path;
							ret.parentObject = lookup.node;
							ret.name = PATH.basename(path);
							lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
							ret.exists = true;
							ret.path = lookup.path;
							ret.object = lookup.node;
							ret.name = lookup.node.name;
							ret.isRoot = lookup.path === "/";
						} catch (e) {
							ret.error = e.errno;
						}
						return ret;
					}, createPath: function (parent, path, canRead, canWrite) {
						parent = typeof parent === "string" ? parent : FS.getPath(parent);
						var parts = path.split("/").reverse();
						while (parts.length) {
							var part = parts.pop();
							if (!part)
								continue;
							var current = PATH.join2(parent, part);
							try {
								FS.mkdir(current);
							} catch (e) {
							}
							parent = current;
						}
						return current;
					}, createFile: function (parent, name2, properties, canRead, canWrite) {
						var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name2);
						var mode = FS.getMode(canRead, canWrite);
						return FS.create(path, mode);
					}, createDataFile: function (parent, name2, data, canRead, canWrite, canOwn) {
						var path = name2 ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name2) : parent;
						var mode = FS.getMode(canRead, canWrite);
						var node = FS.create(path, mode);
						if (data) {
							if (typeof data === "string") {
								var arr = new Array(data.length);
								for (var i = 0, len = data.length; i < len; ++i)
									arr[i] = data.charCodeAt(i);
								data = arr;
							}
							FS.chmod(node, mode | 146);
							var stream = FS.open(node, 577);
							FS.write(stream, data, 0, data.length, 0, canOwn);
							FS.close(stream);
							FS.chmod(node, mode);
						}
						return node;
					}, createDevice: function (parent, name2, input, output) {
						var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name2);
						var mode = FS.getMode(!!input, !!output);
						if (!FS.createDevice.major)
							FS.createDevice.major = 64;
						var dev = FS.makedev(FS.createDevice.major++, 0);
						FS.registerDevice(dev, {
							open: function (stream) {
								stream.seekable = false;
							}, close: function (stream) {
								if (output && output.buffer && output.buffer.length) {
									output(10);
								}
							}, read: function (stream, buffer2, offset, length, pos) {
								var bytesRead = 0;
								for (var i = 0; i < length; i++) {
									var result;
									try {
										result = input();
									} catch (e) {
										throw new FS.ErrnoError(29);
									}
									if (result === void 0 && bytesRead === 0) {
										throw new FS.ErrnoError(6);
									}
									if (result === null || result === void 0)
										break;
									bytesRead++;
									buffer2[offset + i] = result;
								}
								if (bytesRead) {
									stream.node.timestamp = Date.now();
								}
								return bytesRead;
							}, write: function (stream, buffer2, offset, length, pos) {
								for (var i = 0; i < length; i++) {
									try {
										output(buffer2[offset + i]);
									} catch (e) {
										throw new FS.ErrnoError(29);
									}
								}
								if (length) {
									stream.node.timestamp = Date.now();
								}
								return i;
							}
						});
						return FS.mkdev(path, mode, dev);
					}, forceLoadFile: function (obj) {
						if (obj.isDevice || obj.isFolder || obj.link || obj.contents)
							return true;
						if (typeof XMLHttpRequest !== "undefined") {
							throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
						} else if (read_) {
							try {
								obj.contents = intArrayFromString(read_(obj.url), true);
								obj.usedBytes = obj.contents.length;
							} catch (e) {
								throw new FS.ErrnoError(29);
							}
						} else {
							throw new Error("Cannot load without read() or XMLHttpRequest.");
						}
					}, createLazyFile: function (parent, name2, url, canRead, canWrite) {
						function LazyUint8Array() {
							this.lengthKnown = false;
							this.chunks = [];
						}
						LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
							if (idx > this.length - 1 || idx < 0) {
								return void 0;
							}
							var chunkOffset = idx % this.chunkSize;
							var chunkNum = idx / this.chunkSize | 0;
							return this.getter(chunkNum)[chunkOffset];
						};
						LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
							this.getter = getter;
						};
						LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
							var xhr = new XMLHttpRequest();
							xhr.open("HEAD", url, false);
							xhr.send(null);
							if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304))
								throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
							var datalength = Number(xhr.getResponseHeader("Content-length"));
							var header;
							var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
							var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
							var chunkSize = 1024 * 1024;
							if (!hasByteServing)
								chunkSize = datalength;
							var doXHR = function (from, to) {
								if (from > to)
									throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
								if (to > datalength - 1)
									throw new Error("only " + datalength + " bytes available! programmer error!");
								var xhr2 = new XMLHttpRequest();
								xhr2.open("GET", url, false);
								if (datalength !== chunkSize)
									xhr2.setRequestHeader("Range", "bytes=" + from + "-" + to);
								if (typeof Uint8Array != "undefined")
									xhr2.responseType = "arraybuffer";
								if (xhr2.overrideMimeType) {
									xhr2.overrideMimeType("text/plain; charset=x-user-defined");
								}
								xhr2.send(null);
								if (!(xhr2.status >= 200 && xhr2.status < 300 || xhr2.status === 304))
									throw new Error("Couldn't load " + url + ". Status: " + xhr2.status);
								if (xhr2.response !== void 0) {
									return new Uint8Array(xhr2.response || []);
								} else {
									return intArrayFromString(xhr2.responseText || "", true);
								}
							};
							var lazyArray2 = this;
							lazyArray2.setDataGetter(function (chunkNum) {
								var start = chunkNum * chunkSize;
								var end = (chunkNum + 1) * chunkSize - 1;
								end = Math.min(end, datalength - 1);
								if (typeof lazyArray2.chunks[chunkNum] === "undefined") {
									lazyArray2.chunks[chunkNum] = doXHR(start, end);
								}
								if (typeof lazyArray2.chunks[chunkNum] === "undefined")
									throw new Error("doXHR failed!");
								return lazyArray2.chunks[chunkNum];
							});
							if (usesGzip || !datalength) {
								chunkSize = datalength = 1;
								datalength = this.getter(0).length;
								chunkSize = datalength;
								out("LazyFiles on gzip forces download of the whole file when length is accessed");
							}
							this._length = datalength;
							this._chunkSize = chunkSize;
							this.lengthKnown = true;
						};
						if (typeof XMLHttpRequest !== "undefined") {
							if (!ENVIRONMENT_IS_WORKER)
								throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
							var lazyArray = new LazyUint8Array();
							Object.defineProperties(lazyArray, {
								length: {
									get: function () {
										if (!this.lengthKnown) {
											this.cacheLength();
										}
										return this._length;
									}
								}, chunkSize: {
									get: function () {
										if (!this.lengthKnown) {
											this.cacheLength();
										}
										return this._chunkSize;
									}
								}
							});
							var properties = { isDevice: false, contents: lazyArray };
						} else {
							var properties = { isDevice: false, url };
						}
						var node = FS.createFile(parent, name2, properties, canRead, canWrite);
						if (properties.contents) {
							node.contents = properties.contents;
						} else if (properties.url) {
							node.contents = null;
							node.url = properties.url;
						}
						Object.defineProperties(node, {
							usedBytes: {
								get: function () {
									return this.contents.length;
								}
							}
						});
						var stream_ops = {};
						var keys = Object.keys(node.stream_ops);
						keys.forEach(function (key2) {
							var fn = node.stream_ops[key2];
							stream_ops[key2] = function forceLoadLazyFile() {
								FS.forceLoadFile(node);
								return fn.apply(null, arguments);
							};
						});
						stream_ops.read = function stream_ops_read(stream, buffer2, offset, length, position) {
							FS.forceLoadFile(node);
							var contents = stream.node.contents;
							if (position >= contents.length)
								return 0;
							var size = Math.min(contents.length - position, length);
							if (contents.slice) {
								for (var i = 0; i < size; i++) {
									buffer2[offset + i] = contents[position + i];
								}
							} else {
								for (var i = 0; i < size; i++) {
									buffer2[offset + i] = contents.get(position + i);
								}
							}
							return size;
						};
						node.stream_ops = stream_ops;
						return node;
					}, createPreloadedFile: function (parent, name2, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
						Browser.init();
						var fullname = name2 ? PATH_FS.resolve(PATH.join2(parent, name2)) : parent;
						function processData(byteArray) {
							function finish(byteArray2) {
								if (preFinish)
									preFinish();
								if (!dontCreateFile) {
									FS.createDataFile(parent, name2, byteArray2, canRead, canWrite, canOwn);
								}
								if (onload)
									onload();
								removeRunDependency();
							}
							var handled = false;
							Module["preloadPlugins"].forEach(function (plugin) {
								if (handled)
									return;
								if (plugin["canHandle"](fullname)) {
									plugin["handle"](byteArray, fullname, finish, function () {
										if (onerror)
											onerror();
										removeRunDependency();
									});
									handled = true;
								}
							});
							if (!handled)
								finish(byteArray);
						}
						addRunDependency();
						if (typeof url == "string") {
							Browser.asyncLoad(url, function (byteArray) {
								processData(byteArray);
							}, onerror);
						} else {
							processData(url);
						}
					}, indexedDB: function () {
						return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
					}, DB_NAME: function () {
						return "EM_FS_" + window.location.pathname;
					}, DB_VERSION: 20, DB_STORE_NAME: "FILE_DATA", saveFilesToDB: function (paths, onload, onerror) {
						onload = onload || function () {
						};
						onerror = onerror || function () {
						};
						var indexedDB = FS.indexedDB();
						try {
							var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
						} catch (e) {
							return onerror(e);
						}
						openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
							out("creating db");
							var db = openRequest.result;
							db.createObjectStore(FS.DB_STORE_NAME);
						};
						openRequest.onsuccess = function openRequest_onsuccess() {
							var db = openRequest.result;
							var transaction = db.transaction([FS.DB_STORE_NAME], "readwrite");
							var files = transaction.objectStore(FS.DB_STORE_NAME);
							var ok = 0, fail = 0, total = paths.length;
							function finish() {
								if (fail == 0)
									onload();
								else
									onerror();
							}
							paths.forEach(function (path) {
								var putRequest = files.put(FS.analyzePath(path).object.contents, path);
								putRequest.onsuccess = function putRequest_onsuccess() {
									ok++;
									if (ok + fail == total)
										finish();
								};
								putRequest.onerror = function putRequest_onerror() {
									fail++;
									if (ok + fail == total)
										finish();
								};
							});
							transaction.onerror = onerror;
						};
						openRequest.onerror = onerror;
					}, loadFilesFromDB: function (paths, onload, onerror) {
						onload = onload || function () {
						};
						onerror = onerror || function () {
						};
						var indexedDB = FS.indexedDB();
						try {
							var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
						} catch (e) {
							return onerror(e);
						}
						openRequest.onupgradeneeded = onerror;
						openRequest.onsuccess = function openRequest_onsuccess() {
							var db = openRequest.result;
							try {
								var transaction = db.transaction([FS.DB_STORE_NAME], "readonly");
							} catch (e) {
								onerror(e);
								return;
							}
							var files = transaction.objectStore(FS.DB_STORE_NAME);
							var ok = 0, fail = 0, total = paths.length;
							function finish() {
								if (fail == 0)
									onload();
								else
									onerror();
							}
							paths.forEach(function (path) {
								var getRequest = files.get(path);
								getRequest.onsuccess = function getRequest_onsuccess() {
									if (FS.analyzePath(path).exists) {
										FS.unlink(path);
									}
									FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
									ok++;
									if (ok + fail == total)
										finish();
								};
								getRequest.onerror = function getRequest_onerror() {
									fail++;
									if (ok + fail == total)
										finish();
								};
							});
							transaction.onerror = onerror;
						};
						openRequest.onerror = onerror;
					}
				};
				var SYSCALLS = {
					mappings: {}, DEFAULT_POLLMASK: 5, umask: 511, calculateAt: function (dirfd, path) {
						if (path[0] !== "/") {
							var dir;
							if (dirfd === -100) {
								dir = FS.cwd();
							} else {
								var dirstream = FS.getStream(dirfd);
								if (!dirstream)
									throw new FS.ErrnoError(8);
								dir = dirstream.path;
							}
							path = PATH.join2(dir, path);
						}
						return path;
					}, doStat: function (func, path, buf) {
						try {
							var stat = func(path);
						} catch (e) {
							if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
								return -54;
							}
							throw e;
						}
						GROWABLE_HEAP_I32()[buf >> 2] = stat.dev;
						GROWABLE_HEAP_I32()[buf + 4 >> 2] = 0;
						GROWABLE_HEAP_I32()[buf + 8 >> 2] = stat.ino;
						GROWABLE_HEAP_I32()[buf + 12 >> 2] = stat.mode;
						GROWABLE_HEAP_I32()[buf + 16 >> 2] = stat.nlink;
						GROWABLE_HEAP_I32()[buf + 20 >> 2] = stat.uid;
						GROWABLE_HEAP_I32()[buf + 24 >> 2] = stat.gid;
						GROWABLE_HEAP_I32()[buf + 28 >> 2] = stat.rdev;
						GROWABLE_HEAP_I32()[buf + 32 >> 2] = 0;
						tempI64 = [stat.size >>> 0, (tempDouble = stat.size, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], GROWABLE_HEAP_I32()[buf + 40 >> 2] = tempI64[0], GROWABLE_HEAP_I32()[buf + 44 >> 2] = tempI64[1];
						GROWABLE_HEAP_I32()[buf + 48 >> 2] = 4096;
						GROWABLE_HEAP_I32()[buf + 52 >> 2] = stat.blocks;
						GROWABLE_HEAP_I32()[buf + 56 >> 2] = stat.atime.getTime() / 1e3 | 0;
						GROWABLE_HEAP_I32()[buf + 60 >> 2] = 0;
						GROWABLE_HEAP_I32()[buf + 64 >> 2] = stat.mtime.getTime() / 1e3 | 0;
						GROWABLE_HEAP_I32()[buf + 68 >> 2] = 0;
						GROWABLE_HEAP_I32()[buf + 72 >> 2] = stat.ctime.getTime() / 1e3 | 0;
						GROWABLE_HEAP_I32()[buf + 76 >> 2] = 0;
						tempI64 = [stat.ino >>> 0, (tempDouble = stat.ino, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], GROWABLE_HEAP_I32()[buf + 80 >> 2] = tempI64[0], GROWABLE_HEAP_I32()[buf + 84 >> 2] = tempI64[1];
						return 0;
					}, doMsync: function (addr, stream, len, flags, offset) {
						var buffer2 = GROWABLE_HEAP_U8().slice(addr, addr + len);
						FS.msync(stream, buffer2, offset, len, flags);
					}, doMkdir: function (path, mode) {
						path = PATH.normalize(path);
						if (path[path.length - 1] === "/")
							path = path.substr(0, path.length - 1);
						FS.mkdir(path, mode, 0);
						return 0;
					}, doMknod: function (path, mode, dev) {
						switch (mode & 61440) {
							case 32768:
							case 8192:
							case 24576:
							case 4096:
							case 49152:
								break;
							default:
								return -28;
						}
						FS.mknod(path, mode, dev);
						return 0;
					}, doReadlink: function (path, buf, bufsize) {
						if (bufsize <= 0)
							return -28;
						var ret = FS.readlink(path);
						var len = Math.min(bufsize, lengthBytesUTF8(ret));
						var endChar = GROWABLE_HEAP_I8()[buf + len];
						stringToUTF8(ret, buf, bufsize + 1);
						GROWABLE_HEAP_I8()[buf + len] = endChar;
						return len;
					}, doAccess: function (path, amode) {
						if (amode & ~7) {
							return -28;
						}
						var node;
						var lookup = FS.lookupPath(path, { follow: true });
						node = lookup.node;
						if (!node) {
							return -44;
						}
						var perms = "";
						if (amode & 4)
							perms += "r";
						if (amode & 2)
							perms += "w";
						if (amode & 1)
							perms += "x";
						if (perms && FS.nodePermissions(node, perms)) {
							return -2;
						}
						return 0;
					}, doDup: function (path, flags, suggestFD) {
						var suggest = FS.getStream(suggestFD);
						if (suggest)
							FS.close(suggest);
						return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
					}, doReadv: function (stream, iov, iovcnt, offset) {
						var ret = 0;
						for (var i = 0; i < iovcnt; i++) {
							var ptr = GROWABLE_HEAP_I32()[iov + i * 8 >> 2];
							var len = GROWABLE_HEAP_I32()[iov + (i * 8 + 4) >> 2];
							var curr = FS.read(stream, GROWABLE_HEAP_I8(), ptr, len, offset);
							if (curr < 0)
								return -1;
							ret += curr;
							if (curr < len)
								break;
						}
						return ret;
					}, doWritev: function (stream, iov, iovcnt, offset) {
						var ret = 0;
						for (var i = 0; i < iovcnt; i++) {
							var ptr = GROWABLE_HEAP_I32()[iov + i * 8 >> 2];
							var len = GROWABLE_HEAP_I32()[iov + (i * 8 + 4) >> 2];
							var curr = FS.write(stream, GROWABLE_HEAP_I8(), ptr, len, offset);
							if (curr < 0)
								return -1;
							ret += curr;
						}
						return ret;
					}, varargs: void 0, get: function () {
						SYSCALLS.varargs += 4;
						var ret = GROWABLE_HEAP_I32()[SYSCALLS.varargs - 4 >> 2];
						return ret;
					}, getStr: function (ptr) {
						var ret = UTF8ToString(ptr);
						return ret;
					}, getStreamFromFD: function (fd) {
						var stream = FS.getStream(fd);
						if (!stream)
							throw new FS.ErrnoError(8);
						return stream;
					}, get64: function (low, high) {
						return low;
					}
				};
				function ___sys_ioctl(fd, op, varargs) {
					if (ENVIRONMENT_IS_PTHREAD)
						return _emscripten_proxy_to_main_thread_js(2, 1, fd, op, varargs);
					SYSCALLS.varargs = varargs;
					try {
						var stream = SYSCALLS.getStreamFromFD(fd);
						switch (op) {
							case 21509:
							case 21505: {
								if (!stream.tty)
									return -59;
								return 0;
							}
							case 21510:
							case 21511:
							case 21512:
							case 21506:
							case 21507:
							case 21508: {
								if (!stream.tty)
									return -59;
								return 0;
							}
							case 21519: {
								if (!stream.tty)
									return -59;
								var argp = SYSCALLS.get();
								GROWABLE_HEAP_I32()[argp >> 2] = 0;
								return 0;
							}
							case 21520: {
								if (!stream.tty)
									return -59;
								return -28;
							}
							case 21531: {
								var argp = SYSCALLS.get();
								return FS.ioctl(stream, op, argp);
							}
							case 21523: {
								if (!stream.tty)
									return -59;
								return 0;
							}
							case 21524: {
								if (!stream.tty)
									return -59;
								return 0;
							}
							default:
								abort("bad ioctl syscall " + op);
						}
					} catch (e) {
						if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
							abort(e);
						return -e.errno;
					}
				}
				function ___sys_open(path, flags, varargs) {
					if (ENVIRONMENT_IS_PTHREAD)
						return _emscripten_proxy_to_main_thread_js(3, 1, path, flags, varargs);
					SYSCALLS.varargs = varargs;
					try {
						var pathname = SYSCALLS.getStr(path);
						var mode = SYSCALLS.get();
						var stream = FS.open(pathname, flags, mode);
						return stream.fd;
					} catch (e) {
						if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
							abort(e);
						return -e.errno;
					}
				}
				var tupleRegistrations = {};
				function runDestructors(destructors) {
					while (destructors.length) {
						var ptr = destructors.pop();
						var del = destructors.pop();
						del(ptr);
					}
				}
				function simpleReadValueFromPointer(pointer) {
					return this["fromWireType"](GROWABLE_HEAP_U32()[pointer >> 2]);
				}
				var awaitingDependencies = {};
				var registeredTypes = {};
				var typeDependencies = {};
				var char_0 = 48;
				var char_9 = 57;
				function makeLegalFunctionName(name2) {
					if (name2 === void 0) {
						return "_unknown";
					}
					name2 = name2.replace(/[^a-zA-Z0-9_]/g, "$");
					var f = name2.charCodeAt(0);
					if (f >= char_0 && f <= char_9) {
						return "_" + name2;
					} else {
						return name2;
					}
				}
				function createNamedFunction(name2, body) {
					name2 = makeLegalFunctionName(name2);
					return new Function("body", "return function " + name2 + '() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(body);
				}
				function extendError(baseErrorType, errorName) {
					var errorClass = createNamedFunction(errorName, function (message) {
						this.name = errorName;
						this.message = message;
						var stack = new Error(message).stack;
						if (stack !== void 0) {
							this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
						}
					});
					errorClass.prototype = Object.create(baseErrorType.prototype);
					errorClass.prototype.constructor = errorClass;
					errorClass.prototype.toString = function () {
						if (this.message === void 0) {
							return this.name;
						} else {
							return this.name + ": " + this.message;
						}
					};
					return errorClass;
				}
				var InternalError = void 0;
				function throwInternalError(message) {
					throw new InternalError(message);
				}
				function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
					myTypes.forEach(function (type) {
						typeDependencies[type] = dependentTypes;
					});
					function onComplete(typeConverters2) {
						var myTypeConverters = getTypeConverters(typeConverters2);
						if (myTypeConverters.length !== myTypes.length) {
							throwInternalError("Mismatched type converter count");
						}
						for (var i = 0; i < myTypes.length; ++i) {
							registerType(myTypes[i], myTypeConverters[i]);
						}
					}
					var typeConverters = new Array(dependentTypes.length);
					var unregisteredTypes = [];
					var registered = 0;
					dependentTypes.forEach(function (dt, i) {
						if (registeredTypes.hasOwnProperty(dt)) {
							typeConverters[i] = registeredTypes[dt];
						} else {
							unregisteredTypes.push(dt);
							if (!awaitingDependencies.hasOwnProperty(dt)) {
								awaitingDependencies[dt] = [];
							}
							awaitingDependencies[dt].push(function () {
								typeConverters[i] = registeredTypes[dt];
								++registered;
								if (registered === unregisteredTypes.length) {
									onComplete(typeConverters);
								}
							});
						}
					});
					if (unregisteredTypes.length === 0) {
						onComplete(typeConverters);
					}
				}
				function __embind_finalize_value_array(rawTupleType) {
					var reg = tupleRegistrations[rawTupleType];
					delete tupleRegistrations[rawTupleType];
					var elements = reg.elements;
					var elementsLength = elements.length;
					var elementTypes = elements.map(function (elt) {
						return elt.getterReturnType;
					}).concat(elements.map(function (elt) {
						return elt.setterArgumentType;
					}));
					var rawConstructor = reg.rawConstructor;
					var rawDestructor = reg.rawDestructor;
					whenDependentTypesAreResolved([rawTupleType], elementTypes, function (elementTypes2) {
						elements.forEach(function (elt, i) {
							var getterReturnType = elementTypes2[i];
							var getter = elt.getter;
							var getterContext = elt.getterContext;
							var setterArgumentType = elementTypes2[i + elementsLength];
							var setter = elt.setter;
							var setterContext = elt.setterContext;
							elt.read = function (ptr) {
								return getterReturnType["fromWireType"](getter(getterContext, ptr));
							};
							elt.write = function (ptr, o) {
								var destructors = [];
								setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, o));
								runDestructors(destructors);
							};
						});
						return [{
							name: reg.name, "fromWireType": function (ptr) {
								var rv = new Array(elementsLength);
								for (var i = 0; i < elementsLength; ++i) {
									rv[i] = elements[i].read(ptr);
								}
								rawDestructor(ptr);
								return rv;
							}, "toWireType": function (destructors, o) {
								if (elementsLength !== o.length) {
									throw new TypeError("Incorrect number of tuple elements for " + reg.name + ": expected=" + elementsLength + ", actual=" + o.length);
								}
								var ptr = rawConstructor();
								for (var i = 0; i < elementsLength; ++i) {
									elements[i].write(ptr, o[i]);
								}
								if (destructors !== null) {
									destructors.push(rawDestructor, ptr);
								}
								return ptr;
							}, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: rawDestructor
						}];
					});
				}
				var structRegistrations = {};
				function __embind_finalize_value_object(structType) {
					var reg = structRegistrations[structType];
					delete structRegistrations[structType];
					var rawConstructor = reg.rawConstructor;
					var rawDestructor = reg.rawDestructor;
					var fieldRecords = reg.fields;
					var fieldTypes = fieldRecords.map(function (field) {
						return field.getterReturnType;
					}).concat(fieldRecords.map(function (field) {
						return field.setterArgumentType;
					}));
					whenDependentTypesAreResolved([structType], fieldTypes, function (fieldTypes2) {
						var fields = {};
						fieldRecords.forEach(function (field, i) {
							var fieldName = field.fieldName;
							var getterReturnType = fieldTypes2[i];
							var getter = field.getter;
							var getterContext = field.getterContext;
							var setterArgumentType = fieldTypes2[i + fieldRecords.length];
							var setter = field.setter;
							var setterContext = field.setterContext;
							fields[fieldName] = {
								read: function (ptr) {
									return getterReturnType["fromWireType"](getter(getterContext, ptr));
								}, write: function (ptr, o) {
									var destructors = [];
									setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, o));
									runDestructors(destructors);
								}
							};
						});
						return [{
							name: reg.name, "fromWireType": function (ptr) {
								var rv = {};
								for (var i in fields) {
									rv[i] = fields[i].read(ptr);
								}
								rawDestructor(ptr);
								return rv;
							}, "toWireType": function (destructors, o) {
								for (var fieldName in fields) {
									if (!(fieldName in o)) {
										throw new TypeError('Missing field:  "' + fieldName + '"');
									}
								}
								var ptr = rawConstructor();
								for (fieldName in fields) {
									fields[fieldName].write(ptr, o[fieldName]);
								}
								if (destructors !== null) {
									destructors.push(rawDestructor, ptr);
								}
								return ptr;
							}, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: rawDestructor
						}];
					});
				}
				function getShiftFromSize(size) {
					switch (size) {
						case 1:
							return 0;
						case 2:
							return 1;
						case 4:
							return 2;
						case 8:
							return 3;
						default:
							throw new TypeError("Unknown type size: " + size);
					}
				}
				function embind_init_charCodes() {
					var codes = new Array(256);
					for (var i = 0; i < 256; ++i) {
						codes[i] = String.fromCharCode(i);
					}
					embind_charCodes = codes;
				}
				var embind_charCodes = void 0;
				function readLatin1String(ptr) {
					var ret = "";
					var c = ptr;
					while (GROWABLE_HEAP_U8()[c]) {
						ret += embind_charCodes[GROWABLE_HEAP_U8()[c++]];
					}
					return ret;
				}
				var BindingError = void 0;
				function throwBindingError(message) {
					throw new BindingError(message);
				}
				function registerType(rawType, registeredInstance, options) {
					options = options || {};
					if (!("argPackAdvance" in registeredInstance)) {
						throw new TypeError("registerType registeredInstance requires argPackAdvance");
					}
					var name2 = registeredInstance.name;
					if (!rawType) {
						throwBindingError('type "' + name2 + '" must have a positive integer typeid pointer');
					}
					if (registeredTypes.hasOwnProperty(rawType)) {
						if (options.ignoreDuplicateRegistrations) {
							return;
						} else {
							throwBindingError("Cannot register type '" + name2 + "' twice");
						}
					}
					registeredTypes[rawType] = registeredInstance;
					delete typeDependencies[rawType];
					if (awaitingDependencies.hasOwnProperty(rawType)) {
						var callbacks = awaitingDependencies[rawType];
						delete awaitingDependencies[rawType];
						callbacks.forEach(function (cb) {
							cb();
						});
					}
				}
				function __embind_register_bool(rawType, name2, size, trueValue, falseValue) {
					var shift = getShiftFromSize(size);
					name2 = readLatin1String(name2);
					registerType(rawType, {
						name: name2, "fromWireType": function (wt) {
							return !!wt;
						}, "toWireType": function (destructors, o) {
							return o ? trueValue : falseValue;
						}, "argPackAdvance": 8, "readValueFromPointer": function (pointer) {
							var heap;
							if (size === 1) {
								heap = GROWABLE_HEAP_I8();
							} else if (size === 2) {
								heap = GROWABLE_HEAP_I16();
							} else if (size === 4) {
								heap = GROWABLE_HEAP_I32();
							} else {
								throw new TypeError("Unknown boolean type size: " + name2);
							}
							return this["fromWireType"](heap[pointer >>> shift]);
						}, destructorFunction: null
					});
				}
				function ClassHandle_isAliasOf(other) {
					if (!(this instanceof ClassHandle)) {
						return false;
					}
					if (!(other instanceof ClassHandle)) {
						return false;
					}
					var leftClass = this.$$.ptrType.registeredClass;
					var left = this.$$.ptr;
					var rightClass = other.$$.ptrType.registeredClass;
					var right = other.$$.ptr;
					while (leftClass.baseClass) {
						left = leftClass.upcast(left);
						leftClass = leftClass.baseClass;
					}
					while (rightClass.baseClass) {
						right = rightClass.upcast(right);
						rightClass = rightClass.baseClass;
					}
					return leftClass === rightClass && left === right;
				}
				function shallowCopyInternalPointer(o) {
					return { count: o.count, deleteScheduled: o.deleteScheduled, preservePointerOnDelete: o.preservePointerOnDelete, ptr: o.ptr, ptrType: o.ptrType, smartPtr: o.smartPtr, smartPtrType: o.smartPtrType };
				}
				function throwInstanceAlreadyDeleted(obj) {
					function getInstanceTypeName(handle) {
						return handle.$$.ptrType.registeredClass.name;
					}
					throwBindingError(getInstanceTypeName(obj) + " instance already deleted");
				}
				var finalizationGroup = false;
				function detachFinalizer(handle) {
				}
				function runDestructor($$) {
					if ($$.smartPtr) {
						$$.smartPtrType.rawDestructor($$.smartPtr);
					} else {
						$$.ptrType.registeredClass.rawDestructor($$.ptr);
					}
				}
				function releaseClassHandle($$) {
					$$.count.value -= 1;
					var toDelete = $$.count.value === 0;
					if (toDelete) {
						runDestructor($$);
					}
				}
				function attachFinalizer(handle) {
					if (typeof FinalizationGroup === "undefined") {
						attachFinalizer = function (handle2) {
							return handle2;
						};
						return handle;
					}
					finalizationGroup = new FinalizationGroup(function (iter) {
						for (var result = iter.next(); !result.done; result = iter.next()) {
							var $$ = result.value;
							if (!$$.ptr) {
								console.warn("object already deleted: " + $$.ptr);
							} else {
								releaseClassHandle($$);
							}
						}
					});
					attachFinalizer = function (handle2) {
						finalizationGroup.register(handle2, handle2.$$, handle2.$$);
						return handle2;
					};
					detachFinalizer = function (handle2) {
						finalizationGroup.unregister(handle2.$$);
					};
					return attachFinalizer(handle);
				}
				function ClassHandle_clone() {
					if (!this.$$.ptr) {
						throwInstanceAlreadyDeleted(this);
					}
					if (this.$$.preservePointerOnDelete) {
						this.$$.count.value += 1;
						return this;
					} else {
						var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), { $$: { value: shallowCopyInternalPointer(this.$$) } }));
						clone.$$.count.value += 1;
						clone.$$.deleteScheduled = false;
						return clone;
					}
				}
				function ClassHandle_delete() {
					if (!this.$$.ptr) {
						throwInstanceAlreadyDeleted(this);
					}
					if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
						throwBindingError("Object already scheduled for deletion");
					}
					detachFinalizer(this);
					releaseClassHandle(this.$$);
					if (!this.$$.preservePointerOnDelete) {
						this.$$.smartPtr = void 0;
						this.$$.ptr = void 0;
					}
				}
				function ClassHandle_isDeleted() {
					return !this.$$.ptr;
				}
				var delayFunction = void 0;
				var deletionQueue = [];
				function flushPendingDeletes() {
					while (deletionQueue.length) {
						var obj = deletionQueue.pop();
						obj.$$.deleteScheduled = false;
						obj["delete"]();
					}
				}
				function ClassHandle_deleteLater() {
					if (!this.$$.ptr) {
						throwInstanceAlreadyDeleted(this);
					}
					if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
						throwBindingError("Object already scheduled for deletion");
					}
					deletionQueue.push(this);
					if (deletionQueue.length === 1 && delayFunction) {
						delayFunction(flushPendingDeletes);
					}
					this.$$.deleteScheduled = true;
					return this;
				}
				function init_ClassHandle() {
					ClassHandle.prototype["isAliasOf"] = ClassHandle_isAliasOf;
					ClassHandle.prototype["clone"] = ClassHandle_clone;
					ClassHandle.prototype["delete"] = ClassHandle_delete;
					ClassHandle.prototype["isDeleted"] = ClassHandle_isDeleted;
					ClassHandle.prototype["deleteLater"] = ClassHandle_deleteLater;
				}
				function ClassHandle() {
				}
				var registeredPointers = {};
				function ensureOverloadTable(proto, methodName, humanName) {
					if (proto[methodName].overloadTable === void 0) {
						var prevFunc = proto[methodName];
						proto[methodName] = function () {
							if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
								throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
							}
							return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
						};
						proto[methodName].overloadTable = [];
						proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
					}
				}
				function exposePublicSymbol(name2, value, numArguments) {
					if (Module.hasOwnProperty(name2)) {
						if (numArguments === void 0 || Module[name2].overloadTable !== void 0 && Module[name2].overloadTable[numArguments] !== void 0) {
							throwBindingError("Cannot register public name '" + name2 + "' twice");
						}
						ensureOverloadTable(Module, name2, name2);
						if (Module.hasOwnProperty(numArguments)) {
							throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
						}
						Module[name2].overloadTable[numArguments] = value;
					} else {
						Module[name2] = value;
						if (numArguments !== void 0) {
							Module[name2].numArguments = numArguments;
						}
					}
				}
				function RegisteredClass(name2, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
					this.name = name2;
					this.constructor = constructor;
					this.instancePrototype = instancePrototype;
					this.rawDestructor = rawDestructor;
					this.baseClass = baseClass;
					this.getActualType = getActualType;
					this.upcast = upcast;
					this.downcast = downcast;
					this.pureVirtualFunctions = [];
				}
				function upcastPointer(ptr, ptrClass, desiredClass) {
					while (ptrClass !== desiredClass) {
						if (!ptrClass.upcast) {
							throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
						}
						ptr = ptrClass.upcast(ptr);
						ptrClass = ptrClass.baseClass;
					}
					return ptr;
				}
				function constNoSmartPtrRawPointerToWireType(destructors, handle) {
					if (handle === null) {
						if (this.isReference) {
							throwBindingError("null is not a valid " + this.name);
						}
						return 0;
					}
					if (!handle.$$) {
						throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
					}
					if (!handle.$$.ptr) {
						throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
					}
					var handleClass = handle.$$.ptrType.registeredClass;
					var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
					return ptr;
				}
				function genericPointerToWireType(destructors, handle) {
					var ptr;
					if (handle === null) {
						if (this.isReference) {
							throwBindingError("null is not a valid " + this.name);
						}
						if (this.isSmartPointer) {
							ptr = this.rawConstructor();
							if (destructors !== null) {
								destructors.push(this.rawDestructor, ptr);
							}
							return ptr;
						} else {
							return 0;
						}
					}
					if (!handle.$$) {
						throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
					}
					if (!handle.$$.ptr) {
						throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
					}
					if (!this.isConst && handle.$$.ptrType.isConst) {
						throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
					}
					var handleClass = handle.$$.ptrType.registeredClass;
					ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
					if (this.isSmartPointer) {
						if (handle.$$.smartPtr === void 0) {
							throwBindingError("Passing raw pointer to smart pointer is illegal");
						}
						switch (this.sharingPolicy) {
							case 0:
								if (handle.$$.smartPtrType === this) {
									ptr = handle.$$.smartPtr;
								} else {
									throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
								}
								break;
							case 1:
								ptr = handle.$$.smartPtr;
								break;
							case 2:
								if (handle.$$.smartPtrType === this) {
									ptr = handle.$$.smartPtr;
								} else {
									var clonedHandle = handle["clone"]();
									ptr = this.rawShare(ptr, __emval_register(function () {
										clonedHandle["delete"]();
									}));
									if (destructors !== null) {
										destructors.push(this.rawDestructor, ptr);
									}
								}
								break;
							default:
								throwBindingError("Unsupporting sharing policy");
						}
					}
					return ptr;
				}
				function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
					if (handle === null) {
						if (this.isReference) {
							throwBindingError("null is not a valid " + this.name);
						}
						return 0;
					}
					if (!handle.$$) {
						throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
					}
					if (!handle.$$.ptr) {
						throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
					}
					if (handle.$$.ptrType.isConst) {
						throwBindingError("Cannot convert argument of type " + handle.$$.ptrType.name + " to parameter type " + this.name);
					}
					var handleClass = handle.$$.ptrType.registeredClass;
					var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
					return ptr;
				}
				function RegisteredPointer_getPointee(ptr) {
					if (this.rawGetPointee) {
						ptr = this.rawGetPointee(ptr);
					}
					return ptr;
				}
				function RegisteredPointer_destructor(ptr) {
					if (this.rawDestructor) {
						this.rawDestructor(ptr);
					}
				}
				function RegisteredPointer_deleteObject(handle) {
					if (handle !== null) {
						handle["delete"]();
					}
				}
				function downcastPointer(ptr, ptrClass, desiredClass) {
					if (ptrClass === desiredClass) {
						return ptr;
					}
					if (desiredClass.baseClass === void 0) {
						return null;
					}
					var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
					if (rv === null) {
						return null;
					}
					return desiredClass.downcast(rv);
				}
				function getInheritedInstanceCount() {
					return Object.keys(registeredInstances).length;
				}
				function getLiveInheritedInstances() {
					var rv = [];
					for (var k in registeredInstances) {
						if (registeredInstances.hasOwnProperty(k)) {
							rv.push(registeredInstances[k]);
						}
					}
					return rv;
				}
				function setDelayFunction(fn) {
					delayFunction = fn;
					if (deletionQueue.length && delayFunction) {
						delayFunction(flushPendingDeletes);
					}
				}
				function init_embind() {
					Module["getInheritedInstanceCount"] = getInheritedInstanceCount;
					Module["getLiveInheritedInstances"] = getLiveInheritedInstances;
					Module["flushPendingDeletes"] = flushPendingDeletes;
					Module["setDelayFunction"] = setDelayFunction;
				}
				var registeredInstances = {};
				function getBasestPointer(class_, ptr) {
					if (ptr === void 0) {
						throwBindingError("ptr should not be undefined");
					}
					while (class_.baseClass) {
						ptr = class_.upcast(ptr);
						class_ = class_.baseClass;
					}
					return ptr;
				}
				function getInheritedInstance(class_, ptr) {
					ptr = getBasestPointer(class_, ptr);
					return registeredInstances[ptr];
				}
				function makeClassHandle(prototype, record) {
					if (!record.ptrType || !record.ptr) {
						throwInternalError("makeClassHandle requires ptr and ptrType");
					}
					var hasSmartPtrType = !!record.smartPtrType;
					var hasSmartPtr = !!record.smartPtr;
					if (hasSmartPtrType !== hasSmartPtr) {
						throwInternalError("Both smartPtrType and smartPtr must be specified");
					}
					record.count = { value: 1 };
					return attachFinalizer(Object.create(prototype, { $$: { value: record } }));
				}
				function RegisteredPointer_fromWireType(ptr) {
					var rawPointer = this.getPointee(ptr);
					if (!rawPointer) {
						this.destructor(ptr);
						return null;
					}
					var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
					if (registeredInstance !== void 0) {
						if (registeredInstance.$$.count.value === 0) {
							registeredInstance.$$.ptr = rawPointer;
							registeredInstance.$$.smartPtr = ptr;
							return registeredInstance["clone"]();
						} else {
							var rv = registeredInstance["clone"]();
							this.destructor(ptr);
							return rv;
						}
					}
					function makeDefaultHandle() {
						if (this.isSmartPointer) {
							return makeClassHandle(this.registeredClass.instancePrototype, { ptrType: this.pointeeType, ptr: rawPointer, smartPtrType: this, smartPtr: ptr });
						} else {
							return makeClassHandle(this.registeredClass.instancePrototype, { ptrType: this, ptr });
						}
					}
					var actualType = this.registeredClass.getActualType(rawPointer);
					var registeredPointerRecord = registeredPointers[actualType];
					if (!registeredPointerRecord) {
						return makeDefaultHandle.call(this);
					}
					var toType;
					if (this.isConst) {
						toType = registeredPointerRecord.constPointerType;
					} else {
						toType = registeredPointerRecord.pointerType;
					}
					var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);
					if (dp === null) {
						return makeDefaultHandle.call(this);
					}
					if (this.isSmartPointer) {
						return makeClassHandle(toType.registeredClass.instancePrototype, { ptrType: toType, ptr: dp, smartPtrType: this, smartPtr: ptr });
					} else {
						return makeClassHandle(toType.registeredClass.instancePrototype, { ptrType: toType, ptr: dp });
					}
				}
				function init_RegisteredPointer() {
					RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
					RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
					RegisteredPointer.prototype["argPackAdvance"] = 8;
					RegisteredPointer.prototype["readValueFromPointer"] = simpleReadValueFromPointer;
					RegisteredPointer.prototype["deleteObject"] = RegisteredPointer_deleteObject;
					RegisteredPointer.prototype["fromWireType"] = RegisteredPointer_fromWireType;
				}
				function RegisteredPointer(name2, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
					this.name = name2;
					this.registeredClass = registeredClass;
					this.isReference = isReference;
					this.isConst = isConst;
					this.isSmartPointer = isSmartPointer;
					this.pointeeType = pointeeType;
					this.sharingPolicy = sharingPolicy;
					this.rawGetPointee = rawGetPointee;
					this.rawConstructor = rawConstructor;
					this.rawShare = rawShare;
					this.rawDestructor = rawDestructor;
					if (!isSmartPointer && registeredClass.baseClass === void 0) {
						if (isConst) {
							this["toWireType"] = constNoSmartPtrRawPointerToWireType;
							this.destructorFunction = null;
						} else {
							this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;
							this.destructorFunction = null;
						}
					} else {
						this["toWireType"] = genericPointerToWireType;
					}
				}
				function replacePublicSymbol(name2, value, numArguments) {
					if (!Module.hasOwnProperty(name2)) {
						throwInternalError("Replacing nonexistant public symbol");
					}
					if (Module[name2].overloadTable !== void 0 && numArguments !== void 0) {
						Module[name2].overloadTable[numArguments] = value;
					} else {
						Module[name2] = value;
						Module[name2].argCount = numArguments;
					}
				}
				function getDynCaller(sig, ptr) {
					assert(sig.indexOf("j") >= 0, "getDynCaller should only be called with i64 sigs");
					var argCache = [];
					return function () {
						argCache.length = arguments.length;
						for (var i = 0; i < arguments.length; i++) {
							argCache[i] = arguments[i];
						}
						return dynCall(sig, ptr, argCache);
					};
				}
				function embind__requireFunction(signature, rawFunction) {
					signature = readLatin1String(signature);
					function makeDynCaller() {
						if (signature.indexOf("j") != -1) {
							return getDynCaller(signature, rawFunction);
						}
						return wasmTable.get(rawFunction);
					}
					var fp = makeDynCaller();
					if (typeof fp !== "function") {
						throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
					}
					return fp;
				}
				var UnboundTypeError = void 0;
				function getTypeName(type) {
					var ptr = ___getTypeName(type);
					var rv = readLatin1String(ptr);
					_free(ptr);
					return rv;
				}
				function throwUnboundTypeError(message, types) {
					var unboundTypes = [];
					var seen = {};
					function visit(type) {
						if (seen[type]) {
							return;
						}
						if (registeredTypes[type]) {
							return;
						}
						if (typeDependencies[type]) {
							typeDependencies[type].forEach(visit);
							return;
						}
						unboundTypes.push(type);
						seen[type] = true;
					}
					types.forEach(visit);
					throw new UnboundTypeError(message + ": " + unboundTypes.map(getTypeName).join([", "]));
				}
				function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name2, destructorSignature, rawDestructor) {
					name2 = readLatin1String(name2);
					getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
					if (upcast) {
						upcast = embind__requireFunction(upcastSignature, upcast);
					}
					if (downcast) {
						downcast = embind__requireFunction(downcastSignature, downcast);
					}
					rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
					var legalFunctionName = makeLegalFunctionName(name2);
					exposePublicSymbol(legalFunctionName, function () {
						throwUnboundTypeError("Cannot construct " + name2 + " due to unbound types", [baseClassRawType]);
					});
					whenDependentTypesAreResolved([rawType, rawPointerType, rawConstPointerType], baseClassRawType ? [baseClassRawType] : [], function (base) {
						base = base[0];
						var baseClass;
						var basePrototype;
						if (baseClassRawType) {
							baseClass = base.registeredClass;
							basePrototype = baseClass.instancePrototype;
						} else {
							basePrototype = ClassHandle.prototype;
						}
						var constructor = createNamedFunction(legalFunctionName, function () {
							if (Object.getPrototypeOf(this) !== instancePrototype) {
								throw new BindingError("Use 'new' to construct " + name2);
							}
							if (registeredClass.constructor_body === void 0) {
								throw new BindingError(name2 + " has no accessible constructor");
							}
							var body = registeredClass.constructor_body[arguments.length];
							if (body === void 0) {
								throw new BindingError("Tried to invoke ctor of " + name2 + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
							}
							return body.apply(this, arguments);
						});
						var instancePrototype = Object.create(basePrototype, { constructor: { value: constructor } });
						constructor.prototype = instancePrototype;
						var registeredClass = new RegisteredClass(name2, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);
						var referenceConverter = new RegisteredPointer(name2, registeredClass, true, false, false);
						var pointerConverter = new RegisteredPointer(name2 + "*", registeredClass, false, false, false);
						var constPointerConverter = new RegisteredPointer(name2 + " const*", registeredClass, false, true, false);
						registeredPointers[rawType] = { pointerType: pointerConverter, constPointerType: constPointerConverter };
						replacePublicSymbol(legalFunctionName, constructor);
						return [referenceConverter, pointerConverter, constPointerConverter];
					});
				}
				function heap32VectorToArray(count, firstElement) {
					var array = [];
					for (var i = 0; i < count; i++) {
						array.push(GROWABLE_HEAP_I32()[(firstElement >> 2) + i]);
					}
					return array;
				}
				function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {
					assert(argCount > 0);
					var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
					invoker = embind__requireFunction(invokerSignature, invoker);
					var args = [rawConstructor];
					var destructors = [];
					whenDependentTypesAreResolved([], [rawClassType], function (classType) {
						classType = classType[0];
						var humanName = "constructor " + classType.name;
						if (classType.registeredClass.constructor_body === void 0) {
							classType.registeredClass.constructor_body = [];
						}
						if (classType.registeredClass.constructor_body[argCount - 1] !== void 0) {
							throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount - 1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
						}
						classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
							throwUnboundTypeError("Cannot construct " + classType.name + " due to unbound types", rawArgTypes);
						};
						whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {
							classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
								if (arguments.length !== argCount - 1) {
									throwBindingError(humanName + " called with " + arguments.length + " arguments, expected " + (argCount - 1));
								}
								destructors.length = 0;
								args.length = argCount;
								for (var i = 1; i < argCount; ++i) {
									args[i] = argTypes[i]["toWireType"](destructors, arguments[i - 1]);
								}
								var ptr = invoker.apply(null, args);
								runDestructors(destructors);
								return argTypes[0]["fromWireType"](ptr);
							};
							return [];
						});
						return [];
					});
				}
				function new_(constructor, argumentList) {
					if (!(constructor instanceof Function)) {
						throw new TypeError("new_ called with constructor type " + typeof constructor + " which is not a function");
					}
					var dummy = createNamedFunction(constructor.name || "unknownFunctionName", function () {
					});
					dummy.prototype = constructor.prototype;
					var obj = new dummy();
					var r = constructor.apply(obj, argumentList);
					return r instanceof Object ? r : obj;
				}
				function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
					var argCount = argTypes.length;
					if (argCount < 2) {
						throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
					}
					var isClassMethodFunc = argTypes[1] !== null && classType !== null;
					var needsDestructorStack = false;
					for (var i = 1; i < argTypes.length; ++i) {
						if (argTypes[i] !== null && argTypes[i].destructorFunction === void 0) {
							needsDestructorStack = true;
							break;
						}
					}
					var returns = argTypes[0].name !== "void";
					var argsList = "";
					var argsListWired = "";
					for (var i = 0; i < argCount - 2; ++i) {
						argsList += (i !== 0 ? ", " : "") + "arg" + i;
						argsListWired += (i !== 0 ? ", " : "") + "arg" + i + "Wired";
					}
					var invokerFnBody = "return function " + makeLegalFunctionName(humanName) + "(" + argsList + ") {\nif (arguments.length !== " + (argCount - 2) + ") {\nthrowBindingError('function " + humanName + " called with ' + arguments.length + ' arguments, expected " + (argCount - 2) + " args!');\n}\n";
					if (needsDestructorStack) {
						invokerFnBody += "var destructors = [];\n";
					}
					var dtorStack = needsDestructorStack ? "destructors" : "null";
					var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
					var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
					if (isClassMethodFunc) {
						invokerFnBody += "var thisWired = classParam.toWireType(" + dtorStack + ", this);\n";
					}
					for (var i = 0; i < argCount - 2; ++i) {
						invokerFnBody += "var arg" + i + "Wired = argType" + i + ".toWireType(" + dtorStack + ", arg" + i + "); // " + argTypes[i + 2].name + "\n";
						args1.push("argType" + i);
						args2.push(argTypes[i + 2]);
					}
					if (isClassMethodFunc) {
						argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
					}
					invokerFnBody += (returns ? "var rv = " : "") + "invoker(fn" + (argsListWired.length > 0 ? ", " : "") + argsListWired + ");\n";
					if (needsDestructorStack) {
						invokerFnBody += "runDestructors(destructors);\n";
					} else {
						for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
							var paramName = i === 1 ? "thisWired" : "arg" + (i - 2) + "Wired";
							if (argTypes[i].destructorFunction !== null) {
								invokerFnBody += paramName + "_dtor(" + paramName + "); // " + argTypes[i].name + "\n";
								args1.push(paramName + "_dtor");
								args2.push(argTypes[i].destructorFunction);
							}
						}
					}
					if (returns) {
						invokerFnBody += "var ret = retType.fromWireType(rv);\nreturn ret;\n";
					}
					invokerFnBody += "}\n";
					args1.push(invokerFnBody);
					var invokerFunction = new_(Function, args1).apply(null, args2);
					return invokerFunction;
				}
				function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {
					var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
					methodName = readLatin1String(methodName);
					rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
					whenDependentTypesAreResolved([], [rawClassType], function (classType) {
						classType = classType[0];
						var humanName = classType.name + "." + methodName;
						if (isPureVirtual) {
							classType.registeredClass.pureVirtualFunctions.push(methodName);
						}
						function unboundTypesHandler() {
							throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes);
						}
						var proto = classType.registeredClass.instancePrototype;
						var method = proto[methodName];
						if (method === void 0 || method.overloadTable === void 0 && method.className !== classType.name && method.argCount === argCount - 2) {
							unboundTypesHandler.argCount = argCount - 2;
							unboundTypesHandler.className = classType.name;
							proto[methodName] = unboundTypesHandler;
						} else {
							ensureOverloadTable(proto, methodName, humanName);
							proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
						}
						whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {
							var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
							if (proto[methodName].overloadTable === void 0) {
								memberFunction.argCount = argCount - 2;
								proto[methodName] = memberFunction;
							} else {
								proto[methodName].overloadTable[argCount - 2] = memberFunction;
							}
							return [];
						});
						return [];
					});
				}
				var emval_free_list = [];
				var emval_handle_array = [{}, { value: void 0 }, { value: null }, { value: true }, { value: false }];
				function __emval_decref(handle) {
					if (handle > 4 && --emval_handle_array[handle].refcount === 0) {
						emval_handle_array[handle] = void 0;
						emval_free_list.push(handle);
					}
				}
				function count_emval_handles() {
					var count = 0;
					for (var i = 5; i < emval_handle_array.length; ++i) {
						if (emval_handle_array[i] !== void 0) {
							++count;
						}
					}
					return count;
				}
				function get_first_emval() {
					for (var i = 5; i < emval_handle_array.length; ++i) {
						if (emval_handle_array[i] !== void 0) {
							return emval_handle_array[i];
						}
					}
					return null;
				}
				function init_emval() {
					Module["count_emval_handles"] = count_emval_handles;
					Module["get_first_emval"] = get_first_emval;
				}
				function __emval_register(value) {
					switch (value) {
						case void 0: {
							return 1;
						}
						case null: {
							return 2;
						}
						case true: {
							return 3;
						}
						case false: {
							return 4;
						}
						default: {
							var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
							emval_handle_array[handle] = { refcount: 1, value };
							return handle;
						}
					}
				}
				function __embind_register_emval(rawType, name2) {
					name2 = readLatin1String(name2);
					registerType(rawType, {
						name: name2, "fromWireType": function (handle) {
							var rv = emval_handle_array[handle].value;
							__emval_decref(handle);
							return rv;
						}, "toWireType": function (destructors, value) {
							return __emval_register(value);
						}, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: null
					});
				}
				function enumReadValueFromPointer(name2, shift, signed) {
					switch (shift) {
						case 0:
							return function (pointer) {
								var heap = signed ? GROWABLE_HEAP_I8() : GROWABLE_HEAP_U8();
								return this["fromWireType"](heap[pointer >>> 0]);
							};
						case 1:
							return function (pointer) {
								var heap = signed ? GROWABLE_HEAP_I16() : GROWABLE_HEAP_U16();
								return this["fromWireType"](heap[pointer >>> 1]);
							};
						case 2:
							return function (pointer) {
								var heap = signed ? GROWABLE_HEAP_I32() : GROWABLE_HEAP_U32();
								return this["fromWireType"](heap[pointer >>> 2]);
							};
						default:
							throw new TypeError("Unknown integer type: " + name2);
					}
				}
				function __embind_register_enum(rawType, name2, size, isSigned) {
					var shift = getShiftFromSize(size);
					name2 = readLatin1String(name2);
					function ctor() {
					}
					ctor.values = {};
					registerType(rawType, {
						name: name2, constructor: ctor, "fromWireType": function (c) {
							return this.constructor.values[c];
						}, "toWireType": function (destructors, c) {
							return c.value;
						}, "argPackAdvance": 8, "readValueFromPointer": enumReadValueFromPointer(name2, shift, isSigned), destructorFunction: null
					});
					exposePublicSymbol(name2, ctor);
				}
				function requireRegisteredType(rawType, humanName) {
					var impl = registeredTypes[rawType];
					if (impl === void 0) {
						throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
					}
					return impl;
				}
				function __embind_register_enum_value(rawEnumType, name2, enumValue) {
					var enumType = requireRegisteredType(rawEnumType, "enum");
					name2 = readLatin1String(name2);
					var Enum = enumType.constructor;
					var Value2 = Object.create(enumType.constructor.prototype, {
						value: { value: enumValue }, constructor: {
							value: createNamedFunction(enumType.name + "_" + name2, function () {
							})
						}
					});
					Enum.values[enumValue] = Value2;
					Enum[name2] = Value2;
				}
				function _embind_repr(v) {
					if (v === null) {
						return "null";
					}
					var t = typeof v;
					if (t === "object" || t === "array" || t === "function") {
						return v.toString();
					} else {
						return "" + v;
					}
				}
				function floatReadValueFromPointer(name2, shift) {
					switch (shift) {
						case 2:
							return function (pointer) {
								return this["fromWireType"](GROWABLE_HEAP_F32()[pointer >> 2]);
							};
						case 3:
							return function (pointer) {
								return this["fromWireType"](GROWABLE_HEAP_F64()[pointer >> 3]);
							};
						default:
							throw new TypeError("Unknown float type: " + name2);
					}
				}
				function __embind_register_float(rawType, name2, size) {
					var shift = getShiftFromSize(size);
					name2 = readLatin1String(name2);
					registerType(rawType, {
						name: name2, "fromWireType": function (value) {
							return value;
						}, "toWireType": function (destructors, value) {
							if (typeof value !== "number" && typeof value !== "boolean") {
								throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
							}
							return value;
						}, "argPackAdvance": 8, "readValueFromPointer": floatReadValueFromPointer(name2, shift), destructorFunction: null
					});
				}
				function __embind_register_function(name2, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
					var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
					name2 = readLatin1String(name2);
					rawInvoker = embind__requireFunction(signature, rawInvoker);
					exposePublicSymbol(name2, function () {
						throwUnboundTypeError("Cannot call " + name2 + " due to unbound types", argTypes);
					}, argCount - 1);
					whenDependentTypesAreResolved([], argTypes, function (argTypes2) {
						var invokerArgsArray = [argTypes2[0], null].concat(argTypes2.slice(1));
						replacePublicSymbol(name2, craftInvokerFunction(name2, invokerArgsArray, null, rawInvoker, fn), argCount - 1);
						return [];
					});
				}
				function integerReadValueFromPointer(name2, shift, signed) {
					switch (shift) {
						case 0:
							return signed ? function readS8FromPointer(pointer) {
								return GROWABLE_HEAP_I8()[pointer];
							} : function readU8FromPointer(pointer) {
								return GROWABLE_HEAP_U8()[pointer];
							};
						case 1:
							return signed ? function readS16FromPointer(pointer) {
								return GROWABLE_HEAP_I16()[pointer >> 1];
							} : function readU16FromPointer(pointer) {
								return GROWABLE_HEAP_U16()[pointer >> 1];
							};
						case 2:
							return signed ? function readS32FromPointer(pointer) {
								return GROWABLE_HEAP_I32()[pointer >> 2];
							} : function readU32FromPointer(pointer) {
								return GROWABLE_HEAP_U32()[pointer >> 2];
							};
						default:
							throw new TypeError("Unknown integer type: " + name2);
					}
				}
				function __embind_register_integer(primitiveType, name2, size, minRange, maxRange) {
					name2 = readLatin1String(name2);
					if (maxRange === -1) {
						maxRange = 4294967295;
					}
					var shift = getShiftFromSize(size);
					var fromWireType = function (value) {
						return value;
					};
					if (minRange === 0) {
						var bitshift = 32 - 8 * size;
						fromWireType = function (value) {
							return value << bitshift >>> bitshift;
						};
					}
					var isUnsignedType = name2.indexOf("unsigned") != -1;
					registerType(primitiveType, {
						name: name2, "fromWireType": fromWireType, "toWireType": function (destructors, value) {
							if (typeof value !== "number" && typeof value !== "boolean") {
								throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
							}
							if (value < minRange || value > maxRange) {
								throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name2 + '", which is outside the valid range [' + minRange + ", " + maxRange + "]!");
							}
							return isUnsignedType ? value >>> 0 : value | 0;
						}, "argPackAdvance": 8, "readValueFromPointer": integerReadValueFromPointer(name2, shift, minRange !== 0), destructorFunction: null
					});
				}
				function __embind_register_memory_view(rawType, dataTypeIndex, name2) {
					var typeMapping = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];
					var TA = typeMapping[dataTypeIndex];
					function decodeMemoryView(handle) {
						handle = handle >> 2;
						var heap = GROWABLE_HEAP_U32();
						var size = heap[handle >>> 0];
						var data = heap[handle + 1 >>> 0];
						return new TA(buffer, data, size);
					}
					name2 = readLatin1String(name2);
					registerType(rawType, { name: name2, "fromWireType": decodeMemoryView, "argPackAdvance": 8, "readValueFromPointer": decodeMemoryView }, { ignoreDuplicateRegistrations: true });
				}
				function __embind_register_std_string(rawType, name2) {
					name2 = readLatin1String(name2);
					var stdStringIsUTF8 = name2 === "std::string";
					registerType(rawType, {
						name: name2, "fromWireType": function (value) {
							var length = GROWABLE_HEAP_U32()[value >> 2];
							var str;
							if (stdStringIsUTF8) {
								var decodeStartPtr = value + 4;
								for (var i = 0; i <= length; ++i) {
									var currentBytePtr = value + 4 + i;
									if (i == length || GROWABLE_HEAP_U8()[currentBytePtr] == 0) {
										var maxRead = currentBytePtr - decodeStartPtr;
										var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
										if (str === void 0) {
											str = stringSegment;
										} else {
											str += String.fromCharCode(0);
											str += stringSegment;
										}
										decodeStartPtr = currentBytePtr + 1;
									}
								}
							} else {
								var a = new Array(length);
								for (var i = 0; i < length; ++i) {
									a[i] = String.fromCharCode(GROWABLE_HEAP_U8()[value + 4 + i]);
								}
								str = a.join("");
							}
							_free(value);
							return str;
						}, "toWireType": function (destructors, value) {
							if (value instanceof ArrayBuffer) {
								value = new Uint8Array(value);
							}
							var getLength;
							var valueIsOfTypeString = typeof value === "string";
							if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
								throwBindingError("Cannot pass non-string to std::string");
							}
							if (stdStringIsUTF8 && valueIsOfTypeString) {
								getLength = function () {
									return lengthBytesUTF8(value);
								};
							} else {
								getLength = function () {
									return value.length;
								};
							}
							var length = getLength();
							var ptr = _malloc(4 + length + 1);
							ptr >>>= 0;
							GROWABLE_HEAP_U32()[ptr >> 2] = length;
							if (stdStringIsUTF8 && valueIsOfTypeString) {
								stringToUTF8(value, ptr + 4, length + 1);
							} else {
								if (valueIsOfTypeString) {
									for (var i = 0; i < length; ++i) {
										var charCode = value.charCodeAt(i);
										if (charCode > 255) {
											_free(ptr);
											throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
										}
										GROWABLE_HEAP_U8()[ptr + 4 + i] = charCode;
									}
								} else {
									for (var i = 0; i < length; ++i) {
										GROWABLE_HEAP_U8()[ptr + 4 + i] = value[i];
									}
								}
							}
							if (destructors !== null) {
								destructors.push(_free, ptr);
							}
							return ptr;
						}, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: function (ptr) {
							_free(ptr);
						}
					});
				}
				function __embind_register_std_wstring(rawType, charSize, name2) {
					name2 = readLatin1String(name2);
					var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
					if (charSize === 2) {
						decodeString = UTF16ToString;
						encodeString = stringToUTF16;
						lengthBytesUTF = lengthBytesUTF16;
						getHeap = function () {
							return GROWABLE_HEAP_U16();
						};
						shift = 1;
					} else if (charSize === 4) {
						decodeString = UTF32ToString;
						encodeString = stringToUTF32;
						lengthBytesUTF = lengthBytesUTF32;
						getHeap = function () {
							return GROWABLE_HEAP_U32();
						};
						shift = 2;
					}
					registerType(rawType, {
						name: name2, "fromWireType": function (value) {
							var length = GROWABLE_HEAP_U32()[value >> 2];
							var HEAP = getHeap();
							var str;
							var decodeStartPtr = value + 4;
							for (var i = 0; i <= length; ++i) {
								var currentBytePtr = value + 4 + i * charSize;
								if (i == length || HEAP[currentBytePtr >>> shift] == 0) {
									var maxReadBytes = currentBytePtr - decodeStartPtr;
									var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
									if (str === void 0) {
										str = stringSegment;
									} else {
										str += String.fromCharCode(0);
										str += stringSegment;
									}
									decodeStartPtr = currentBytePtr + charSize;
								}
							}
							_free(value);
							return str;
						}, "toWireType": function (destructors, value) {
							if (!(typeof value === "string")) {
								throwBindingError("Cannot pass non-string to C++ string type " + name2);
							}
							var length = lengthBytesUTF(value);
							var ptr = _malloc(4 + length + charSize);
							ptr >>>= 0;
							GROWABLE_HEAP_U32()[ptr >> 2] = length >> shift;
							encodeString(value, ptr + 4, length + charSize);
							if (destructors !== null) {
								destructors.push(_free, ptr);
							}
							return ptr;
						}, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: function (ptr) {
							_free(ptr);
						}
					});
				}
				function __embind_register_value_array(rawType, name2, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
					tupleRegistrations[rawType] = { name: readLatin1String(name2), rawConstructor: embind__requireFunction(constructorSignature, rawConstructor), rawDestructor: embind__requireFunction(destructorSignature, rawDestructor), elements: [] };
				}
				function __embind_register_value_array_element(rawTupleType, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
					tupleRegistrations[rawTupleType].elements.push({ getterReturnType, getter: embind__requireFunction(getterSignature, getter), getterContext, setterArgumentType, setter: embind__requireFunction(setterSignature, setter), setterContext });
				}
				function __embind_register_value_object(rawType, name2, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
					structRegistrations[rawType] = { name: readLatin1String(name2), rawConstructor: embind__requireFunction(constructorSignature, rawConstructor), rawDestructor: embind__requireFunction(destructorSignature, rawDestructor), fields: [] };
				}
				function __embind_register_value_object_field(structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
					structRegistrations[structType].fields.push({ fieldName: readLatin1String(fieldName), getterReturnType, getter: embind__requireFunction(getterSignature, getter), getterContext, setterArgumentType, setter: embind__requireFunction(setterSignature, setter), setterContext });
				}
				function __embind_register_void(rawType, name2) {
					name2 = readLatin1String(name2);
					registerType(rawType, {
						isVoid: true, name: name2, "argPackAdvance": 0, "fromWireType": function () {
							return void 0;
						}, "toWireType": function (destructors, o) {
							return void 0;
						}
					});
				}
				function __emscripten_notify_thread_queue(targetThreadId, mainThreadId) {
					if (targetThreadId == mainThreadId) {
						postMessage({ "cmd": "processQueuedMainThreadWork" });
					} else if (ENVIRONMENT_IS_PTHREAD) {
						postMessage({ "targetThread": targetThreadId, "cmd": "processThreadQueue" });
					} else {
						var pthread = PThread.pthreads[targetThreadId];
						var worker = pthread && pthread.worker;
						if (!worker) {
							return;
						}
						worker.postMessage({ "cmd": "processThreadQueue" });
					}
					return 1;
				}
				function requireHandle(handle) {
					if (!handle) {
						throwBindingError("Cannot use deleted val. handle = " + handle);
					}
					return emval_handle_array[handle].value;
				}
				function __emval_as(handle, returnType, destructorsRef) {
					handle = requireHandle(handle);
					returnType = requireRegisteredType(returnType, "emval::as");
					var destructors = [];
					var rd = __emval_register(destructors);
					GROWABLE_HEAP_I32()[destructorsRef >> 2] = rd;
					return returnType["toWireType"](destructors, handle);
				}
				function __emval_lookupTypes(argCount, argTypes) {
					var a = new Array(argCount);
					for (var i = 0; i < argCount; ++i) {
						a[i] = requireRegisteredType(GROWABLE_HEAP_I32()[(argTypes >> 2) + i], "parameter " + i);
					}
					return a;
				}
				function __emval_call(handle, argCount, argTypes, argv) {
					handle = requireHandle(handle);
					var types = __emval_lookupTypes(argCount, argTypes);
					var args = new Array(argCount);
					for (var i = 0; i < argCount; ++i) {
						var type = types[i];
						args[i] = type["readValueFromPointer"](argv);
						argv += type["argPackAdvance"];
					}
					var rv = handle.apply(void 0, args);
					return __emval_register(rv);
				}
				var emval_symbols = {};
				function getStringOrSymbol(address) {
					var symbol = emval_symbols[address];
					if (symbol === void 0) {
						return readLatin1String(address);
					} else {
						return symbol;
					}
				}
				function emval_get_global() {
					if (typeof globalThis === "object") {
						return globalThis;
					}
					return function () {
						return Function;
					}()("return this")();
				}
				function __emval_get_global(name2) {
					if (name2 === 0) {
						return __emval_register(emval_get_global());
					} else {
						name2 = getStringOrSymbol(name2);
						return __emval_register(emval_get_global()[name2]);
					}
				}
				function __emval_get_property(handle, key2) {
					handle = requireHandle(handle);
					key2 = requireHandle(key2);
					return __emval_register(handle[key2]);
				}
				function __emval_incref(handle) {
					if (handle > 4) {
						emval_handle_array[handle].refcount += 1;
					}
				}
				function __emval_instanceof(object, constructor) {
					object = requireHandle(object);
					constructor = requireHandle(constructor);
					return object instanceof constructor;
				}
				function __emval_is_number(handle) {
					handle = requireHandle(handle);
					return typeof handle === "number";
				}
				function __emval_new_array() {
					return __emval_register([]);
				}
				function __emval_new_cstring(v) {
					return __emval_register(getStringOrSymbol(v));
				}
				function __emval_new_object() {
					return __emval_register({});
				}
				function __emval_run_destructors(handle) {
					var destructors = emval_handle_array[handle].value;
					runDestructors(destructors);
					__emval_decref(handle);
				}
				function __emval_set_property(handle, key2, value) {
					handle = requireHandle(handle);
					key2 = requireHandle(key2);
					value = requireHandle(value);
					handle[key2] = value;
				}
				function __emval_take_value(type, argv) {
					type = requireRegisteredType(type, "_emval_take_value");
					var v = type["readValueFromPointer"](argv);
					return __emval_register(v);
				}
				function _abort() {
					abort();
				}
				function _emscripten_asm_const_int(code, sigPtr, argbuf) {
					var args = readAsmConstArgs(sigPtr, argbuf);
					return ASM_CONSTS[code].apply(null, args);
				}
				function _emscripten_check_blocking_allowed() {
					if (ENVIRONMENT_IS_NODE)
						return;
					if (ENVIRONMENT_IS_WORKER)
						return;
					warnOnce("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread");
				}
				function _emscripten_conditional_set_current_thread_status(expectedStatus, newStatus) {
				}
				function _emscripten_futex_wait(addr, val, timeout) {
					if (addr <= 0 || addr > GROWABLE_HEAP_I8().length || addr & true)
						return -28;
					if (!ENVIRONMENT_IS_WEB) {
						var ret = Atomics.wait(GROWABLE_HEAP_I32(), addr >> 2, val, timeout);
						if (ret === "timed-out")
							return -73;
						if (ret === "not-equal")
							return -6;
						if (ret === "ok")
							return 0;
						throw "Atomics.wait returned an unexpected value " + ret;
					} else {
						if (Atomics.load(GROWABLE_HEAP_I32(), addr >> 2) != val) {
							return -6;
						}
						var tNow = performance.now();
						var tEnd = tNow + timeout;
						var lastAddr = Atomics.exchange(GROWABLE_HEAP_I32(), PThread.mainThreadFutex >> 2, addr);
						while (1) {
							tNow = performance.now();
							if (tNow > tEnd) {
								lastAddr = Atomics.exchange(GROWABLE_HEAP_I32(), PThread.mainThreadFutex >> 2, 0);
								return -73;
							}
							lastAddr = Atomics.exchange(GROWABLE_HEAP_I32(), PThread.mainThreadFutex >> 2, 0);
							if (lastAddr == 0) {
								break;
							}
							_emscripten_main_thread_process_queued_calls();
							if (Atomics.load(GROWABLE_HEAP_I32(), addr >> 2) != val) {
								return -6;
							}
							lastAddr = Atomics.exchange(GROWABLE_HEAP_I32(), PThread.mainThreadFutex >> 2, addr);
						}
						return 0;
					}
				}
				function _emscripten_is_main_browser_thread() {
					return __pthread_is_main_browser_thread | 0;
				}
				function _emscripten_is_main_runtime_thread() {
					return __pthread_is_main_runtime_thread | 0;
				}
				function _emscripten_memcpy_big(dest, src, num) {
					GROWABLE_HEAP_U8().copyWithin(dest, src, src + num);
				}
				function _emscripten_proxy_to_main_thread_js(index, sync) {
					var numCallArgs = arguments.length - 2;
					var stack = stackSave();
					var args = stackAlloc(numCallArgs * 8);
					var b = args >> 3;
					for (var i = 0; i < numCallArgs; i++) {
						GROWABLE_HEAP_F64()[b + i] = arguments[2 + i];
					}
					var ret = _emscripten_run_in_main_runtime_thread_js(index, numCallArgs, args, sync);
					stackRestore(stack);
					return ret;
				}
				var _emscripten_receive_on_main_thread_js_callArgs = [];
				var readAsmConstArgsArray = [];
				function readAsmConstArgs(sigPtr, buf) {
					readAsmConstArgsArray.length = 0;
					var ch;
					buf >>= 2;
					while (ch = GROWABLE_HEAP_U8()[sigPtr++]) {
						var double = ch < 105;
						if (double && buf & 1)
							buf++;
						readAsmConstArgsArray.push(double ? GROWABLE_HEAP_F64()[buf++ >> 1] : GROWABLE_HEAP_I32()[buf]);
						++buf;
					}
					return readAsmConstArgsArray;
				}
				function _emscripten_receive_on_main_thread_js(index, numCallArgs, args) {
					_emscripten_receive_on_main_thread_js_callArgs.length = numCallArgs;
					var b = args >> 3;
					for (var i = 0; i < numCallArgs; i++) {
						_emscripten_receive_on_main_thread_js_callArgs[i] = GROWABLE_HEAP_F64()[b + i];
					}
					var isEmAsmConst = index < 0;
					var func = !isEmAsmConst ? proxiedFunctionTable[index] : ASM_CONSTS[-index - 1];
					return func.apply(null, _emscripten_receive_on_main_thread_js_callArgs);
				}
				function _emscripten_get_heap_size() {
					return GROWABLE_HEAP_U8().length;
				}
				function emscripten_realloc_buffer(size) {
					try {
						wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
						updateGlobalBufferAndViews(wasmMemory.buffer);
						return 1;
					} catch (e) {
					}
				}
				function _emscripten_resize_heap(requestedSize) {
					requestedSize = requestedSize >>> 0;
					var oldSize = _emscripten_get_heap_size();
					if (requestedSize <= oldSize) {
						return false;
					}
					var maxHeapSize = 4294967296;
					if (requestedSize > maxHeapSize) {
						return false;
					}
					var minHeapSize = 16777216;
					for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
						var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);
						overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
						var newSize = Math.min(maxHeapSize, alignUp(Math.max(minHeapSize, requestedSize, overGrownHeapSize), 65536));
						var replacement = emscripten_realloc_buffer(newSize);
						if (replacement) {
							return true;
						}
					}
					return false;
				}
				var JSEvents = {
					inEventHandler: 0, removeAllEventListeners: function () {
						for (var i = JSEvents.eventHandlers.length - 1; i >= 0; --i) {
							JSEvents._removeHandler(i);
						}
						JSEvents.eventHandlers = [];
						JSEvents.deferredCalls = [];
					}, registerRemoveEventListeners: function () {
						if (!JSEvents.removeEventListenersRegistered) {
							JSEvents.removeEventListenersRegistered = true;
						}
					}, deferredCalls: [], deferCall: function (targetFunction, precedence, argsList) {
						function arraysHaveEqualContent(arrA, arrB) {
							if (arrA.length != arrB.length)
								return false;
							for (var i2 in arrA) {
								if (arrA[i2] != arrB[i2])
									return false;
							}
							return true;
						}
						for (var i in JSEvents.deferredCalls) {
							var call = JSEvents.deferredCalls[i];
							if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
								return;
							}
						}
						JSEvents.deferredCalls.push({ targetFunction, precedence, argsList });
						JSEvents.deferredCalls.sort(function (x, y) {
							return x.precedence < y.precedence;
						});
					}, removeDeferredCalls: function (targetFunction) {
						for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
							if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
								JSEvents.deferredCalls.splice(i, 1);
								--i;
							}
						}
					}, canPerformEventHandlerRequests: function () {
						return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
					}, runDeferredCalls: function () {
						if (!JSEvents.canPerformEventHandlerRequests()) {
							return;
						}
						for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
							var call = JSEvents.deferredCalls[i];
							JSEvents.deferredCalls.splice(i, 1);
							--i;
							call.targetFunction.apply(null, call.argsList);
						}
					}, eventHandlers: [], removeAllHandlersOnTarget: function (target, eventTypeString) {
						for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
							if (JSEvents.eventHandlers[i].target == target && (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
								JSEvents._removeHandler(i--);
							}
						}
					}, _removeHandler: function (i) {
						var h = JSEvents.eventHandlers[i];
						h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
						JSEvents.eventHandlers.splice(i, 1);
					}, registerOrRemoveHandler: function (eventHandler) {
						var jsEventHandler = function jsEventHandler2(event) {
							++JSEvents.inEventHandler;
							JSEvents.currentEventHandler = eventHandler;
							JSEvents.runDeferredCalls();
							eventHandler.handlerFunc(event);
							JSEvents.runDeferredCalls();
							--JSEvents.inEventHandler;
						};
						if (eventHandler.callbackfunc) {
							eventHandler.eventListenerFunc = jsEventHandler;
							eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
							JSEvents.eventHandlers.push(eventHandler);
							JSEvents.registerRemoveEventListeners();
						} else {
							for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
								if (JSEvents.eventHandlers[i].target == eventHandler.target && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
									JSEvents._removeHandler(i--);
								}
							}
						}
					}, queueEventHandlerOnThread_iiii: function (targetThread, eventHandlerFunc, eventTypeId, eventData, userData) {
						var stackTop = stackSave();
						var varargs = stackAlloc(12);
						GROWABLE_HEAP_I32()[varargs >> 2] = eventTypeId;
						GROWABLE_HEAP_I32()[varargs + 4 >> 2] = eventData;
						GROWABLE_HEAP_I32()[varargs + 8 >> 2] = userData;
						__emscripten_call_on_thread(0, targetThread, 637534208, eventHandlerFunc, eventData, varargs);
						stackRestore(stackTop);
					}, getTargetThreadForEventCallback: function (targetThread) {
						switch (targetThread) {
							case 1:
								return 0;
							case 2:
								return PThread.currentProxiedOperationCallerThread;
							default:
								return targetThread;
						}
					}, getNodeNameForTarget: function (target) {
						if (!target)
							return "";
						if (target == window)
							return "#window";
						if (target == screen)
							return "#screen";
						return target && target.nodeName ? target.nodeName : "";
					}, fullscreenEnabled: function () {
						return document.fullscreenEnabled || document.webkitFullscreenEnabled;
					}
				};
				function stringToNewUTF8(jsString) {
					var length = lengthBytesUTF8(jsString) + 1;
					var cString = _malloc(length);
					stringToUTF8(jsString, cString, length);
					return cString;
				}
				function _emscripten_set_offscreencanvas_size_on_target_thread_js(targetThread, targetCanvas, width, height) {
					var stackTop = stackSave();
					var varargs = stackAlloc(12);
					var targetCanvasPtr = 0;
					if (targetCanvas) {
						targetCanvasPtr = stringToNewUTF8(targetCanvas);
					}
					GROWABLE_HEAP_I32()[varargs >> 2] = targetCanvasPtr;
					GROWABLE_HEAP_I32()[varargs + 4 >> 2] = width;
					GROWABLE_HEAP_I32()[varargs + 8 >> 2] = height;
					__emscripten_call_on_thread(0, targetThread, 657457152, 0, targetCanvasPtr, varargs);
					stackRestore(stackTop);
				}
				function _emscripten_set_offscreencanvas_size_on_target_thread(targetThread, targetCanvas, width, height) {
					targetCanvas = targetCanvas ? UTF8ToString(targetCanvas) : "";
					_emscripten_set_offscreencanvas_size_on_target_thread_js(targetThread, targetCanvas, width, height);
				}
				function maybeCStringToJsString(cString) {
					return cString > 2 ? UTF8ToString(cString) : cString;
				}
				var specialHTMLTargets = [0, typeof document !== "undefined" ? document : 0, typeof window !== "undefined" ? window : 0];
				function findEventTarget(target) {
					target = maybeCStringToJsString(target);
					var domElement = specialHTMLTargets[target] || (typeof document !== "undefined" ? document.querySelector(target) : void 0);
					return domElement;
				}
				function findCanvasEventTarget(target) {
					return findEventTarget(target);
				}
				function _emscripten_set_canvas_element_size_calling_thread(target, width, height) {
					var canvas = findCanvasEventTarget(target);
					if (!canvas)
						return -4;
					if (canvas.canvasSharedPtr) {
						GROWABLE_HEAP_I32()[canvas.canvasSharedPtr >> 2] = width;
						GROWABLE_HEAP_I32()[canvas.canvasSharedPtr + 4 >> 2] = height;
					}
					if (canvas.offscreenCanvas || !canvas.controlTransferredOffscreen) {
						if (canvas.offscreenCanvas)
							canvas = canvas.offscreenCanvas;
						var autoResizeViewport = false;
						if (canvas.GLctxObject && canvas.GLctxObject.GLctx) {
							var prevViewport = canvas.GLctxObject.GLctx.getParameter(2978);
							autoResizeViewport = prevViewport[0] === 0 && prevViewport[1] === 0 && prevViewport[2] === canvas.width && prevViewport[3] === canvas.height;
						}
						canvas.width = width;
						canvas.height = height;
						if (autoResizeViewport) {
							canvas.GLctxObject.GLctx.viewport(0, 0, width, height);
						}
					} else if (canvas.canvasSharedPtr) {
						var targetThread = GROWABLE_HEAP_I32()[canvas.canvasSharedPtr + 8 >> 2];
						_emscripten_set_offscreencanvas_size_on_target_thread(targetThread, target, width, height);
						return 1;
					} else {
						return -4;
					}
					return 0;
				}
				function _emscripten_set_canvas_element_size_main_thread(target, width, height) {
					if (ENVIRONMENT_IS_PTHREAD)
						return _emscripten_proxy_to_main_thread_js(4, 1, target, width, height);
					return _emscripten_set_canvas_element_size_calling_thread(target, width, height);
				}
				function _emscripten_set_canvas_element_size(target, width, height) {
					var canvas = findCanvasEventTarget(target);
					if (canvas) {
						return _emscripten_set_canvas_element_size_calling_thread(target, width, height);
					} else {
						return _emscripten_set_canvas_element_size_main_thread(target, width, height);
					}
				}
				function _emscripten_set_current_thread_status(newStatus) {
				}
				function __webgl_enable_ANGLE_instanced_arrays(ctx) {
					var ext = ctx.getExtension("ANGLE_instanced_arrays");
					if (ext) {
						ctx["vertexAttribDivisor"] = function (index, divisor) {
							ext["vertexAttribDivisorANGLE"](index, divisor);
						};
						ctx["drawArraysInstanced"] = function (mode, first, count, primcount) {
							ext["drawArraysInstancedANGLE"](mode, first, count, primcount);
						};
						ctx["drawElementsInstanced"] = function (mode, count, type, indices, primcount) {
							ext["drawElementsInstancedANGLE"](mode, count, type, indices, primcount);
						};
						return 1;
					}
				}
				function __webgl_enable_OES_vertex_array_object(ctx) {
					var ext = ctx.getExtension("OES_vertex_array_object");
					if (ext) {
						ctx["createVertexArray"] = function () {
							return ext["createVertexArrayOES"]();
						};
						ctx["deleteVertexArray"] = function (vao) {
							ext["deleteVertexArrayOES"](vao);
						};
						ctx["bindVertexArray"] = function (vao) {
							ext["bindVertexArrayOES"](vao);
						};
						ctx["isVertexArray"] = function (vao) {
							return ext["isVertexArrayOES"](vao);
						};
						return 1;
					}
				}
				function __webgl_enable_WEBGL_draw_buffers(ctx) {
					var ext = ctx.getExtension("WEBGL_draw_buffers");
					if (ext) {
						ctx["drawBuffers"] = function (n, bufs) {
							ext["drawBuffersWEBGL"](n, bufs);
						};
						return 1;
					}
				}
				function __webgl_enable_WEBGL_multi_draw(ctx) {
					return !!(ctx.multiDrawWebgl = ctx.getExtension("WEBGL_multi_draw"));
				}
				var GL = {
					counter: 1, buffers: [], programs: [], framebuffers: [], renderbuffers: [], textures: [], uniforms: [], shaders: [], vaos: [], contexts: {}, offscreenCanvases: {}, timerQueriesEXT: [], programInfos: {}, stringCache: {}, unpackAlignment: 4, recordError: function recordError(errorCode) {
						if (!GL.lastError) {
							GL.lastError = errorCode;
						}
					}, getNewId: function (table) {
						var ret = GL.counter++;
						for (var i = table.length; i < ret; i++) {
							table[i] = null;
						}
						return ret;
					}, getSource: function (shader, count, string, length) {
						var source = "";
						for (var i = 0; i < count; ++i) {
							var len = length ? GROWABLE_HEAP_I32()[length + i * 4 >> 2] : -1;
							source += UTF8ToString(GROWABLE_HEAP_I32()[string + i * 4 >> 2], len < 0 ? void 0 : len);
						}
						return source;
					}, createContext: function (canvas, webGLContextAttributes) {
						var ctx = canvas.getContext("webgl", webGLContextAttributes);
						if (!ctx)
							return 0;
						var handle = GL.registerContext(ctx, webGLContextAttributes);
						return handle;
					}, registerContext: function (ctx, webGLContextAttributes) {
						var handle = _malloc(8);
						GROWABLE_HEAP_I32()[handle + 4 >> 2] = _pthread_self();
						var context = { handle, attributes: webGLContextAttributes, version: webGLContextAttributes.majorVersion, GLctx: ctx };
						if (ctx.canvas)
							ctx.canvas.GLctxObject = context;
						GL.contexts[handle] = context;
						if (typeof webGLContextAttributes.enableExtensionsByDefault === "undefined" || webGLContextAttributes.enableExtensionsByDefault) {
							GL.initExtensions(context);
						}
						return handle;
					}, makeContextCurrent: function (contextHandle) {
						GL.currentContext = GL.contexts[contextHandle];
						Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx;
						return !(contextHandle && !GLctx);
					}, getContext: function (contextHandle) {
						return GL.contexts[contextHandle];
					}, deleteContext: function (contextHandle) {
						if (GL.currentContext === GL.contexts[contextHandle])
							GL.currentContext = null;
						if (typeof JSEvents === "object")
							JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);
						if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas)
							GL.contexts[contextHandle].GLctx.canvas.GLctxObject = void 0;
						_free(GL.contexts[contextHandle].handle);
						GL.contexts[contextHandle] = null;
					}, initExtensions: function (context) {
						if (!context)
							context = GL.currentContext;
						if (context.initExtensionsDone)
							return;
						context.initExtensionsDone = true;
						var GLctx2 = context.GLctx;
						__webgl_enable_ANGLE_instanced_arrays(GLctx2);
						__webgl_enable_OES_vertex_array_object(GLctx2);
						__webgl_enable_WEBGL_draw_buffers(GLctx2);
						GLctx2.disjointTimerQueryExt = GLctx2.getExtension("EXT_disjoint_timer_query");
						__webgl_enable_WEBGL_multi_draw(GLctx2);
						var automaticallyEnabledExtensions = ["OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives", "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture", "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth", "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear", "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod", "EXT_texture_norm16", "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float", "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query", "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float", "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2", "WEBKIT_WEBGL_compressed_texture_pvrtc"];
						var exts = GLctx2.getSupportedExtensions() || [];
						exts.forEach(function (ext) {
							if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
								GLctx2.getExtension(ext);
							}
						});
					}, populateUniformTable: function (program) {
						var p = GL.programs[program];
						var ptable = GL.programInfos[program] = { uniforms: {}, maxUniformLength: 0, maxAttributeLength: -1, maxUniformBlockNameLength: -1 };
						var utable = ptable.uniforms;
						var numUniforms = GLctx.getProgramParameter(p, 35718);
						for (var i = 0; i < numUniforms; ++i) {
							var u = GLctx.getActiveUniform(p, i);
							var name2 = u.name;
							ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name2.length + 1);
							if (name2.slice(-1) == "]") {
								name2 = name2.slice(0, name2.lastIndexOf("["));
							}
							var loc = GLctx.getUniformLocation(p, name2);
							if (loc) {
								var id = GL.getNewId(GL.uniforms);
								utable[name2] = [u.size, id];
								GL.uniforms[id] = loc;
								for (var j = 1; j < u.size; ++j) {
									var n = name2 + "[" + j + "]";
									loc = GLctx.getUniformLocation(p, n);
									id = GL.getNewId(GL.uniforms);
									GL.uniforms[id] = loc;
								}
							}
						}
					}
				};
				var __emscripten_webgl_power_preferences = ["default", "low-power", "high-performance"];
				function _emscripten_webgl_do_create_context(target, attributes) {
					var a = attributes >> 2;
					var powerPreference = GROWABLE_HEAP_I32()[a + (24 >> 2)];
					var contextAttributes = { "alpha": !!GROWABLE_HEAP_I32()[a + (0 >> 2)], "depth": !!GROWABLE_HEAP_I32()[a + (4 >> 2)], "stencil": !!GROWABLE_HEAP_I32()[a + (8 >> 2)], "antialias": !!GROWABLE_HEAP_I32()[a + (12 >> 2)], "premultipliedAlpha": !!GROWABLE_HEAP_I32()[a + (16 >> 2)], "preserveDrawingBuffer": !!GROWABLE_HEAP_I32()[a + (20 >> 2)], "powerPreference": __emscripten_webgl_power_preferences[powerPreference], "failIfMajorPerformanceCaveat": !!GROWABLE_HEAP_I32()[a + (28 >> 2)], majorVersion: GROWABLE_HEAP_I32()[a + (32 >> 2)], minorVersion: GROWABLE_HEAP_I32()[a + (36 >> 2)], enableExtensionsByDefault: GROWABLE_HEAP_I32()[a + (40 >> 2)], explicitSwapControl: GROWABLE_HEAP_I32()[a + (44 >> 2)], proxyContextToMainThread: GROWABLE_HEAP_I32()[a + (48 >> 2)], renderViaOffscreenBackBuffer: GROWABLE_HEAP_I32()[a + (52 >> 2)] };
					var canvas = findCanvasEventTarget(target);
					if (!canvas) {
						return 0;
					}
					if (contextAttributes.explicitSwapControl) {
						return 0;
					}
					var contextHandle = GL.createContext(canvas, contextAttributes);
					return contextHandle;
				}
				function _emscripten_webgl_create_context(a0, a1) {
					return _emscripten_webgl_do_create_context(a0, a1);
				}
				var ENV = {};
				function getExecutableName() {
					return thisProgram || "./this.program";
				}
				function getEnvStrings() {
					if (!getEnvStrings.strings) {
						var lang = (typeof navigator === "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8";
						var env = { "USER": "web_user", "LOGNAME": "web_user", "PATH": "/", "PWD": "/", "HOME": "/home/web_user", "LANG": lang, "_": getExecutableName() };
						for (var x in ENV) {
							env[x] = ENV[x];
						}
						var strings = [];
						for (var x in env) {
							strings.push(x + "=" + env[x]);
						}
						getEnvStrings.strings = strings;
					}
					return getEnvStrings.strings;
				}
				function _environ_get(__environ, environ_buf) {
					if (ENVIRONMENT_IS_PTHREAD)
						return _emscripten_proxy_to_main_thread_js(5, 1, __environ, environ_buf);
					try {
						var bufSize = 0;
						getEnvStrings().forEach(function (string, i) {
							var ptr = environ_buf + bufSize;
							GROWABLE_HEAP_I32()[__environ + i * 4 >> 2] = ptr;
							writeAsciiToMemory(string, ptr);
							bufSize += string.length + 1;
						});
						return 0;
					} catch (e) {
						if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
							abort(e);
						return e.errno;
					}
				}
				function _environ_sizes_get(penviron_count, penviron_buf_size) {
					if (ENVIRONMENT_IS_PTHREAD)
						return _emscripten_proxy_to_main_thread_js(6, 1, penviron_count, penviron_buf_size);
					try {
						var strings = getEnvStrings();
						GROWABLE_HEAP_I32()[penviron_count >> 2] = strings.length;
						var bufSize = 0;
						strings.forEach(function (string) {
							bufSize += string.length + 1;
						});
						GROWABLE_HEAP_I32()[penviron_buf_size >> 2] = bufSize;
						return 0;
					} catch (e) {
						if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
							abort(e);
						return e.errno;
					}
				}
				function _fd_close(fd) {
					if (ENVIRONMENT_IS_PTHREAD)
						return _emscripten_proxy_to_main_thread_js(7, 1, fd);
					try {
						var stream = SYSCALLS.getStreamFromFD(fd);
						FS.close(stream);
						return 0;
					} catch (e) {
						if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
							abort(e);
						return e.errno;
					}
				}
				function _fd_read(fd, iov, iovcnt, pnum) {
					if (ENVIRONMENT_IS_PTHREAD)
						return _emscripten_proxy_to_main_thread_js(8, 1, fd, iov, iovcnt, pnum);
					try {
						var stream = SYSCALLS.getStreamFromFD(fd);
						var num = SYSCALLS.doReadv(stream, iov, iovcnt);
						GROWABLE_HEAP_I32()[pnum >> 2] = num;
						return 0;
					} catch (e) {
						if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
							abort(e);
						return e.errno;
					}
				}
				function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
					if (ENVIRONMENT_IS_PTHREAD)
						return _emscripten_proxy_to_main_thread_js(9, 1, fd, offset_low, offset_high, whence, newOffset);
					try {
						var stream = SYSCALLS.getStreamFromFD(fd);
						var HIGH_OFFSET = 4294967296;
						var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
						var DOUBLE_LIMIT = 9007199254740992;
						if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
							return -61;
						}
						FS.llseek(stream, offset, whence);
						tempI64 = [stream.position >>> 0, (tempDouble = stream.position, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], GROWABLE_HEAP_I32()[newOffset >> 2] = tempI64[0], GROWABLE_HEAP_I32()[newOffset + 4 >> 2] = tempI64[1];
						if (stream.getdents && offset === 0 && whence === 0)
							stream.getdents = null;
						return 0;
					} catch (e) {
						if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
							abort(e);
						return e.errno;
					}
				}
				function _fd_write(fd, iov, iovcnt, pnum) {
					if (ENVIRONMENT_IS_PTHREAD)
						return _emscripten_proxy_to_main_thread_js(10, 1, fd, iov, iovcnt, pnum);
					try {
						var stream = SYSCALLS.getStreamFromFD(fd);
						var num = SYSCALLS.doWritev(stream, iov, iovcnt);
						GROWABLE_HEAP_I32()[pnum >> 2] = num;
						return 0;
					} catch (e) {
						if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
							abort(e);
						return e.errno;
					}
				}
				function _pthread_cleanup_push(routine, arg) {
					PThread.threadExitHandlers.push(function () {
						wasmTable.get(routine)(arg);
					});
				}
				function spawnThread(threadParams) {
					if (ENVIRONMENT_IS_PTHREAD)
						throw "Internal Error! spawnThread() can only ever be called from main application thread!";
					var worker = PThread.getNewWorker();
					if (worker.pthread !== void 0)
						throw "Internal error!";
					if (!threadParams.pthread_ptr)
						throw "Internal error, no pthread ptr!";
					PThread.runningWorkers.push(worker);
					var tlsMemory = _malloc(128 * 4);
					for (var i = 0; i < 128; ++i) {
						GROWABLE_HEAP_I32()[tlsMemory + i * 4 >> 2] = 0;
					}
					var stackHigh = threadParams.stackBase + threadParams.stackSize;
					var pthread = PThread.pthreads[threadParams.pthread_ptr] = { worker, stackBase: threadParams.stackBase, stackSize: threadParams.stackSize, allocatedOwnStack: threadParams.allocatedOwnStack, thread: threadParams.pthread_ptr, threadInfoStruct: threadParams.pthread_ptr };
					var tis = pthread.threadInfoStruct >> 2;
					Atomics.store(GROWABLE_HEAP_U32(), tis + (0 >> 2), 0);
					Atomics.store(GROWABLE_HEAP_U32(), tis + (4 >> 2), 0);
					Atomics.store(GROWABLE_HEAP_U32(), tis + (8 >> 2), 0);
					Atomics.store(GROWABLE_HEAP_U32(), tis + (68 >> 2), threadParams.detached);
					Atomics.store(GROWABLE_HEAP_U32(), tis + (104 >> 2), tlsMemory);
					Atomics.store(GROWABLE_HEAP_U32(), tis + (48 >> 2), 0);
					Atomics.store(GROWABLE_HEAP_U32(), tis + (40 >> 2), pthread.threadInfoStruct);
					Atomics.store(GROWABLE_HEAP_U32(), tis + (44 >> 2), 42);
					Atomics.store(GROWABLE_HEAP_U32(), tis + (108 >> 2), threadParams.stackSize);
					Atomics.store(GROWABLE_HEAP_U32(), tis + (84 >> 2), threadParams.stackSize);
					Atomics.store(GROWABLE_HEAP_U32(), tis + (80 >> 2), stackHigh);
					Atomics.store(GROWABLE_HEAP_U32(), tis + (108 + 8 >> 2), stackHigh);
					Atomics.store(GROWABLE_HEAP_U32(), tis + (108 + 12 >> 2), threadParams.detached);
					Atomics.store(GROWABLE_HEAP_U32(), tis + (108 + 20 >> 2), threadParams.schedPolicy);
					Atomics.store(GROWABLE_HEAP_U32(), tis + (108 + 24 >> 2), threadParams.schedPrio);
					var global_libc = _emscripten_get_global_libc();
					var global_locale = global_libc + 40;
					Atomics.store(GROWABLE_HEAP_U32(), tis + (176 >> 2), global_locale);
					worker.pthread = pthread;
					var msg = { "cmd": "run", "start_routine": threadParams.startRoutine, "arg": threadParams.arg, "threadInfoStruct": threadParams.pthread_ptr, "selfThreadId": threadParams.pthread_ptr, "parentThreadId": threadParams.parent_pthread_ptr, "stackBase": threadParams.stackBase, "stackSize": threadParams.stackSize };
					worker.runPthread = function () {
						msg.time = performance.now();
						worker.postMessage(msg, threadParams.transferList);
					};
					if (worker.loaded) {
						worker.runPthread();
						delete worker.runPthread;
					}
				}
				function _pthread_getschedparam(thread, policy, schedparam) {
					if (!policy && !schedparam)
						return ERRNO_CODES.EINVAL;
					if (!thread) {
						err("pthread_getschedparam called with a null thread pointer!");
						return ERRNO_CODES.ESRCH;
					}
					var self2 = GROWABLE_HEAP_I32()[thread + 12 >> 2];
					if (self2 !== thread) {
						err("pthread_getschedparam attempted on thread " + thread + ", which does not point to a valid thread, or does not exist anymore!");
						return ERRNO_CODES.ESRCH;
					}
					var schedPolicy = Atomics.load(GROWABLE_HEAP_U32(), thread + 108 + 20 >> 2);
					var schedPrio = Atomics.load(GROWABLE_HEAP_U32(), thread + 108 + 24 >> 2);
					if (policy)
						GROWABLE_HEAP_I32()[policy >> 2] = schedPolicy;
					if (schedparam)
						GROWABLE_HEAP_I32()[schedparam >> 2] = schedPrio;
					return 0;
				}
				function _pthread_self() {
					return __pthread_ptr | 0;
				}
				Module["_pthread_self"] = _pthread_self;
				function _pthread_create(pthread_ptr, attr, start_routine, arg) {
					if (typeof SharedArrayBuffer === "undefined") {
						err("Current environment does not support SharedArrayBuffer, pthreads are not available!");
						return 6;
					}
					if (!pthread_ptr) {
						err("pthread_create called with a null thread pointer!");
						return 28;
					}
					var transferList = [];
					var error = 0;
					if (ENVIRONMENT_IS_PTHREAD && (transferList.length === 0 || error)) {
						return _emscripten_sync_run_in_main_thread_4(687865856, pthread_ptr, attr, start_routine, arg);
					}
					var stackSize = 0;
					var stackBase = 0;
					var detached = 0;
					var schedPolicy = 0;
					var schedPrio = 0;
					if (attr) {
						stackSize = GROWABLE_HEAP_I32()[attr >> 2];
						stackSize += 81920;
						stackBase = GROWABLE_HEAP_I32()[attr + 8 >> 2];
						detached = GROWABLE_HEAP_I32()[attr + 12 >> 2] !== 0;
						var inheritSched = GROWABLE_HEAP_I32()[attr + 16 >> 2] === 0;
						if (inheritSched) {
							var prevSchedPolicy = GROWABLE_HEAP_I32()[attr + 20 >> 2];
							var prevSchedPrio = GROWABLE_HEAP_I32()[attr + 24 >> 2];
							var parentThreadPtr = PThread.currentProxiedOperationCallerThread ? PThread.currentProxiedOperationCallerThread : _pthread_self();
							_pthread_getschedparam(parentThreadPtr, attr + 20, attr + 24);
							schedPolicy = GROWABLE_HEAP_I32()[attr + 20 >> 2];
							schedPrio = GROWABLE_HEAP_I32()[attr + 24 >> 2];
							GROWABLE_HEAP_I32()[attr + 20 >> 2] = prevSchedPolicy;
							GROWABLE_HEAP_I32()[attr + 24 >> 2] = prevSchedPrio;
						} else {
							schedPolicy = GROWABLE_HEAP_I32()[attr + 20 >> 2];
							schedPrio = GROWABLE_HEAP_I32()[attr + 24 >> 2];
						}
					} else {
						stackSize = 2097152;
					}
					var allocatedOwnStack = stackBase == 0;
					if (allocatedOwnStack) {
						stackBase = _memalign(16, stackSize);
					} else {
						stackBase -= stackSize;
						assert(stackBase > 0);
					}
					var threadInfoStruct2 = _malloc(232);
					for (var i = 0; i < 232 >> 2; ++i)
						GROWABLE_HEAP_U32()[(threadInfoStruct2 >> 2) + i] = 0;
					GROWABLE_HEAP_I32()[pthread_ptr >> 2] = threadInfoStruct2;
					GROWABLE_HEAP_I32()[threadInfoStruct2 + 12 >> 2] = threadInfoStruct2;
					var headPtr = threadInfoStruct2 + 156;
					GROWABLE_HEAP_I32()[headPtr >> 2] = headPtr;
					var threadParams = { stackBase, stackSize, allocatedOwnStack, schedPolicy, schedPrio, detached, startRoutine: start_routine, pthread_ptr: threadInfoStruct2, parent_pthread_ptr: _pthread_self(), arg, transferList };
					if (ENVIRONMENT_IS_PTHREAD) {
						threadParams.cmd = "spawnThread";
						postMessage(threadParams, transferList);
					} else {
						spawnThread(threadParams);
					}
					return 0;
				}
				function _setTempRet0($i) {
				}
				function __isLeapYear(year) {
					return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
				}
				function __arraySum(array, index) {
					var sum = 0;
					for (var i = 0; i <= index; sum += array[i++]) {
					}
					return sum;
				}
				var __MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
				var __MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
				function __addDays(date, days) {
					var newDate = new Date(date.getTime());
					while (days > 0) {
						var leap = __isLeapYear(newDate.getFullYear());
						var currentMonth = newDate.getMonth();
						var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
						if (days > daysInCurrentMonth - newDate.getDate()) {
							days -= daysInCurrentMonth - newDate.getDate() + 1;
							newDate.setDate(1);
							if (currentMonth < 11) {
								newDate.setMonth(currentMonth + 1);
							} else {
								newDate.setMonth(0);
								newDate.setFullYear(newDate.getFullYear() + 1);
							}
						} else {
							newDate.setDate(newDate.getDate() + days);
							return newDate;
						}
					}
					return newDate;
				}
				function _strftime(s, maxsize, format, tm) {
					var tm_zone = GROWABLE_HEAP_I32()[tm + 40 >> 2];
					var date = { tm_sec: GROWABLE_HEAP_I32()[tm >> 2], tm_min: GROWABLE_HEAP_I32()[tm + 4 >> 2], tm_hour: GROWABLE_HEAP_I32()[tm + 8 >> 2], tm_mday: GROWABLE_HEAP_I32()[tm + 12 >> 2], tm_mon: GROWABLE_HEAP_I32()[tm + 16 >> 2], tm_year: GROWABLE_HEAP_I32()[tm + 20 >> 2], tm_wday: GROWABLE_HEAP_I32()[tm + 24 >> 2], tm_yday: GROWABLE_HEAP_I32()[tm + 28 >> 2], tm_isdst: GROWABLE_HEAP_I32()[tm + 32 >> 2], tm_gmtoff: GROWABLE_HEAP_I32()[tm + 36 >> 2], tm_zone: tm_zone ? UTF8ToString(tm_zone) : "" };
					var pattern = UTF8ToString(format);
					var EXPANSION_RULES_1 = { "%c": "%a %b %d %H:%M:%S %Y", "%D": "%m/%d/%y", "%F": "%Y-%m-%d", "%h": "%b", "%r": "%I:%M:%S %p", "%R": "%H:%M", "%T": "%H:%M:%S", "%x": "%m/%d/%y", "%X": "%H:%M:%S", "%Ec": "%c", "%EC": "%C", "%Ex": "%m/%d/%y", "%EX": "%H:%M:%S", "%Ey": "%y", "%EY": "%Y", "%Od": "%d", "%Oe": "%e", "%OH": "%H", "%OI": "%I", "%Om": "%m", "%OM": "%M", "%OS": "%S", "%Ou": "%u", "%OU": "%U", "%OV": "%V", "%Ow": "%w", "%OW": "%W", "%Oy": "%y" };
					for (var rule in EXPANSION_RULES_1) {
						pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_1[rule]);
					}
					var WEEKDAYS = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
					var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
					function leadingSomething(value, digits, character) {
						var str = typeof value === "number" ? value.toString() : value || "";
						while (str.length < digits) {
							str = character[0] + str;
						}
						return str;
					}
					function leadingNulls(value, digits) {
						return leadingSomething(value, digits, "0");
					}
					function compareByDay(date1, date2) {
						function sgn(value) {
							return value < 0 ? -1 : value > 0 ? 1 : 0;
						}
						var compare;
						if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
							if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
								compare = sgn(date1.getDate() - date2.getDate());
							}
						}
						return compare;
					}
					function getFirstWeekStartDate(janFourth) {
						switch (janFourth.getDay()) {
							case 0:
								return new Date(janFourth.getFullYear() - 1, 11, 29);
							case 1:
								return janFourth;
							case 2:
								return new Date(janFourth.getFullYear(), 0, 3);
							case 3:
								return new Date(janFourth.getFullYear(), 0, 2);
							case 4:
								return new Date(janFourth.getFullYear(), 0, 1);
							case 5:
								return new Date(janFourth.getFullYear() - 1, 11, 31);
							case 6:
								return new Date(janFourth.getFullYear() - 1, 11, 30);
						}
					}
					function getWeekBasedYear(date2) {
						var thisDate = __addDays(new Date(date2.tm_year + 1900, 0, 1), date2.tm_yday);
						var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
						var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);
						var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
						var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
						if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
							if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
								return thisDate.getFullYear() + 1;
							} else {
								return thisDate.getFullYear();
							}
						} else {
							return thisDate.getFullYear() - 1;
						}
					}
					var EXPANSION_RULES_2 = {
						"%a": function (date2) {
							return WEEKDAYS[date2.tm_wday].substring(0, 3);
						}, "%A": function (date2) {
							return WEEKDAYS[date2.tm_wday];
						}, "%b": function (date2) {
							return MONTHS[date2.tm_mon].substring(0, 3);
						}, "%B": function (date2) {
							return MONTHS[date2.tm_mon];
						}, "%C": function (date2) {
							var year = date2.tm_year + 1900;
							return leadingNulls(year / 100 | 0, 2);
						}, "%d": function (date2) {
							return leadingNulls(date2.tm_mday, 2);
						}, "%e": function (date2) {
							return leadingSomething(date2.tm_mday, 2, " ");
						}, "%g": function (date2) {
							return getWeekBasedYear(date2).toString().substring(2);
						}, "%G": function (date2) {
							return getWeekBasedYear(date2);
						}, "%H": function (date2) {
							return leadingNulls(date2.tm_hour, 2);
						}, "%I": function (date2) {
							var twelveHour = date2.tm_hour;
							if (twelveHour == 0)
								twelveHour = 12;
							else if (twelveHour > 12)
								twelveHour -= 12;
							return leadingNulls(twelveHour, 2);
						}, "%j": function (date2) {
							return leadingNulls(date2.tm_mday + __arraySum(__isLeapYear(date2.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date2.tm_mon - 1), 3);
						}, "%m": function (date2) {
							return leadingNulls(date2.tm_mon + 1, 2);
						}, "%M": function (date2) {
							return leadingNulls(date2.tm_min, 2);
						}, "%n": function () {
							return "\n";
						}, "%p": function (date2) {
							if (date2.tm_hour >= 0 && date2.tm_hour < 12) {
								return "AM";
							} else {
								return "PM";
							}
						}, "%S": function (date2) {
							return leadingNulls(date2.tm_sec, 2);
						}, "%t": function () {
							return "	";
						}, "%u": function (date2) {
							return date2.tm_wday || 7;
						}, "%U": function (date2) {
							var janFirst = new Date(date2.tm_year + 1900, 0, 1);
							var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7 - janFirst.getDay());
							var endDate = new Date(date2.tm_year + 1900, date2.tm_mon, date2.tm_mday);
							if (compareByDay(firstSunday, endDate) < 0) {
								var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
								var firstSundayUntilEndJanuary = 31 - firstSunday.getDate();
								var days = firstSundayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
								return leadingNulls(Math.ceil(days / 7), 2);
							}
							return compareByDay(firstSunday, janFirst) === 0 ? "01" : "00";
						}, "%V": function (date2) {
							var janFourthThisYear = new Date(date2.tm_year + 1900, 0, 4);
							var janFourthNextYear = new Date(date2.tm_year + 1901, 0, 4);
							var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
							var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
							var endDate = __addDays(new Date(date2.tm_year + 1900, 0, 1), date2.tm_yday);
							if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
								return "53";
							}
							if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
								return "01";
							}
							var daysDifference;
							if (firstWeekStartThisYear.getFullYear() < date2.tm_year + 1900) {
								daysDifference = date2.tm_yday + 32 - firstWeekStartThisYear.getDate();
							} else {
								daysDifference = date2.tm_yday + 1 - firstWeekStartThisYear.getDate();
							}
							return leadingNulls(Math.ceil(daysDifference / 7), 2);
						}, "%w": function (date2) {
							return date2.tm_wday;
						}, "%W": function (date2) {
							var janFirst = new Date(date2.tm_year, 0, 1);
							var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7 - janFirst.getDay() + 1);
							var endDate = new Date(date2.tm_year + 1900, date2.tm_mon, date2.tm_mday);
							if (compareByDay(firstMonday, endDate) < 0) {
								var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
								var firstMondayUntilEndJanuary = 31 - firstMonday.getDate();
								var days = firstMondayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
								return leadingNulls(Math.ceil(days / 7), 2);
							}
							return compareByDay(firstMonday, janFirst) === 0 ? "01" : "00";
						}, "%y": function (date2) {
							return (date2.tm_year + 1900).toString().substring(2);
						}, "%Y": function (date2) {
							return date2.tm_year + 1900;
						}, "%z": function (date2) {
							var off = date2.tm_gmtoff;
							var ahead = off >= 0;
							off = Math.abs(off) / 60;
							off = off / 60 * 100 + off % 60;
							return (ahead ? "+" : "-") + String("0000" + off).slice(-4);
						}, "%Z": function (date2) {
							return date2.tm_zone;
						}, "%%": function () {
							return "%";
						}
					};
					for (var rule in EXPANSION_RULES_2) {
						if (pattern.indexOf(rule) >= 0) {
							pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_2[rule](date));
						}
					}
					var bytes = intArrayFromString(pattern, false);
					if (bytes.length > maxsize) {
						return 0;
					}
					writeArrayToMemory(bytes, s);
					return bytes.length - 1;
				}
				function _strftime_l(s, maxsize, format, tm) {
					return _strftime(s, maxsize, format, tm);
				}
				if (!ENVIRONMENT_IS_PTHREAD)
					PThread.initMainThreadBlock();
				var FSNode = function (parent, name2, mode, rdev) {
					if (!parent) {
						parent = this;
					}
					this.parent = parent;
					this.mount = parent.mount;
					this.mounted = null;
					this.id = FS.nextInode++;
					this.name = name2;
					this.mode = mode;
					this.node_ops = {};
					this.stream_ops = {};
					this.rdev = rdev;
				};
				var readMode = 292 | 73;
				var writeMode = 146;
				Object.defineProperties(FSNode.prototype, {
					read: {
						get: function () {
							return (this.mode & readMode) === readMode;
						}, set: function (val) {
							val ? this.mode |= readMode : this.mode &= ~readMode;
						}
					}, write: {
						get: function () {
							return (this.mode & writeMode) === writeMode;
						}, set: function (val) {
							val ? this.mode |= writeMode : this.mode &= ~writeMode;
						}
					}, isFolder: {
						get: function () {
							return FS.isDir(this.mode);
						}
					}, isDevice: {
						get: function () {
							return FS.isChrdev(this.mode);
						}
					}
				});
				FS.FSNode = FSNode;
				FS.staticInit();
				Module["FS_createPath"] = FS.createPath;
				Module["FS_createDataFile"] = FS.createDataFile;
				Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
				Module["FS_createLazyFile"] = FS.createLazyFile;
				Module["FS_createDevice"] = FS.createDevice;
				Module["FS_unlink"] = FS.unlink;
				InternalError = Module["InternalError"] = extendError(Error, "InternalError");
				embind_init_charCodes();
				BindingError = Module["BindingError"] = extendError(Error, "BindingError");
				init_ClassHandle();
				init_RegisteredPointer();
				init_embind();
				UnboundTypeError = Module["UnboundTypeError"] = extendError(Error, "UnboundTypeError");
				init_emval();
				var GLctx;
				var proxiedFunctionTable = [null, _atexit, ___sys_ioctl, ___sys_open, _emscripten_set_canvas_element_size_main_thread, _environ_get, _environ_sizes_get, _fd_close, _fd_read, _fd_seek, _fd_write];
				function intArrayFromString(stringy, dontAddNull, length) {
					var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
					var u8array = new Array(len);
					var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
					if (dontAddNull)
						u8array.length = numBytesWritten;
					return u8array;
				}
				if (!ENVIRONMENT_IS_PTHREAD)
					__ATINIT__.push({
						func: function () {
							___wasm_call_ctors();
						}
					});
				var asmLibraryArg = { "p": ___assert_fail, "H": ___cxa_allocate_exception, "G": ___cxa_throw, "ha": ___sys_ioctl, "ia": ___sys_open, "na": __embind_finalize_value_array, "w": __embind_finalize_value_object, "ka": __embind_register_bool, "z": __embind_register_class, "y": __embind_register_class_constructor, "e": __embind_register_class_function, "ja": __embind_register_emval, "ma": __embind_register_enum, "E": __embind_register_enum_value, "N": __embind_register_float, "i": __embind_register_function, "u": __embind_register_integer, "q": __embind_register_memory_view, "O": __embind_register_std_string, "F": __embind_register_std_wstring, "oa": __embind_register_value_array, "l": __embind_register_value_array_element, "x": __embind_register_value_object, "h": __embind_register_value_object_field, "la": __embind_register_void, "$": __emscripten_notify_thread_queue, "s": __emval_as, "P": __emval_call, "b": __emval_decref, "Z": __emval_get_global, "t": __emval_get_property, "o": __emval_incref, "ba": __emval_instanceof, "Q": __emval_is_number, "I": __emval_new_array, "j": __emval_new_cstring, "A": __emval_new_object, "r": __emval_run_destructors, "m": __emval_set_property, "g": __emval_take_value, "K": _abort, "fa": _clock_gettime, "B": _emscripten_asm_const_int, "aa": _emscripten_check_blocking_allowed, "J": _emscripten_conditional_set_current_thread_status, "k": _emscripten_futex_wait, "n": _emscripten_futex_wake, "d": _emscripten_get_now, "D": _emscripten_is_main_browser_thread, "C": _emscripten_is_main_runtime_thread, "U": _emscripten_memcpy_big, "W": _emscripten_receive_on_main_thread_js, "v": _emscripten_resize_heap, "X": _emscripten_set_canvas_element_size, "f": _emscripten_set_current_thread_status, "Y": _emscripten_webgl_create_context, "da": _environ_get, "ea": _environ_sizes_get, "M": _fd_close, "ga": _fd_read, "R": _fd_seek, "L": _fd_write, "T": initPthreadsJS, "a": wasmMemory || Module["wasmMemory"], "V": _pthread_cleanup_push, "_": _pthread_create, "c": _pthread_self, "S": _setTempRet0, "ca": _strftime_l };
				createWasm();
				var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function () {
					return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["qa"]).apply(null, arguments);
				};
				Module["_main"] = function () {
					return (Module["_main"] = Module["asm"]["ra"]).apply(null, arguments);
				};
				var _malloc = Module["_malloc"] = function () {
					return (_malloc = Module["_malloc"] = Module["asm"]["sa"]).apply(null, arguments);
				};
				var _free = Module["_free"] = function () {
					return (_free = Module["_free"] = Module["asm"]["ta"]).apply(null, arguments);
				};
				var ___getTypeName = Module["___getTypeName"] = function () {
					return (___getTypeName = Module["___getTypeName"] = Module["asm"]["ua"]).apply(null, arguments);
				};
				Module["___embind_register_native_and_builtin_types"] = function () {
					return (Module["___embind_register_native_and_builtin_types"] = Module["asm"]["va"]).apply(null, arguments);
				};
				var ___errno_location = Module["___errno_location"] = function () {
					return (___errno_location = Module["___errno_location"] = Module["asm"]["wa"]).apply(null, arguments);
				};
				var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = function () {
					return (_emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = Module["asm"]["xa"]).apply(null, arguments);
				};
				Module["___em_js__initPthreadsJS"] = function () {
					return (Module["___em_js__initPthreadsJS"] = Module["asm"]["ya"]).apply(null, arguments);
				};
				var stackSave = Module["stackSave"] = function () {
					return (stackSave = Module["stackSave"] = Module["asm"]["za"]).apply(null, arguments);
				};
				var stackRestore = Module["stackRestore"] = function () {
					return (stackRestore = Module["stackRestore"] = Module["asm"]["Aa"]).apply(null, arguments);
				};
				var stackAlloc = Module["stackAlloc"] = function () {
					return (stackAlloc = Module["stackAlloc"] = Module["asm"]["Ba"]).apply(null, arguments);
				};
				var _emscripten_stack_set_limits = Module["_emscripten_stack_set_limits"] = function () {
					return (_emscripten_stack_set_limits = Module["_emscripten_stack_set_limits"] = Module["asm"]["Ca"]).apply(null, arguments);
				};
				var _memalign = Module["_memalign"] = function () {
					return (_memalign = Module["_memalign"] = Module["asm"]["Da"]).apply(null, arguments);
				};
				Module["_emscripten_main_browser_thread_id"] = function () {
					return (Module["_emscripten_main_browser_thread_id"] = Module["asm"]["Ea"]).apply(null, arguments);
				};
				var ___pthread_tsd_run_dtors = Module["___pthread_tsd_run_dtors"] = function () {
					return (___pthread_tsd_run_dtors = Module["___pthread_tsd_run_dtors"] = Module["asm"]["Fa"]).apply(null, arguments);
				};
				var _emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = function () {
					return (_emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = Module["asm"]["Ga"]).apply(null, arguments);
				};
				Module["_emscripten_current_thread_process_queued_calls"] = function () {
					return (Module["_emscripten_current_thread_process_queued_calls"] = Module["asm"]["Ha"]).apply(null, arguments);
				};
				var _emscripten_register_main_browser_thread_id = Module["_emscripten_register_main_browser_thread_id"] = function () {
					return (_emscripten_register_main_browser_thread_id = Module["_emscripten_register_main_browser_thread_id"] = Module["asm"]["Ia"]).apply(null, arguments);
				};
				var _do_emscripten_dispatch_to_thread = Module["_do_emscripten_dispatch_to_thread"] = function () {
					return (_do_emscripten_dispatch_to_thread = Module["_do_emscripten_dispatch_to_thread"] = Module["asm"]["Ja"]).apply(null, arguments);
				};
				Module["_emscripten_async_run_in_main_thread"] = function () {
					return (Module["_emscripten_async_run_in_main_thread"] = Module["asm"]["Ka"]).apply(null, arguments);
				};
				Module["_emscripten_sync_run_in_main_thread"] = function () {
					return (Module["_emscripten_sync_run_in_main_thread"] = Module["asm"]["La"]).apply(null, arguments);
				};
				Module["_emscripten_sync_run_in_main_thread_0"] = function () {
					return (Module["_emscripten_sync_run_in_main_thread_0"] = Module["asm"]["Ma"]).apply(null, arguments);
				};
				Module["_emscripten_sync_run_in_main_thread_1"] = function () {
					return (Module["_emscripten_sync_run_in_main_thread_1"] = Module["asm"]["Na"]).apply(null, arguments);
				};
				Module["_emscripten_sync_run_in_main_thread_2"] = function () {
					return (Module["_emscripten_sync_run_in_main_thread_2"] = Module["asm"]["Oa"]).apply(null, arguments);
				};
				Module["_emscripten_sync_run_in_main_thread_xprintf_varargs"] = function () {
					return (Module["_emscripten_sync_run_in_main_thread_xprintf_varargs"] = Module["asm"]["Pa"]).apply(null, arguments);
				};
				Module["_emscripten_sync_run_in_main_thread_3"] = function () {
					return (Module["_emscripten_sync_run_in_main_thread_3"] = Module["asm"]["Qa"]).apply(null, arguments);
				};
				var _emscripten_sync_run_in_main_thread_4 = Module["_emscripten_sync_run_in_main_thread_4"] = function () {
					return (_emscripten_sync_run_in_main_thread_4 = Module["_emscripten_sync_run_in_main_thread_4"] = Module["asm"]["Ra"]).apply(null, arguments);
				};
				Module["_emscripten_sync_run_in_main_thread_5"] = function () {
					return (Module["_emscripten_sync_run_in_main_thread_5"] = Module["asm"]["Sa"]).apply(null, arguments);
				};
				Module["_emscripten_sync_run_in_main_thread_6"] = function () {
					return (Module["_emscripten_sync_run_in_main_thread_6"] = Module["asm"]["Ta"]).apply(null, arguments);
				};
				Module["_emscripten_sync_run_in_main_thread_7"] = function () {
					return (Module["_emscripten_sync_run_in_main_thread_7"] = Module["asm"]["Ua"]).apply(null, arguments);
				};
				var _emscripten_run_in_main_runtime_thread_js = Module["_emscripten_run_in_main_runtime_thread_js"] = function () {
					return (_emscripten_run_in_main_runtime_thread_js = Module["_emscripten_run_in_main_runtime_thread_js"] = Module["asm"]["Va"]).apply(null, arguments);
				};
				var __emscripten_call_on_thread = Module["__emscripten_call_on_thread"] = function () {
					return (__emscripten_call_on_thread = Module["__emscripten_call_on_thread"] = Module["asm"]["Wa"]).apply(null, arguments);
				};
				Module["_emscripten_tls_init"] = function () {
					return (Module["_emscripten_tls_init"] = Module["asm"]["Xa"]).apply(null, arguments);
				};
				Module["dynCall_jiji"] = function () {
					return (Module["dynCall_jiji"] = Module["asm"]["Ya"]).apply(null, arguments);
				};
				Module["dynCall_viijii"] = function () {
					return (Module["dynCall_viijii"] = Module["asm"]["Za"]).apply(null, arguments);
				};
				Module["dynCall_iiiiiijj"] = function () {
					return (Module["dynCall_iiiiiijj"] = Module["asm"]["_a"]).apply(null, arguments);
				};
				Module["dynCall_iiiiij"] = function () {
					return (Module["dynCall_iiiiij"] = Module["asm"]["$a"]).apply(null, arguments);
				};
				Module["dynCall_iiiiijj"] = function () {
					return (Module["dynCall_iiiiijj"] = Module["asm"]["ab"]).apply(null, arguments);
				};
				var _main_thread_futex = Module["_main_thread_futex"] = 51928;
				Module["addRunDependency"] = addRunDependency;
				Module["removeRunDependency"] = removeRunDependency;
				Module["FS_createPath"] = FS.createPath;
				Module["FS_createDataFile"] = FS.createDataFile;
				Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
				Module["FS_createLazyFile"] = FS.createLazyFile;
				Module["FS_createDevice"] = FS.createDevice;
				Module["FS_unlink"] = FS.unlink;
				Module["FS"] = FS;
				Module["PThread"] = PThread;
				Module["PThread"] = PThread;
				Module["_pthread_self"] = _pthread_self;
				Module["wasmMemory"] = wasmMemory;
				Module["ExitStatus"] = ExitStatus;
				var calledRun;
				function ExitStatus(status) {
					this.name = "ExitStatus";
					this.message = "Program terminated with exit(" + status + ")";
					this.status = status;
				}
				dependenciesFulfilled = function runCaller() {
					if (!calledRun)
						run();
					if (!calledRun)
						dependenciesFulfilled = runCaller;
				};
				function callMain(args) {
					var entryFunction = Module["_main"];
					var argc = 0;
					var argv = 0;
					try {
						var ret = entryFunction(argc, argv);
						exit(ret, true);
					} catch (e) {
						if (e instanceof ExitStatus) {
							return;
						} else if (e == "unwind") {
							noExitRuntime = true;
							return;
						} else {
							var toLog = e;
							if (e && typeof e === "object" && e.stack) {
								toLog = [e, e.stack];
							}
							err("exception thrown: " + toLog);
							quit_(1, e);
						}
					} finally {
					}
				}
				function run(args) {
					if (runDependencies > 0) {
						return;
					}
					preRun();
					if (runDependencies > 0)
						return;
					function doRun() {
						if (calledRun)
							return;
						calledRun = true;
						Module["calledRun"] = true;
						if (ABORT)
							return;
						initRuntime();
						preMain();
						readyPromiseResolve(Module);
						if (Module["onRuntimeInitialized"])
							Module["onRuntimeInitialized"]();
						if (shouldRunNow)
							callMain();
						postRun();
					}
					if (Module["setStatus"]) {
						Module["setStatus"]("Running...");
						setTimeout(function () {
							setTimeout(function () {
								Module["setStatus"]("");
							}, 1);
							doRun();
						}, 1);
					} else {
						doRun();
					}
				}
				Module["run"] = run;
				function exit(status, implicit) {
					if (implicit && noExitRuntime && status === 0) {
						return;
					}
					if (noExitRuntime); else {
						PThread.terminateAllThreads();
						if (Module["onExit"])
							Module["onExit"](status);
						ABORT = true;
					}
					quit_(status, new ExitStatus(status));
				}
				if (Module["preInit"]) {
					if (typeof Module["preInit"] == "function")
						Module["preInit"] = [Module["preInit"]];
					while (Module["preInit"].length > 0) {
						Module["preInit"].pop()();
					}
				}
				var shouldRunNow = true;
				if (Module["noInitialRun"])
					shouldRunNow = false;
				if (!ENVIRONMENT_IS_PTHREAD)
					noExitRuntime = true;
				if (!ENVIRONMENT_IS_PTHREAD) {
					run();
				} else {
					PThread.initWorker();
				}
				return WebIFCWasm3.ready;
			};
		}();
		if (typeof exports === "object" && typeof module === "object")
			module.exports = WebIFCWasm2;
		else if (typeof define === "function" && define["amd"])
			define([], function () {
				return WebIFCWasm2;
			});
		else if (typeof exports === "object")
			exports["WebIFCWasm"] = WebIFCWasm2;
	}
});

// dist/web-ifc.js
var require_web_ifc = __commonJS({
	"dist/web-ifc.js"(exports, module) {
		var WebIFCWasm2 = function () {
			var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
			if (typeof __filename !== "undefined")
				_scriptDir = _scriptDir || __filename;
			return function (WebIFCWasm3) {
				WebIFCWasm3 = WebIFCWasm3 || {};
				var Module = typeof WebIFCWasm3 !== "undefined" ? WebIFCWasm3 : {};
				var readyPromiseResolve, readyPromiseReject;
				Module["ready"] = new Promise(function (resolve, reject) {
					readyPromiseResolve = resolve;
					readyPromiseReject = reject;
				});
				var moduleOverrides = {};
				var key;
				for (key in Module) {
					if (Module.hasOwnProperty(key)) {
						moduleOverrides[key] = Module[key];
					}
				}
				var thisProgram = "./this.program";
				var quit_ = function (status, toThrow) {
					throw toThrow;
				};
				var ENVIRONMENT_IS_WEB = false;
				var ENVIRONMENT_IS_WORKER = false;
				var ENVIRONMENT_IS_NODE = false;
				var ENVIRONMENT_IS_SHELL = false;
				ENVIRONMENT_IS_WEB = typeof window === "object";
				ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
				ENVIRONMENT_IS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";
				ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
				var scriptDirectory = "";
				function locateFile(path) {
					if (Module["locateFile"]) {
						return Module["locateFile"](path, scriptDirectory);
					}
					return scriptDirectory + path;
				}
				var read_, readBinary;
				var nodeFS;
				var nodePath;
				if (ENVIRONMENT_IS_NODE) {
					if (ENVIRONMENT_IS_WORKER) {
						scriptDirectory = __require("path").dirname(scriptDirectory) + "/";
					} else {
						scriptDirectory = __dirname + "/";
					}
					read_ = function shell_read(filename, binary) {
						if (!nodeFS)
							nodeFS = __require("fs");
						if (!nodePath)
							nodePath = __require("path");
						filename = nodePath["normalize"](filename);
						return nodeFS["readFileSync"](filename, binary ? null : "utf8");
					};
					readBinary = function readBinary2(filename) {
						var ret = read_(filename, true);
						if (!ret.buffer) {
							ret = new Uint8Array(ret);
						}
						assert(ret.buffer);
						return ret;
					};
					if (process["argv"].length > 1) {
						thisProgram = process["argv"][1].replace(/\\/g, "/");
					}
					process["argv"].slice(2);
					process["on"]("uncaughtException", function (ex) {
						if (!(ex instanceof ExitStatus)) {
							throw ex;
						}
					});
					process["on"]("unhandledRejection", abort);
					quit_ = function (status) {
						process["exit"](status);
					};
					Module["inspect"] = function () {
						return "[Emscripten Module object]";
					};
				} else if (ENVIRONMENT_IS_SHELL) {
					if (typeof read != "undefined") {
						read_ = function shell_read(f) {
							return read(f);
						};
					}
					readBinary = function readBinary2(f) {
						var data;
						if (typeof readbuffer === "function") {
							return new Uint8Array(readbuffer(f));
						}
						data = read(f, "binary");
						assert(typeof data === "object");
						return data;
					};
					if (typeof scriptArgs != "undefined") {
						scriptArgs;
					}
					if (typeof quit === "function") {
						quit_ = function (status) {
							quit(status);
						};
					}
					if (typeof print !== "undefined") {
						if (typeof console === "undefined")
							console = {};
						console.log = print;
						console.warn = console.error = typeof printErr !== "undefined" ? printErr : print;
					}
				} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
					if (ENVIRONMENT_IS_WORKER) {
						scriptDirectory = self.location.href;
					} else if (typeof document !== "undefined" && document.currentScript) {
						scriptDirectory = document.currentScript.src;
					}
					if (_scriptDir) {
						scriptDirectory = _scriptDir;
					}
					if (scriptDirectory.indexOf("blob:") !== 0) {
						scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
					} else {
						scriptDirectory = "";
					}
					{
						read_ = function shell_read(url) {
							var xhr = new XMLHttpRequest();
							xhr.open("GET", url, false);
							xhr.send(null);
							return xhr.responseText;
						};
						if (ENVIRONMENT_IS_WORKER) {
							readBinary = function readBinary2(url) {
								var xhr = new XMLHttpRequest();
								xhr.open("GET", url, false);
								xhr.responseType = "arraybuffer";
								xhr.send(null);
								return new Uint8Array(xhr.response);
							};
						}
					}
				} else;
				var out = Module["print"] || console.log.bind(console);
				var err = Module["printErr"] || console.warn.bind(console);
				for (key in moduleOverrides) {
					if (moduleOverrides.hasOwnProperty(key)) {
						Module[key] = moduleOverrides[key];
					}
				}
				moduleOverrides = null;
				if (Module["arguments"])
					Module["arguments"];
				if (Module["thisProgram"])
					thisProgram = Module["thisProgram"];
				if (Module["quit"])
					quit_ = Module["quit"];
				var STACK_ALIGN = 16;
				function alignMemory(size, factor) {
					if (!factor)
						factor = STACK_ALIGN;
					return Math.ceil(size / factor) * factor;
				}
				var wasmBinary;
				if (Module["wasmBinary"])
					wasmBinary = Module["wasmBinary"];
				var noExitRuntime;
				if (Module["noExitRuntime"])
					noExitRuntime = Module["noExitRuntime"];
				if (typeof WebAssembly !== "object") {
					abort("no native wasm support detected");
				}
				var wasmMemory;
				var ABORT = false;
				function assert(condition, text) {
					if (!condition) {
						abort("Assertion failed: " + text);
					}
				}
				var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
				function UTF8ArrayToString(heap, idx, maxBytesToRead) {
					idx >>>= 0;
					var endIdx = idx + maxBytesToRead;
					var endPtr = idx;
					while (heap[endPtr >>> 0] && !(endPtr >= endIdx))
						++endPtr;
					if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
						return UTF8Decoder.decode(heap.subarray(idx >>> 0, endPtr >>> 0));
					} else {
						var str = "";
						while (idx < endPtr) {
							var u0 = heap[idx++ >>> 0];
							if (!(u0 & 128)) {
								str += String.fromCharCode(u0);
								continue;
							}
							var u1 = heap[idx++ >>> 0] & 63;
							if ((u0 & 224) == 192) {
								str += String.fromCharCode((u0 & 31) << 6 | u1);
								continue;
							}
							var u2 = heap[idx++ >>> 0] & 63;
							if ((u0 & 240) == 224) {
								u0 = (u0 & 15) << 12 | u1 << 6 | u2;
							} else {
								u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++ >>> 0] & 63;
							}
							if (u0 < 65536) {
								str += String.fromCharCode(u0);
							} else {
								var ch = u0 - 65536;
								str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
							}
						}
					}
					return str;
				}
				function UTF8ToString(ptr, maxBytesToRead) {
					ptr >>>= 0;
					return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
				}
				function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
					outIdx >>>= 0;
					if (!(maxBytesToWrite > 0))
						return 0;
					var startIdx = outIdx;
					var endIdx = outIdx + maxBytesToWrite - 1;
					for (var i = 0; i < str.length; ++i) {
						var u = str.charCodeAt(i);
						if (u >= 55296 && u <= 57343) {
							var u1 = str.charCodeAt(++i);
							u = 65536 + ((u & 1023) << 10) | u1 & 1023;
						}
						if (u <= 127) {
							if (outIdx >= endIdx)
								break;
							heap[outIdx++ >>> 0] = u;
						} else if (u <= 2047) {
							if (outIdx + 1 >= endIdx)
								break;
							heap[outIdx++ >>> 0] = 192 | u >> 6;
							heap[outIdx++ >>> 0] = 128 | u & 63;
						} else if (u <= 65535) {
							if (outIdx + 2 >= endIdx)
								break;
							heap[outIdx++ >>> 0] = 224 | u >> 12;
							heap[outIdx++ >>> 0] = 128 | u >> 6 & 63;
							heap[outIdx++ >>> 0] = 128 | u & 63;
						} else {
							if (outIdx + 3 >= endIdx)
								break;
							heap[outIdx++ >>> 0] = 240 | u >> 18;
							heap[outIdx++ >>> 0] = 128 | u >> 12 & 63;
							heap[outIdx++ >>> 0] = 128 | u >> 6 & 63;
							heap[outIdx++ >>> 0] = 128 | u & 63;
						}
					}
					heap[outIdx >>> 0] = 0;
					return outIdx - startIdx;
				}
				function stringToUTF8(str, outPtr, maxBytesToWrite) {
					return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
				}
				function lengthBytesUTF8(str) {
					var len = 0;
					for (var i = 0; i < str.length; ++i) {
						var u = str.charCodeAt(i);
						if (u >= 55296 && u <= 57343)
							u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
						if (u <= 127)
							++len;
						else if (u <= 2047)
							len += 2;
						else if (u <= 65535)
							len += 3;
						else
							len += 4;
					}
					return len;
				}
				var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
				function UTF16ToString(ptr, maxBytesToRead) {
					var endPtr = ptr;
					var idx = endPtr >> 1;
					var maxIdx = idx + maxBytesToRead / 2;
					while (!(idx >= maxIdx) && HEAPU16[idx >>> 0])
						++idx;
					endPtr = idx << 1;
					if (endPtr - ptr > 32 && UTF16Decoder) {
						return UTF16Decoder.decode(HEAPU8.subarray(ptr >>> 0, endPtr >>> 0));
					} else {
						var str = "";
						for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
							var codeUnit = HEAP16[ptr + i * 2 >>> 1];
							if (codeUnit == 0)
								break;
							str += String.fromCharCode(codeUnit);
						}
						return str;
					}
				}
				function stringToUTF16(str, outPtr, maxBytesToWrite) {
					if (maxBytesToWrite === void 0) {
						maxBytesToWrite = 2147483647;
					}
					if (maxBytesToWrite < 2)
						return 0;
					maxBytesToWrite -= 2;
					var startPtr = outPtr;
					var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
					for (var i = 0; i < numCharsToWrite; ++i) {
						var codeUnit = str.charCodeAt(i);
						HEAP16[outPtr >>> 1] = codeUnit;
						outPtr += 2;
					}
					HEAP16[outPtr >>> 1] = 0;
					return outPtr - startPtr;
				}
				function lengthBytesUTF16(str) {
					return str.length * 2;
				}
				function UTF32ToString(ptr, maxBytesToRead) {
					var i = 0;
					var str = "";
					while (!(i >= maxBytesToRead / 4)) {
						var utf32 = HEAP32[ptr + i * 4 >>> 2];
						if (utf32 == 0)
							break;
						++i;
						if (utf32 >= 65536) {
							var ch = utf32 - 65536;
							str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
						} else {
							str += String.fromCharCode(utf32);
						}
					}
					return str;
				}
				function stringToUTF32(str, outPtr, maxBytesToWrite) {
					outPtr >>>= 0;
					if (maxBytesToWrite === void 0) {
						maxBytesToWrite = 2147483647;
					}
					if (maxBytesToWrite < 4)
						return 0;
					var startPtr = outPtr;
					var endPtr = startPtr + maxBytesToWrite - 4;
					for (var i = 0; i < str.length; ++i) {
						var codeUnit = str.charCodeAt(i);
						if (codeUnit >= 55296 && codeUnit <= 57343) {
							var trailSurrogate = str.charCodeAt(++i);
							codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
						}
						HEAP32[outPtr >>> 2] = codeUnit;
						outPtr += 4;
						if (outPtr + 4 > endPtr)
							break;
					}
					HEAP32[outPtr >>> 2] = 0;
					return outPtr - startPtr;
				}
				function lengthBytesUTF32(str) {
					var len = 0;
					for (var i = 0; i < str.length; ++i) {
						var codeUnit = str.charCodeAt(i);
						if (codeUnit >= 55296 && codeUnit <= 57343)
							++i;
						len += 4;
					}
					return len;
				}
				function writeArrayToMemory(array, buffer2) {
					HEAP8.set(array, buffer2 >>> 0);
				}
				function writeAsciiToMemory(str, buffer2, dontAddNull) {
					for (var i = 0; i < str.length; ++i) {
						HEAP8[buffer2++ >>> 0] = str.charCodeAt(i);
					}
					if (!dontAddNull)
						HEAP8[buffer2 >>> 0] = 0;
				}
				function alignUp(x, multiple) {
					if (x % multiple > 0) {
						x += multiple - x % multiple;
					}
					return x;
				}
				var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
				function updateGlobalBufferAndViews(buf) {
					buffer = buf;
					Module["HEAP8"] = HEAP8 = new Int8Array(buf);
					Module["HEAP16"] = HEAP16 = new Int16Array(buf);
					Module["HEAP32"] = HEAP32 = new Int32Array(buf);
					Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
					Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
					Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
					Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
					Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
				}
				var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;
				if (Module["wasmMemory"]) {
					wasmMemory = Module["wasmMemory"];
				} else {
					wasmMemory = new WebAssembly.Memory({ "initial": INITIAL_MEMORY / 65536, "maximum": 4294967296 / 65536 });
				}
				if (wasmMemory) {
					buffer = wasmMemory.buffer;
				}
				INITIAL_MEMORY = buffer.byteLength;
				updateGlobalBufferAndViews(buffer);
				var wasmTable;
				var __ATPRERUN__ = [];
				var __ATINIT__ = [];
				var __ATMAIN__ = [];
				var __ATPOSTRUN__ = [];
				function preRun() {
					if (Module["preRun"]) {
						if (typeof Module["preRun"] == "function")
							Module["preRun"] = [Module["preRun"]];
						while (Module["preRun"].length) {
							addOnPreRun(Module["preRun"].shift());
						}
					}
					callRuntimeCallbacks(__ATPRERUN__);
				}
				function initRuntime() {
					if (!Module["noFSInit"] && !FS.init.initialized)
						FS.init();
					callRuntimeCallbacks(__ATINIT__);
				}
				function preMain() {
					FS.ignorePermissions = false;
					callRuntimeCallbacks(__ATMAIN__);
				}
				function postRun() {
					if (Module["postRun"]) {
						if (typeof Module["postRun"] == "function")
							Module["postRun"] = [Module["postRun"]];
						while (Module["postRun"].length) {
							addOnPostRun(Module["postRun"].shift());
						}
					}
					callRuntimeCallbacks(__ATPOSTRUN__);
				}
				function addOnPreRun(cb) {
					__ATPRERUN__.unshift(cb);
				}
				function addOnPostRun(cb) {
					__ATPOSTRUN__.unshift(cb);
				}
				var runDependencies = 0;
				var dependenciesFulfilled = null;
				function addRunDependency(id) {
					runDependencies++;
					if (Module["monitorRunDependencies"]) {
						Module["monitorRunDependencies"](runDependencies);
					}
				}
				function removeRunDependency(id) {
					runDependencies--;
					if (Module["monitorRunDependencies"]) {
						Module["monitorRunDependencies"](runDependencies);
					}
					if (runDependencies == 0) {
						if (dependenciesFulfilled) {
							var callback = dependenciesFulfilled;
							dependenciesFulfilled = null;
							callback();
						}
					}
				}
				Module["preloadedImages"] = {};
				Module["preloadedAudios"] = {};
				function abort(what) {
					if (Module["onAbort"]) {
						Module["onAbort"](what);
					}
					what += "";
					err(what);
					ABORT = true;
					what = "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
					var e = new WebAssembly.RuntimeError(what);
					readyPromiseReject(e);
					throw e;
				}
				function hasPrefix(str, prefix) {
					return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;
				}
				var dataURIPrefix = "data:application/octet-stream;base64,";
				function isDataURI(filename) {
					return hasPrefix(filename, dataURIPrefix);
				}
				var fileURIPrefix = "file://";
				function isFileURI(filename) {
					return hasPrefix(filename, fileURIPrefix);
				}
				var wasmBinaryFile = "web-ifc.wasm";
				if (!isDataURI(wasmBinaryFile)) {
					wasmBinaryFile = locateFile(wasmBinaryFile);
				}
				function getBinary() {
					try {
						if (wasmBinary) {
							return new Uint8Array(wasmBinary);
						}
						if (readBinary) {
							return readBinary(wasmBinaryFile);
						} else {
							throw "both async and sync fetching of the wasm failed";
						}
					} catch (err2) {
						abort(err2);
					}
				}
				function getBinaryPromise() {
					if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === "function" && !isFileURI(wasmBinaryFile)) {
						return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function (response) {
							if (!response["ok"]) {
								throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
							}
							return response["arrayBuffer"]();
						}).catch(function () {
							return getBinary();
						});
					}
					return Promise.resolve().then(getBinary);
				}
				function createWasm() {
					var info = { "a": asmLibraryArg };
					function receiveInstance(instance, module2) {
						var exports3 = instance.exports;
						Module["asm"] = exports3;
						wasmTable = Module["asm"]["ba"];
						removeRunDependency();
					}
					addRunDependency();
					function receiveInstantiatedSource(output) {
						receiveInstance(output["instance"]);
					}
					function instantiateArrayBuffer(receiver) {
						return getBinaryPromise().then(function (binary) {
							return WebAssembly.instantiate(binary, info);
						}).then(receiver, function (reason) {
							err("failed to asynchronously prepare wasm: " + reason);
							abort(reason);
						});
					}
					function instantiateAsync() {
						if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === "function") {
							return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function (response) {
								var result = WebAssembly.instantiateStreaming(response, info);
								return result.then(receiveInstantiatedSource, function (reason) {
									err("wasm streaming compile failed: " + reason);
									err("falling back to ArrayBuffer instantiation");
									return instantiateArrayBuffer(receiveInstantiatedSource);
								});
							});
						} else {
							return instantiateArrayBuffer(receiveInstantiatedSource);
						}
					}
					if (Module["instantiateWasm"]) {
						try {
							var exports2 = Module["instantiateWasm"](info, receiveInstance);
							return exports2;
						} catch (e) {
							err("Module.instantiateWasm callback failed with error: " + e);
							return false;
						}
					}
					instantiateAsync().catch(readyPromiseReject);
					return {};
				}
				var tempDouble;
				var tempI64;
				function callRuntimeCallbacks(callbacks) {
					while (callbacks.length > 0) {
						var callback = callbacks.shift();
						if (typeof callback == "function") {
							callback(Module);
							continue;
						}
						var func = callback.func;
						if (typeof func === "number") {
							if (callback.arg === void 0) {
								wasmTable.get(func)();
							} else {
								wasmTable.get(func)(callback.arg);
							}
						} else {
							func(callback.arg === void 0 ? null : callback.arg);
						}
					}
				}
				function dynCallLegacy(sig, ptr, args) {
					if (args && args.length) {
						return Module["dynCall_" + sig].apply(null, [ptr].concat(args));
					}
					return Module["dynCall_" + sig].call(null, ptr);
				}
				function dynCall(sig, ptr, args) {
					if (sig.indexOf("j") != -1) {
						return dynCallLegacy(sig, ptr, args);
					}
					return wasmTable.get(ptr).apply(null, args);
				}
				function ___assert_fail(condition, filename, line, func) {
					abort("Assertion failed: " + UTF8ToString(condition) + ", at: " + [filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function"]);
				}
				var ExceptionInfoAttrs = { DESTRUCTOR_OFFSET: 0, REFCOUNT_OFFSET: 4, TYPE_OFFSET: 8, CAUGHT_OFFSET: 12, RETHROWN_OFFSET: 13, SIZE: 16 };
				function ___cxa_allocate_exception(size) {
					return _malloc(size + ExceptionInfoAttrs.SIZE) + ExceptionInfoAttrs.SIZE;
				}
				function ExceptionInfo(excPtr) {
					this.excPtr = excPtr;
					this.ptr = excPtr - ExceptionInfoAttrs.SIZE;
					this.set_type = function (type) {
						HEAP32[this.ptr + ExceptionInfoAttrs.TYPE_OFFSET >>> 2] = type;
					};
					this.get_type = function () {
						return HEAP32[this.ptr + ExceptionInfoAttrs.TYPE_OFFSET >>> 2];
					};
					this.set_destructor = function (destructor) {
						HEAP32[this.ptr + ExceptionInfoAttrs.DESTRUCTOR_OFFSET >>> 2] = destructor;
					};
					this.get_destructor = function () {
						return HEAP32[this.ptr + ExceptionInfoAttrs.DESTRUCTOR_OFFSET >>> 2];
					};
					this.set_refcount = function (refcount) {
						HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >>> 2] = refcount;
					};
					this.set_caught = function (caught) {
						caught = caught ? 1 : 0;
						HEAP8[this.ptr + ExceptionInfoAttrs.CAUGHT_OFFSET >>> 0] = caught;
					};
					this.get_caught = function () {
						return HEAP8[this.ptr + ExceptionInfoAttrs.CAUGHT_OFFSET >>> 0] != 0;
					};
					this.set_rethrown = function (rethrown) {
						rethrown = rethrown ? 1 : 0;
						HEAP8[this.ptr + ExceptionInfoAttrs.RETHROWN_OFFSET >>> 0] = rethrown;
					};
					this.get_rethrown = function () {
						return HEAP8[this.ptr + ExceptionInfoAttrs.RETHROWN_OFFSET >>> 0] != 0;
					};
					this.init = function (type, destructor) {
						this.set_type(type);
						this.set_destructor(destructor);
						this.set_refcount(0);
						this.set_caught(false);
						this.set_rethrown(false);
					};
					this.add_ref = function () {
						var value = HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >>> 2];
						HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >>> 2] = value + 1;
					};
					this.release_ref = function () {
						var prev = HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >>> 2];
						HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >>> 2] = prev - 1;
						return prev === 1;
					};
				}
				function ___cxa_throw(ptr, type, destructor) {
					var info = new ExceptionInfo(ptr);
					info.init(type, destructor);
					throw ptr;
				}
				var PATH = {
					splitPath: function (filename) {
						var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
						return splitPathRe.exec(filename).slice(1);
					}, normalizeArray: function (parts, allowAboveRoot) {
						var up = 0;
						for (var i = parts.length - 1; i >= 0; i--) {
							var last = parts[i];
							if (last === ".") {
								parts.splice(i, 1);
							} else if (last === "..") {
								parts.splice(i, 1);
								up++;
							} else if (up) {
								parts.splice(i, 1);
								up--;
							}
						}
						if (allowAboveRoot) {
							for (; up; up--) {
								parts.unshift("..");
							}
						}
						return parts;
					}, normalize: function (path) {
						var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
						path = PATH.normalizeArray(path.split("/").filter(function (p) {
							return !!p;
						}), !isAbsolute).join("/");
						if (!path && !isAbsolute) {
							path = ".";
						}
						if (path && trailingSlash) {
							path += "/";
						}
						return (isAbsolute ? "/" : "") + path;
					}, dirname: function (path) {
						var result = PATH.splitPath(path), root = result[0], dir = result[1];
						if (!root && !dir) {
							return ".";
						}
						if (dir) {
							dir = dir.substr(0, dir.length - 1);
						}
						return root + dir;
					}, basename: function (path) {
						if (path === "/")
							return "/";
						path = PATH.normalize(path);
						path = path.replace(/\/$/, "");
						var lastSlash = path.lastIndexOf("/");
						if (lastSlash === -1)
							return path;
						return path.substr(lastSlash + 1);
					}, extname: function (path) {
						return PATH.splitPath(path)[3];
					}, join: function () {
						var paths = Array.prototype.slice.call(arguments, 0);
						return PATH.normalize(paths.join("/"));
					}, join2: function (l, r) {
						return PATH.normalize(l + "/" + r);
					}
				};
				function getRandomDevice() {
					if (typeof crypto === "object" && typeof crypto["getRandomValues"] === "function") {
						var randomBuffer = new Uint8Array(1);
						return function () {
							crypto.getRandomValues(randomBuffer);
							return randomBuffer[0];
						};
					} else if (ENVIRONMENT_IS_NODE) {
						try {
							var crypto_module = require_crypto();
							return function () {
								return crypto_module["randomBytes"](1)[0];
							};
						} catch (e) {
						}
					}
					return function () {
						abort("randomDevice");
					};
				}
				var PATH_FS = {
					resolve: function () {
						var resolvedPath = "", resolvedAbsolute = false;
						for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
							var path = i >= 0 ? arguments[i] : FS.cwd();
							if (typeof path !== "string") {
								throw new TypeError("Arguments to path.resolve must be strings");
							} else if (!path) {
								return "";
							}
							resolvedPath = path + "/" + resolvedPath;
							resolvedAbsolute = path.charAt(0) === "/";
						}
						resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(function (p) {
							return !!p;
						}), !resolvedAbsolute).join("/");
						return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
					}, relative: function (from, to) {
						from = PATH_FS.resolve(from).substr(1);
						to = PATH_FS.resolve(to).substr(1);
						function trim(arr) {
							var start = 0;
							for (; start < arr.length; start++) {
								if (arr[start] !== "")
									break;
							}
							var end = arr.length - 1;
							for (; end >= 0; end--) {
								if (arr[end] !== "")
									break;
							}
							if (start > end)
								return [];
							return arr.slice(start, end - start + 1);
						}
						var fromParts = trim(from.split("/"));
						var toParts = trim(to.split("/"));
						var length = Math.min(fromParts.length, toParts.length);
						var samePartsLength = length;
						for (var i = 0; i < length; i++) {
							if (fromParts[i] !== toParts[i]) {
								samePartsLength = i;
								break;
							}
						}
						var outputParts = [];
						for (var i = samePartsLength; i < fromParts.length; i++) {
							outputParts.push("..");
						}
						outputParts = outputParts.concat(toParts.slice(samePartsLength));
						return outputParts.join("/");
					}
				};
				var TTY = {
					ttys: [], init: function () {
					}, shutdown: function () {
					}, register: function (dev, ops) {
						TTY.ttys[dev] = { input: [], output: [], ops };
						FS.registerDevice(dev, TTY.stream_ops);
					}, stream_ops: {
						open: function (stream) {
							var tty = TTY.ttys[stream.node.rdev];
							if (!tty) {
								throw new FS.ErrnoError(43);
							}
							stream.tty = tty;
							stream.seekable = false;
						}, close: function (stream) {
							stream.tty.ops.flush(stream.tty);
						}, flush: function (stream) {
							stream.tty.ops.flush(stream.tty);
						}, read: function (stream, buffer2, offset, length, pos) {
							if (!stream.tty || !stream.tty.ops.get_char) {
								throw new FS.ErrnoError(60);
							}
							var bytesRead = 0;
							for (var i = 0; i < length; i++) {
								var result;
								try {
									result = stream.tty.ops.get_char(stream.tty);
								} catch (e) {
									throw new FS.ErrnoError(29);
								}
								if (result === void 0 && bytesRead === 0) {
									throw new FS.ErrnoError(6);
								}
								if (result === null || result === void 0)
									break;
								bytesRead++;
								buffer2[offset + i] = result;
							}
							if (bytesRead) {
								stream.node.timestamp = Date.now();
							}
							return bytesRead;
						}, write: function (stream, buffer2, offset, length, pos) {
							if (!stream.tty || !stream.tty.ops.put_char) {
								throw new FS.ErrnoError(60);
							}
							try {
								for (var i = 0; i < length; i++) {
									stream.tty.ops.put_char(stream.tty, buffer2[offset + i]);
								}
							} catch (e) {
								throw new FS.ErrnoError(29);
							}
							if (length) {
								stream.node.timestamp = Date.now();
							}
							return i;
						}
					}, default_tty_ops: {
						get_char: function (tty) {
							if (!tty.input.length) {
								var result = null;
								if (ENVIRONMENT_IS_NODE) {
									var BUFSIZE = 256;
									var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
									var bytesRead = 0;
									try {
										bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
									} catch (e) {
										if (e.toString().indexOf("EOF") != -1)
											bytesRead = 0;
										else
											throw e;
									}
									if (bytesRead > 0) {
										result = buf.slice(0, bytesRead).toString("utf-8");
									} else {
										result = null;
									}
								} else if (typeof window != "undefined" && typeof window.prompt == "function") {
									result = window.prompt("Input: ");
									if (result !== null) {
										result += "\n";
									}
								} else if (typeof readline == "function") {
									result = readline();
									if (result !== null) {
										result += "\n";
									}
								}
								if (!result) {
									return null;
								}
								tty.input = intArrayFromString(result, true);
							}
							return tty.input.shift();
						}, put_char: function (tty, val) {
							if (val === null || val === 10) {
								// out(UTF8ArrayToString(tty.output, 0));
								tty.output = [];
							} else {
								if (val != 0)
									tty.output.push(val);
							}
						}, flush: function (tty) {
							if (tty.output && tty.output.length > 0) {
								out(UTF8ArrayToString(tty.output, 0));
								tty.output = [];
							}
						}
					}, default_tty1_ops: {
						put_char: function (tty, val) {
							if (val === null || val === 10) {
								err(UTF8ArrayToString(tty.output, 0));
								tty.output = [];
							} else {
								if (val != 0)
									tty.output.push(val);
							}
						}, flush: function (tty) {
							if (tty.output && tty.output.length > 0) {
								err(UTF8ArrayToString(tty.output, 0));
								tty.output = [];
							}
						}
					}
				};
				function mmapAlloc(size) {
					var alignedSize = alignMemory(size, 16384);
					var ptr = _malloc(alignedSize);
					while (size < alignedSize)
						HEAP8[ptr + size++ >>> 0] = 0;
					return ptr;
				}
				var MEMFS = {
					ops_table: null, mount: function (mount) {
						return MEMFS.createNode(null, "/", 16384 | 511, 0);
					}, createNode: function (parent, name2, mode, dev) {
						if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
							throw new FS.ErrnoError(63);
						}
						if (!MEMFS.ops_table) {
							MEMFS.ops_table = { dir: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr, lookup: MEMFS.node_ops.lookup, mknod: MEMFS.node_ops.mknod, rename: MEMFS.node_ops.rename, unlink: MEMFS.node_ops.unlink, rmdir: MEMFS.node_ops.rmdir, readdir: MEMFS.node_ops.readdir, symlink: MEMFS.node_ops.symlink }, stream: { llseek: MEMFS.stream_ops.llseek } }, file: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr }, stream: { llseek: MEMFS.stream_ops.llseek, read: MEMFS.stream_ops.read, write: MEMFS.stream_ops.write, allocate: MEMFS.stream_ops.allocate, mmap: MEMFS.stream_ops.mmap, msync: MEMFS.stream_ops.msync } }, link: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr, readlink: MEMFS.node_ops.readlink }, stream: {} }, chrdev: { node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr }, stream: FS.chrdev_stream_ops } };
						}
						var node = FS.createNode(parent, name2, mode, dev);
						if (FS.isDir(node.mode)) {
							node.node_ops = MEMFS.ops_table.dir.node;
							node.stream_ops = MEMFS.ops_table.dir.stream;
							node.contents = {};
						} else if (FS.isFile(node.mode)) {
							node.node_ops = MEMFS.ops_table.file.node;
							node.stream_ops = MEMFS.ops_table.file.stream;
							node.usedBytes = 0;
							node.contents = null;
						} else if (FS.isLink(node.mode)) {
							node.node_ops = MEMFS.ops_table.link.node;
							node.stream_ops = MEMFS.ops_table.link.stream;
						} else if (FS.isChrdev(node.mode)) {
							node.node_ops = MEMFS.ops_table.chrdev.node;
							node.stream_ops = MEMFS.ops_table.chrdev.stream;
						}
						node.timestamp = Date.now();
						if (parent) {
							parent.contents[name2] = node;
						}
						return node;
					}, getFileDataAsRegularArray: function (node) {
						if (node.contents && node.contents.subarray) {
							var arr = [];
							for (var i = 0; i < node.usedBytes; ++i)
								arr.push(node.contents[i]);
							return arr;
						}
						return node.contents;
					}, getFileDataAsTypedArray: function (node) {
						if (!node.contents)
							return new Uint8Array(0);
						if (node.contents.subarray)
							return node.contents.subarray(0, node.usedBytes);
						return new Uint8Array(node.contents);
					}, expandFileStorage: function (node, newCapacity) {
						newCapacity >>>= 0;
						var prevCapacity = node.contents ? node.contents.length : 0;
						if (prevCapacity >= newCapacity)
							return;
						var CAPACITY_DOUBLING_MAX = 1024 * 1024;
						newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0);
						if (prevCapacity != 0)
							newCapacity = Math.max(newCapacity, 256);
						var oldContents = node.contents;
						node.contents = new Uint8Array(newCapacity);
						if (node.usedBytes > 0)
							node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
						return;
					}, resizeFileStorage: function (node, newSize) {
						newSize >>>= 0;
						if (node.usedBytes == newSize)
							return;
						if (newSize == 0) {
							node.contents = null;
							node.usedBytes = 0;
							return;
						}
						if (!node.contents || node.contents.subarray) {
							var oldContents = node.contents;
							node.contents = new Uint8Array(newSize);
							if (oldContents) {
								node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
							}
							node.usedBytes = newSize;
							return;
						}
						if (!node.contents)
							node.contents = [];
						if (node.contents.length > newSize)
							node.contents.length = newSize;
						else
							while (node.contents.length < newSize)
								node.contents.push(0);
						node.usedBytes = newSize;
					}, node_ops: {
						getattr: function (node) {
							var attr = {};
							attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
							attr.ino = node.id;
							attr.mode = node.mode;
							attr.nlink = 1;
							attr.uid = 0;
							attr.gid = 0;
							attr.rdev = node.rdev;
							if (FS.isDir(node.mode)) {
								attr.size = 4096;
							} else if (FS.isFile(node.mode)) {
								attr.size = node.usedBytes;
							} else if (FS.isLink(node.mode)) {
								attr.size = node.link.length;
							} else {
								attr.size = 0;
							}
							attr.atime = new Date(node.timestamp);
							attr.mtime = new Date(node.timestamp);
							attr.ctime = new Date(node.timestamp);
							attr.blksize = 4096;
							attr.blocks = Math.ceil(attr.size / attr.blksize);
							return attr;
						}, setattr: function (node, attr) {
							if (attr.mode !== void 0) {
								node.mode = attr.mode;
							}
							if (attr.timestamp !== void 0) {
								node.timestamp = attr.timestamp;
							}
							if (attr.size !== void 0) {
								MEMFS.resizeFileStorage(node, attr.size);
							}
						}, lookup: function (parent, name2) {
							throw FS.genericErrors[44];
						}, mknod: function (parent, name2, mode, dev) {
							return MEMFS.createNode(parent, name2, mode, dev);
						}, rename: function (old_node, new_dir, new_name) {
							if (FS.isDir(old_node.mode)) {
								var new_node;
								try {
									new_node = FS.lookupNode(new_dir, new_name);
								} catch (e) {
								}
								if (new_node) {
									for (var i in new_node.contents) {
										throw new FS.ErrnoError(55);
									}
								}
							}
							delete old_node.parent.contents[old_node.name];
							old_node.name = new_name;
							new_dir.contents[new_name] = old_node;
							old_node.parent = new_dir;
						}, unlink: function (parent, name2) {
							delete parent.contents[name2];
						}, rmdir: function (parent, name2) {
							var node = FS.lookupNode(parent, name2);
							for (var i in node.contents) {
								throw new FS.ErrnoError(55);
							}
							delete parent.contents[name2];
						}, readdir: function (node) {
							var entries = [".", ".."];
							for (var key2 in node.contents) {
								if (!node.contents.hasOwnProperty(key2)) {
									continue;
								}
								entries.push(key2);
							}
							return entries;
						}, symlink: function (parent, newname, oldpath) {
							var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
							node.link = oldpath;
							return node;
						}, readlink: function (node) {
							if (!FS.isLink(node.mode)) {
								throw new FS.ErrnoError(28);
							}
							return node.link;
						}
					}, stream_ops: {
						read: function (stream, buffer2, offset, length, position) {
							var contents = stream.node.contents;
							if (position >= stream.node.usedBytes)
								return 0;
							var size = Math.min(stream.node.usedBytes - position, length);
							if (size > 8 && contents.subarray) {
								buffer2.set(contents.subarray(position, position + size), offset);
							} else {
								for (var i = 0; i < size; i++)
									buffer2[offset + i] = contents[position + i];
							}
							return size;
						}, write: function (stream, buffer2, offset, length, position, canOwn) {
							if (buffer2.buffer === HEAP8.buffer) {
								canOwn = false;
							}
							if (!length)
								return 0;
							var node = stream.node;
							node.timestamp = Date.now();
							if (buffer2.subarray && (!node.contents || node.contents.subarray)) {
								if (canOwn) {
									node.contents = buffer2.subarray(offset, offset + length);
									node.usedBytes = length;
									return length;
								} else if (node.usedBytes === 0 && position === 0) {
									node.contents = buffer2.slice(offset, offset + length);
									node.usedBytes = length;
									return length;
								} else if (position + length <= node.usedBytes) {
									node.contents.set(buffer2.subarray(offset, offset + length), position);
									return length;
								}
							}
							MEMFS.expandFileStorage(node, position + length);
							if (node.contents.subarray && buffer2.subarray) {
								node.contents.set(buffer2.subarray(offset, offset + length), position);
							} else {
								for (var i = 0; i < length; i++) {
									node.contents[position + i] = buffer2[offset + i];
								}
							}
							node.usedBytes = Math.max(node.usedBytes, position + length);
							return length;
						}, llseek: function (stream, offset, whence) {
							var position = offset;
							if (whence === 1) {
								position += stream.position;
							} else if (whence === 2) {
								if (FS.isFile(stream.node.mode)) {
									position += stream.node.usedBytes;
								}
							}
							if (position < 0) {
								throw new FS.ErrnoError(28);
							}
							return position;
						}, allocate: function (stream, offset, length) {
							MEMFS.expandFileStorage(stream.node, offset + length);
							stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
						}, mmap: function (stream, address, length, position, prot, flags) {
							assert(address === 0);
							if (!FS.isFile(stream.node.mode)) {
								throw new FS.ErrnoError(43);
							}
							var ptr;
							var allocated;
							var contents = stream.node.contents;
							if (!(flags & 2) && contents.buffer === buffer) {
								allocated = false;
								ptr = contents.byteOffset;
							} else {
								if (position > 0 || position + length < contents.length) {
									if (contents.subarray) {
										contents = contents.subarray(position, position + length);
									} else {
										contents = Array.prototype.slice.call(contents, position, position + length);
									}
								}
								allocated = true;
								ptr = mmapAlloc(length);
								if (!ptr) {
									throw new FS.ErrnoError(48);
								}
								ptr >>>= 0;
								HEAP8.set(contents, ptr >>> 0);
							}
							return { ptr, allocated };
						}, msync: function (stream, buffer2, offset, length, mmapFlags) {
							if (!FS.isFile(stream.node.mode)) {
								throw new FS.ErrnoError(43);
							}
							if (mmapFlags & 2) {
								return 0;
							}
							MEMFS.stream_ops.write(stream, buffer2, 0, length, offset, false);
							return 0;
						}
					}
				};
				var FS = {
					root: null, mounts: [], devices: {}, streams: [], nextInode: 1, nameTable: null, currentPath: "/", initialized: false, ignorePermissions: true, trackingDelegate: {}, tracking: { openFlags: { READ: 1, WRITE: 2 } }, ErrnoError: null, genericErrors: {}, filesystems: null, syncFSRequests: 0, lookupPath: function (path, opts) {
						path = PATH_FS.resolve(FS.cwd(), path);
						opts = opts || {};
						if (!path)
							return { path: "", node: null };
						var defaults = { follow_mount: true, recurse_count: 0 };
						for (var key2 in defaults) {
							if (opts[key2] === void 0) {
								opts[key2] = defaults[key2];
							}
						}
						if (opts.recurse_count > 8) {
							throw new FS.ErrnoError(32);
						}
						var parts = PATH.normalizeArray(path.split("/").filter(function (p) {
							return !!p;
						}), false);
						var current = FS.root;
						var current_path = "/";
						for (var i = 0; i < parts.length; i++) {
							var islast = i === parts.length - 1;
							if (islast && opts.parent) {
								break;
							}
							current = FS.lookupNode(current, parts[i]);
							current_path = PATH.join2(current_path, parts[i]);
							if (FS.isMountpoint(current)) {
								if (!islast || islast && opts.follow_mount) {
									current = current.mounted.root;
								}
							}
							if (!islast || opts.follow) {
								var count = 0;
								while (FS.isLink(current.mode)) {
									var link = FS.readlink(current_path);
									current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
									var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
									current = lookup.node;
									if (count++ > 40) {
										throw new FS.ErrnoError(32);
									}
								}
							}
						}
						return { path: current_path, node: current };
					}, getPath: function (node) {
						var path;
						while (true) {
							if (FS.isRoot(node)) {
								var mount = node.mount.mountpoint;
								if (!path)
									return mount;
								return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
							}
							path = path ? node.name + "/" + path : node.name;
							node = node.parent;
						}
					}, hashName: function (parentid, name2) {
						var hash = 0;
						for (var i = 0; i < name2.length; i++) {
							hash = (hash << 5) - hash + name2.charCodeAt(i) | 0;
						}
						return (parentid + hash >>> 0) % FS.nameTable.length;
					}, hashAddNode: function (node) {
						var hash = FS.hashName(node.parent.id, node.name);
						node.name_next = FS.nameTable[hash];
						FS.nameTable[hash] = node;
					}, hashRemoveNode: function (node) {
						var hash = FS.hashName(node.parent.id, node.name);
						if (FS.nameTable[hash] === node) {
							FS.nameTable[hash] = node.name_next;
						} else {
							var current = FS.nameTable[hash];
							while (current) {
								if (current.name_next === node) {
									current.name_next = node.name_next;
									break;
								}
								current = current.name_next;
							}
						}
					}, lookupNode: function (parent, name2) {
						var errCode = FS.mayLookup(parent);
						if (errCode) {
							throw new FS.ErrnoError(errCode, parent);
						}
						var hash = FS.hashName(parent.id, name2);
						for (var node = FS.nameTable[hash]; node; node = node.name_next) {
							var nodeName = node.name;
							if (node.parent.id === parent.id && nodeName === name2) {
								return node;
							}
						}
						return FS.lookup(parent, name2);
					}, createNode: function (parent, name2, mode, rdev) {
						var node = new FS.FSNode(parent, name2, mode, rdev);
						FS.hashAddNode(node);
						return node;
					}, destroyNode: function (node) {
						FS.hashRemoveNode(node);
					}, isRoot: function (node) {
						return node === node.parent;
					}, isMountpoint: function (node) {
						return !!node.mounted;
					}, isFile: function (mode) {
						return (mode & 61440) === 32768;
					}, isDir: function (mode) {
						return (mode & 61440) === 16384;
					}, isLink: function (mode) {
						return (mode & 61440) === 40960;
					}, isChrdev: function (mode) {
						return (mode & 61440) === 8192;
					}, isBlkdev: function (mode) {
						return (mode & 61440) === 24576;
					}, isFIFO: function (mode) {
						return (mode & 61440) === 4096;
					}, isSocket: function (mode) {
						return (mode & 49152) === 49152;
					}, flagModes: { "r": 0, "r+": 2, "w": 577, "w+": 578, "a": 1089, "a+": 1090 }, modeStringToFlags: function (str) {
						var flags = FS.flagModes[str];
						if (typeof flags === "undefined") {
							throw new Error("Unknown file open mode: " + str);
						}
						return flags;
					}, flagsToPermissionString: function (flag) {
						var perms = ["r", "w", "rw"][flag & 3];
						if (flag & 512) {
							perms += "w";
						}
						return perms;
					}, nodePermissions: function (node, perms) {
						if (FS.ignorePermissions) {
							return 0;
						}
						if (perms.indexOf("r") !== -1 && !(node.mode & 292)) {
							return 2;
						} else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) {
							return 2;
						} else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) {
							return 2;
						}
						return 0;
					}, mayLookup: function (dir) {
						var errCode = FS.nodePermissions(dir, "x");
						if (errCode)
							return errCode;
						if (!dir.node_ops.lookup)
							return 2;
						return 0;
					}, mayCreate: function (dir, name2) {
						try {
							var node = FS.lookupNode(dir, name2);
							return 20;
						} catch (e) {
						}
						return FS.nodePermissions(dir, "wx");
					}, mayDelete: function (dir, name2, isdir) {
						var node;
						try {
							node = FS.lookupNode(dir, name2);
						} catch (e) {
							return e.errno;
						}
						var errCode = FS.nodePermissions(dir, "wx");
						if (errCode) {
							return errCode;
						}
						if (isdir) {
							if (!FS.isDir(node.mode)) {
								return 54;
							}
							if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
								return 10;
							}
						} else {
							if (FS.isDir(node.mode)) {
								return 31;
							}
						}
						return 0;
					}, mayOpen: function (node, flags) {
						if (!node) {
							return 44;
						}
						if (FS.isLink(node.mode)) {
							return 32;
						} else if (FS.isDir(node.mode)) {
							if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {
								return 31;
							}
						}
						return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
					}, MAX_OPEN_FDS: 4096, nextfd: function (fd_start, fd_end) {
						fd_start = fd_start || 0;
						fd_end = fd_end || FS.MAX_OPEN_FDS;
						for (var fd = fd_start; fd <= fd_end; fd++) {
							if (!FS.streams[fd]) {
								return fd;
							}
						}
						throw new FS.ErrnoError(33);
					}, getStream: function (fd) {
						return FS.streams[fd];
					}, createStream: function (stream, fd_start, fd_end) {
						if (!FS.FSStream) {
							FS.FSStream = function () {
							};
							FS.FSStream.prototype = {
								object: {
									get: function () {
										return this.node;
									}, set: function (val) {
										this.node = val;
									}
								}, isRead: {
									get: function () {
										return (this.flags & 2097155) !== 1;
									}
								}, isWrite: {
									get: function () {
										return (this.flags & 2097155) !== 0;
									}
								}, isAppend: {
									get: function () {
										return this.flags & 1024;
									}
								}
							};
						}
						var newStream = new FS.FSStream();
						for (var p in stream) {
							newStream[p] = stream[p];
						}
						stream = newStream;
						var fd = FS.nextfd(fd_start, fd_end);
						stream.fd = fd;
						FS.streams[fd] = stream;
						return stream;
					}, closeStream: function (fd) {
						FS.streams[fd] = null;
					}, chrdev_stream_ops: {
						open: function (stream) {
							var device = FS.getDevice(stream.node.rdev);
							stream.stream_ops = device.stream_ops;
							if (stream.stream_ops.open) {
								stream.stream_ops.open(stream);
							}
						}, llseek: function () {
							throw new FS.ErrnoError(70);
						}
					}, major: function (dev) {
						return dev >> 8;
					}, minor: function (dev) {
						return dev & 255;
					}, makedev: function (ma, mi) {
						return ma << 8 | mi;
					}, registerDevice: function (dev, ops) {
						FS.devices[dev] = { stream_ops: ops };
					}, getDevice: function (dev) {
						return FS.devices[dev];
					}, getMounts: function (mount) {
						var mounts = [];
						var check = [mount];
						while (check.length) {
							var m = check.pop();
							mounts.push(m);
							check.push.apply(check, m.mounts);
						}
						return mounts;
					}, syncfs: function (populate, callback) {
						if (typeof populate === "function") {
							callback = populate;
							populate = false;
						}
						FS.syncFSRequests++;
						if (FS.syncFSRequests > 1) {
							err("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work");
						}
						var mounts = FS.getMounts(FS.root.mount);
						var completed = 0;
						function doCallback(errCode) {
							FS.syncFSRequests--;
							return callback(errCode);
						}
						function done(errCode) {
							if (errCode) {
								if (!done.errored) {
									done.errored = true;
									return doCallback(errCode);
								}
								return;
							}
							if (++completed >= mounts.length) {
								doCallback(null);
							}
						}
						mounts.forEach(function (mount) {
							if (!mount.type.syncfs) {
								return done(null);
							}
							mount.type.syncfs(mount, populate, done);
						});
					}, mount: function (type, opts, mountpoint) {
						var root = mountpoint === "/";
						var pseudo = !mountpoint;
						var node;
						if (root && FS.root) {
							throw new FS.ErrnoError(10);
						} else if (!root && !pseudo) {
							var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
							mountpoint = lookup.path;
							node = lookup.node;
							if (FS.isMountpoint(node)) {
								throw new FS.ErrnoError(10);
							}
							if (!FS.isDir(node.mode)) {
								throw new FS.ErrnoError(54);
							}
						}
						var mount = { type, opts, mountpoint, mounts: [] };
						var mountRoot = type.mount(mount);
						mountRoot.mount = mount;
						mount.root = mountRoot;
						if (root) {
							FS.root = mountRoot;
						} else if (node) {
							node.mounted = mount;
							if (node.mount) {
								node.mount.mounts.push(mount);
							}
						}
						return mountRoot;
					}, unmount: function (mountpoint) {
						var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
						if (!FS.isMountpoint(lookup.node)) {
							throw new FS.ErrnoError(28);
						}
						var node = lookup.node;
						var mount = node.mounted;
						var mounts = FS.getMounts(mount);
						Object.keys(FS.nameTable).forEach(function (hash) {
							var current = FS.nameTable[hash];
							while (current) {
								var next = current.name_next;
								if (mounts.indexOf(current.mount) !== -1) {
									FS.destroyNode(current);
								}
								current = next;
							}
						});
						node.mounted = null;
						var idx = node.mount.mounts.indexOf(mount);
						node.mount.mounts.splice(idx, 1);
					}, lookup: function (parent, name2) {
						return parent.node_ops.lookup(parent, name2);
					}, mknod: function (path, mode, dev) {
						var lookup = FS.lookupPath(path, { parent: true });
						var parent = lookup.node;
						var name2 = PATH.basename(path);
						if (!name2 || name2 === "." || name2 === "..") {
							throw new FS.ErrnoError(28);
						}
						var errCode = FS.mayCreate(parent, name2);
						if (errCode) {
							throw new FS.ErrnoError(errCode);
						}
						if (!parent.node_ops.mknod) {
							throw new FS.ErrnoError(63);
						}
						return parent.node_ops.mknod(parent, name2, mode, dev);
					}, create: function (path, mode) {
						mode = mode !== void 0 ? mode : 438;
						mode &= 4095;
						mode |= 32768;
						return FS.mknod(path, mode, 0);
					}, mkdir: function (path, mode) {
						mode = mode !== void 0 ? mode : 511;
						mode &= 511 | 512;
						mode |= 16384;
						return FS.mknod(path, mode, 0);
					}, mkdirTree: function (path, mode) {
						var dirs = path.split("/");
						var d = "";
						for (var i = 0; i < dirs.length; ++i) {
							if (!dirs[i])
								continue;
							d += "/" + dirs[i];
							try {
								FS.mkdir(d, mode);
							} catch (e) {
								if (e.errno != 20)
									throw e;
							}
						}
					}, mkdev: function (path, mode, dev) {
						if (typeof dev === "undefined") {
							dev = mode;
							mode = 438;
						}
						mode |= 8192;
						return FS.mknod(path, mode, dev);
					}, symlink: function (oldpath, newpath) {
						if (!PATH_FS.resolve(oldpath)) {
							throw new FS.ErrnoError(44);
						}
						var lookup = FS.lookupPath(newpath, { parent: true });
						var parent = lookup.node;
						if (!parent) {
							throw new FS.ErrnoError(44);
						}
						var newname = PATH.basename(newpath);
						var errCode = FS.mayCreate(parent, newname);
						if (errCode) {
							throw new FS.ErrnoError(errCode);
						}
						if (!parent.node_ops.symlink) {
							throw new FS.ErrnoError(63);
						}
						return parent.node_ops.symlink(parent, newname, oldpath);
					}, rename: function (old_path, new_path) {
						var old_dirname = PATH.dirname(old_path);
						var new_dirname = PATH.dirname(new_path);
						var old_name = PATH.basename(old_path);
						var new_name = PATH.basename(new_path);
						var lookup, old_dir, new_dir;
						lookup = FS.lookupPath(old_path, { parent: true });
						old_dir = lookup.node;
						lookup = FS.lookupPath(new_path, { parent: true });
						new_dir = lookup.node;
						if (!old_dir || !new_dir)
							throw new FS.ErrnoError(44);
						if (old_dir.mount !== new_dir.mount) {
							throw new FS.ErrnoError(75);
						}
						var old_node = FS.lookupNode(old_dir, old_name);
						var relative = PATH_FS.relative(old_path, new_dirname);
						if (relative.charAt(0) !== ".") {
							throw new FS.ErrnoError(28);
						}
						relative = PATH_FS.relative(new_path, old_dirname);
						if (relative.charAt(0) !== ".") {
							throw new FS.ErrnoError(55);
						}
						var new_node;
						try {
							new_node = FS.lookupNode(new_dir, new_name);
						} catch (e) {
						}
						if (old_node === new_node) {
							return;
						}
						var isdir = FS.isDir(old_node.mode);
						var errCode = FS.mayDelete(old_dir, old_name, isdir);
						if (errCode) {
							throw new FS.ErrnoError(errCode);
						}
						errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
						if (errCode) {
							throw new FS.ErrnoError(errCode);
						}
						if (!old_dir.node_ops.rename) {
							throw new FS.ErrnoError(63);
						}
						if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
							throw new FS.ErrnoError(10);
						}
						if (new_dir !== old_dir) {
							errCode = FS.nodePermissions(old_dir, "w");
							if (errCode) {
								throw new FS.ErrnoError(errCode);
							}
						}
						try {
							if (FS.trackingDelegate["willMovePath"]) {
								FS.trackingDelegate["willMovePath"](old_path, new_path);
							}
						} catch (e) {
							err("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
						}
						FS.hashRemoveNode(old_node);
						try {
							old_dir.node_ops.rename(old_node, new_dir, new_name);
						} catch (e) {
							throw e;
						} finally {
							FS.hashAddNode(old_node);
						}
						try {
							if (FS.trackingDelegate["onMovePath"])
								FS.trackingDelegate["onMovePath"](old_path, new_path);
						} catch (e) {
							err("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
						}
					}, rmdir: function (path) {
						var lookup = FS.lookupPath(path, { parent: true });
						var parent = lookup.node;
						var name2 = PATH.basename(path);
						var node = FS.lookupNode(parent, name2);
						var errCode = FS.mayDelete(parent, name2, true);
						if (errCode) {
							throw new FS.ErrnoError(errCode);
						}
						if (!parent.node_ops.rmdir) {
							throw new FS.ErrnoError(63);
						}
						if (FS.isMountpoint(node)) {
							throw new FS.ErrnoError(10);
						}
						try {
							if (FS.trackingDelegate["willDeletePath"]) {
								FS.trackingDelegate["willDeletePath"](path);
							}
						} catch (e) {
							err("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
						}
						parent.node_ops.rmdir(parent, name2);
						FS.destroyNode(node);
						try {
							if (FS.trackingDelegate["onDeletePath"])
								FS.trackingDelegate["onDeletePath"](path);
						} catch (e) {
							err("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
						}
					}, readdir: function (path) {
						var lookup = FS.lookupPath(path, { follow: true });
						var node = lookup.node;
						if (!node.node_ops.readdir) {
							throw new FS.ErrnoError(54);
						}
						return node.node_ops.readdir(node);
					}, unlink: function (path) {
						var lookup = FS.lookupPath(path, { parent: true });
						var parent = lookup.node;
						var name2 = PATH.basename(path);
						var node = FS.lookupNode(parent, name2);
						var errCode = FS.mayDelete(parent, name2, false);
						if (errCode) {
							throw new FS.ErrnoError(errCode);
						}
						if (!parent.node_ops.unlink) {
							throw new FS.ErrnoError(63);
						}
						if (FS.isMountpoint(node)) {
							throw new FS.ErrnoError(10);
						}
						try {
							if (FS.trackingDelegate["willDeletePath"]) {
								FS.trackingDelegate["willDeletePath"](path);
							}
						} catch (e) {
							err("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
						}
						parent.node_ops.unlink(parent, name2);
						FS.destroyNode(node);
						try {
							if (FS.trackingDelegate["onDeletePath"])
								FS.trackingDelegate["onDeletePath"](path);
						} catch (e) {
							err("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
						}
					}, readlink: function (path) {
						var lookup = FS.lookupPath(path);
						var link = lookup.node;
						if (!link) {
							throw new FS.ErrnoError(44);
						}
						if (!link.node_ops.readlink) {
							throw new FS.ErrnoError(28);
						}
						return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
					}, stat: function (path, dontFollow) {
						var lookup = FS.lookupPath(path, { follow: !dontFollow });
						var node = lookup.node;
						if (!node) {
							throw new FS.ErrnoError(44);
						}
						if (!node.node_ops.getattr) {
							throw new FS.ErrnoError(63);
						}
						return node.node_ops.getattr(node);
					}, lstat: function (path) {
						return FS.stat(path, true);
					}, chmod: function (path, mode, dontFollow) {
						var node;
						if (typeof path === "string") {
							var lookup = FS.lookupPath(path, { follow: !dontFollow });
							node = lookup.node;
						} else {
							node = path;
						}
						if (!node.node_ops.setattr) {
							throw new FS.ErrnoError(63);
						}
						node.node_ops.setattr(node, { mode: mode & 4095 | node.mode & ~4095, timestamp: Date.now() });
					}, lchmod: function (path, mode) {
						FS.chmod(path, mode, true);
					}, fchmod: function (fd, mode) {
						var stream = FS.getStream(fd);
						if (!stream) {
							throw new FS.ErrnoError(8);
						}
						FS.chmod(stream.node, mode);
					}, chown: function (path, uid, gid, dontFollow) {
						var node;
						if (typeof path === "string") {
							var lookup = FS.lookupPath(path, { follow: !dontFollow });
							node = lookup.node;
						} else {
							node = path;
						}
						if (!node.node_ops.setattr) {
							throw new FS.ErrnoError(63);
						}
						node.node_ops.setattr(node, { timestamp: Date.now() });
					}, lchown: function (path, uid, gid) {
						FS.chown(path, uid, gid, true);
					}, fchown: function (fd, uid, gid) {
						var stream = FS.getStream(fd);
						if (!stream) {
							throw new FS.ErrnoError(8);
						}
						FS.chown(stream.node, uid, gid);
					}, truncate: function (path, len) {
						if (len < 0) {
							throw new FS.ErrnoError(28);
						}
						var node;
						if (typeof path === "string") {
							var lookup = FS.lookupPath(path, { follow: true });
							node = lookup.node;
						} else {
							node = path;
						}
						if (!node.node_ops.setattr) {
							throw new FS.ErrnoError(63);
						}
						if (FS.isDir(node.mode)) {
							throw new FS.ErrnoError(31);
						}
						if (!FS.isFile(node.mode)) {
							throw new FS.ErrnoError(28);
						}
						var errCode = FS.nodePermissions(node, "w");
						if (errCode) {
							throw new FS.ErrnoError(errCode);
						}
						node.node_ops.setattr(node, { size: len, timestamp: Date.now() });
					}, ftruncate: function (fd, len) {
						var stream = FS.getStream(fd);
						if (!stream) {
							throw new FS.ErrnoError(8);
						}
						if ((stream.flags & 2097155) === 0) {
							throw new FS.ErrnoError(28);
						}
						FS.truncate(stream.node, len);
					}, utime: function (path, atime, mtime) {
						var lookup = FS.lookupPath(path, { follow: true });
						var node = lookup.node;
						node.node_ops.setattr(node, { timestamp: Math.max(atime, mtime) });
					}, open: function (path, flags, mode, fd_start, fd_end) {
						if (path === "") {
							throw new FS.ErrnoError(44);
						}
						flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
						mode = typeof mode === "undefined" ? 438 : mode;
						if (flags & 64) {
							mode = mode & 4095 | 32768;
						} else {
							mode = 0;
						}
						var node;
						if (typeof path === "object") {
							node = path;
						} else {
							path = PATH.normalize(path);
							try {
								var lookup = FS.lookupPath(path, { follow: !(flags & 131072) });
								node = lookup.node;
							} catch (e) {
							}
						}
						var created = false;
						if (flags & 64) {
							if (node) {
								if (flags & 128) {
									throw new FS.ErrnoError(20);
								}
							} else {
								node = FS.mknod(path, mode, 0);
								created = true;
							}
						}
						if (!node) {
							throw new FS.ErrnoError(44);
						}
						if (FS.isChrdev(node.mode)) {
							flags &= ~512;
						}
						if (flags & 65536 && !FS.isDir(node.mode)) {
							throw new FS.ErrnoError(54);
						}
						if (!created) {
							var errCode = FS.mayOpen(node, flags);
							if (errCode) {
								throw new FS.ErrnoError(errCode);
							}
						}
						if (flags & 512) {
							FS.truncate(node, 0);
						}
						flags &= ~(128 | 512 | 131072);
						var stream = FS.createStream({ node, path: FS.getPath(node), flags, seekable: true, position: 0, stream_ops: node.stream_ops, ungotten: [], error: false }, fd_start, fd_end);
						if (stream.stream_ops.open) {
							stream.stream_ops.open(stream);
						}
						if (Module["logReadFiles"] && !(flags & 1)) {
							if (!FS.readFiles)
								FS.readFiles = {};
							if (!(path in FS.readFiles)) {
								FS.readFiles[path] = 1;
								err("FS.trackingDelegate error on read file: " + path);
							}
						}
						try {
							if (FS.trackingDelegate["onOpenFile"]) {
								var trackingFlags = 0;
								if ((flags & 2097155) !== 1) {
									trackingFlags |= FS.tracking.openFlags.READ;
								}
								if ((flags & 2097155) !== 0) {
									trackingFlags |= FS.tracking.openFlags.WRITE;
								}
								FS.trackingDelegate["onOpenFile"](path, trackingFlags);
							}
						} catch (e) {
							err("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
						}
						return stream;
					}, close: function (stream) {
						if (FS.isClosed(stream)) {
							throw new FS.ErrnoError(8);
						}
						if (stream.getdents)
							stream.getdents = null;
						try {
							if (stream.stream_ops.close) {
								stream.stream_ops.close(stream);
							}
						} catch (e) {
							throw e;
						} finally {
							FS.closeStream(stream.fd);
						}
						stream.fd = null;
					}, isClosed: function (stream) {
						return stream.fd === null;
					}, llseek: function (stream, offset, whence) {
						if (FS.isClosed(stream)) {
							throw new FS.ErrnoError(8);
						}
						if (!stream.seekable || !stream.stream_ops.llseek) {
							throw new FS.ErrnoError(70);
						}
						if (whence != 0 && whence != 1 && whence != 2) {
							throw new FS.ErrnoError(28);
						}
						stream.position = stream.stream_ops.llseek(stream, offset, whence);
						stream.ungotten = [];
						return stream.position;
					}, read: function (stream, buffer2, offset, length, position) {
						offset >>>= 0;
						if (length < 0 || position < 0) {
							throw new FS.ErrnoError(28);
						}
						if (FS.isClosed(stream)) {
							throw new FS.ErrnoError(8);
						}
						if ((stream.flags & 2097155) === 1) {
							throw new FS.ErrnoError(8);
						}
						if (FS.isDir(stream.node.mode)) {
							throw new FS.ErrnoError(31);
						}
						if (!stream.stream_ops.read) {
							throw new FS.ErrnoError(28);
						}
						var seeking = typeof position !== "undefined";
						if (!seeking) {
							position = stream.position;
						} else if (!stream.seekable) {
							throw new FS.ErrnoError(70);
						}
						var bytesRead = stream.stream_ops.read(stream, buffer2, offset, length, position);
						if (!seeking)
							stream.position += bytesRead;
						return bytesRead;
					}, write: function (stream, buffer2, offset, length, position, canOwn) {
						offset >>>= 0;
						if (length < 0 || position < 0) {
							throw new FS.ErrnoError(28);
						}
						if (FS.isClosed(stream)) {
							throw new FS.ErrnoError(8);
						}
						if ((stream.flags & 2097155) === 0) {
							throw new FS.ErrnoError(8);
						}
						if (FS.isDir(stream.node.mode)) {
							throw new FS.ErrnoError(31);
						}
						if (!stream.stream_ops.write) {
							throw new FS.ErrnoError(28);
						}
						if (stream.seekable && stream.flags & 1024) {
							FS.llseek(stream, 0, 2);
						}
						var seeking = typeof position !== "undefined";
						if (!seeking) {
							position = stream.position;
						} else if (!stream.seekable) {
							throw new FS.ErrnoError(70);
						}
						var bytesWritten = stream.stream_ops.write(stream, buffer2, offset, length, position, canOwn);
						if (!seeking)
							stream.position += bytesWritten;
						try {
							if (stream.path && FS.trackingDelegate["onWriteToFile"])
								FS.trackingDelegate["onWriteToFile"](stream.path);
						} catch (e) {
							err("FS.trackingDelegate['onWriteToFile']('" + stream.path + "') threw an exception: " + e.message);
						}
						return bytesWritten;
					}, allocate: function (stream, offset, length) {
						if (FS.isClosed(stream)) {
							throw new FS.ErrnoError(8);
						}
						if (offset < 0 || length <= 0) {
							throw new FS.ErrnoError(28);
						}
						if ((stream.flags & 2097155) === 0) {
							throw new FS.ErrnoError(8);
						}
						if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
							throw new FS.ErrnoError(43);
						}
						if (!stream.stream_ops.allocate) {
							throw new FS.ErrnoError(138);
						}
						stream.stream_ops.allocate(stream, offset, length);
					}, mmap: function (stream, address, length, position, prot, flags) {
						address >>>= 0;
						if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
							throw new FS.ErrnoError(2);
						}
						if ((stream.flags & 2097155) === 1) {
							throw new FS.ErrnoError(2);
						}
						if (!stream.stream_ops.mmap) {
							throw new FS.ErrnoError(43);
						}
						return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
					}, msync: function (stream, buffer2, offset, length, mmapFlags) {
						offset >>>= 0;
						if (!stream || !stream.stream_ops.msync) {
							return 0;
						}
						return stream.stream_ops.msync(stream, buffer2, offset, length, mmapFlags);
					}, munmap: function (stream) {
						return 0;
					}, ioctl: function (stream, cmd, arg) {
						if (!stream.stream_ops.ioctl) {
							throw new FS.ErrnoError(59);
						}
						return stream.stream_ops.ioctl(stream, cmd, arg);
					}, readFile: function (path, opts) {
						opts = opts || {};
						opts.flags = opts.flags || 0;
						opts.encoding = opts.encoding || "binary";
						if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
							throw new Error('Invalid encoding type "' + opts.encoding + '"');
						}
						var ret;
						var stream = FS.open(path, opts.flags);
						var stat = FS.stat(path);
						var length = stat.size;
						var buf = new Uint8Array(length);
						FS.read(stream, buf, 0, length, 0);
						if (opts.encoding === "utf8") {
							ret = UTF8ArrayToString(buf, 0);
						} else if (opts.encoding === "binary") {
							ret = buf;
						}
						FS.close(stream);
						return ret;
					}, writeFile: function (path, data, opts) {
						opts = opts || {};
						opts.flags = opts.flags || 577;
						var stream = FS.open(path, opts.flags, opts.mode);
						if (typeof data === "string") {
							var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
							var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
							FS.write(stream, buf, 0, actualNumBytes, void 0, opts.canOwn);
						} else if (ArrayBuffer.isView(data)) {
							FS.write(stream, data, 0, data.byteLength, void 0, opts.canOwn);
						} else {
							throw new Error("Unsupported data type");
						}
						FS.close(stream);
					}, cwd: function () {
						return FS.currentPath;
					}, chdir: function (path) {
						var lookup = FS.lookupPath(path, { follow: true });
						if (lookup.node === null) {
							throw new FS.ErrnoError(44);
						}
						if (!FS.isDir(lookup.node.mode)) {
							throw new FS.ErrnoError(54);
						}
						var errCode = FS.nodePermissions(lookup.node, "x");
						if (errCode) {
							throw new FS.ErrnoError(errCode);
						}
						FS.currentPath = lookup.path;
					}, createDefaultDirectories: function () {
						FS.mkdir("/tmp");
						FS.mkdir("/home");
						FS.mkdir("/home/web_user");
					}, createDefaultDevices: function () {
						FS.mkdir("/dev");
						FS.registerDevice(FS.makedev(1, 3), {
							read: function () {
								return 0;
							}, write: function (stream, buffer2, offset, length, pos) {
								return length;
							}
						});
						FS.mkdev("/dev/null", FS.makedev(1, 3));
						TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
						TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
						FS.mkdev("/dev/tty", FS.makedev(5, 0));
						FS.mkdev("/dev/tty1", FS.makedev(6, 0));
						var random_device = getRandomDevice();
						FS.createDevice("/dev", "random", random_device);
						FS.createDevice("/dev", "urandom", random_device);
						FS.mkdir("/dev/shm");
						FS.mkdir("/dev/shm/tmp");
					}, createSpecialDirectories: function () {
						FS.mkdir("/proc");
						FS.mkdir("/proc/self");
						FS.mkdir("/proc/self/fd");
						FS.mount({
							mount: function () {
								var node = FS.createNode("/proc/self", "fd", 16384 | 511, 73);
								node.node_ops = {
									lookup: function (parent, name2) {
										var fd = +name2;
										var stream = FS.getStream(fd);
										if (!stream)
											throw new FS.ErrnoError(8);
										var ret = {
											parent: null, mount: { mountpoint: "fake" }, node_ops: {
												readlink: function () {
													return stream.path;
												}
											}
										};
										ret.parent = ret;
										return ret;
									}
								};
								return node;
							}
						}, {}, "/proc/self/fd");
					}, createStandardStreams: function () {
						if (Module["stdin"]) {
							FS.createDevice("/dev", "stdin", Module["stdin"]);
						} else {
							FS.symlink("/dev/tty", "/dev/stdin");
						}
						if (Module["stdout"]) {
							FS.createDevice("/dev", "stdout", null, Module["stdout"]);
						} else {
							FS.symlink("/dev/tty", "/dev/stdout");
						}
						if (Module["stderr"]) {
							FS.createDevice("/dev", "stderr", null, Module["stderr"]);
						} else {
							FS.symlink("/dev/tty1", "/dev/stderr");
						}
						FS.open("/dev/stdin", 0);
						FS.open("/dev/stdout", 1);
						FS.open("/dev/stderr", 1);
					}, ensureErrnoError: function () {
						if (FS.ErrnoError)
							return;
						FS.ErrnoError = function ErrnoError(errno, node) {
							this.node = node;
							this.setErrno = function (errno2) {
								this.errno = errno2;
							};
							this.setErrno(errno);
							this.message = "FS error";
						};
						FS.ErrnoError.prototype = new Error();
						FS.ErrnoError.prototype.constructor = FS.ErrnoError;
						[44].forEach(function (code) {
							FS.genericErrors[code] = new FS.ErrnoError(code);
							FS.genericErrors[code].stack = "<generic error, no stack>";
						});
					}, staticInit: function () {
						FS.ensureErrnoError();
						FS.nameTable = new Array(4096);
						FS.mount(MEMFS, {}, "/");
						FS.createDefaultDirectories();
						FS.createDefaultDevices();
						FS.createSpecialDirectories();
						FS.filesystems = { "MEMFS": MEMFS };
					}, init: function (input, output, error) {
						FS.init.initialized = true;
						FS.ensureErrnoError();
						Module["stdin"] = input || Module["stdin"];
						Module["stdout"] = output || Module["stdout"];
						Module["stderr"] = error || Module["stderr"];
						FS.createStandardStreams();
					}, quit: function () {
						FS.init.initialized = false;
						var fflush = Module["_fflush"];
						if (fflush)
							fflush(0);
						for (var i = 0; i < FS.streams.length; i++) {
							var stream = FS.streams[i];
							if (!stream) {
								continue;
							}
							FS.close(stream);
						}
					}, getMode: function (canRead, canWrite) {
						var mode = 0;
						if (canRead)
							mode |= 292 | 73;
						if (canWrite)
							mode |= 146;
						return mode;
					}, findObject: function (path, dontResolveLastLink) {
						var ret = FS.analyzePath(path, dontResolveLastLink);
						if (ret.exists) {
							return ret.object;
						} else {
							return null;
						}
					}, analyzePath: function (path, dontResolveLastLink) {
						try {
							var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
							path = lookup.path;
						} catch (e) {
						}
						var ret = { isRoot: false, exists: false, error: 0, name: null, path: null, object: null, parentExists: false, parentPath: null, parentObject: null };
						try {
							var lookup = FS.lookupPath(path, { parent: true });
							ret.parentExists = true;
							ret.parentPath = lookup.path;
							ret.parentObject = lookup.node;
							ret.name = PATH.basename(path);
							lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
							ret.exists = true;
							ret.path = lookup.path;
							ret.object = lookup.node;
							ret.name = lookup.node.name;
							ret.isRoot = lookup.path === "/";
						} catch (e) {
							ret.error = e.errno;
						}
						return ret;
					}, createPath: function (parent, path, canRead, canWrite) {
						parent = typeof parent === "string" ? parent : FS.getPath(parent);
						var parts = path.split("/").reverse();
						while (parts.length) {
							var part = parts.pop();
							if (!part)
								continue;
							var current = PATH.join2(parent, part);
							try {
								FS.mkdir(current);
							} catch (e) {
							}
							parent = current;
						}
						return current;
					}, createFile: function (parent, name2, properties, canRead, canWrite) {
						var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name2);
						var mode = FS.getMode(canRead, canWrite);
						return FS.create(path, mode);
					}, createDataFile: function (parent, name2, data, canRead, canWrite, canOwn) {
						var path = name2 ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name2) : parent;
						var mode = FS.getMode(canRead, canWrite);
						var node = FS.create(path, mode);
						if (data) {
							if (typeof data === "string") {
								var arr = new Array(data.length);
								for (var i = 0, len = data.length; i < len; ++i)
									arr[i] = data.charCodeAt(i);
								data = arr;
							}
							FS.chmod(node, mode | 146);
							var stream = FS.open(node, 577);
							FS.write(stream, data, 0, data.length, 0, canOwn);
							FS.close(stream);
							FS.chmod(node, mode);
						}
						return node;
					}, createDevice: function (parent, name2, input, output) {
						var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name2);
						var mode = FS.getMode(!!input, !!output);
						if (!FS.createDevice.major)
							FS.createDevice.major = 64;
						var dev = FS.makedev(FS.createDevice.major++, 0);
						FS.registerDevice(dev, {
							open: function (stream) {
								stream.seekable = false;
							}, close: function (stream) {
								if (output && output.buffer && output.buffer.length) {
									output(10);
								}
							}, read: function (stream, buffer2, offset, length, pos) {
								var bytesRead = 0;
								for (var i = 0; i < length; i++) {
									var result;
									try {
										result = input();
									} catch (e) {
										throw new FS.ErrnoError(29);
									}
									if (result === void 0 && bytesRead === 0) {
										throw new FS.ErrnoError(6);
									}
									if (result === null || result === void 0)
										break;
									bytesRead++;
									buffer2[offset + i] = result;
								}
								if (bytesRead) {
									stream.node.timestamp = Date.now();
								}
								return bytesRead;
							}, write: function (stream, buffer2, offset, length, pos) {
								for (var i = 0; i < length; i++) {
									try {
										output(buffer2[offset + i]);
									} catch (e) {
										throw new FS.ErrnoError(29);
									}
								}
								if (length) {
									stream.node.timestamp = Date.now();
								}
								return i;
							}
						});
						return FS.mkdev(path, mode, dev);
					}, forceLoadFile: function (obj) {
						if (obj.isDevice || obj.isFolder || obj.link || obj.contents)
							return true;
						if (typeof XMLHttpRequest !== "undefined") {
							throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
						} else if (read_) {
							try {
								obj.contents = intArrayFromString(read_(obj.url), true);
								obj.usedBytes = obj.contents.length;
							} catch (e) {
								throw new FS.ErrnoError(29);
							}
						} else {
							throw new Error("Cannot load without read() or XMLHttpRequest.");
						}
					}, createLazyFile: function (parent, name2, url, canRead, canWrite) {
						function LazyUint8Array() {
							this.lengthKnown = false;
							this.chunks = [];
						}
						LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
							if (idx > this.length - 1 || idx < 0) {
								return void 0;
							}
							var chunkOffset = idx % this.chunkSize;
							var chunkNum = idx / this.chunkSize | 0;
							return this.getter(chunkNum)[chunkOffset];
						};
						LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
							this.getter = getter;
						};
						LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
							var xhr = new XMLHttpRequest();
							xhr.open("HEAD", url, false);
							xhr.send(null);
							if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304))
								throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
							var datalength = Number(xhr.getResponseHeader("Content-length"));
							var header;
							var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
							var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
							var chunkSize = 1024 * 1024;
							if (!hasByteServing)
								chunkSize = datalength;
							var doXHR = function (from, to) {
								if (from > to)
									throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
								if (to > datalength - 1)
									throw new Error("only " + datalength + " bytes available! programmer error!");
								var xhr2 = new XMLHttpRequest();
								xhr2.open("GET", url, false);
								if (datalength !== chunkSize)
									xhr2.setRequestHeader("Range", "bytes=" + from + "-" + to);
								if (typeof Uint8Array != "undefined")
									xhr2.responseType = "arraybuffer";
								if (xhr2.overrideMimeType) {
									xhr2.overrideMimeType("text/plain; charset=x-user-defined");
								}
								xhr2.send(null);
								if (!(xhr2.status >= 200 && xhr2.status < 300 || xhr2.status === 304))
									throw new Error("Couldn't load " + url + ". Status: " + xhr2.status);
								if (xhr2.response !== void 0) {
									return new Uint8Array(xhr2.response || []);
								} else {
									return intArrayFromString(xhr2.responseText || "", true);
								}
							};
							var lazyArray2 = this;
							lazyArray2.setDataGetter(function (chunkNum) {
								var start = chunkNum * chunkSize;
								var end = (chunkNum + 1) * chunkSize - 1;
								end = Math.min(end, datalength - 1);
								if (typeof lazyArray2.chunks[chunkNum] === "undefined") {
									lazyArray2.chunks[chunkNum] = doXHR(start, end);
								}
								if (typeof lazyArray2.chunks[chunkNum] === "undefined")
									throw new Error("doXHR failed!");
								return lazyArray2.chunks[chunkNum];
							});
							if (usesGzip || !datalength) {
								chunkSize = datalength = 1;
								datalength = this.getter(0).length;
								chunkSize = datalength;
								out("LazyFiles on gzip forces download of the whole file when length is accessed");
							}
							this._length = datalength;
							this._chunkSize = chunkSize;
							this.lengthKnown = true;
						};
						if (typeof XMLHttpRequest !== "undefined") {
							if (!ENVIRONMENT_IS_WORKER)
								throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
							var lazyArray = new LazyUint8Array();
							Object.defineProperties(lazyArray, {
								length: {
									get: function () {
										if (!this.lengthKnown) {
											this.cacheLength();
										}
										return this._length;
									}
								}, chunkSize: {
									get: function () {
										if (!this.lengthKnown) {
											this.cacheLength();
										}
										return this._chunkSize;
									}
								}
							});
							var properties = { isDevice: false, contents: lazyArray };
						} else {
							var properties = { isDevice: false, url };
						}
						var node = FS.createFile(parent, name2, properties, canRead, canWrite);
						if (properties.contents) {
							node.contents = properties.contents;
						} else if (properties.url) {
							node.contents = null;
							node.url = properties.url;
						}
						Object.defineProperties(node, {
							usedBytes: {
								get: function () {
									return this.contents.length;
								}
							}
						});
						var stream_ops = {};
						var keys = Object.keys(node.stream_ops);
						keys.forEach(function (key2) {
							var fn = node.stream_ops[key2];
							stream_ops[key2] = function forceLoadLazyFile() {
								FS.forceLoadFile(node);
								return fn.apply(null, arguments);
							};
						});
						stream_ops.read = function stream_ops_read(stream, buffer2, offset, length, position) {
							FS.forceLoadFile(node);
							var contents = stream.node.contents;
							if (position >= contents.length)
								return 0;
							var size = Math.min(contents.length - position, length);
							if (contents.slice) {
								for (var i = 0; i < size; i++) {
									buffer2[offset + i] = contents[position + i];
								}
							} else {
								for (var i = 0; i < size; i++) {
									buffer2[offset + i] = contents.get(position + i);
								}
							}
							return size;
						};
						node.stream_ops = stream_ops;
						return node;
					}, createPreloadedFile: function (parent, name2, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
						Browser.init();
						var fullname = name2 ? PATH_FS.resolve(PATH.join2(parent, name2)) : parent;
						function processData(byteArray) {
							function finish(byteArray2) {
								if (preFinish)
									preFinish();
								if (!dontCreateFile) {
									FS.createDataFile(parent, name2, byteArray2, canRead, canWrite, canOwn);
								}
								if (onload)
									onload();
								removeRunDependency();
							}
							var handled = false;
							Module["preloadPlugins"].forEach(function (plugin) {
								if (handled)
									return;
								if (plugin["canHandle"](fullname)) {
									plugin["handle"](byteArray, fullname, finish, function () {
										if (onerror)
											onerror();
										removeRunDependency();
									});
									handled = true;
								}
							});
							if (!handled)
								finish(byteArray);
						}
						addRunDependency();
						if (typeof url == "string") {
							Browser.asyncLoad(url, function (byteArray) {
								processData(byteArray);
							}, onerror);
						} else {
							processData(url);
						}
					}, indexedDB: function () {
						return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
					}, DB_NAME: function () {
						return "EM_FS_" + window.location.pathname;
					}, DB_VERSION: 20, DB_STORE_NAME: "FILE_DATA", saveFilesToDB: function (paths, onload, onerror) {
						onload = onload || function () {
						};
						onerror = onerror || function () {
						};
						var indexedDB = FS.indexedDB();
						try {
							var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
						} catch (e) {
							return onerror(e);
						}
						openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
							out("creating db");
							var db = openRequest.result;
							db.createObjectStore(FS.DB_STORE_NAME);
						};
						openRequest.onsuccess = function openRequest_onsuccess() {
							var db = openRequest.result;
							var transaction = db.transaction([FS.DB_STORE_NAME], "readwrite");
							var files = transaction.objectStore(FS.DB_STORE_NAME);
							var ok = 0, fail = 0, total = paths.length;
							function finish() {
								if (fail == 0)
									onload();
								else
									onerror();
							}
							paths.forEach(function (path) {
								var putRequest = files.put(FS.analyzePath(path).object.contents, path);
								putRequest.onsuccess = function putRequest_onsuccess() {
									ok++;
									if (ok + fail == total)
										finish();
								};
								putRequest.onerror = function putRequest_onerror() {
									fail++;
									if (ok + fail == total)
										finish();
								};
							});
							transaction.onerror = onerror;
						};
						openRequest.onerror = onerror;
					}, loadFilesFromDB: function (paths, onload, onerror) {
						onload = onload || function () {
						};
						onerror = onerror || function () {
						};
						var indexedDB = FS.indexedDB();
						try {
							var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
						} catch (e) {
							return onerror(e);
						}
						openRequest.onupgradeneeded = onerror;
						openRequest.onsuccess = function openRequest_onsuccess() {
							var db = openRequest.result;
							try {
								var transaction = db.transaction([FS.DB_STORE_NAME], "readonly");
							} catch (e) {
								onerror(e);
								return;
							}
							var files = transaction.objectStore(FS.DB_STORE_NAME);
							var ok = 0, fail = 0, total = paths.length;
							function finish() {
								if (fail == 0)
									onload();
								else
									onerror();
							}
							paths.forEach(function (path) {
								var getRequest = files.get(path);
								getRequest.onsuccess = function getRequest_onsuccess() {
									if (FS.analyzePath(path).exists) {
										FS.unlink(path);
									}
									FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
									ok++;
									if (ok + fail == total)
										finish();
								};
								getRequest.onerror = function getRequest_onerror() {
									fail++;
									if (ok + fail == total)
										finish();
								};
							});
							transaction.onerror = onerror;
						};
						openRequest.onerror = onerror;
					}
				};
				var SYSCALLS = {
					mappings: {}, DEFAULT_POLLMASK: 5, umask: 511, calculateAt: function (dirfd, path) {
						if (path[0] !== "/") {
							var dir;
							if (dirfd === -100) {
								dir = FS.cwd();
							} else {
								var dirstream = FS.getStream(dirfd);
								if (!dirstream)
									throw new FS.ErrnoError(8);
								dir = dirstream.path;
							}
							path = PATH.join2(dir, path);
						}
						return path;
					}, doStat: function (func, path, buf) {
						try {
							var stat = func(path);
						} catch (e) {
							if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
								return -54;
							}
							throw e;
						}
						HEAP32[buf >>> 2] = stat.dev;
						HEAP32[buf + 4 >>> 2] = 0;
						HEAP32[buf + 8 >>> 2] = stat.ino;
						HEAP32[buf + 12 >>> 2] = stat.mode;
						HEAP32[buf + 16 >>> 2] = stat.nlink;
						HEAP32[buf + 20 >>> 2] = stat.uid;
						HEAP32[buf + 24 >>> 2] = stat.gid;
						HEAP32[buf + 28 >>> 2] = stat.rdev;
						HEAP32[buf + 32 >>> 2] = 0;
						tempI64 = [stat.size >>> 0, (tempDouble = stat.size, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 40 >>> 2] = tempI64[0], HEAP32[buf + 44 >>> 2] = tempI64[1];
						HEAP32[buf + 48 >>> 2] = 4096;
						HEAP32[buf + 52 >>> 2] = stat.blocks;
						HEAP32[buf + 56 >>> 2] = stat.atime.getTime() / 1e3 | 0;
						HEAP32[buf + 60 >>> 2] = 0;
						HEAP32[buf + 64 >>> 2] = stat.mtime.getTime() / 1e3 | 0;
						HEAP32[buf + 68 >>> 2] = 0;
						HEAP32[buf + 72 >>> 2] = stat.ctime.getTime() / 1e3 | 0;
						HEAP32[buf + 76 >>> 2] = 0;
						tempI64 = [stat.ino >>> 0, (tempDouble = stat.ino, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[buf + 80 >>> 2] = tempI64[0], HEAP32[buf + 84 >>> 2] = tempI64[1];
						return 0;
					}, doMsync: function (addr, stream, len, flags, offset) {
						var buffer2 = HEAPU8.slice(addr, addr + len);
						FS.msync(stream, buffer2, offset, len, flags);
					}, doMkdir: function (path, mode) {
						path = PATH.normalize(path);
						if (path[path.length - 1] === "/")
							path = path.substr(0, path.length - 1);
						FS.mkdir(path, mode, 0);
						return 0;
					}, doMknod: function (path, mode, dev) {
						switch (mode & 61440) {
							case 32768:
							case 8192:
							case 24576:
							case 4096:
							case 49152:
								break;
							default:
								return -28;
						}
						FS.mknod(path, mode, dev);
						return 0;
					}, doReadlink: function (path, buf, bufsize) {
						if (bufsize <= 0)
							return -28;
						var ret = FS.readlink(path);
						var len = Math.min(bufsize, lengthBytesUTF8(ret));
						var endChar = HEAP8[buf + len >>> 0];
						stringToUTF8(ret, buf, bufsize + 1);
						HEAP8[buf + len >>> 0] = endChar;
						return len;
					}, doAccess: function (path, amode) {
						if (amode & ~7) {
							return -28;
						}
						var node;
						var lookup = FS.lookupPath(path, { follow: true });
						node = lookup.node;
						if (!node) {
							return -44;
						}
						var perms = "";
						if (amode & 4)
							perms += "r";
						if (amode & 2)
							perms += "w";
						if (amode & 1)
							perms += "x";
						if (perms && FS.nodePermissions(node, perms)) {
							return -2;
						}
						return 0;
					}, doDup: function (path, flags, suggestFD) {
						var suggest = FS.getStream(suggestFD);
						if (suggest)
							FS.close(suggest);
						return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
					}, doReadv: function (stream, iov, iovcnt, offset) {
						var ret = 0;
						for (var i = 0; i < iovcnt; i++) {
							var ptr = HEAP32[iov + i * 8 >>> 2];
							var len = HEAP32[iov + (i * 8 + 4) >>> 2];
							var curr = FS.read(stream, HEAP8, ptr, len, offset);
							if (curr < 0)
								return -1;
							ret += curr;
							if (curr < len)
								break;
						}
						return ret;
					}, doWritev: function (stream, iov, iovcnt, offset) {
						var ret = 0;
						for (var i = 0; i < iovcnt; i++) {
							var ptr = HEAP32[iov + i * 8 >>> 2];
							var len = HEAP32[iov + (i * 8 + 4) >>> 2];
							var curr = FS.write(stream, HEAP8, ptr, len, offset);
							if (curr < 0)
								return -1;
							ret += curr;
						}
						return ret;
					}, varargs: void 0, get: function () {
						SYSCALLS.varargs += 4;
						var ret = HEAP32[SYSCALLS.varargs - 4 >>> 2];
						return ret;
					}, getStr: function (ptr) {
						var ret = UTF8ToString(ptr);
						return ret;
					}, getStreamFromFD: function (fd) {
						var stream = FS.getStream(fd);
						if (!stream)
							throw new FS.ErrnoError(8);
						return stream;
					}, get64: function (low, high) {
						return low;
					}
				};
				function ___sys_ioctl(fd, op, varargs) {
					SYSCALLS.varargs = varargs;
					try {
						var stream = SYSCALLS.getStreamFromFD(fd);
						switch (op) {
							case 21509:
							case 21505: {
								if (!stream.tty)
									return -59;
								return 0;
							}
							case 21510:
							case 21511:
							case 21512:
							case 21506:
							case 21507:
							case 21508: {
								if (!stream.tty)
									return -59;
								return 0;
							}
							case 21519: {
								if (!stream.tty)
									return -59;
								var argp = SYSCALLS.get();
								HEAP32[argp >>> 2] = 0;
								return 0;
							}
							case 21520: {
								if (!stream.tty)
									return -59;
								return -28;
							}
							case 21531: {
								var argp = SYSCALLS.get();
								return FS.ioctl(stream, op, argp);
							}
							case 21523: {
								if (!stream.tty)
									return -59;
								return 0;
							}
							case 21524: {
								if (!stream.tty)
									return -59;
								return 0;
							}
							default:
								abort("bad ioctl syscall " + op);
						}
					} catch (e) {
						if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
							abort(e);
						return -e.errno;
					}
				}
				function ___sys_open(path, flags, varargs) {
					SYSCALLS.varargs = varargs;
					try {
						var pathname = SYSCALLS.getStr(path);
						var mode = SYSCALLS.get();
						var stream = FS.open(pathname, flags, mode);
						return stream.fd;
					} catch (e) {
						if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
							abort(e);
						return -e.errno;
					}
				}
				var tupleRegistrations = {};
				function runDestructors(destructors) {
					while (destructors.length) {
						var ptr = destructors.pop();
						var del = destructors.pop();
						del(ptr);
					}
				}
				function simpleReadValueFromPointer(pointer) {
					return this["fromWireType"](HEAPU32[pointer >>> 2]);
				}
				var awaitingDependencies = {};
				var registeredTypes = {};
				var typeDependencies = {};
				var char_0 = 48;
				var char_9 = 57;
				function makeLegalFunctionName(name2) {
					if (name2 === void 0) {
						return "_unknown";
					}
					name2 = name2.replace(/[^a-zA-Z0-9_]/g, "$");
					var f = name2.charCodeAt(0);
					if (f >= char_0 && f <= char_9) {
						return "_" + name2;
					} else {
						return name2;
					}
				}
				function createNamedFunction(name2, body) {
					name2 = makeLegalFunctionName(name2);
					return new Function("body", "return function " + name2 + '() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(body);
				}
				function extendError(baseErrorType, errorName) {
					var errorClass = createNamedFunction(errorName, function (message) {
						this.name = errorName;
						this.message = message;
						var stack = new Error(message).stack;
						if (stack !== void 0) {
							this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
						}
					});
					errorClass.prototype = Object.create(baseErrorType.prototype);
					errorClass.prototype.constructor = errorClass;
					errorClass.prototype.toString = function () {
						if (this.message === void 0) {
							return this.name;
						} else {
							return this.name + ": " + this.message;
						}
					};
					return errorClass;
				}
				var InternalError = void 0;
				function throwInternalError(message) {
					throw new InternalError(message);
				}
				function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
					myTypes.forEach(function (type) {
						typeDependencies[type] = dependentTypes;
					});
					function onComplete(typeConverters2) {
						var myTypeConverters = getTypeConverters(typeConverters2);
						if (myTypeConverters.length !== myTypes.length) {
							throwInternalError("Mismatched type converter count");
						}
						for (var i = 0; i < myTypes.length; ++i) {
							registerType(myTypes[i], myTypeConverters[i]);
						}
					}
					var typeConverters = new Array(dependentTypes.length);
					var unregisteredTypes = [];
					var registered = 0;
					dependentTypes.forEach(function (dt, i) {
						if (registeredTypes.hasOwnProperty(dt)) {
							typeConverters[i] = registeredTypes[dt];
						} else {
							unregisteredTypes.push(dt);
							if (!awaitingDependencies.hasOwnProperty(dt)) {
								awaitingDependencies[dt] = [];
							}
							awaitingDependencies[dt].push(function () {
								typeConverters[i] = registeredTypes[dt];
								++registered;
								if (registered === unregisteredTypes.length) {
									onComplete(typeConverters);
								}
							});
						}
					});
					if (unregisteredTypes.length === 0) {
						onComplete(typeConverters);
					}
				}
				function __embind_finalize_value_array(rawTupleType) {
					var reg = tupleRegistrations[rawTupleType];
					delete tupleRegistrations[rawTupleType];
					var elements = reg.elements;
					var elementsLength = elements.length;
					var elementTypes = elements.map(function (elt) {
						return elt.getterReturnType;
					}).concat(elements.map(function (elt) {
						return elt.setterArgumentType;
					}));
					var rawConstructor = reg.rawConstructor;
					var rawDestructor = reg.rawDestructor;
					whenDependentTypesAreResolved([rawTupleType], elementTypes, function (elementTypes2) {
						elements.forEach(function (elt, i) {
							var getterReturnType = elementTypes2[i];
							var getter = elt.getter;
							var getterContext = elt.getterContext;
							var setterArgumentType = elementTypes2[i + elementsLength];
							var setter = elt.setter;
							var setterContext = elt.setterContext;
							elt.read = function (ptr) {
								return getterReturnType["fromWireType"](getter(getterContext, ptr));
							};
							elt.write = function (ptr, o) {
								var destructors = [];
								setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, o));
								runDestructors(destructors);
							};
						});
						return [{
							name: reg.name, "fromWireType": function (ptr) {
								var rv = new Array(elementsLength);
								for (var i = 0; i < elementsLength; ++i) {
									rv[i] = elements[i].read(ptr);
								}
								rawDestructor(ptr);
								return rv;
							}, "toWireType": function (destructors, o) {
								if (elementsLength !== o.length) {
									throw new TypeError("Incorrect number of tuple elements for " + reg.name + ": expected=" + elementsLength + ", actual=" + o.length);
								}
								var ptr = rawConstructor();
								for (var i = 0; i < elementsLength; ++i) {
									elements[i].write(ptr, o[i]);
								}
								if (destructors !== null) {
									destructors.push(rawDestructor, ptr);
								}
								return ptr;
							}, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: rawDestructor
						}];
					});
				}
				var structRegistrations = {};
				function __embind_finalize_value_object(structType) {
					var reg = structRegistrations[structType];
					delete structRegistrations[structType];
					var rawConstructor = reg.rawConstructor;
					var rawDestructor = reg.rawDestructor;
					var fieldRecords = reg.fields;
					var fieldTypes = fieldRecords.map(function (field) {
						return field.getterReturnType;
					}).concat(fieldRecords.map(function (field) {
						return field.setterArgumentType;
					}));
					whenDependentTypesAreResolved([structType], fieldTypes, function (fieldTypes2) {
						var fields = {};
						fieldRecords.forEach(function (field, i) {
							var fieldName = field.fieldName;
							var getterReturnType = fieldTypes2[i];
							var getter = field.getter;
							var getterContext = field.getterContext;
							var setterArgumentType = fieldTypes2[i + fieldRecords.length];
							var setter = field.setter;
							var setterContext = field.setterContext;
							fields[fieldName] = {
								read: function (ptr) {
									return getterReturnType["fromWireType"](getter(getterContext, ptr));
								}, write: function (ptr, o) {
									var destructors = [];
									setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, o));
									runDestructors(destructors);
								}
							};
						});
						return [{
							name: reg.name, "fromWireType": function (ptr) {
								var rv = {};
								for (var i in fields) {
									rv[i] = fields[i].read(ptr);
								}
								rawDestructor(ptr);
								return rv;
							}, "toWireType": function (destructors, o) {
								for (var fieldName in fields) {
									if (!(fieldName in o)) {
										throw new TypeError('Missing field:  "' + fieldName + '"');
									}
								}
								var ptr = rawConstructor();
								for (fieldName in fields) {
									fields[fieldName].write(ptr, o[fieldName]);
								}
								if (destructors !== null) {
									destructors.push(rawDestructor, ptr);
								}
								return ptr;
							}, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: rawDestructor
						}];
					});
				}
				function getShiftFromSize(size) {
					switch (size) {
						case 1:
							return 0;
						case 2:
							return 1;
						case 4:
							return 2;
						case 8:
							return 3;
						default:
							throw new TypeError("Unknown type size: " + size);
					}
				}
				function embind_init_charCodes() {
					var codes = new Array(256);
					for (var i = 0; i < 256; ++i) {
						codes[i] = String.fromCharCode(i);
					}
					embind_charCodes = codes;
				}
				var embind_charCodes = void 0;
				function readLatin1String(ptr) {
					var ret = "";
					var c = ptr;
					while (HEAPU8[c >>> 0]) {
						ret += embind_charCodes[HEAPU8[c++ >>> 0]];
					}
					return ret;
				}
				var BindingError = void 0;
				function throwBindingError(message) {
					throw new BindingError(message);
				}
				function registerType(rawType, registeredInstance, options) {
					options = options || {};
					if (!("argPackAdvance" in registeredInstance)) {
						throw new TypeError("registerType registeredInstance requires argPackAdvance");
					}
					var name2 = registeredInstance.name;
					if (!rawType) {
						throwBindingError('type "' + name2 + '" must have a positive integer typeid pointer');
					}
					if (registeredTypes.hasOwnProperty(rawType)) {
						if (options.ignoreDuplicateRegistrations) {
							return;
						} else {
							throwBindingError("Cannot register type '" + name2 + "' twice");
						}
					}
					registeredTypes[rawType] = registeredInstance;
					delete typeDependencies[rawType];
					if (awaitingDependencies.hasOwnProperty(rawType)) {
						var callbacks = awaitingDependencies[rawType];
						delete awaitingDependencies[rawType];
						callbacks.forEach(function (cb) {
							cb();
						});
					}
				}
				function __embind_register_bool(rawType, name2, size, trueValue, falseValue) {
					var shift = getShiftFromSize(size);
					name2 = readLatin1String(name2);
					registerType(rawType, {
						name: name2, "fromWireType": function (wt) {
							return !!wt;
						}, "toWireType": function (destructors, o) {
							return o ? trueValue : falseValue;
						}, "argPackAdvance": 8, "readValueFromPointer": function (pointer) {
							var heap;
							if (size === 1) {
								heap = HEAP8;
							} else if (size === 2) {
								heap = HEAP16;
							} else if (size === 4) {
								heap = HEAP32;
							} else {
								throw new TypeError("Unknown boolean type size: " + name2);
							}
							return this["fromWireType"](heap[pointer >>> shift]);
						}, destructorFunction: null
					});
				}
				function ClassHandle_isAliasOf(other) {
					if (!(this instanceof ClassHandle)) {
						return false;
					}
					if (!(other instanceof ClassHandle)) {
						return false;
					}
					var leftClass = this.$$.ptrType.registeredClass;
					var left = this.$$.ptr;
					var rightClass = other.$$.ptrType.registeredClass;
					var right = other.$$.ptr;
					while (leftClass.baseClass) {
						left = leftClass.upcast(left);
						leftClass = leftClass.baseClass;
					}
					while (rightClass.baseClass) {
						right = rightClass.upcast(right);
						rightClass = rightClass.baseClass;
					}
					return leftClass === rightClass && left === right;
				}
				function shallowCopyInternalPointer(o) {
					return { count: o.count, deleteScheduled: o.deleteScheduled, preservePointerOnDelete: o.preservePointerOnDelete, ptr: o.ptr, ptrType: o.ptrType, smartPtr: o.smartPtr, smartPtrType: o.smartPtrType };
				}
				function throwInstanceAlreadyDeleted(obj) {
					function getInstanceTypeName(handle) {
						return handle.$$.ptrType.registeredClass.name;
					}
					throwBindingError(getInstanceTypeName(obj) + " instance already deleted");
				}
				var finalizationGroup = false;
				function detachFinalizer(handle) {
				}
				function runDestructor($$) {
					if ($$.smartPtr) {
						$$.smartPtrType.rawDestructor($$.smartPtr);
					} else {
						$$.ptrType.registeredClass.rawDestructor($$.ptr);
					}
				}
				function releaseClassHandle($$) {
					$$.count.value -= 1;
					var toDelete = $$.count.value === 0;
					if (toDelete) {
						runDestructor($$);
					}
				}
				function attachFinalizer(handle) {
					if (typeof FinalizationGroup === "undefined") {
						attachFinalizer = function (handle2) {
							return handle2;
						};
						return handle;
					}
					finalizationGroup = new FinalizationGroup(function (iter) {
						for (var result = iter.next(); !result.done; result = iter.next()) {
							var $$ = result.value;
							if (!$$.ptr) {
								console.warn("object already deleted: " + $$.ptr);
							} else {
								releaseClassHandle($$);
							}
						}
					});
					attachFinalizer = function (handle2) {
						finalizationGroup.register(handle2, handle2.$$, handle2.$$);
						return handle2;
					};
					detachFinalizer = function (handle2) {
						finalizationGroup.unregister(handle2.$$);
					};
					return attachFinalizer(handle);
				}
				function ClassHandle_clone() {
					if (!this.$$.ptr) {
						throwInstanceAlreadyDeleted(this);
					}
					if (this.$$.preservePointerOnDelete) {
						this.$$.count.value += 1;
						return this;
					} else {
						var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), { $$: { value: shallowCopyInternalPointer(this.$$) } }));
						clone.$$.count.value += 1;
						clone.$$.deleteScheduled = false;
						return clone;
					}
				}
				function ClassHandle_delete() {
					if (!this.$$.ptr) {
						throwInstanceAlreadyDeleted(this);
					}
					if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
						throwBindingError("Object already scheduled for deletion");
					}
					detachFinalizer(this);
					releaseClassHandle(this.$$);
					if (!this.$$.preservePointerOnDelete) {
						this.$$.smartPtr = void 0;
						this.$$.ptr = void 0;
					}
				}
				function ClassHandle_isDeleted() {
					return !this.$$.ptr;
				}
				var delayFunction = void 0;
				var deletionQueue = [];
				function flushPendingDeletes() {
					while (deletionQueue.length) {
						var obj = deletionQueue.pop();
						obj.$$.deleteScheduled = false;
						obj["delete"]();
					}
				}
				function ClassHandle_deleteLater() {
					if (!this.$$.ptr) {
						throwInstanceAlreadyDeleted(this);
					}
					if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
						throwBindingError("Object already scheduled for deletion");
					}
					deletionQueue.push(this);
					if (deletionQueue.length === 1 && delayFunction) {
						delayFunction(flushPendingDeletes);
					}
					this.$$.deleteScheduled = true;
					return this;
				}
				function init_ClassHandle() {
					ClassHandle.prototype["isAliasOf"] = ClassHandle_isAliasOf;
					ClassHandle.prototype["clone"] = ClassHandle_clone;
					ClassHandle.prototype["delete"] = ClassHandle_delete;
					ClassHandle.prototype["isDeleted"] = ClassHandle_isDeleted;
					ClassHandle.prototype["deleteLater"] = ClassHandle_deleteLater;
				}
				function ClassHandle() {
				}
				var registeredPointers = {};
				function ensureOverloadTable(proto, methodName, humanName) {
					if (proto[methodName].overloadTable === void 0) {
						var prevFunc = proto[methodName];
						proto[methodName] = function () {
							if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
								throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
							}
							return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
						};
						proto[methodName].overloadTable = [];
						proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
					}
				}
				function exposePublicSymbol(name2, value, numArguments) {
					if (Module.hasOwnProperty(name2)) {
						if (numArguments === void 0 || Module[name2].overloadTable !== void 0 && Module[name2].overloadTable[numArguments] !== void 0) {
							throwBindingError("Cannot register public name '" + name2 + "' twice");
						}
						ensureOverloadTable(Module, name2, name2);
						if (Module.hasOwnProperty(numArguments)) {
							throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
						}
						Module[name2].overloadTable[numArguments] = value;
					} else {
						Module[name2] = value;
						if (numArguments !== void 0) {
							Module[name2].numArguments = numArguments;
						}
					}
				}
				function RegisteredClass(name2, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
					this.name = name2;
					this.constructor = constructor;
					this.instancePrototype = instancePrototype;
					this.rawDestructor = rawDestructor;
					this.baseClass = baseClass;
					this.getActualType = getActualType;
					this.upcast = upcast;
					this.downcast = downcast;
					this.pureVirtualFunctions = [];
				}
				function upcastPointer(ptr, ptrClass, desiredClass) {
					while (ptrClass !== desiredClass) {
						if (!ptrClass.upcast) {
							throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
						}
						ptr = ptrClass.upcast(ptr);
						ptrClass = ptrClass.baseClass;
					}
					return ptr;
				}
				function constNoSmartPtrRawPointerToWireType(destructors, handle) {
					if (handle === null) {
						if (this.isReference) {
							throwBindingError("null is not a valid " + this.name);
						}
						return 0;
					}
					if (!handle.$$) {
						throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
					}
					if (!handle.$$.ptr) {
						throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
					}
					var handleClass = handle.$$.ptrType.registeredClass;
					var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
					return ptr;
				}
				function genericPointerToWireType(destructors, handle) {
					var ptr;
					if (handle === null) {
						if (this.isReference) {
							throwBindingError("null is not a valid " + this.name);
						}
						if (this.isSmartPointer) {
							ptr = this.rawConstructor();
							if (destructors !== null) {
								destructors.push(this.rawDestructor, ptr);
							}
							return ptr;
						} else {
							return 0;
						}
					}
					if (!handle.$$) {
						throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
					}
					if (!handle.$$.ptr) {
						throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
					}
					if (!this.isConst && handle.$$.ptrType.isConst) {
						throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
					}
					var handleClass = handle.$$.ptrType.registeredClass;
					ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
					if (this.isSmartPointer) {
						if (handle.$$.smartPtr === void 0) {
							throwBindingError("Passing raw pointer to smart pointer is illegal");
						}
						switch (this.sharingPolicy) {
							case 0:
								if (handle.$$.smartPtrType === this) {
									ptr = handle.$$.smartPtr;
								} else {
									throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
								}
								break;
							case 1:
								ptr = handle.$$.smartPtr;
								break;
							case 2:
								if (handle.$$.smartPtrType === this) {
									ptr = handle.$$.smartPtr;
								} else {
									var clonedHandle = handle["clone"]();
									ptr = this.rawShare(ptr, __emval_register(function () {
										clonedHandle["delete"]();
									}));
									if (destructors !== null) {
										destructors.push(this.rawDestructor, ptr);
									}
								}
								break;
							default:
								throwBindingError("Unsupporting sharing policy");
						}
					}
					return ptr;
				}
				function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
					if (handle === null) {
						if (this.isReference) {
							throwBindingError("null is not a valid " + this.name);
						}
						return 0;
					}
					if (!handle.$$) {
						throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
					}
					if (!handle.$$.ptr) {
						throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
					}
					if (handle.$$.ptrType.isConst) {
						throwBindingError("Cannot convert argument of type " + handle.$$.ptrType.name + " to parameter type " + this.name);
					}
					var handleClass = handle.$$.ptrType.registeredClass;
					var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
					return ptr;
				}
				function RegisteredPointer_getPointee(ptr) {
					if (this.rawGetPointee) {
						ptr = this.rawGetPointee(ptr);
					}
					return ptr;
				}
				function RegisteredPointer_destructor(ptr) {
					if (this.rawDestructor) {
						this.rawDestructor(ptr);
					}
				}
				function RegisteredPointer_deleteObject(handle) {
					if (handle !== null) {
						handle["delete"]();
					}
				}
				function downcastPointer(ptr, ptrClass, desiredClass) {
					if (ptrClass === desiredClass) {
						return ptr;
					}
					if (desiredClass.baseClass === void 0) {
						return null;
					}
					var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
					if (rv === null) {
						return null;
					}
					return desiredClass.downcast(rv);
				}
				function getInheritedInstanceCount() {
					return Object.keys(registeredInstances).length;
				}
				function getLiveInheritedInstances() {
					var rv = [];
					for (var k in registeredInstances) {
						if (registeredInstances.hasOwnProperty(k)) {
							rv.push(registeredInstances[k]);
						}
					}
					return rv;
				}
				function setDelayFunction(fn) {
					delayFunction = fn;
					if (deletionQueue.length && delayFunction) {
						delayFunction(flushPendingDeletes);
					}
				}
				function init_embind() {
					Module["getInheritedInstanceCount"] = getInheritedInstanceCount;
					Module["getLiveInheritedInstances"] = getLiveInheritedInstances;
					Module["flushPendingDeletes"] = flushPendingDeletes;
					Module["setDelayFunction"] = setDelayFunction;
				}
				var registeredInstances = {};
				function getBasestPointer(class_, ptr) {
					if (ptr === void 0) {
						throwBindingError("ptr should not be undefined");
					}
					while (class_.baseClass) {
						ptr = class_.upcast(ptr);
						class_ = class_.baseClass;
					}
					return ptr;
				}
				function getInheritedInstance(class_, ptr) {
					ptr = getBasestPointer(class_, ptr);
					return registeredInstances[ptr];
				}
				function makeClassHandle(prototype, record) {
					if (!record.ptrType || !record.ptr) {
						throwInternalError("makeClassHandle requires ptr and ptrType");
					}
					var hasSmartPtrType = !!record.smartPtrType;
					var hasSmartPtr = !!record.smartPtr;
					if (hasSmartPtrType !== hasSmartPtr) {
						throwInternalError("Both smartPtrType and smartPtr must be specified");
					}
					record.count = { value: 1 };
					return attachFinalizer(Object.create(prototype, { $$: { value: record } }));
				}
				function RegisteredPointer_fromWireType(ptr) {
					var rawPointer = this.getPointee(ptr);
					if (!rawPointer) {
						this.destructor(ptr);
						return null;
					}
					var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
					if (registeredInstance !== void 0) {
						if (registeredInstance.$$.count.value === 0) {
							registeredInstance.$$.ptr = rawPointer;
							registeredInstance.$$.smartPtr = ptr;
							return registeredInstance["clone"]();
						} else {
							var rv = registeredInstance["clone"]();
							this.destructor(ptr);
							return rv;
						}
					}
					function makeDefaultHandle() {
						if (this.isSmartPointer) {
							return makeClassHandle(this.registeredClass.instancePrototype, { ptrType: this.pointeeType, ptr: rawPointer, smartPtrType: this, smartPtr: ptr });
						} else {
							return makeClassHandle(this.registeredClass.instancePrototype, { ptrType: this, ptr });
						}
					}
					var actualType = this.registeredClass.getActualType(rawPointer);
					var registeredPointerRecord = registeredPointers[actualType];
					if (!registeredPointerRecord) {
						return makeDefaultHandle.call(this);
					}
					var toType;
					if (this.isConst) {
						toType = registeredPointerRecord.constPointerType;
					} else {
						toType = registeredPointerRecord.pointerType;
					}
					var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);
					if (dp === null) {
						return makeDefaultHandle.call(this);
					}
					if (this.isSmartPointer) {
						return makeClassHandle(toType.registeredClass.instancePrototype, { ptrType: toType, ptr: dp, smartPtrType: this, smartPtr: ptr });
					} else {
						return makeClassHandle(toType.registeredClass.instancePrototype, { ptrType: toType, ptr: dp });
					}
				}
				function init_RegisteredPointer() {
					RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
					RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
					RegisteredPointer.prototype["argPackAdvance"] = 8;
					RegisteredPointer.prototype["readValueFromPointer"] = simpleReadValueFromPointer;
					RegisteredPointer.prototype["deleteObject"] = RegisteredPointer_deleteObject;
					RegisteredPointer.prototype["fromWireType"] = RegisteredPointer_fromWireType;
				}
				function RegisteredPointer(name2, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
					this.name = name2;
					this.registeredClass = registeredClass;
					this.isReference = isReference;
					this.isConst = isConst;
					this.isSmartPointer = isSmartPointer;
					this.pointeeType = pointeeType;
					this.sharingPolicy = sharingPolicy;
					this.rawGetPointee = rawGetPointee;
					this.rawConstructor = rawConstructor;
					this.rawShare = rawShare;
					this.rawDestructor = rawDestructor;
					if (!isSmartPointer && registeredClass.baseClass === void 0) {
						if (isConst) {
							this["toWireType"] = constNoSmartPtrRawPointerToWireType;
							this.destructorFunction = null;
						} else {
							this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;
							this.destructorFunction = null;
						}
					} else {
						this["toWireType"] = genericPointerToWireType;
					}
				}
				function replacePublicSymbol(name2, value, numArguments) {
					if (!Module.hasOwnProperty(name2)) {
						throwInternalError("Replacing nonexistant public symbol");
					}
					if (Module[name2].overloadTable !== void 0 && numArguments !== void 0) {
						Module[name2].overloadTable[numArguments] = value;
					} else {
						Module[name2] = value;
						Module[name2].argCount = numArguments;
					}
				}
				function getDynCaller(sig, ptr) {
					assert(sig.indexOf("j") >= 0, "getDynCaller should only be called with i64 sigs");
					var argCache = [];
					return function () {
						argCache.length = arguments.length;
						for (var i = 0; i < arguments.length; i++) {
							argCache[i] = arguments[i];
						}
						return dynCall(sig, ptr, argCache);
					};
				}
				function embind__requireFunction(signature, rawFunction) {
					signature = readLatin1String(signature);
					function makeDynCaller() {
						if (signature.indexOf("j") != -1) {
							return getDynCaller(signature, rawFunction);
						}
						return wasmTable.get(rawFunction);
					}
					var fp = makeDynCaller();
					if (typeof fp !== "function") {
						throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
					}
					return fp;
				}
				var UnboundTypeError = void 0;
				function getTypeName(type) {
					var ptr = ___getTypeName(type);
					var rv = readLatin1String(ptr);
					_free(ptr);
					return rv;
				}
				function throwUnboundTypeError(message, types) {
					var unboundTypes = [];
					var seen = {};
					function visit(type) {
						if (seen[type]) {
							return;
						}
						if (registeredTypes[type]) {
							return;
						}
						if (typeDependencies[type]) {
							typeDependencies[type].forEach(visit);
							return;
						}
						unboundTypes.push(type);
						seen[type] = true;
					}
					types.forEach(visit);
					throw new UnboundTypeError(message + ": " + unboundTypes.map(getTypeName).join([", "]));
				}
				function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name2, destructorSignature, rawDestructor) {
					name2 = readLatin1String(name2);
					getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
					if (upcast) {
						upcast = embind__requireFunction(upcastSignature, upcast);
					}
					if (downcast) {
						downcast = embind__requireFunction(downcastSignature, downcast);
					}
					rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
					var legalFunctionName = makeLegalFunctionName(name2);
					exposePublicSymbol(legalFunctionName, function () {
						throwUnboundTypeError("Cannot construct " + name2 + " due to unbound types", [baseClassRawType]);
					});
					whenDependentTypesAreResolved([rawType, rawPointerType, rawConstPointerType], baseClassRawType ? [baseClassRawType] : [], function (base) {
						base = base[0];
						var baseClass;
						var basePrototype;
						if (baseClassRawType) {
							baseClass = base.registeredClass;
							basePrototype = baseClass.instancePrototype;
						} else {
							basePrototype = ClassHandle.prototype;
						}
						var constructor = createNamedFunction(legalFunctionName, function () {
							if (Object.getPrototypeOf(this) !== instancePrototype) {
								throw new BindingError("Use 'new' to construct " + name2);
							}
							if (registeredClass.constructor_body === void 0) {
								throw new BindingError(name2 + " has no accessible constructor");
							}
							var body = registeredClass.constructor_body[arguments.length];
							if (body === void 0) {
								throw new BindingError("Tried to invoke ctor of " + name2 + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
							}
							return body.apply(this, arguments);
						});
						var instancePrototype = Object.create(basePrototype, { constructor: { value: constructor } });
						constructor.prototype = instancePrototype;
						var registeredClass = new RegisteredClass(name2, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);
						var referenceConverter = new RegisteredPointer(name2, registeredClass, true, false, false);
						var pointerConverter = new RegisteredPointer(name2 + "*", registeredClass, false, false, false);
						var constPointerConverter = new RegisteredPointer(name2 + " const*", registeredClass, false, true, false);
						registeredPointers[rawType] = { pointerType: pointerConverter, constPointerType: constPointerConverter };
						replacePublicSymbol(legalFunctionName, constructor);
						return [referenceConverter, pointerConverter, constPointerConverter];
					});
				}
				function heap32VectorToArray(count, firstElement) {
					var array = [];
					for (var i = 0; i < count; i++) {
						array.push(HEAP32[(firstElement >> 2) + i >>> 0]);
					}
					return array;
				}
				function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {
					assert(argCount > 0);
					var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
					invoker = embind__requireFunction(invokerSignature, invoker);
					var args = [rawConstructor];
					var destructors = [];
					whenDependentTypesAreResolved([], [rawClassType], function (classType) {
						classType = classType[0];
						var humanName = "constructor " + classType.name;
						if (classType.registeredClass.constructor_body === void 0) {
							classType.registeredClass.constructor_body = [];
						}
						if (classType.registeredClass.constructor_body[argCount - 1] !== void 0) {
							throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount - 1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
						}
						classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
							throwUnboundTypeError("Cannot construct " + classType.name + " due to unbound types", rawArgTypes);
						};
						whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {
							classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
								if (arguments.length !== argCount - 1) {
									throwBindingError(humanName + " called with " + arguments.length + " arguments, expected " + (argCount - 1));
								}
								destructors.length = 0;
								args.length = argCount;
								for (var i = 1; i < argCount; ++i) {
									args[i] = argTypes[i]["toWireType"](destructors, arguments[i - 1]);
								}
								var ptr = invoker.apply(null, args);
								runDestructors(destructors);
								return argTypes[0]["fromWireType"](ptr);
							};
							return [];
						});
						return [];
					});
				}
				function new_(constructor, argumentList) {
					if (!(constructor instanceof Function)) {
						throw new TypeError("new_ called with constructor type " + typeof constructor + " which is not a function");
					}
					var dummy = createNamedFunction(constructor.name || "unknownFunctionName", function () {
					});
					dummy.prototype = constructor.prototype;
					var obj = new dummy();
					var r = constructor.apply(obj, argumentList);
					return r instanceof Object ? r : obj;
				}
				function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
					var argCount = argTypes.length;
					if (argCount < 2) {
						throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
					}
					var isClassMethodFunc = argTypes[1] !== null && classType !== null;
					var needsDestructorStack = false;
					for (var i = 1; i < argTypes.length; ++i) {
						if (argTypes[i] !== null && argTypes[i].destructorFunction === void 0) {
							needsDestructorStack = true;
							break;
						}
					}
					var returns = argTypes[0].name !== "void";
					var argsList = "";
					var argsListWired = "";
					for (var i = 0; i < argCount - 2; ++i) {
						argsList += (i !== 0 ? ", " : "") + "arg" + i;
						argsListWired += (i !== 0 ? ", " : "") + "arg" + i + "Wired";
					}
					var invokerFnBody = "return function " + makeLegalFunctionName(humanName) + "(" + argsList + ") {\nif (arguments.length !== " + (argCount - 2) + ") {\nthrowBindingError('function " + humanName + " called with ' + arguments.length + ' arguments, expected " + (argCount - 2) + " args!');\n}\n";
					if (needsDestructorStack) {
						invokerFnBody += "var destructors = [];\n";
					}
					var dtorStack = needsDestructorStack ? "destructors" : "null";
					var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
					var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
					if (isClassMethodFunc) {
						invokerFnBody += "var thisWired = classParam.toWireType(" + dtorStack + ", this);\n";
					}
					for (var i = 0; i < argCount - 2; ++i) {
						invokerFnBody += "var arg" + i + "Wired = argType" + i + ".toWireType(" + dtorStack + ", arg" + i + "); // " + argTypes[i + 2].name + "\n";
						args1.push("argType" + i);
						args2.push(argTypes[i + 2]);
					}
					if (isClassMethodFunc) {
						argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
					}
					invokerFnBody += (returns ? "var rv = " : "") + "invoker(fn" + (argsListWired.length > 0 ? ", " : "") + argsListWired + ");\n";
					if (needsDestructorStack) {
						invokerFnBody += "runDestructors(destructors);\n";
					} else {
						for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
							var paramName = i === 1 ? "thisWired" : "arg" + (i - 2) + "Wired";
							if (argTypes[i].destructorFunction !== null) {
								invokerFnBody += paramName + "_dtor(" + paramName + "); // " + argTypes[i].name + "\n";
								args1.push(paramName + "_dtor");
								args2.push(argTypes[i].destructorFunction);
							}
						}
					}
					if (returns) {
						invokerFnBody += "var ret = retType.fromWireType(rv);\nreturn ret;\n";
					}
					invokerFnBody += "}\n";
					args1.push(invokerFnBody);
					var invokerFunction = new_(Function, args1).apply(null, args2);
					return invokerFunction;
				}
				function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {
					var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
					methodName = readLatin1String(methodName);
					rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
					whenDependentTypesAreResolved([], [rawClassType], function (classType) {
						classType = classType[0];
						var humanName = classType.name + "." + methodName;
						if (isPureVirtual) {
							classType.registeredClass.pureVirtualFunctions.push(methodName);
						}
						function unboundTypesHandler() {
							throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes);
						}
						var proto = classType.registeredClass.instancePrototype;
						var method = proto[methodName];
						if (method === void 0 || method.overloadTable === void 0 && method.className !== classType.name && method.argCount === argCount - 2) {
							unboundTypesHandler.argCount = argCount - 2;
							unboundTypesHandler.className = classType.name;
							proto[methodName] = unboundTypesHandler;
						} else {
							ensureOverloadTable(proto, methodName, humanName);
							proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
						}
						whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {
							var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
							if (proto[methodName].overloadTable === void 0) {
								memberFunction.argCount = argCount - 2;
								proto[methodName] = memberFunction;
							} else {
								proto[methodName].overloadTable[argCount - 2] = memberFunction;
							}
							return [];
						});
						return [];
					});
				}
				var emval_free_list = [];
				var emval_handle_array = [{}, { value: void 0 }, { value: null }, { value: true }, { value: false }];
				function __emval_decref(handle) {
					if (handle > 4 && --emval_handle_array[handle].refcount === 0) {
						emval_handle_array[handle] = void 0;
						emval_free_list.push(handle);
					}
				}
				function count_emval_handles() {
					var count = 0;
					for (var i = 5; i < emval_handle_array.length; ++i) {
						if (emval_handle_array[i] !== void 0) {
							++count;
						}
					}
					return count;
				}
				function get_first_emval() {
					for (var i = 5; i < emval_handle_array.length; ++i) {
						if (emval_handle_array[i] !== void 0) {
							return emval_handle_array[i];
						}
					}
					return null;
				}
				function init_emval() {
					Module["count_emval_handles"] = count_emval_handles;
					Module["get_first_emval"] = get_first_emval;
				}
				function __emval_register(value) {
					switch (value) {
						case void 0: {
							return 1;
						}
						case null: {
							return 2;
						}
						case true: {
							return 3;
						}
						case false: {
							return 4;
						}
						default: {
							var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
							emval_handle_array[handle] = { refcount: 1, value };
							return handle;
						}
					}
				}
				function __embind_register_emval(rawType, name2) {
					name2 = readLatin1String(name2);
					registerType(rawType, {
						name: name2, "fromWireType": function (handle) {
							var rv = emval_handle_array[handle].value;
							__emval_decref(handle);
							return rv;
						}, "toWireType": function (destructors, value) {
							return __emval_register(value);
						}, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: null
					});
				}
				function enumReadValueFromPointer(name2, shift, signed) {
					switch (shift) {
						case 0:
							return function (pointer) {
								var heap = signed ? HEAP8 : HEAPU8;
								return this["fromWireType"](heap[pointer >>> 0]);
							};
						case 1:
							return function (pointer) {
								var heap = signed ? HEAP16 : HEAPU16;
								return this["fromWireType"](heap[pointer >>> 1]);
							};
						case 2:
							return function (pointer) {
								var heap = signed ? HEAP32 : HEAPU32;
								return this["fromWireType"](heap[pointer >>> 2]);
							};
						default:
							throw new TypeError("Unknown integer type: " + name2);
					}
				}
				function __embind_register_enum(rawType, name2, size, isSigned) {
					var shift = getShiftFromSize(size);
					name2 = readLatin1String(name2);
					function ctor() {
					}
					ctor.values = {};
					registerType(rawType, {
						name: name2, constructor: ctor, "fromWireType": function (c) {
							return this.constructor.values[c];
						}, "toWireType": function (destructors, c) {
							return c.value;
						}, "argPackAdvance": 8, "readValueFromPointer": enumReadValueFromPointer(name2, shift, isSigned), destructorFunction: null
					});
					exposePublicSymbol(name2, ctor);
				}
				function requireRegisteredType(rawType, humanName) {
					var impl = registeredTypes[rawType];
					if (impl === void 0) {
						throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
					}
					return impl;
				}
				function __embind_register_enum_value(rawEnumType, name2, enumValue) {
					var enumType = requireRegisteredType(rawEnumType, "enum");
					name2 = readLatin1String(name2);
					var Enum = enumType.constructor;
					var Value2 = Object.create(enumType.constructor.prototype, {
						value: { value: enumValue }, constructor: {
							value: createNamedFunction(enumType.name + "_" + name2, function () {
							})
						}
					});
					Enum.values[enumValue] = Value2;
					Enum[name2] = Value2;
				}
				function _embind_repr(v) {
					if (v === null) {
						return "null";
					}
					var t = typeof v;
					if (t === "object" || t === "array" || t === "function") {
						return v.toString();
					} else {
						return "" + v;
					}
				}
				function floatReadValueFromPointer(name2, shift) {
					switch (shift) {
						case 2:
							return function (pointer) {
								return this["fromWireType"](HEAPF32[pointer >>> 2]);
							};
						case 3:
							return function (pointer) {
								return this["fromWireType"](HEAPF64[pointer >>> 3]);
							};
						default:
							throw new TypeError("Unknown float type: " + name2);
					}
				}
				function __embind_register_float(rawType, name2, size) {
					var shift = getShiftFromSize(size);
					name2 = readLatin1String(name2);
					registerType(rawType, {
						name: name2, "fromWireType": function (value) {
							return value;
						}, "toWireType": function (destructors, value) {
							if (typeof value !== "number" && typeof value !== "boolean") {
								throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
							}
							return value;
						}, "argPackAdvance": 8, "readValueFromPointer": floatReadValueFromPointer(name2, shift), destructorFunction: null
					});
				}
				function __embind_register_function(name2, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
					var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
					name2 = readLatin1String(name2);
					rawInvoker = embind__requireFunction(signature, rawInvoker);
					exposePublicSymbol(name2, function () {
						throwUnboundTypeError("Cannot call " + name2 + " due to unbound types", argTypes);
					}, argCount - 1);
					whenDependentTypesAreResolved([], argTypes, function (argTypes2) {
						var invokerArgsArray = [argTypes2[0], null].concat(argTypes2.slice(1));
						replacePublicSymbol(name2, craftInvokerFunction(name2, invokerArgsArray, null, rawInvoker, fn), argCount - 1);
						return [];
					});
				}
				function integerReadValueFromPointer(name2, shift, signed) {
					switch (shift) {
						case 0:
							return signed ? function readS8FromPointer(pointer) {
								return HEAP8[pointer >>> 0];
							} : function readU8FromPointer(pointer) {
								return HEAPU8[pointer >>> 0];
							};
						case 1:
							return signed ? function readS16FromPointer(pointer) {
								return HEAP16[pointer >>> 1];
							} : function readU16FromPointer(pointer) {
								return HEAPU16[pointer >>> 1];
							};
						case 2:
							return signed ? function readS32FromPointer(pointer) {
								return HEAP32[pointer >>> 2];
							} : function readU32FromPointer(pointer) {
								return HEAPU32[pointer >>> 2];
							};
						default:
							throw new TypeError("Unknown integer type: " + name2);
					}
				}
				function __embind_register_integer(primitiveType, name2, size, minRange, maxRange) {
					name2 = readLatin1String(name2);
					if (maxRange === -1) {
						maxRange = 4294967295;
					}
					var shift = getShiftFromSize(size);
					var fromWireType = function (value) {
						return value;
					};
					if (minRange === 0) {
						var bitshift = 32 - 8 * size;
						fromWireType = function (value) {
							return value << bitshift >>> bitshift;
						};
					}
					var isUnsignedType = name2.indexOf("unsigned") != -1;
					registerType(primitiveType, {
						name: name2, "fromWireType": fromWireType, "toWireType": function (destructors, value) {
							if (typeof value !== "number" && typeof value !== "boolean") {
								throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
							}
							if (value < minRange || value > maxRange) {
								throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name2 + '", which is outside the valid range [' + minRange + ", " + maxRange + "]!");
							}
							return isUnsignedType ? value >>> 0 : value | 0;
						}, "argPackAdvance": 8, "readValueFromPointer": integerReadValueFromPointer(name2, shift, minRange !== 0), destructorFunction: null
					});
				}
				function __embind_register_memory_view(rawType, dataTypeIndex, name2) {
					var typeMapping = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];
					var TA = typeMapping[dataTypeIndex];
					function decodeMemoryView(handle) {
						handle = handle >> 2;
						var heap = HEAPU32;
						var size = heap[handle >>> 0];
						var data = heap[handle + 1 >>> 0];
						return new TA(buffer, data, size);
					}
					name2 = readLatin1String(name2);
					registerType(rawType, { name: name2, "fromWireType": decodeMemoryView, "argPackAdvance": 8, "readValueFromPointer": decodeMemoryView }, { ignoreDuplicateRegistrations: true });
				}
				function __embind_register_std_string(rawType, name2) {
					name2 = readLatin1String(name2);
					var stdStringIsUTF8 = name2 === "std::string";
					registerType(rawType, {
						name: name2, "fromWireType": function (value) {
							var length = HEAPU32[value >>> 2];
							var str;
							if (stdStringIsUTF8) {
								var decodeStartPtr = value + 4;
								for (var i = 0; i <= length; ++i) {
									var currentBytePtr = value + 4 + i;
									if (i == length || HEAPU8[currentBytePtr >>> 0] == 0) {
										var maxRead = currentBytePtr - decodeStartPtr;
										var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
										if (str === void 0) {
											str = stringSegment;
										} else {
											str += String.fromCharCode(0);
											str += stringSegment;
										}
										decodeStartPtr = currentBytePtr + 1;
									}
								}
							} else {
								var a = new Array(length);
								for (var i = 0; i < length; ++i) {
									a[i] = String.fromCharCode(HEAPU8[value + 4 + i >>> 0]);
								}
								str = a.join("");
							}
							_free(value);
							return str;
						}, "toWireType": function (destructors, value) {
							if (value instanceof ArrayBuffer) {
								value = new Uint8Array(value);
							}
							var getLength;
							var valueIsOfTypeString = typeof value === "string";
							if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
								throwBindingError("Cannot pass non-string to std::string");
							}
							if (stdStringIsUTF8 && valueIsOfTypeString) {
								getLength = function () {
									return lengthBytesUTF8(value);
								};
							} else {
								getLength = function () {
									return value.length;
								};
							}
							var length = getLength();
							var ptr = _malloc(4 + length + 1);
							ptr >>>= 0;
							HEAPU32[ptr >>> 2] = length;
							if (stdStringIsUTF8 && valueIsOfTypeString) {
								stringToUTF8(value, ptr + 4, length + 1);
							} else {
								if (valueIsOfTypeString) {
									for (var i = 0; i < length; ++i) {
										var charCode = value.charCodeAt(i);
										if (charCode > 255) {
											_free(ptr);
											throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
										}
										HEAPU8[ptr + 4 + i >>> 0] = charCode;
									}
								} else {
									for (var i = 0; i < length; ++i) {
										HEAPU8[ptr + 4 + i >>> 0] = value[i];
									}
								}
							}
							if (destructors !== null) {
								destructors.push(_free, ptr);
							}
							return ptr;
						}, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: function (ptr) {
							_free(ptr);
						}
					});
				}
				function __embind_register_std_wstring(rawType, charSize, name2) {
					name2 = readLatin1String(name2);
					var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
					if (charSize === 2) {
						decodeString = UTF16ToString;
						encodeString = stringToUTF16;
						lengthBytesUTF = lengthBytesUTF16;
						getHeap = function () {
							return HEAPU16;
						};
						shift = 1;
					} else if (charSize === 4) {
						decodeString = UTF32ToString;
						encodeString = stringToUTF32;
						lengthBytesUTF = lengthBytesUTF32;
						getHeap = function () {
							return HEAPU32;
						};
						shift = 2;
					}
					registerType(rawType, {
						name: name2, "fromWireType": function (value) {
							var length = HEAPU32[value >>> 2];
							var HEAP = getHeap();
							var str;
							var decodeStartPtr = value + 4;
							for (var i = 0; i <= length; ++i) {
								var currentBytePtr = value + 4 + i * charSize;
								if (i == length || HEAP[currentBytePtr >>> shift] == 0) {
									var maxReadBytes = currentBytePtr - decodeStartPtr;
									var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
									if (str === void 0) {
										str = stringSegment;
									} else {
										str += String.fromCharCode(0);
										str += stringSegment;
									}
									decodeStartPtr = currentBytePtr + charSize;
								}
							}
							_free(value);
							return str;
						}, "toWireType": function (destructors, value) {
							if (!(typeof value === "string")) {
								throwBindingError("Cannot pass non-string to C++ string type " + name2);
							}
							var length = lengthBytesUTF(value);
							var ptr = _malloc(4 + length + charSize);
							ptr >>>= 0;
							HEAPU32[ptr >>> 2] = length >> shift;
							encodeString(value, ptr + 4, length + charSize);
							if (destructors !== null) {
								destructors.push(_free, ptr);
							}
							return ptr;
						}, "argPackAdvance": 8, "readValueFromPointer": simpleReadValueFromPointer, destructorFunction: function (ptr) {
							_free(ptr);
						}
					});
				}
				function __embind_register_value_array(rawType, name2, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
					tupleRegistrations[rawType] = { name: readLatin1String(name2), rawConstructor: embind__requireFunction(constructorSignature, rawConstructor), rawDestructor: embind__requireFunction(destructorSignature, rawDestructor), elements: [] };
				}
				function __embind_register_value_array_element(rawTupleType, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
					tupleRegistrations[rawTupleType].elements.push({ getterReturnType, getter: embind__requireFunction(getterSignature, getter), getterContext, setterArgumentType, setter: embind__requireFunction(setterSignature, setter), setterContext });
				}
				function __embind_register_value_object(rawType, name2, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
					structRegistrations[rawType] = { name: readLatin1String(name2), rawConstructor: embind__requireFunction(constructorSignature, rawConstructor), rawDestructor: embind__requireFunction(destructorSignature, rawDestructor), fields: [] };
				}
				function __embind_register_value_object_field(structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
					structRegistrations[structType].fields.push({ fieldName: readLatin1String(fieldName), getterReturnType, getter: embind__requireFunction(getterSignature, getter), getterContext, setterArgumentType, setter: embind__requireFunction(setterSignature, setter), setterContext });
				}
				function __embind_register_void(rawType, name2) {
					name2 = readLatin1String(name2);
					registerType(rawType, {
						isVoid: true, name: name2, "argPackAdvance": 0, "fromWireType": function () {
							return void 0;
						}, "toWireType": function (destructors, o) {
							return void 0;
						}
					});
				}
				function requireHandle(handle) {
					if (!handle) {
						throwBindingError("Cannot use deleted val. handle = " + handle);
					}
					return emval_handle_array[handle].value;
				}
				function __emval_as(handle, returnType, destructorsRef) {
					handle = requireHandle(handle);
					returnType = requireRegisteredType(returnType, "emval::as");
					var destructors = [];
					var rd = __emval_register(destructors);
					HEAP32[destructorsRef >>> 2] = rd;
					return returnType["toWireType"](destructors, handle);
				}
				function __emval_lookupTypes(argCount, argTypes) {
					var a = new Array(argCount);
					for (var i = 0; i < argCount; ++i) {
						a[i] = requireRegisteredType(HEAP32[(argTypes >> 2) + i >>> 0], "parameter " + i);
					}
					return a;
				}
				function __emval_call(handle, argCount, argTypes, argv) {
					handle = requireHandle(handle);
					var types = __emval_lookupTypes(argCount, argTypes);
					var args = new Array(argCount);
					for (var i = 0; i < argCount; ++i) {
						var type = types[i];
						args[i] = type["readValueFromPointer"](argv);
						argv += type["argPackAdvance"];
					}
					var rv = handle.apply(void 0, args);
					return __emval_register(rv);
				}
				var emval_symbols = {};
				function getStringOrSymbol(address) {
					var symbol = emval_symbols[address];
					if (symbol === void 0) {
						return readLatin1String(address);
					} else {
						return symbol;
					}
				}
				function emval_get_global() {
					if (typeof globalThis === "object") {
						return globalThis;
					}
					return function () {
						return Function;
					}()("return this")();
				}
				function __emval_get_global(name2) {
					if (name2 === 0) {
						return __emval_register(emval_get_global());
					} else {
						name2 = getStringOrSymbol(name2);
						return __emval_register(emval_get_global()[name2]);
					}
				}
				function __emval_get_property(handle, key2) {
					handle = requireHandle(handle);
					key2 = requireHandle(key2);
					return __emval_register(handle[key2]);
				}
				function __emval_incref(handle) {
					if (handle > 4) {
						emval_handle_array[handle].refcount += 1;
					}
				}
				function __emval_instanceof(object, constructor) {
					object = requireHandle(object);
					constructor = requireHandle(constructor);
					return object instanceof constructor;
				}
				function __emval_is_number(handle) {
					handle = requireHandle(handle);
					return typeof handle === "number";
				}
				function __emval_new_array() {
					return __emval_register([]);
				}
				function __emval_new_cstring(v) {
					return __emval_register(getStringOrSymbol(v));
				}
				function __emval_new_object() {
					return __emval_register({});
				}
				function __emval_run_destructors(handle) {
					var destructors = emval_handle_array[handle].value;
					runDestructors(destructors);
					__emval_decref(handle);
				}
				function __emval_set_property(handle, key2, value) {
					handle = requireHandle(handle);
					key2 = requireHandle(key2);
					value = requireHandle(value);
					handle[key2] = value;
				}
				function __emval_take_value(type, argv) {
					type = requireRegisteredType(type, "_emval_take_value");
					var v = type["readValueFromPointer"](argv);
					return __emval_register(v);
				}
				function _abort() {
					abort();
				}
				var _emscripten_get_now;
				if (ENVIRONMENT_IS_NODE) {
					_emscripten_get_now = function () {
						var t = process["hrtime"]();
						return t[0] * 1e3 + t[1] / 1e6;
					};
				} else if (typeof dateNow !== "undefined") {
					_emscripten_get_now = dateNow;
				} else
					_emscripten_get_now = function () {
						return performance.now();
					};
				var _emscripten_get_now_is_monotonic = true;
				function setErrNo(value) {
					HEAP32[___errno_location() >>> 2] = value;
					return value;
				}
				function _clock_gettime(clk_id, tp) {
					var now;
					if (clk_id === 0) {
						now = Date.now();
					} else if ((clk_id === 1 || clk_id === 4) && _emscripten_get_now_is_monotonic) {
						now = _emscripten_get_now();
					} else {
						setErrNo(28);
						return -1;
					}
					HEAP32[tp >>> 2] = now / 1e3 | 0;
					HEAP32[tp + 4 >>> 2] = now % 1e3 * 1e3 * 1e3 | 0;
					return 0;
				}
				function _emscripten_memcpy_big(dest, src, num) {
					HEAPU8.copyWithin(dest >>> 0, src >>> 0, src + num >>> 0);
				}
				function _emscripten_get_heap_size() {
					return HEAPU8.length;
				}
				function emscripten_realloc_buffer(size) {
					try {
						wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
						updateGlobalBufferAndViews(wasmMemory.buffer);
						return 1;
					} catch (e) {
					}
				}
				function _emscripten_resize_heap(requestedSize) {
					requestedSize = requestedSize >>> 0;
					var oldSize = _emscripten_get_heap_size();
					var maxHeapSize = 4294967296;
					if (requestedSize > maxHeapSize) {
						return false;
					}
					var minHeapSize = 16777216;
					for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
						var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);
						overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
						var newSize = Math.min(maxHeapSize, alignUp(Math.max(minHeapSize, requestedSize, overGrownHeapSize), 65536));
						var replacement = emscripten_realloc_buffer(newSize);
						if (replacement) {
							return true;
						}
					}
					return false;
				}
				var ENV = {};
				function getExecutableName() {
					return thisProgram || "./this.program";
				}
				function getEnvStrings() {
					if (!getEnvStrings.strings) {
						var lang = (typeof navigator === "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8";
						var env = { "USER": "web_user", "LOGNAME": "web_user", "PATH": "/", "PWD": "/", "HOME": "/home/web_user", "LANG": lang, "_": getExecutableName() };
						for (var x in ENV) {
							env[x] = ENV[x];
						}
						var strings = [];
						for (var x in env) {
							strings.push(x + "=" + env[x]);
						}
						getEnvStrings.strings = strings;
					}
					return getEnvStrings.strings;
				}
				function _environ_get(__environ, environ_buf) {
					try {
						var bufSize = 0;
						getEnvStrings().forEach(function (string, i) {
							var ptr = environ_buf + bufSize;
							HEAP32[__environ + i * 4 >>> 2] = ptr;
							writeAsciiToMemory(string, ptr);
							bufSize += string.length + 1;
						});
						return 0;
					} catch (e) {
						if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
							abort(e);
						return e.errno;
					}
				}
				function _environ_sizes_get(penviron_count, penviron_buf_size) {
					try {
						var strings = getEnvStrings();
						HEAP32[penviron_count >>> 2] = strings.length;
						var bufSize = 0;
						strings.forEach(function (string) {
							bufSize += string.length + 1;
						});
						HEAP32[penviron_buf_size >>> 2] = bufSize;
						return 0;
					} catch (e) {
						if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
							abort(e);
						return e.errno;
					}
				}
				function _fd_close(fd) {
					try {
						var stream = SYSCALLS.getStreamFromFD(fd);
						FS.close(stream);
						return 0;
					} catch (e) {
						if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
							abort(e);
						return e.errno;
					}
				}
				function _fd_read(fd, iov, iovcnt, pnum) {
					try {
						var stream = SYSCALLS.getStreamFromFD(fd);
						var num = SYSCALLS.doReadv(stream, iov, iovcnt);
						HEAP32[pnum >>> 2] = num;
						return 0;
					} catch (e) {
						if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
							abort(e);
						return e.errno;
					}
				}
				function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
					try {
						var stream = SYSCALLS.getStreamFromFD(fd);
						var HIGH_OFFSET = 4294967296;
						var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
						var DOUBLE_LIMIT = 9007199254740992;
						if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
							return -61;
						}
						FS.llseek(stream, offset, whence);
						tempI64 = [stream.position >>> 0, (tempDouble = stream.position, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[newOffset >>> 2] = tempI64[0], HEAP32[newOffset + 4 >>> 2] = tempI64[1];
						if (stream.getdents && offset === 0 && whence === 0)
							stream.getdents = null;
						return 0;
					} catch (e) {
						if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
							abort(e);
						return e.errno;
					}
				}
				function _fd_write(fd, iov, iovcnt, pnum) {
					try {
						var stream = SYSCALLS.getStreamFromFD(fd);
						var num = SYSCALLS.doWritev(stream, iov, iovcnt);
						HEAP32[pnum >>> 2] = num;
						return 0;
					} catch (e) {
						if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
							abort(e);
						return e.errno;
					}
				}
				function _pthread_mutexattr_destroy() {
				}
				function _pthread_mutexattr_init() {
				}
				function _pthread_mutexattr_settype() {
				}
				function _setTempRet0($i) {
				}
				function __isLeapYear(year) {
					return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
				}
				function __arraySum(array, index) {
					var sum = 0;
					for (var i = 0; i <= index; sum += array[i++]) {
					}
					return sum;
				}
				var __MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
				var __MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
				function __addDays(date, days) {
					var newDate = new Date(date.getTime());
					while (days > 0) {
						var leap = __isLeapYear(newDate.getFullYear());
						var currentMonth = newDate.getMonth();
						var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
						if (days > daysInCurrentMonth - newDate.getDate()) {
							days -= daysInCurrentMonth - newDate.getDate() + 1;
							newDate.setDate(1);
							if (currentMonth < 11) {
								newDate.setMonth(currentMonth + 1);
							} else {
								newDate.setMonth(0);
								newDate.setFullYear(newDate.getFullYear() + 1);
							}
						} else {
							newDate.setDate(newDate.getDate() + days);
							return newDate;
						}
					}
					return newDate;
				}
				function _strftime(s, maxsize, format, tm) {
					var tm_zone = HEAP32[tm + 40 >>> 2];
					var date = { tm_sec: HEAP32[tm >>> 2], tm_min: HEAP32[tm + 4 >>> 2], tm_hour: HEAP32[tm + 8 >>> 2], tm_mday: HEAP32[tm + 12 >>> 2], tm_mon: HEAP32[tm + 16 >>> 2], tm_year: HEAP32[tm + 20 >>> 2], tm_wday: HEAP32[tm + 24 >>> 2], tm_yday: HEAP32[tm + 28 >>> 2], tm_isdst: HEAP32[tm + 32 >>> 2], tm_gmtoff: HEAP32[tm + 36 >>> 2], tm_zone: tm_zone ? UTF8ToString(tm_zone) : "" };
					var pattern = UTF8ToString(format);
					var EXPANSION_RULES_1 = { "%c": "%a %b %d %H:%M:%S %Y", "%D": "%m/%d/%y", "%F": "%Y-%m-%d", "%h": "%b", "%r": "%I:%M:%S %p", "%R": "%H:%M", "%T": "%H:%M:%S", "%x": "%m/%d/%y", "%X": "%H:%M:%S", "%Ec": "%c", "%EC": "%C", "%Ex": "%m/%d/%y", "%EX": "%H:%M:%S", "%Ey": "%y", "%EY": "%Y", "%Od": "%d", "%Oe": "%e", "%OH": "%H", "%OI": "%I", "%Om": "%m", "%OM": "%M", "%OS": "%S", "%Ou": "%u", "%OU": "%U", "%OV": "%V", "%Ow": "%w", "%OW": "%W", "%Oy": "%y" };
					for (var rule in EXPANSION_RULES_1) {
						pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_1[rule]);
					}
					var WEEKDAYS = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
					var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
					function leadingSomething(value, digits, character) {
						var str = typeof value === "number" ? value.toString() : value || "";
						while (str.length < digits) {
							str = character[0] + str;
						}
						return str;
					}
					function leadingNulls(value, digits) {
						return leadingSomething(value, digits, "0");
					}
					function compareByDay(date1, date2) {
						function sgn(value) {
							return value < 0 ? -1 : value > 0 ? 1 : 0;
						}
						var compare;
						if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
							if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
								compare = sgn(date1.getDate() - date2.getDate());
							}
						}
						return compare;
					}
					function getFirstWeekStartDate(janFourth) {
						switch (janFourth.getDay()) {
							case 0:
								return new Date(janFourth.getFullYear() - 1, 11, 29);
							case 1:
								return janFourth;
							case 2:
								return new Date(janFourth.getFullYear(), 0, 3);
							case 3:
								return new Date(janFourth.getFullYear(), 0, 2);
							case 4:
								return new Date(janFourth.getFullYear(), 0, 1);
							case 5:
								return new Date(janFourth.getFullYear() - 1, 11, 31);
							case 6:
								return new Date(janFourth.getFullYear() - 1, 11, 30);
						}
					}
					function getWeekBasedYear(date2) {
						var thisDate = __addDays(new Date(date2.tm_year + 1900, 0, 1), date2.tm_yday);
						var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
						var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);
						var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
						var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
						if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
							if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
								return thisDate.getFullYear() + 1;
							} else {
								return thisDate.getFullYear();
							}
						} else {
							return thisDate.getFullYear() - 1;
						}
					}
					var EXPANSION_RULES_2 = {
						"%a": function (date2) {
							return WEEKDAYS[date2.tm_wday].substring(0, 3);
						}, "%A": function (date2) {
							return WEEKDAYS[date2.tm_wday];
						}, "%b": function (date2) {
							return MONTHS[date2.tm_mon].substring(0, 3);
						}, "%B": function (date2) {
							return MONTHS[date2.tm_mon];
						}, "%C": function (date2) {
							var year = date2.tm_year + 1900;
							return leadingNulls(year / 100 | 0, 2);
						}, "%d": function (date2) {
							return leadingNulls(date2.tm_mday, 2);
						}, "%e": function (date2) {
							return leadingSomething(date2.tm_mday, 2, " ");
						}, "%g": function (date2) {
							return getWeekBasedYear(date2).toString().substring(2);
						}, "%G": function (date2) {
							return getWeekBasedYear(date2);
						}, "%H": function (date2) {
							return leadingNulls(date2.tm_hour, 2);
						}, "%I": function (date2) {
							var twelveHour = date2.tm_hour;
							if (twelveHour == 0)
								twelveHour = 12;
							else if (twelveHour > 12)
								twelveHour -= 12;
							return leadingNulls(twelveHour, 2);
						}, "%j": function (date2) {
							return leadingNulls(date2.tm_mday + __arraySum(__isLeapYear(date2.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date2.tm_mon - 1), 3);
						}, "%m": function (date2) {
							return leadingNulls(date2.tm_mon + 1, 2);
						}, "%M": function (date2) {
							return leadingNulls(date2.tm_min, 2);
						}, "%n": function () {
							return "\n";
						}, "%p": function (date2) {
							if (date2.tm_hour >= 0 && date2.tm_hour < 12) {
								return "AM";
							} else {
								return "PM";
							}
						}, "%S": function (date2) {
							return leadingNulls(date2.tm_sec, 2);
						}, "%t": function () {
							return "	";
						}, "%u": function (date2) {
							return date2.tm_wday || 7;
						}, "%U": function (date2) {
							var janFirst = new Date(date2.tm_year + 1900, 0, 1);
							var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7 - janFirst.getDay());
							var endDate = new Date(date2.tm_year + 1900, date2.tm_mon, date2.tm_mday);
							if (compareByDay(firstSunday, endDate) < 0) {
								var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
								var firstSundayUntilEndJanuary = 31 - firstSunday.getDate();
								var days = firstSundayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
								return leadingNulls(Math.ceil(days / 7), 2);
							}
							return compareByDay(firstSunday, janFirst) === 0 ? "01" : "00";
						}, "%V": function (date2) {
							var janFourthThisYear = new Date(date2.tm_year + 1900, 0, 4);
							var janFourthNextYear = new Date(date2.tm_year + 1901, 0, 4);
							var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
							var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
							var endDate = __addDays(new Date(date2.tm_year + 1900, 0, 1), date2.tm_yday);
							if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
								return "53";
							}
							if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
								return "01";
							}
							var daysDifference;
							if (firstWeekStartThisYear.getFullYear() < date2.tm_year + 1900) {
								daysDifference = date2.tm_yday + 32 - firstWeekStartThisYear.getDate();
							} else {
								daysDifference = date2.tm_yday + 1 - firstWeekStartThisYear.getDate();
							}
							return leadingNulls(Math.ceil(daysDifference / 7), 2);
						}, "%w": function (date2) {
							return date2.tm_wday;
						}, "%W": function (date2) {
							var janFirst = new Date(date2.tm_year, 0, 1);
							var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7 - janFirst.getDay() + 1);
							var endDate = new Date(date2.tm_year + 1900, date2.tm_mon, date2.tm_mday);
							if (compareByDay(firstMonday, endDate) < 0) {
								var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
								var firstMondayUntilEndJanuary = 31 - firstMonday.getDate();
								var days = firstMondayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
								return leadingNulls(Math.ceil(days / 7), 2);
							}
							return compareByDay(firstMonday, janFirst) === 0 ? "01" : "00";
						}, "%y": function (date2) {
							return (date2.tm_year + 1900).toString().substring(2);
						}, "%Y": function (date2) {
							return date2.tm_year + 1900;
						}, "%z": function (date2) {
							var off = date2.tm_gmtoff;
							var ahead = off >= 0;
							off = Math.abs(off) / 60;
							off = off / 60 * 100 + off % 60;
							return (ahead ? "+" : "-") + String("0000" + off).slice(-4);
						}, "%Z": function (date2) {
							return date2.tm_zone;
						}, "%%": function () {
							return "%";
						}
					};
					for (var rule in EXPANSION_RULES_2) {
						if (pattern.indexOf(rule) >= 0) {
							pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_2[rule](date));
						}
					}
					var bytes = intArrayFromString(pattern, false);
					if (bytes.length > maxsize) {
						return 0;
					}
					writeArrayToMemory(bytes, s);
					return bytes.length - 1;
				}
				function _strftime_l(s, maxsize, format, tm) {
					return _strftime(s, maxsize, format, tm);
				}
				var FSNode = function (parent, name2, mode, rdev) {
					if (!parent) {
						parent = this;
					}
					this.parent = parent;
					this.mount = parent.mount;
					this.mounted = null;
					this.id = FS.nextInode++;
					this.name = name2;
					this.mode = mode;
					this.node_ops = {};
					this.stream_ops = {};
					this.rdev = rdev;
				};
				var readMode = 292 | 73;
				var writeMode = 146;
				Object.defineProperties(FSNode.prototype, {
					read: {
						get: function () {
							return (this.mode & readMode) === readMode;
						}, set: function (val) {
							val ? this.mode |= readMode : this.mode &= ~readMode;
						}
					}, write: {
						get: function () {
							return (this.mode & writeMode) === writeMode;
						}, set: function (val) {
							val ? this.mode |= writeMode : this.mode &= ~writeMode;
						}
					}, isFolder: {
						get: function () {
							return FS.isDir(this.mode);
						}
					}, isDevice: {
						get: function () {
							return FS.isChrdev(this.mode);
						}
					}
				});
				FS.FSNode = FSNode;
				FS.staticInit();
				Module["FS_createPath"] = FS.createPath;
				Module["FS_createDataFile"] = FS.createDataFile;
				Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
				Module["FS_createLazyFile"] = FS.createLazyFile;
				Module["FS_createDevice"] = FS.createDevice;
				Module["FS_unlink"] = FS.unlink;
				InternalError = Module["InternalError"] = extendError(Error, "InternalError");
				embind_init_charCodes();
				BindingError = Module["BindingError"] = extendError(Error, "BindingError");
				init_ClassHandle();
				init_RegisteredPointer();
				init_embind();
				UnboundTypeError = Module["UnboundTypeError"] = extendError(Error, "UnboundTypeError");
				init_emval();
				function intArrayFromString(stringy, dontAddNull, length) {
					var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
					var u8array = new Array(len);
					var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
					if (dontAddNull)
						u8array.length = numBytesWritten;
					return u8array;
				}
				__ATINIT__.push({
					func: function () {
						___wasm_call_ctors();
					}
				});
				var asmLibraryArg = { "z": ___assert_fail, "y": ___cxa_allocate_exception, "x": ___cxa_throw, "V": ___sys_ioctl, "W": ___sys_open, "$": __embind_finalize_value_array, "q": __embind_finalize_value_object, "Y": __embind_register_bool, "t": __embind_register_class, "s": __embind_register_class_constructor, "c": __embind_register_class_function, "X": __embind_register_emval, "_": __embind_register_enum, "v": __embind_register_enum_value, "F": __embind_register_float, "f": __embind_register_function, "o": __embind_register_integer, "k": __embind_register_memory_view, "G": __embind_register_std_string, "w": __embind_register_std_wstring, "aa": __embind_register_value_array, "h": __embind_register_value_array_element, "r": __embind_register_value_object, "e": __embind_register_value_object_field, "Z": __embind_register_void, "m": __emval_as, "H": __emval_call, "b": __emval_decref, "J": __emval_get_global, "n": __emval_get_property, "j": __emval_incref, "N": __emval_instanceof, "I": __emval_is_number, "A": __emval_new_array, "g": __emval_new_cstring, "u": __emval_new_object, "l": __emval_run_destructors, "i": __emval_set_property, "d": __emval_take_value, "C": _abort, "T": _clock_gettime, "M": _emscripten_memcpy_big, "p": _emscripten_resize_heap, "R": _environ_get, "S": _environ_sizes_get, "E": _fd_close, "U": _fd_read, "K": _fd_seek, "D": _fd_write, "a": wasmMemory, "B": _pthread_mutexattr_destroy, "P": _pthread_mutexattr_init, "O": _pthread_mutexattr_settype, "L": _setTempRet0, "Q": _strftime_l };
				createWasm();
				var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function () {
					return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["ca"]).apply(null, arguments);
				};
				Module["_main"] = function () {
					return (Module["_main"] = Module["asm"]["da"]).apply(null, arguments);
				};
				var _malloc = Module["_malloc"] = function () {
					return (_malloc = Module["_malloc"] = Module["asm"]["ea"]).apply(null, arguments);
				};
				var _free = Module["_free"] = function () {
					return (_free = Module["_free"] = Module["asm"]["fa"]).apply(null, arguments);
				};
				var ___getTypeName = Module["___getTypeName"] = function () {
					return (___getTypeName = Module["___getTypeName"] = Module["asm"]["ga"]).apply(null, arguments);
				};
				Module["___embind_register_native_and_builtin_types"] = function () {
					return (Module["___embind_register_native_and_builtin_types"] = Module["asm"]["ha"]).apply(null, arguments);
				};
				var ___errno_location = Module["___errno_location"] = function () {
					return (___errno_location = Module["___errno_location"] = Module["asm"]["ia"]).apply(null, arguments);
				};
				Module["dynCall_jiji"] = function () {
					return (Module["dynCall_jiji"] = Module["asm"]["ja"]).apply(null, arguments);
				};
				Module["dynCall_viijii"] = function () {
					return (Module["dynCall_viijii"] = Module["asm"]["ka"]).apply(null, arguments);
				};
				Module["dynCall_iiiiiijj"] = function () {
					return (Module["dynCall_iiiiiijj"] = Module["asm"]["la"]).apply(null, arguments);
				};
				Module["dynCall_iiiiij"] = function () {
					return (Module["dynCall_iiiiij"] = Module["asm"]["ma"]).apply(null, arguments);
				};
				Module["dynCall_iiiiijj"] = function () {
					return (Module["dynCall_iiiiijj"] = Module["asm"]["na"]).apply(null, arguments);
				};
				Module["addRunDependency"] = addRunDependency;
				Module["removeRunDependency"] = removeRunDependency;
				Module["FS_createPath"] = FS.createPath;
				Module["FS_createDataFile"] = FS.createDataFile;
				Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
				Module["FS_createLazyFile"] = FS.createLazyFile;
				Module["FS_createDevice"] = FS.createDevice;
				Module["FS_unlink"] = FS.unlink;
				Module["FS"] = FS;
				var calledRun;
				function ExitStatus(status) {
					this.name = "ExitStatus";
					this.message = "Program terminated with exit(" + status + ")";
					this.status = status;
				}
				dependenciesFulfilled = function runCaller() {
					if (!calledRun)
						run();
					if (!calledRun)
						dependenciesFulfilled = runCaller;
				};
				function callMain(args) {
					var entryFunction = Module["_main"];
					var argc = 0;
					var argv = 0;
					try {
						var ret = entryFunction(argc, argv);
						exit(ret, true);
					} catch (e) {
						if (e instanceof ExitStatus) {
							return;
						} else if (e == "unwind") {
							noExitRuntime = true;
							return;
						} else {
							var toLog = e;
							if (e && typeof e === "object" && e.stack) {
								toLog = [e, e.stack];
							}
							err("exception thrown: " + toLog);
							quit_(1, e);
						}
					} finally {
					}
				}
				function run(args) {
					if (runDependencies > 0) {
						return;
					}
					preRun();
					if (runDependencies > 0)
						return;
					function doRun() {
						if (calledRun)
							return;
						calledRun = true;
						Module["calledRun"] = true;
						if (ABORT)
							return;
						initRuntime();
						preMain();
						readyPromiseResolve(Module);
						if (Module["onRuntimeInitialized"])
							Module["onRuntimeInitialized"]();
						if (shouldRunNow)
							callMain();
						postRun();
					}
					if (Module["setStatus"]) {
						Module["setStatus"]("Running...");
						setTimeout(function () {
							setTimeout(function () {
								Module["setStatus"]("");
							}, 1);
							doRun();
						}, 1);
					} else {
						doRun();
					}
				}
				Module["run"] = run;
				function exit(status, implicit) {
					if (implicit && noExitRuntime && status === 0) {
						return;
					}
					if (noExitRuntime); else {
						if (Module["onExit"])
							Module["onExit"](status);
						ABORT = true;
					}
					quit_(status, new ExitStatus(status));
				}
				if (Module["preInit"]) {
					if (typeof Module["preInit"] == "function")
						Module["preInit"] = [Module["preInit"]];
					while (Module["preInit"].length > 0) {
						Module["preInit"].pop()();
					}
				}
				var shouldRunNow = true;
				if (Module["noInitialRun"])
					shouldRunNow = false;
				noExitRuntime = true;
				run();
				return WebIFCWasm3.ready;
			};
		}();
		if (typeof exports === "object" && typeof module === "object")
			module.exports = WebIFCWasm2;
		else if (typeof define === "function" && define["amd"])
			define([], function () {
				return WebIFCWasm2;
			});
		else if (typeof exports === "object")
			exports["WebIFCWasm"] = WebIFCWasm2;
	}
});

// dist/ifc2x4.ts
var IFCACTIONREQUEST = 3821786052;
var IFCACTOR = 2296667514;
var IFCACTORROLE = 3630933823;
var IFCACTUATOR = 4288193352;
var IFCACTUATORTYPE = 2874132201;
var IFCADDRESS = 618182010;
var IFCADVANCEDBREP = 1635779807;
var IFCADVANCEDBREPWITHVOIDS = 2603310189;
var IFCADVANCEDFACE = 3406155212;
var IFCAIRTERMINAL = 1634111441;
var IFCAIRTERMINALBOX = 177149247;
var IFCAIRTERMINALBOXTYPE = 1411407467;
var IFCAIRTERMINALTYPE = 3352864051;
var IFCAIRTOAIRHEATRECOVERY = 2056796094;
var IFCAIRTOAIRHEATRECOVERYTYPE = 1871374353;
var IFCALARM = 3087945054;
var IFCALARMTYPE = 3001207471;
var IFCALIGNMENT = 325726236;
var IFCALIGNMENT2DHORIZONTAL = 749761778;
var IFCALIGNMENT2DHORIZONTALSEGMENT = 3199563722;
var IFCALIGNMENT2DSEGMENT = 2483840362;
var IFCALIGNMENT2DVERSEGCIRCULARARC = 3379348081;
var IFCALIGNMENT2DVERSEGLINE = 3239324667;
var IFCALIGNMENT2DVERSEGPARABOLICARC = 4263986512;
var IFCALIGNMENT2DVERTICAL = 53199957;
var IFCALIGNMENT2DVERTICALSEGMENT = 2029264950;
var IFCALIGNMENTCURVE = 3512275521;
var IFCANNOTATION = 1674181508;
var IFCANNOTATIONFILLAREA = 669184980;
var IFCAPPLICATION = 639542469;
var IFCAPPLIEDVALUE = 411424972;
var IFCAPPROVAL = 130549933;
var IFCAPPROVALRELATIONSHIP = 3869604511;
var IFCARBITRARYCLOSEDPROFILEDEF = 3798115385;
var IFCARBITRARYOPENPROFILEDEF = 1310608509;
var IFCARBITRARYPROFILEDEFWITHVOIDS = 2705031697;
var IFCASSET = 3460190687;
var IFCASYMMETRICISHAPEPROFILEDEF = 3207858831;
var IFCAUDIOVISUALAPPLIANCE = 277319702;
var IFCAUDIOVISUALAPPLIANCETYPE = 1532957894;
var IFCAXIS1PLACEMENT = 4261334040;
var IFCAXIS2PLACEMENT2D = 3125803723;
var IFCAXIS2PLACEMENT3D = 2740243338;
var IFCBSPLINECURVE = 1967976161;
var IFCBSPLINECURVEWITHKNOTS = 2461110595;
var IFCBSPLINESURFACE = 2887950389;
var IFCBSPLINESURFACEWITHKNOTS = 167062518;
var IFCBEAM = 753842376;
var IFCBEAMSTANDARDCASE = 2906023776;
var IFCBEAMTYPE = 819618141;
var IFCBEARING = 4196446775;
var IFCBEARINGTYPE = 3649138523;
var IFCBLOBTEXTURE = 616511568;
var IFCBLOCK = 1334484129;
var IFCBOILER = 32344328;
var IFCBOILERTYPE = 231477066;
var IFCBOOLEANCLIPPINGRESULT = 3649129432;
var IFCBOOLEANRESULT = 2736907675;
var IFCBOUNDARYCONDITION = 4037036970;
var IFCBOUNDARYCURVE = 1136057603;
var IFCBOUNDARYEDGECONDITION = 1560379544;
var IFCBOUNDARYFACECONDITION = 3367102660;
var IFCBOUNDARYNODECONDITION = 1387855156;
var IFCBOUNDARYNODECONDITIONWARPING = 2069777674;
var IFCBOUNDEDCURVE = 1260505505;
var IFCBOUNDEDSURFACE = 4182860854;
var IFCBOUNDINGBOX = 2581212453;
var IFCBOXEDHALFSPACE = 2713105998;
var IFCBRIDGE = 644574406;
var IFCBRIDGEPART = 963979645;
var IFCBUILDING = 4031249490;
var IFCBUILDINGELEMENT = 3299480353;
var IFCBUILDINGELEMENTPART = 2979338954;
var IFCBUILDINGELEMENTPARTTYPE = 39481116;
var IFCBUILDINGELEMENTPROXY = 1095909175;
var IFCBUILDINGELEMENTPROXYTYPE = 1909888760;
var IFCBUILDINGELEMENTTYPE = 1950629157;
var IFCBUILDINGSTOREY = 3124254112;
var IFCBUILDINGSYSTEM = 1177604601;
var IFCBURNER = 2938176219;
var IFCBURNERTYPE = 2188180465;
var IFCCSHAPEPROFILEDEF = 2898889636;
var IFCCABLECARRIERFITTING = 635142910;
var IFCCABLECARRIERFITTINGTYPE = 395041908;
var IFCCABLECARRIERSEGMENT = 3758799889;
var IFCCABLECARRIERSEGMENTTYPE = 3293546465;
var IFCCABLEFITTING = 1051757585;
var IFCCABLEFITTINGTYPE = 2674252688;
var IFCCABLESEGMENT = 4217484030;
var IFCCABLESEGMENTTYPE = 1285652485;
var IFCCAISSONFOUNDATION = 3999819293;
var IFCCAISSONFOUNDATIONTYPE = 3203706013;
var IFCCARTESIANPOINT = 1123145078;
var IFCCARTESIANPOINTLIST = 574549367;
var IFCCARTESIANPOINTLIST2D = 1675464909;
var IFCCARTESIANPOINTLIST3D = 2059837836;
var IFCCARTESIANTRANSFORMATIONOPERATOR = 59481748;
var IFCCARTESIANTRANSFORMATIONOPERATOR2D = 3749851601;
var IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM = 3486308946;
var IFCCARTESIANTRANSFORMATIONOPERATOR3D = 3331915920;
var IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM = 1416205885;
var IFCCENTERLINEPROFILEDEF = 3150382593;
var IFCCHILLER = 3902619387;
var IFCCHILLERTYPE = 2951183804;
var IFCCHIMNEY = 3296154744;
var IFCCHIMNEYTYPE = 2197970202;
var IFCCIRCLE = 2611217952;
var IFCCIRCLEHOLLOWPROFILEDEF = 2937912522;
var IFCCIRCLEPROFILEDEF = 1383045692;
var IFCCIRCULARARCSEGMENT2D = 1062206242;
var IFCCIVILELEMENT = 1677625105;
var IFCCIVILELEMENTTYPE = 3893394355;
var IFCCLASSIFICATION = 747523909;
var IFCCLASSIFICATIONREFERENCE = 647927063;
var IFCCLOSEDSHELL = 2205249479;
var IFCCOIL = 639361253;
var IFCCOILTYPE = 2301859152;
var IFCCOLOURRGB = 776857604;
var IFCCOLOURRGBLIST = 3285139300;
var IFCCOLOURSPECIFICATION = 3264961684;
var IFCCOLUMN = 843113511;
var IFCCOLUMNSTANDARDCASE = 905975707;
var IFCCOLUMNTYPE = 300633059;
var IFCCOMMUNICATIONSAPPLIANCE = 3221913625;
var IFCCOMMUNICATIONSAPPLIANCETYPE = 400855858;
var IFCCOMPLEXPROPERTY = 2542286263;
var IFCCOMPLEXPROPERTYTEMPLATE = 3875453745;
var IFCCOMPOSITECURVE = 3732776249;
var IFCCOMPOSITECURVEONSURFACE = 15328376;
var IFCCOMPOSITECURVESEGMENT = 2485617015;
var IFCCOMPOSITEPROFILEDEF = 1485152156;
var IFCCOMPRESSOR = 3571504051;
var IFCCOMPRESSORTYPE = 3850581409;
var IFCCONDENSER = 2272882330;
var IFCCONDENSERTYPE = 2816379211;
var IFCCONIC = 2510884976;
var IFCCONNECTEDFACESET = 370225590;
var IFCCONNECTIONCURVEGEOMETRY = 1981873012;
var IFCCONNECTIONGEOMETRY = 2859738748;
var IFCCONNECTIONPOINTECCENTRICITY = 45288368;
var IFCCONNECTIONPOINTGEOMETRY = 2614616156;
var IFCCONNECTIONSURFACEGEOMETRY = 2732653382;
var IFCCONNECTIONVOLUMEGEOMETRY = 775493141;
var IFCCONSTRAINT = 1959218052;
var IFCCONSTRUCTIONEQUIPMENTRESOURCE = 3898045240;
var IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE = 2185764099;
var IFCCONSTRUCTIONMATERIALRESOURCE = 1060000209;
var IFCCONSTRUCTIONMATERIALRESOURCETYPE = 4105962743;
var IFCCONSTRUCTIONPRODUCTRESOURCE = 488727124;
var IFCCONSTRUCTIONPRODUCTRESOURCETYPE = 1525564444;
var IFCCONSTRUCTIONRESOURCE = 2559216714;
var IFCCONSTRUCTIONRESOURCETYPE = 2574617495;
var IFCCONTEXT = 3419103109;
var IFCCONTEXTDEPENDENTUNIT = 3050246964;
var IFCCONTROL = 3293443760;
var IFCCONTROLLER = 25142252;
var IFCCONTROLLERTYPE = 578613899;
var IFCCONVERSIONBASEDUNIT = 2889183280;
var IFCCONVERSIONBASEDUNITWITHOFFSET = 2713554722;
var IFCCOOLEDBEAM = 4136498852;
var IFCCOOLEDBEAMTYPE = 335055490;
var IFCCOOLINGTOWER = 3640358203;
var IFCCOOLINGTOWERTYPE = 2954562838;
var IFCCOORDINATEOPERATION = 1785450214;
var IFCCOORDINATEREFERENCESYSTEM = 1466758467;
var IFCCOSTITEM = 3895139033;
var IFCCOSTSCHEDULE = 1419761937;
var IFCCOSTVALUE = 602808272;
var IFCCOVERING = 1973544240;
var IFCCOVERINGTYPE = 1916426348;
var IFCCREWRESOURCE = 3295246426;
var IFCCREWRESOURCETYPE = 1815067380;
var IFCCSGPRIMITIVE3D = 2506170314;
var IFCCSGSOLID = 2147822146;
var IFCCURRENCYRELATIONSHIP = 539742890;
var IFCCURTAINWALL = 3495092785;
var IFCCURTAINWALLTYPE = 1457835157;
var IFCCURVE = 2601014836;
var IFCCURVEBOUNDEDPLANE = 2827736869;
var IFCCURVEBOUNDEDSURFACE = 2629017746;
var IFCCURVESEGMENT2D = 1186437898;
var IFCCURVESTYLE = 3800577675;
var IFCCURVESTYLEFONT = 1105321065;
var IFCCURVESTYLEFONTANDSCALING = 2367409068;
var IFCCURVESTYLEFONTPATTERN = 3510044353;
var IFCCYLINDRICALSURFACE = 1213902940;
var IFCDAMPER = 4074379575;
var IFCDAMPERTYPE = 3961806047;
var IFCDEEPFOUNDATION = 3426335179;
var IFCDEEPFOUNDATIONTYPE = 1306400036;
var IFCDERIVEDPROFILEDEF = 3632507154;
var IFCDERIVEDUNIT = 1765591967;
var IFCDERIVEDUNITELEMENT = 1045800335;
var IFCDIMENSIONALEXPONENTS = 2949456006;
var IFCDIRECTION = 32440307;
var IFCDISCRETEACCESSORY = 1335981549;
var IFCDISCRETEACCESSORYTYPE = 2635815018;
var IFCDISTANCEEXPRESSION = 1945343521;
var IFCDISTRIBUTIONCHAMBERELEMENT = 1052013943;
var IFCDISTRIBUTIONCHAMBERELEMENTTYPE = 1599208980;
var IFCDISTRIBUTIONCIRCUIT = 562808652;
var IFCDISTRIBUTIONCONTROLELEMENT = 1062813311;
var IFCDISTRIBUTIONCONTROLELEMENTTYPE = 2063403501;
var IFCDISTRIBUTIONELEMENT = 1945004755;
var IFCDISTRIBUTIONELEMENTTYPE = 3256556792;
var IFCDISTRIBUTIONFLOWELEMENT = 3040386961;
var IFCDISTRIBUTIONFLOWELEMENTTYPE = 3849074793;
var IFCDISTRIBUTIONPORT = 3041715199;
var IFCDISTRIBUTIONSYSTEM = 3205830791;
var IFCDOCUMENTINFORMATION = 1154170062;
var IFCDOCUMENTINFORMATIONRELATIONSHIP = 770865208;
var IFCDOCUMENTREFERENCE = 3732053477;
var IFCDOOR = 395920057;
var IFCDOORLININGPROPERTIES = 2963535650;
var IFCDOORPANELPROPERTIES = 1714330368;
var IFCDOORSTANDARDCASE = 3242481149;
var IFCDOORSTYLE = 526551008;
var IFCDOORTYPE = 2323601079;
var IFCDRAUGHTINGPREDEFINEDCOLOUR = 445594917;
var IFCDRAUGHTINGPREDEFINEDCURVEFONT = 4006246654;
var IFCDUCTFITTING = 342316401;
var IFCDUCTFITTINGTYPE = 869906466;
var IFCDUCTSEGMENT = 3518393246;
var IFCDUCTSEGMENTTYPE = 3760055223;
var IFCDUCTSILENCER = 1360408905;
var IFCDUCTSILENCERTYPE = 2030761528;
var IFCEDGE = 3900360178;
var IFCEDGECURVE = 476780140;
var IFCEDGELOOP = 1472233963;
var IFCELECTRICAPPLIANCE = 1904799276;
var IFCELECTRICAPPLIANCETYPE = 663422040;
var IFCELECTRICDISTRIBUTIONBOARD = 862014818;
var IFCELECTRICDISTRIBUTIONBOARDTYPE = 2417008758;
var IFCELECTRICFLOWSTORAGEDEVICE = 3310460725;
var IFCELECTRICFLOWSTORAGEDEVICETYPE = 3277789161;
var IFCELECTRICGENERATOR = 264262732;
var IFCELECTRICGENERATORTYPE = 1534661035;
var IFCELECTRICMOTOR = 402227799;
var IFCELECTRICMOTORTYPE = 1217240411;
var IFCELECTRICTIMECONTROL = 1003880860;
var IFCELECTRICTIMECONTROLTYPE = 712377611;
var IFCELEMENT = 1758889154;
var IFCELEMENTASSEMBLY = 4123344466;
var IFCELEMENTASSEMBLYTYPE = 2397081782;
var IFCELEMENTCOMPONENT = 1623761950;
var IFCELEMENTCOMPONENTTYPE = 2590856083;
var IFCELEMENTQUANTITY = 1883228015;
var IFCELEMENTTYPE = 339256511;
var IFCELEMENTARYSURFACE = 2777663545;
var IFCELLIPSE = 1704287377;
var IFCELLIPSEPROFILEDEF = 2835456948;
var IFCENERGYCONVERSIONDEVICE = 1658829314;
var IFCENERGYCONVERSIONDEVICETYPE = 2107101300;
var IFCENGINE = 2814081492;
var IFCENGINETYPE = 132023988;
var IFCEVAPORATIVECOOLER = 3747195512;
var IFCEVAPORATIVECOOLERTYPE = 3174744832;
var IFCEVAPORATOR = 484807127;
var IFCEVAPORATORTYPE = 3390157468;
var IFCEVENT = 4148101412;
var IFCEVENTTIME = 211053100;
var IFCEVENTTYPE = 4024345920;
var IFCEXTENDEDPROPERTIES = 297599258;
var IFCEXTERNALINFORMATION = 4294318154;
var IFCEXTERNALREFERENCE = 3200245327;
var IFCEXTERNALREFERENCERELATIONSHIP = 1437805879;
var IFCEXTERNALSPATIALELEMENT = 1209101575;
var IFCEXTERNALSPATIALSTRUCTUREELEMENT = 2853485674;
var IFCEXTERNALLYDEFINEDHATCHSTYLE = 2242383968;
var IFCEXTERNALLYDEFINEDSURFACESTYLE = 1040185647;
var IFCEXTERNALLYDEFINEDTEXTFONT = 3548104201;
var IFCEXTRUDEDAREASOLID = 477187591;
var IFCEXTRUDEDAREASOLIDTAPERED = 2804161546;
var IFCFACE = 2556980723;
var IFCFACEBASEDSURFACEMODEL = 2047409740;
var IFCFACEBOUND = 1809719519;
var IFCFACEOUTERBOUND = 803316827;
var IFCFACESURFACE = 3008276851;
var IFCFACETEDBREP = 807026263;
var IFCFACETEDBREPWITHVOIDS = 3737207727;
var IFCFACILITY = 24185140;
var IFCFACILITYPART = 1310830890;
var IFCFAILURECONNECTIONCONDITION = 4219587988;
var IFCFAN = 3415622556;
var IFCFANTYPE = 346874300;
var IFCFASTENER = 647756555;
var IFCFASTENERTYPE = 2489546625;
var IFCFEATUREELEMENT = 2827207264;
var IFCFEATUREELEMENTADDITION = 2143335405;
var IFCFEATUREELEMENTSUBTRACTION = 1287392070;
var IFCFILLAREASTYLE = 738692330;
var IFCFILLAREASTYLEHATCHING = 374418227;
var IFCFILLAREASTYLETILES = 315944413;
var IFCFILTER = 819412036;
var IFCFILTERTYPE = 1810631287;
var IFCFIRESUPPRESSIONTERMINAL = 1426591983;
var IFCFIRESUPPRESSIONTERMINALTYPE = 4222183408;
var IFCFIXEDREFERENCESWEPTAREASOLID = 2652556860;
var IFCFLOWCONTROLLER = 2058353004;
var IFCFLOWCONTROLLERTYPE = 3907093117;
var IFCFLOWFITTING = 4278956645;
var IFCFLOWFITTINGTYPE = 3198132628;
var IFCFLOWINSTRUMENT = 182646315;
var IFCFLOWINSTRUMENTTYPE = 4037862832;
var IFCFLOWMETER = 2188021234;
var IFCFLOWMETERTYPE = 3815607619;
var IFCFLOWMOVINGDEVICE = 3132237377;
var IFCFLOWMOVINGDEVICETYPE = 1482959167;
var IFCFLOWSEGMENT = 987401354;
var IFCFLOWSEGMENTTYPE = 1834744321;
var IFCFLOWSTORAGEDEVICE = 707683696;
var IFCFLOWSTORAGEDEVICETYPE = 1339347760;
var IFCFLOWTERMINAL = 2223149337;
var IFCFLOWTERMINALTYPE = 2297155007;
var IFCFLOWTREATMENTDEVICE = 3508470533;
var IFCFLOWTREATMENTDEVICETYPE = 3009222698;
var IFCFOOTING = 900683007;
var IFCFOOTINGTYPE = 1893162501;
var IFCFURNISHINGELEMENT = 263784265;
var IFCFURNISHINGELEMENTTYPE = 4238390223;
var IFCFURNITURE = 1509553395;
var IFCFURNITURETYPE = 1268542332;
var IFCGEOGRAPHICELEMENT = 3493046030;
var IFCGEOGRAPHICELEMENTTYPE = 4095422895;
var IFCGEOMETRICCURVESET = 987898635;
var IFCGEOMETRICREPRESENTATIONCONTEXT = 3448662350;
var IFCGEOMETRICREPRESENTATIONITEM = 2453401579;
var IFCGEOMETRICREPRESENTATIONSUBCONTEXT = 4142052618;
var IFCGEOMETRICSET = 3590301190;
var IFCGRID = 3009204131;
var IFCGRIDAXIS = 852622518;
var IFCGRIDPLACEMENT = 178086475;
var IFCGROUP = 2706460486;
var IFCHALFSPACESOLID = 812098782;
var IFCHEATEXCHANGER = 3319311131;
var IFCHEATEXCHANGERTYPE = 1251058090;
var IFCHUMIDIFIER = 2068733104;
var IFCHUMIDIFIERTYPE = 1806887404;
var IFCISHAPEPROFILEDEF = 1484403080;
var IFCIMAGETEXTURE = 3905492369;
var IFCINDEXEDCOLOURMAP = 3570813810;
var IFCINDEXEDPOLYCURVE = 2571569899;
var IFCINDEXEDPOLYGONALFACE = 178912537;
var IFCINDEXEDPOLYGONALFACEWITHVOIDS = 2294589976;
var IFCINDEXEDTEXTUREMAP = 1437953363;
var IFCINDEXEDTRIANGLETEXTUREMAP = 2133299955;
var IFCINTERCEPTOR = 4175244083;
var IFCINTERCEPTORTYPE = 3946677679;
var IFCINTERSECTIONCURVE = 3113134337;
var IFCINVENTORY = 2391368822;
var IFCIRREGULARTIMESERIES = 3741457305;
var IFCIRREGULARTIMESERIESVALUE = 3020489413;
var IFCJUNCTIONBOX = 2176052936;
var IFCJUNCTIONBOXTYPE = 4288270099;
var IFCLSHAPEPROFILEDEF = 572779678;
var IFCLABORRESOURCE = 3827777499;
var IFCLABORRESOURCETYPE = 428585644;
var IFCLAGTIME = 1585845231;
var IFCLAMP = 76236018;
var IFCLAMPTYPE = 1051575348;
var IFCLIBRARYINFORMATION = 2655187982;
var IFCLIBRARYREFERENCE = 3452421091;
var IFCLIGHTDISTRIBUTIONDATA = 4162380809;
var IFCLIGHTFIXTURE = 629592764;
var IFCLIGHTFIXTURETYPE = 1161773419;
var IFCLIGHTINTENSITYDISTRIBUTION = 1566485204;
var IFCLIGHTSOURCE = 1402838566;
var IFCLIGHTSOURCEAMBIENT = 125510826;
var IFCLIGHTSOURCEDIRECTIONAL = 2604431987;
var IFCLIGHTSOURCEGONIOMETRIC = 4266656042;
var IFCLIGHTSOURCEPOSITIONAL = 1520743889;
var IFCLIGHTSOURCESPOT = 3422422726;
var IFCLINE = 1281925730;
var IFCLINESEGMENT2D = 3092502836;
var IFCLINEARPLACEMENT = 388784114;
var IFCLINEARPOSITIONINGELEMENT = 1154579445;
var IFCLOCALPLACEMENT = 2624227202;
var IFCLOOP = 1008929658;
var IFCMANIFOLDSOLIDBREP = 1425443689;
var IFCMAPCONVERSION = 3057273783;
var IFCMAPPEDITEM = 2347385850;
var IFCMATERIAL = 1838606355;
var IFCMATERIALCLASSIFICATIONRELATIONSHIP = 1847130766;
var IFCMATERIALCONSTITUENT = 3708119e3;
var IFCMATERIALCONSTITUENTSET = 2852063980;
var IFCMATERIALDEFINITION = 760658860;
var IFCMATERIALDEFINITIONREPRESENTATION = 2022407955;
var IFCMATERIALLAYER = 248100487;
var IFCMATERIALLAYERSET = 3303938423;
var IFCMATERIALLAYERSETUSAGE = 1303795690;
var IFCMATERIALLAYERWITHOFFSETS = 1847252529;
var IFCMATERIALLIST = 2199411900;
var IFCMATERIALPROFILE = 2235152071;
var IFCMATERIALPROFILESET = 164193824;
var IFCMATERIALPROFILESETUSAGE = 3079605661;
var IFCMATERIALPROFILESETUSAGETAPERING = 3404854881;
var IFCMATERIALPROFILEWITHOFFSETS = 552965576;
var IFCMATERIALPROPERTIES = 3265635763;
var IFCMATERIALRELATIONSHIP = 853536259;
var IFCMATERIALUSAGEDEFINITION = 1507914824;
var IFCMEASUREWITHUNIT = 2597039031;
var IFCMECHANICALFASTENER = 377706215;
var IFCMECHANICALFASTENERTYPE = 2108223431;
var IFCMEDICALDEVICE = 1437502449;
var IFCMEDICALDEVICETYPE = 1114901282;
var IFCMEMBER = 1073191201;
var IFCMEMBERSTANDARDCASE = 1911478936;
var IFCMEMBERTYPE = 3181161470;
var IFCMETRIC = 3368373690;
var IFCMIRROREDPROFILEDEF = 2998442950;
var IFCMONETARYUNIT = 2706619895;
var IFCMOTORCONNECTION = 2474470126;
var IFCMOTORCONNECTIONTYPE = 977012517;
var IFCNAMEDUNIT = 1918398963;
var IFCOBJECT = 3888040117;
var IFCOBJECTDEFINITION = 219451334;
var IFCOBJECTPLACEMENT = 3701648758;
var IFCOBJECTIVE = 2251480897;
var IFCOCCUPANT = 4143007308;
var IFCOFFSETCURVE = 590820931;
var IFCOFFSETCURVE2D = 3388369263;
var IFCOFFSETCURVE3D = 3505215534;
var IFCOFFSETCURVEBYDISTANCES = 2485787929;
var IFCOPENSHELL = 2665983363;
var IFCOPENINGELEMENT = 3588315303;
var IFCOPENINGSTANDARDCASE = 3079942009;
var IFCORGANIZATION = 4251960020;
var IFCORGANIZATIONRELATIONSHIP = 1411181986;
var IFCORIENTATIONEXPRESSION = 643959842;
var IFCORIENTEDEDGE = 1029017970;
var IFCOUTERBOUNDARYCURVE = 144952367;
var IFCOUTLET = 3694346114;
var IFCOUTLETTYPE = 2837617999;
var IFCOWNERHISTORY = 1207048766;
var IFCPARAMETERIZEDPROFILEDEF = 2529465313;
var IFCPATH = 2519244187;
var IFCPCURVE = 1682466193;
var IFCPERFORMANCEHISTORY = 2382730787;
var IFCPERMEABLECOVERINGPROPERTIES = 3566463478;
var IFCPERMIT = 3327091369;
var IFCPERSON = 2077209135;
var IFCPERSONANDORGANIZATION = 101040310;
var IFCPHYSICALCOMPLEXQUANTITY = 3021840470;
var IFCPHYSICALQUANTITY = 2483315170;
var IFCPHYSICALSIMPLEQUANTITY = 2226359599;
var IFCPILE = 1687234759;
var IFCPILETYPE = 1158309216;
var IFCPIPEFITTING = 310824031;
var IFCPIPEFITTINGTYPE = 804291784;
var IFCPIPESEGMENT = 3612865200;
var IFCPIPESEGMENTTYPE = 4231323485;
var IFCPIXELTEXTURE = 597895409;
var IFCPLACEMENT = 2004835150;
var IFCPLANARBOX = 603570806;
var IFCPLANAREXTENT = 1663979128;
var IFCPLANE = 220341763;
var IFCPLATE = 3171933400;
var IFCPLATESTANDARDCASE = 1156407060;
var IFCPLATETYPE = 4017108033;
var IFCPOINT = 2067069095;
var IFCPOINTONCURVE = 4022376103;
var IFCPOINTONSURFACE = 1423911732;
var IFCPOLYLOOP = 2924175390;
var IFCPOLYGONALBOUNDEDHALFSPACE = 2775532180;
var IFCPOLYGONALFACESET = 2839578677;
var IFCPOLYLINE = 3724593414;
var IFCPORT = 3740093272;
var IFCPOSITIONINGELEMENT = 1946335990;
var IFCPOSTALADDRESS = 3355820592;
var IFCPREDEFINEDCOLOUR = 759155922;
var IFCPREDEFINEDCURVEFONT = 2559016684;
var IFCPREDEFINEDITEM = 3727388367;
var IFCPREDEFINEDPROPERTIES = 3778827333;
var IFCPREDEFINEDPROPERTYSET = 3967405729;
var IFCPREDEFINEDTEXTFONT = 1775413392;
var IFCPRESENTATIONITEM = 677532197;
var IFCPRESENTATIONLAYERASSIGNMENT = 2022622350;
var IFCPRESENTATIONLAYERWITHSTYLE = 1304840413;
var IFCPRESENTATIONSTYLE = 3119450353;
var IFCPRESENTATIONSTYLEASSIGNMENT = 2417041796;
var IFCPROCEDURE = 2744685151;
var IFCPROCEDURETYPE = 569719735;
var IFCPROCESS = 2945172077;
var IFCPRODUCT = 4208778838;
var IFCPRODUCTDEFINITIONSHAPE = 673634403;
var IFCPRODUCTREPRESENTATION = 2095639259;
var IFCPROFILEDEF = 3958567839;
var IFCPROFILEPROPERTIES = 2802850158;
var IFCPROJECT = 103090709;
var IFCPROJECTLIBRARY = 653396225;
var IFCPROJECTORDER = 2904328755;
var IFCPROJECTEDCRS = 3843373140;
var IFCPROJECTIONELEMENT = 3651124850;
var IFCPROPERTY = 2598011224;
var IFCPROPERTYABSTRACTION = 986844984;
var IFCPROPERTYBOUNDEDVALUE = 871118103;
var IFCPROPERTYDEFINITION = 1680319473;
var IFCPROPERTYDEPENDENCYRELATIONSHIP = 148025276;
var IFCPROPERTYENUMERATEDVALUE = 4166981789;
var IFCPROPERTYENUMERATION = 3710013099;
var IFCPROPERTYLISTVALUE = 2752243245;
var IFCPROPERTYREFERENCEVALUE = 941946838;
var IFCPROPERTYSET = 1451395588;
var IFCPROPERTYSETDEFINITION = 3357820518;
var IFCPROPERTYSETTEMPLATE = 492091185;
var IFCPROPERTYSINGLEVALUE = 3650150729;
var IFCPROPERTYTABLEVALUE = 110355661;
var IFCPROPERTYTEMPLATE = 3521284610;
var IFCPROPERTYTEMPLATEDEFINITION = 1482703590;
var IFCPROTECTIVEDEVICE = 738039164;
var IFCPROTECTIVEDEVICETRIPPINGUNIT = 2295281155;
var IFCPROTECTIVEDEVICETRIPPINGUNITTYPE = 655969474;
var IFCPROTECTIVEDEVICETYPE = 1842657554;
var IFCPROXY = 3219374653;
var IFCPUMP = 90941305;
var IFCPUMPTYPE = 2250791053;
var IFCQUANTITYAREA = 2044713172;
var IFCQUANTITYCOUNT = 2093928680;
var IFCQUANTITYLENGTH = 931644368;
var IFCQUANTITYSET = 2090586900;
var IFCQUANTITYTIME = 3252649465;
var IFCQUANTITYVOLUME = 2405470396;
var IFCQUANTITYWEIGHT = 825690147;
var IFCRAILING = 2262370178;
var IFCRAILINGTYPE = 2893384427;
var IFCRAMP = 3024970846;
var IFCRAMPFLIGHT = 3283111854;
var IFCRAMPFLIGHTTYPE = 2324767716;
var IFCRAMPTYPE = 1469900589;
var IFCRATIONALBSPLINECURVEWITHKNOTS = 1232101972;
var IFCRATIONALBSPLINESURFACEWITHKNOTS = 683857671;
var IFCRECTANGLEHOLLOWPROFILEDEF = 2770003689;
var IFCRECTANGLEPROFILEDEF = 3615266464;
var IFCRECTANGULARPYRAMID = 2798486643;
var IFCRECTANGULARTRIMMEDSURFACE = 3454111270;
var IFCRECURRENCEPATTERN = 3915482550;
var IFCREFERENCE = 2433181523;
var IFCREFERENT = 4021432810;
var IFCREGULARTIMESERIES = 3413951693;
var IFCREINFORCEMENTBARPROPERTIES = 1580146022;
var IFCREINFORCEMENTDEFINITIONPROPERTIES = 3765753017;
var IFCREINFORCINGBAR = 979691226;
var IFCREINFORCINGBARTYPE = 2572171363;
var IFCREINFORCINGELEMENT = 3027567501;
var IFCREINFORCINGELEMENTTYPE = 964333572;
var IFCREINFORCINGMESH = 2320036040;
var IFCREINFORCINGMESHTYPE = 2310774935;
var IFCRELAGGREGATES = 160246688;
var IFCRELASSIGNS = 3939117080;
var IFCRELASSIGNSTOACTOR = 1683148259;
var IFCRELASSIGNSTOCONTROL = 2495723537;
var IFCRELASSIGNSTOGROUP = 1307041759;
var IFCRELASSIGNSTOGROUPBYFACTOR = 1027710054;
var IFCRELASSIGNSTOPROCESS = 4278684876;
var IFCRELASSIGNSTOPRODUCT = 2857406711;
var IFCRELASSIGNSTORESOURCE = 205026976;
var IFCRELASSOCIATES = 1865459582;
var IFCRELASSOCIATESAPPROVAL = 4095574036;
var IFCRELASSOCIATESCLASSIFICATION = 919958153;
var IFCRELASSOCIATESCONSTRAINT = 2728634034;
var IFCRELASSOCIATESDOCUMENT = 982818633;
var IFCRELASSOCIATESLIBRARY = 3840914261;
var IFCRELASSOCIATESMATERIAL = 2655215786;
var IFCRELCONNECTS = 826625072;
var IFCRELCONNECTSELEMENTS = 1204542856;
var IFCRELCONNECTSPATHELEMENTS = 3945020480;
var IFCRELCONNECTSPORTTOELEMENT = 4201705270;
var IFCRELCONNECTSPORTS = 3190031847;
var IFCRELCONNECTSSTRUCTURALACTIVITY = 2127690289;
var IFCRELCONNECTSSTRUCTURALMEMBER = 1638771189;
var IFCRELCONNECTSWITHECCENTRICITY = 504942748;
var IFCRELCONNECTSWITHREALIZINGELEMENTS = 3678494232;
var IFCRELCONTAINEDINSPATIALSTRUCTURE = 3242617779;
var IFCRELCOVERSBLDGELEMENTS = 886880790;
var IFCRELCOVERSSPACES = 2802773753;
var IFCRELDECLARES = 2565941209;
var IFCRELDECOMPOSES = 2551354335;
var IFCRELDEFINES = 693640335;
var IFCRELDEFINESBYOBJECT = 1462361463;
var IFCRELDEFINESBYPROPERTIES = 4186316022;
var IFCRELDEFINESBYTEMPLATE = 307848117;
var IFCRELDEFINESBYTYPE = 781010003;
var IFCRELFILLSELEMENT = 3940055652;
var IFCRELFLOWCONTROLELEMENTS = 279856033;
var IFCRELINTERFERESELEMENTS = 427948657;
var IFCRELNESTS = 3268803585;
var IFCRELPOSITIONS = 1441486842;
var IFCRELPROJECTSELEMENT = 750771296;
var IFCRELREFERENCEDINSPATIALSTRUCTURE = 1245217292;
var IFCRELSEQUENCE = 4122056220;
var IFCRELSERVICESBUILDINGS = 366585022;
var IFCRELSPACEBOUNDARY = 3451746338;
var IFCRELSPACEBOUNDARY1STLEVEL = 3523091289;
var IFCRELSPACEBOUNDARY2NDLEVEL = 1521410863;
var IFCRELVOIDSELEMENT = 1401173127;
var IFCRELATIONSHIP = 478536968;
var IFCREPARAMETRISEDCOMPOSITECURVESEGMENT = 816062949;
var IFCREPRESENTATION = 1076942058;
var IFCREPRESENTATIONCONTEXT = 3377609919;
var IFCREPRESENTATIONITEM = 3008791417;
var IFCREPRESENTATIONMAP = 1660063152;
var IFCRESOURCE = 2914609552;
var IFCRESOURCEAPPROVALRELATIONSHIP = 2943643501;
var IFCRESOURCECONSTRAINTRELATIONSHIP = 1608871552;
var IFCRESOURCELEVELRELATIONSHIP = 2439245199;
var IFCRESOURCETIME = 1042787934;
var IFCREVOLVEDAREASOLID = 1856042241;
var IFCREVOLVEDAREASOLIDTAPERED = 3243963512;
var IFCRIGHTCIRCULARCONE = 4158566097;
var IFCRIGHTCIRCULARCYLINDER = 3626867408;
var IFCROOF = 2016517767;
var IFCROOFTYPE = 2781568857;
var IFCROOT = 2341007311;
var IFCROUNDEDRECTANGLEPROFILEDEF = 2778083089;
var IFCSIUNIT = 448429030;
var IFCSANITARYTERMINAL = 3053780830;
var IFCSANITARYTERMINALTYPE = 1768891740;
var IFCSCHEDULINGTIME = 1054537805;
var IFCSEAMCURVE = 2157484638;
var IFCSECTIONPROPERTIES = 2042790032;
var IFCSECTIONREINFORCEMENTPROPERTIES = 4165799628;
var IFCSECTIONEDSOLID = 1862484736;
var IFCSECTIONEDSOLIDHORIZONTAL = 1290935644;
var IFCSECTIONEDSPINE = 1509187699;
var IFCSENSOR = 4086658281;
var IFCSENSORTYPE = 1783015770;
var IFCSHADINGDEVICE = 1329646415;
var IFCSHADINGDEVICETYPE = 4074543187;
var IFCSHAPEASPECT = 867548509;
var IFCSHAPEMODEL = 3982875396;
var IFCSHAPEREPRESENTATION = 4240577450;
var IFCSHELLBASEDSURFACEMODEL = 4124623270;
var IFCSIMPLEPROPERTY = 3692461612;
var IFCSIMPLEPROPERTYTEMPLATE = 3663146110;
var IFCSITE = 4097777520;
var IFCSLAB = 1529196076;
var IFCSLABELEMENTEDCASE = 3127900445;
var IFCSLABSTANDARDCASE = 3027962421;
var IFCSLABTYPE = 2533589738;
var IFCSLIPPAGECONNECTIONCONDITION = 2609359061;
var IFCSOLARDEVICE = 3420628829;
var IFCSOLARDEVICETYPE = 1072016465;
var IFCSOLIDMODEL = 723233188;
var IFCSPACE = 3856911033;
var IFCSPACEHEATER = 1999602285;
var IFCSPACEHEATERTYPE = 1305183839;
var IFCSPACETYPE = 3812236995;
var IFCSPATIALELEMENT = 1412071761;
var IFCSPATIALELEMENTTYPE = 710998568;
var IFCSPATIALSTRUCTUREELEMENT = 2706606064;
var IFCSPATIALSTRUCTUREELEMENTTYPE = 3893378262;
var IFCSPATIALZONE = 463610769;
var IFCSPATIALZONETYPE = 2481509218;
var IFCSPHERE = 451544542;
var IFCSPHERICALSURFACE = 4015995234;
var IFCSTACKTERMINAL = 1404847402;
var IFCSTACKTERMINALTYPE = 3112655638;
var IFCSTAIR = 331165859;
var IFCSTAIRFLIGHT = 4252922144;
var IFCSTAIRFLIGHTTYPE = 1039846685;
var IFCSTAIRTYPE = 338393293;
var IFCSTRUCTURALACTION = 682877961;
var IFCSTRUCTURALACTIVITY = 3544373492;
var IFCSTRUCTURALANALYSISMODEL = 2515109513;
var IFCSTRUCTURALCONNECTION = 1179482911;
var IFCSTRUCTURALCONNECTIONCONDITION = 2273995522;
var IFCSTRUCTURALCURVEACTION = 1004757350;
var IFCSTRUCTURALCURVECONNECTION = 4243806635;
var IFCSTRUCTURALCURVEMEMBER = 214636428;
var IFCSTRUCTURALCURVEMEMBERVARYING = 2445595289;
var IFCSTRUCTURALCURVEREACTION = 2757150158;
var IFCSTRUCTURALITEM = 3136571912;
var IFCSTRUCTURALLINEARACTION = 1807405624;
var IFCSTRUCTURALLOAD = 2162789131;
var IFCSTRUCTURALLOADCASE = 385403989;
var IFCSTRUCTURALLOADCONFIGURATION = 3478079324;
var IFCSTRUCTURALLOADGROUP = 1252848954;
var IFCSTRUCTURALLOADLINEARFORCE = 1595516126;
var IFCSTRUCTURALLOADORRESULT = 609421318;
var IFCSTRUCTURALLOADPLANARFORCE = 2668620305;
var IFCSTRUCTURALLOADSINGLEDISPLACEMENT = 2473145415;
var IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION = 1973038258;
var IFCSTRUCTURALLOADSINGLEFORCE = 1597423693;
var IFCSTRUCTURALLOADSINGLEFORCEWARPING = 1190533807;
var IFCSTRUCTURALLOADSTATIC = 2525727697;
var IFCSTRUCTURALLOADTEMPERATURE = 3408363356;
var IFCSTRUCTURALMEMBER = 530289379;
var IFCSTRUCTURALPLANARACTION = 1621171031;
var IFCSTRUCTURALPOINTACTION = 2082059205;
var IFCSTRUCTURALPOINTCONNECTION = 734778138;
var IFCSTRUCTURALPOINTREACTION = 1235345126;
var IFCSTRUCTURALREACTION = 3689010777;
var IFCSTRUCTURALRESULTGROUP = 2986769608;
var IFCSTRUCTURALSURFACEACTION = 3657597509;
var IFCSTRUCTURALSURFACECONNECTION = 1975003073;
var IFCSTRUCTURALSURFACEMEMBER = 3979015343;
var IFCSTRUCTURALSURFACEMEMBERVARYING = 2218152070;
var IFCSTRUCTURALSURFACEREACTION = 603775116;
var IFCSTYLEMODEL = 2830218821;
var IFCSTYLEDITEM = 3958052878;
var IFCSTYLEDREPRESENTATION = 3049322572;
var IFCSUBCONTRACTRESOURCE = 148013059;
var IFCSUBCONTRACTRESOURCETYPE = 4095615324;
var IFCSUBEDGE = 2233826070;
var IFCSURFACE = 2513912981;
var IFCSURFACECURVE = 699246055;
var IFCSURFACECURVESWEPTAREASOLID = 2028607225;
var IFCSURFACEFEATURE = 3101698114;
var IFCSURFACEOFLINEAREXTRUSION = 2809605785;
var IFCSURFACEOFREVOLUTION = 4124788165;
var IFCSURFACEREINFORCEMENTAREA = 2934153892;
var IFCSURFACESTYLE = 1300840506;
var IFCSURFACESTYLELIGHTING = 3303107099;
var IFCSURFACESTYLEREFRACTION = 1607154358;
var IFCSURFACESTYLERENDERING = 1878645084;
var IFCSURFACESTYLESHADING = 846575682;
var IFCSURFACESTYLEWITHTEXTURES = 1351298697;
var IFCSURFACETEXTURE = 626085974;
var IFCSWEPTAREASOLID = 2247615214;
var IFCSWEPTDISKSOLID = 1260650574;
var IFCSWEPTDISKSOLIDPOLYGONAL = 1096409881;
var IFCSWEPTSURFACE = 230924584;
var IFCSWITCHINGDEVICE = 1162798199;
var IFCSWITCHINGDEVICETYPE = 2315554128;
var IFCSYSTEM = 2254336722;
var IFCSYSTEMFURNITUREELEMENT = 413509423;
var IFCSYSTEMFURNITUREELEMENTTYPE = 1580310250;
var IFCTSHAPEPROFILEDEF = 3071757647;
var IFCTABLE = 985171141;
var IFCTABLECOLUMN = 2043862942;
var IFCTABLEROW = 531007025;
var IFCTANK = 812556717;
var IFCTANKTYPE = 5716631;
var IFCTASK = 3473067441;
var IFCTASKTIME = 1549132990;
var IFCTASKTIMERECURRING = 2771591690;
var IFCTASKTYPE = 3206491090;
var IFCTELECOMADDRESS = 912023232;
var IFCTENDON = 3824725483;
var IFCTENDONANCHOR = 2347447852;
var IFCTENDONANCHORTYPE = 3081323446;
var IFCTENDONCONDUIT = 3663046924;
var IFCTENDONCONDUITTYPE = 2281632017;
var IFCTENDONTYPE = 2415094496;
var IFCTESSELLATEDFACESET = 2387106220;
var IFCTESSELLATEDITEM = 901063453;
var IFCTEXTLITERAL = 4282788508;
var IFCTEXTLITERALWITHEXTENT = 3124975700;
var IFCTEXTSTYLE = 1447204868;
var IFCTEXTSTYLEFONTMODEL = 1983826977;
var IFCTEXTSTYLEFORDEFINEDFONT = 2636378356;
var IFCTEXTSTYLETEXTMODEL = 1640371178;
var IFCTEXTURECOORDINATE = 280115917;
var IFCTEXTURECOORDINATEGENERATOR = 1742049831;
var IFCTEXTUREMAP = 2552916305;
var IFCTEXTUREVERTEX = 1210645708;
var IFCTEXTUREVERTEXLIST = 3611470254;
var IFCTIMEPERIOD = 1199560280;
var IFCTIMESERIES = 3101149627;
var IFCTIMESERIESVALUE = 581633288;
var IFCTOPOLOGICALREPRESENTATIONITEM = 1377556343;
var IFCTOPOLOGYREPRESENTATION = 1735638870;
var IFCTOROIDALSURFACE = 1935646853;
var IFCTRANSFORMER = 3825984169;
var IFCTRANSFORMERTYPE = 1692211062;
var IFCTRANSITIONCURVESEGMENT2D = 2595432518;
var IFCTRANSPORTELEMENT = 1620046519;
var IFCTRANSPORTELEMENTTYPE = 2097647324;
var IFCTRAPEZIUMPROFILEDEF = 2715220739;
var IFCTRIANGULATEDFACESET = 2916149573;
var IFCTRIANGULATEDIRREGULARNETWORK = 1229763772;
var IFCTRIMMEDCURVE = 3593883385;
var IFCTUBEBUNDLE = 3026737570;
var IFCTUBEBUNDLETYPE = 1600972822;
var IFCTYPEOBJECT = 1628702193;
var IFCTYPEPROCESS = 3736923433;
var IFCTYPEPRODUCT = 2347495698;
var IFCTYPERESOURCE = 3698973494;
var IFCUSHAPEPROFILEDEF = 427810014;
var IFCUNITASSIGNMENT = 180925521;
var IFCUNITARYCONTROLELEMENT = 630975310;
var IFCUNITARYCONTROLELEMENTTYPE = 3179687236;
var IFCUNITARYEQUIPMENT = 4292641817;
var IFCUNITARYEQUIPMENTTYPE = 1911125066;
var IFCVALVE = 4207607924;
var IFCVALVETYPE = 728799441;
var IFCVECTOR = 1417489154;
var IFCVERTEX = 2799835756;
var IFCVERTEXLOOP = 2759199220;
var IFCVERTEXPOINT = 1907098498;
var IFCVIBRATIONDAMPER = 1530820697;
var IFCVIBRATIONDAMPERTYPE = 3956297820;
var IFCVIBRATIONISOLATOR = 2391383451;
var IFCVIBRATIONISOLATORTYPE = 3313531582;
var IFCVIRTUALELEMENT = 2769231204;
var IFCVIRTUALGRIDINTERSECTION = 891718957;
var IFCVOIDINGFEATURE = 926996030;
var IFCWALL = 2391406946;
var IFCWALLELEMENTEDCASE = 4156078855;
var IFCWALLSTANDARDCASE = 3512223829;
var IFCWALLTYPE = 1898987631;
var IFCWASTETERMINAL = 4237592921;
var IFCWASTETERMINALTYPE = 1133259667;
var IFCWINDOW = 3304561284;
var IFCWINDOWLININGPROPERTIES = 336235671;
var IFCWINDOWPANELPROPERTIES = 512836454;
var IFCWINDOWSTANDARDCASE = 486154966;
var IFCWINDOWSTYLE = 1299126871;
var IFCWINDOWTYPE = 4009809668;
var IFCWORKCALENDAR = 4088093105;
var IFCWORKCONTROL = 1028945134;
var IFCWORKPLAN = 4218914973;
var IFCWORKSCHEDULE = 3342526732;
var IFCWORKTIME = 1236880293;
var IFCZSHAPEPROFILEDEF = 2543172580;
var IFCZONE = 1033361043;
var IfcElements$1 = [
	IFCACTUATOR,
	IFCAIRTERMINAL,
	IFCAIRTERMINALBOX,
	IFCAIRTOAIRHEATRECOVERY,
	IFCALARM,
	IFCALIGNMENT,
	IFCANNOTATION,
	IFCAUDIOVISUALAPPLIANCE,
	IFCBEAM,
	IFCBEAMSTANDARDCASE,
	IFCBEARING,
	IFCBOILER,
	IFCBRIDGE,
	IFCBRIDGEPART,
	IFCBUILDING,
	IFCBUILDINGELEMENT,
	IFCBUILDINGELEMENTPART,
	IFCBUILDINGELEMENTPROXY,
	IFCBUILDINGSTOREY,
	IFCBURNER,
	IFCCABLECARRIERFITTING,
	IFCCABLECARRIERSEGMENT,
	IFCCABLEFITTING,
	IFCCABLESEGMENT,
	IFCCAISSONFOUNDATION,
	IFCCHILLER,
	IFCCHIMNEY,
	IFCCIVILELEMENT,
	IFCCOIL,
	IFCCOLUMN,
	IFCCOLUMNSTANDARDCASE,
	IFCCOMMUNICATIONSAPPLIANCE,
	IFCCOMPRESSOR,
	IFCCONDENSER,
	IFCCONTROLLER,
	IFCCOOLEDBEAM,
	IFCCOOLINGTOWER,
	IFCCOVERING,
	IFCCURTAINWALL,
	IFCDAMPER,
	IFCDEEPFOUNDATION,
	IFCDISCRETEACCESSORY,
	IFCDISTRIBUTIONCHAMBERELEMENT,
	IFCDISTRIBUTIONCONTROLELEMENT,
	IFCDISTRIBUTIONELEMENT,
	IFCDISTRIBUTIONFLOWELEMENT,
	IFCDISTRIBUTIONPORT,
	IFCDOOR,
	IFCDOORSTANDARDCASE,
	IFCDUCTFITTING,
	IFCDUCTSEGMENT,
	IFCDUCTSILENCER,
	IFCELECTRICAPPLIANCE,
	IFCELECTRICDISTRIBUTIONBOARD,
	IFCELECTRICFLOWSTORAGEDEVICE,
	IFCELECTRICGENERATOR,
	IFCELECTRICMOTOR,
	IFCELECTRICTIMECONTROL,
	IFCELEMENT,
	IFCELEMENTASSEMBLY,
	IFCELEMENTCOMPONENT,
	IFCENERGYCONVERSIONDEVICE,
	IFCENGINE,
	IFCEVAPORATIVECOOLER,
	IFCEVAPORATOR,
	IFCEXTERNALSPATIALELEMENT,
	IFCEXTERNALSPATIALSTRUCTUREELEMENT,
	IFCFACILITY,
	IFCFACILITYPART,
	IFCFAN,
	IFCFASTENER,
	IFCFEATUREELEMENT,
	IFCFEATUREELEMENTADDITION,
	IFCFEATUREELEMENTSUBTRACTION,
	IFCFILTER,
	IFCFIRESUPPRESSIONTERMINAL,
	IFCFLOWCONTROLLER,
	IFCFLOWFITTING,
	IFCFLOWINSTRUMENT,
	IFCFLOWMETER,
	IFCFLOWMOVINGDEVICE,
	IFCFLOWSEGMENT,
	IFCFLOWSTORAGEDEVICE,
	IFCFLOWTERMINAL,
	IFCFLOWTREATMENTDEVICE,
	IFCFOOTING,
	IFCFURNISHINGELEMENT,
	IFCFURNITURE,
	IFCGEOGRAPHICELEMENT,
	IFCGRID,
	IFCHEATEXCHANGER,
	IFCHUMIDIFIER,
	IFCINTERCEPTOR,
	IFCJUNCTIONBOX,
	IFCLAMP,
	IFCLIGHTFIXTURE,
	IFCLINEARPOSITIONINGELEMENT,
	IFCMECHANICALFASTENER,
	IFCMEDICALDEVICE,
	IFCMEMBER,
	IFCMEMBERSTANDARDCASE,
	IFCMOTORCONNECTION,
	IFCOPENINGELEMENT,
	IFCOPENINGSTANDARDCASE,
	IFCOUTLET,
	IFCPILE,
	IFCPIPEFITTING,
	IFCPIPESEGMENT,
	IFCPLATE,
	IFCPLATESTANDARDCASE,
	IFCPORT,
	IFCPOSITIONINGELEMENT,
	IFCPROJECTIONELEMENT,
	IFCPROTECTIVEDEVICE,
	IFCPROTECTIVEDEVICETRIPPINGUNIT,
	IFCPROXY,
	IFCPUMP,
	IFCRAILING,
	IFCRAMP,
	IFCRAMPFLIGHT,
	IFCREFERENT,
	IFCREINFORCINGBAR,
	IFCREINFORCINGELEMENT,
	IFCREINFORCINGMESH,
	IFCROOF,
	IFCSANITARYTERMINAL,
	IFCSENSOR,
	IFCSHADINGDEVICE,
	IFCSITE,
	IFCSLAB,
	IFCSLABELEMENTEDCASE,
	IFCSLABSTANDARDCASE,
	IFCSOLARDEVICE,
	IFCSPACE,
	IFCSPACEHEATER,
	IFCSPATIALELEMENT,
	IFCSPATIALSTRUCTUREELEMENT,
	IFCSPATIALZONE,
	IFCSTACKTERMINAL,
	IFCSTAIR,
	IFCSTAIRFLIGHT,
	IFCSTRUCTURALACTION,
	IFCSTRUCTURALACTIVITY,
	IFCSTRUCTURALCONNECTION,
	IFCSTRUCTURALCURVEACTION,
	IFCSTRUCTURALCURVECONNECTION,
	IFCSTRUCTURALCURVEMEMBER,
	IFCSTRUCTURALCURVEMEMBERVARYING,
	IFCSTRUCTURALCURVEREACTION,
	IFCSTRUCTURALITEM,
	IFCSTRUCTURALLINEARACTION,
	IFCSTRUCTURALMEMBER,
	IFCSTRUCTURALPLANARACTION,
	IFCSTRUCTURALPOINTACTION,
	IFCSTRUCTURALPOINTCONNECTION,
	IFCSTRUCTURALPOINTREACTION,
	IFCSTRUCTURALREACTION,
	IFCSTRUCTURALSURFACEACTION,
	IFCSTRUCTURALSURFACECONNECTION,
	IFCSTRUCTURALSURFACEMEMBER,
	IFCSTRUCTURALSURFACEMEMBERVARYING,
	IFCSTRUCTURALSURFACEREACTION,
	IFCSURFACEFEATURE,
	IFCSWITCHINGDEVICE,
	IFCSYSTEMFURNITUREELEMENT,
	IFCTANK,
	IFCTENDON,
	IFCTENDONANCHOR,
	IFCTENDONCONDUIT,
	IFCTRANSFORMER,
	IFCTRANSPORTELEMENT,
	IFCTUBEBUNDLE,
	IFCUNITARYCONTROLELEMENT,
	IFCUNITARYEQUIPMENT,
	IFCVALVE,
	IFCVIBRATIONDAMPER,
	IFCVIBRATIONISOLATOR,
	IFCVIRTUALELEMENT,
	IFCVOIDINGFEATURE,
	IFCWALL,
	IFCWALLELEMENTEDCASE,
	IFCWALLSTANDARDCASE,
	IFCWASTETERMINAL,
	IFCWINDOW,
	IFCWINDOWSTANDARDCASE
];

// dist/ifc2x4_helper.ts
var FromRawLineData = {};
FromRawLineData[IFCACTIONREQUEST] = (d) => {
	return IfcActionRequest.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCACTOR] = (d) => {
	return IfcActor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCACTORROLE] = (d) => {
	return IfcActorRole.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCACTUATOR] = (d) => {
	return IfcActuator.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCACTUATORTYPE] = (d) => {
	return IfcActuatorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCADDRESS] = (d) => {
	return IfcAddress.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCADVANCEDBREP] = (d) => {
	return IfcAdvancedBrep.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCADVANCEDBREPWITHVOIDS] = (d) => {
	return IfcAdvancedBrepWithVoids.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCADVANCEDFACE] = (d) => {
	return IfcAdvancedFace.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCAIRTERMINAL] = (d) => {
	return IfcAirTerminal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCAIRTERMINALBOX] = (d) => {
	return IfcAirTerminalBox.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCAIRTERMINALBOXTYPE] = (d) => {
	return IfcAirTerminalBoxType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCAIRTERMINALTYPE] = (d) => {
	return IfcAirTerminalType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCAIRTOAIRHEATRECOVERY] = (d) => {
	return IfcAirToAirHeatRecovery.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCAIRTOAIRHEATRECOVERYTYPE] = (d) => {
	return IfcAirToAirHeatRecoveryType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCALARM] = (d) => {
	return IfcAlarm.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCALARMTYPE] = (d) => {
	return IfcAlarmType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCALIGNMENT] = (d) => {
	return IfcAlignment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCALIGNMENT2DHORIZONTAL] = (d) => {
	return IfcAlignment2DHorizontal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCALIGNMENT2DHORIZONTALSEGMENT] = (d) => {
	return IfcAlignment2DHorizontalSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCALIGNMENT2DSEGMENT] = (d) => {
	return IfcAlignment2DSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCALIGNMENT2DVERSEGCIRCULARARC] = (d) => {
	return IfcAlignment2DVerSegCircularArc.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCALIGNMENT2DVERSEGLINE] = (d) => {
	return IfcAlignment2DVerSegLine.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCALIGNMENT2DVERSEGPARABOLICARC] = (d) => {
	return IfcAlignment2DVerSegParabolicArc.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCALIGNMENT2DVERTICAL] = (d) => {
	return IfcAlignment2DVertical.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCALIGNMENT2DVERTICALSEGMENT] = (d) => {
	return IfcAlignment2DVerticalSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCALIGNMENTCURVE] = (d) => {
	return IfcAlignmentCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCANNOTATION] = (d) => {
	return IfcAnnotation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCANNOTATIONFILLAREA] = (d) => {
	return IfcAnnotationFillArea.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCAPPLICATION] = (d) => {
	return IfcApplication.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCAPPLIEDVALUE] = (d) => {
	return IfcAppliedValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCAPPROVAL] = (d) => {
	return IfcApproval.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCAPPROVALRELATIONSHIP] = (d) => {
	return IfcApprovalRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCARBITRARYCLOSEDPROFILEDEF] = (d) => {
	return IfcArbitraryClosedProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCARBITRARYOPENPROFILEDEF] = (d) => {
	return IfcArbitraryOpenProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCARBITRARYPROFILEDEFWITHVOIDS] = (d) => {
	return IfcArbitraryProfileDefWithVoids.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCASSET] = (d) => {
	return IfcAsset.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCASYMMETRICISHAPEPROFILEDEF] = (d) => {
	return IfcAsymmetricIShapeProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCAUDIOVISUALAPPLIANCE] = (d) => {
	return IfcAudioVisualAppliance.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCAUDIOVISUALAPPLIANCETYPE] = (d) => {
	return IfcAudioVisualApplianceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCAXIS1PLACEMENT] = (d) => {
	return IfcAxis1Placement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCAXIS2PLACEMENT2D] = (d) => {
	return IfcAxis2Placement2D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCAXIS2PLACEMENT3D] = (d) => {
	return IfcAxis2Placement3D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBSPLINECURVE] = (d) => {
	return IfcBSplineCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBSPLINECURVEWITHKNOTS] = (d) => {
	return IfcBSplineCurveWithKnots.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBSPLINESURFACE] = (d) => {
	return IfcBSplineSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBSPLINESURFACEWITHKNOTS] = (d) => {
	return IfcBSplineSurfaceWithKnots.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBEAM] = (d) => {
	return IfcBeam.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBEAMSTANDARDCASE] = (d) => {
	return IfcBeamStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBEAMTYPE] = (d) => {
	return IfcBeamType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBEARING] = (d) => {
	return IfcBearing.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBEARINGTYPE] = (d) => {
	return IfcBearingType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBLOBTEXTURE] = (d) => {
	return IfcBlobTexture.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBLOCK] = (d) => {
	return IfcBlock.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBOILER] = (d) => {
	return IfcBoiler.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBOILERTYPE] = (d) => {
	return IfcBoilerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBOOLEANCLIPPINGRESULT] = (d) => {
	return IfcBooleanClippingResult.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBOOLEANRESULT] = (d) => {
	return IfcBooleanResult.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBOUNDARYCONDITION] = (d) => {
	return IfcBoundaryCondition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBOUNDARYCURVE] = (d) => {
	return IfcBoundaryCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBOUNDARYEDGECONDITION] = (d) => {
	return IfcBoundaryEdgeCondition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBOUNDARYFACECONDITION] = (d) => {
	return IfcBoundaryFaceCondition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBOUNDARYNODECONDITION] = (d) => {
	return IfcBoundaryNodeCondition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBOUNDARYNODECONDITIONWARPING] = (d) => {
	return IfcBoundaryNodeConditionWarping.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBOUNDEDCURVE] = (d) => {
	return IfcBoundedCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBOUNDEDSURFACE] = (d) => {
	return IfcBoundedSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBOUNDINGBOX] = (d) => {
	return IfcBoundingBox.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBOXEDHALFSPACE] = (d) => {
	return IfcBoxedHalfSpace.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBRIDGE] = (d) => {
	return IfcBridge.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBRIDGEPART] = (d) => {
	return IfcBridgePart.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBUILDING] = (d) => {
	return IfcBuilding.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBUILDINGELEMENT] = (d) => {
	return IfcBuildingElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBUILDINGELEMENTPART] = (d) => {
	return IfcBuildingElementPart.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBUILDINGELEMENTPARTTYPE] = (d) => {
	return IfcBuildingElementPartType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBUILDINGELEMENTPROXY] = (d) => {
	return IfcBuildingElementProxy.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBUILDINGELEMENTPROXYTYPE] = (d) => {
	return IfcBuildingElementProxyType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBUILDINGELEMENTTYPE] = (d) => {
	return IfcBuildingElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBUILDINGSTOREY] = (d) => {
	return IfcBuildingStorey.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBUILDINGSYSTEM] = (d) => {
	return IfcBuildingSystem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBURNER] = (d) => {
	return IfcBurner.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCBURNERTYPE] = (d) => {
	return IfcBurnerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCSHAPEPROFILEDEF] = (d) => {
	return IfcCShapeProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCABLECARRIERFITTING] = (d) => {
	return IfcCableCarrierFitting.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCABLECARRIERFITTINGTYPE] = (d) => {
	return IfcCableCarrierFittingType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCABLECARRIERSEGMENT] = (d) => {
	return IfcCableCarrierSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCABLECARRIERSEGMENTTYPE] = (d) => {
	return IfcCableCarrierSegmentType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCABLEFITTING] = (d) => {
	return IfcCableFitting.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCABLEFITTINGTYPE] = (d) => {
	return IfcCableFittingType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCABLESEGMENT] = (d) => {
	return IfcCableSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCABLESEGMENTTYPE] = (d) => {
	return IfcCableSegmentType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCAISSONFOUNDATION] = (d) => {
	return IfcCaissonFoundation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCAISSONFOUNDATIONTYPE] = (d) => {
	return IfcCaissonFoundationType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCARTESIANPOINT] = (d) => {
	return IfcCartesianPoint.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCARTESIANPOINTLIST] = (d) => {
	return IfcCartesianPointList.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCARTESIANPOINTLIST2D] = (d) => {
	return IfcCartesianPointList2D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCARTESIANPOINTLIST3D] = (d) => {
	return IfcCartesianPointList3D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCARTESIANTRANSFORMATIONOPERATOR] = (d) => {
	return IfcCartesianTransformationOperator.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCARTESIANTRANSFORMATIONOPERATOR2D] = (d) => {
	return IfcCartesianTransformationOperator2D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = (d) => {
	return IfcCartesianTransformationOperator2DnonUniform.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCARTESIANTRANSFORMATIONOPERATOR3D] = (d) => {
	return IfcCartesianTransformationOperator3D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = (d) => {
	return IfcCartesianTransformationOperator3DnonUniform.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCENTERLINEPROFILEDEF] = (d) => {
	return IfcCenterLineProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCHILLER] = (d) => {
	return IfcChiller.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCHILLERTYPE] = (d) => {
	return IfcChillerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCHIMNEY] = (d) => {
	return IfcChimney.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCHIMNEYTYPE] = (d) => {
	return IfcChimneyType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCIRCLE] = (d) => {
	return IfcCircle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCIRCLEHOLLOWPROFILEDEF] = (d) => {
	return IfcCircleHollowProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCIRCLEPROFILEDEF] = (d) => {
	return IfcCircleProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCIRCULARARCSEGMENT2D] = (d) => {
	return IfcCircularArcSegment2D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCIVILELEMENT] = (d) => {
	return IfcCivilElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCIVILELEMENTTYPE] = (d) => {
	return IfcCivilElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCLASSIFICATION] = (d) => {
	return IfcClassification.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCLASSIFICATIONREFERENCE] = (d) => {
	return IfcClassificationReference.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCLOSEDSHELL] = (d) => {
	return IfcClosedShell.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOIL] = (d) => {
	return IfcCoil.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOILTYPE] = (d) => {
	return IfcCoilType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOLOURRGB] = (d) => {
	return IfcColourRgb.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOLOURRGBLIST] = (d) => {
	return IfcColourRgbList.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOLOURSPECIFICATION] = (d) => {
	return IfcColourSpecification.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOLUMN] = (d) => {
	return IfcColumn.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOLUMNSTANDARDCASE] = (d) => {
	return IfcColumnStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOLUMNTYPE] = (d) => {
	return IfcColumnType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOMMUNICATIONSAPPLIANCE] = (d) => {
	return IfcCommunicationsAppliance.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOMMUNICATIONSAPPLIANCETYPE] = (d) => {
	return IfcCommunicationsApplianceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOMPLEXPROPERTY] = (d) => {
	return IfcComplexProperty.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOMPLEXPROPERTYTEMPLATE] = (d) => {
	return IfcComplexPropertyTemplate.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOMPOSITECURVE] = (d) => {
	return IfcCompositeCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOMPOSITECURVEONSURFACE] = (d) => {
	return IfcCompositeCurveOnSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOMPOSITECURVESEGMENT] = (d) => {
	return IfcCompositeCurveSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOMPOSITEPROFILEDEF] = (d) => {
	return IfcCompositeProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOMPRESSOR] = (d) => {
	return IfcCompressor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOMPRESSORTYPE] = (d) => {
	return IfcCompressorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONDENSER] = (d) => {
	return IfcCondenser.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONDENSERTYPE] = (d) => {
	return IfcCondenserType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONIC] = (d) => {
	return IfcConic.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONNECTEDFACESET] = (d) => {
	return IfcConnectedFaceSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONNECTIONCURVEGEOMETRY] = (d) => {
	return IfcConnectionCurveGeometry.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONNECTIONGEOMETRY] = (d) => {
	return IfcConnectionGeometry.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONNECTIONPOINTECCENTRICITY] = (d) => {
	return IfcConnectionPointEccentricity.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONNECTIONPOINTGEOMETRY] = (d) => {
	return IfcConnectionPointGeometry.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONNECTIONSURFACEGEOMETRY] = (d) => {
	return IfcConnectionSurfaceGeometry.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONNECTIONVOLUMEGEOMETRY] = (d) => {
	return IfcConnectionVolumeGeometry.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONSTRAINT] = (d) => {
	return IfcConstraint.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONSTRUCTIONEQUIPMENTRESOURCE] = (d) => {
	return IfcConstructionEquipmentResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE] = (d) => {
	return IfcConstructionEquipmentResourceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONSTRUCTIONMATERIALRESOURCE] = (d) => {
	return IfcConstructionMaterialResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONSTRUCTIONMATERIALRESOURCETYPE] = (d) => {
	return IfcConstructionMaterialResourceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONSTRUCTIONPRODUCTRESOURCE] = (d) => {
	return IfcConstructionProductResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONSTRUCTIONPRODUCTRESOURCETYPE] = (d) => {
	return IfcConstructionProductResourceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONSTRUCTIONRESOURCE] = (d) => {
	return IfcConstructionResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONSTRUCTIONRESOURCETYPE] = (d) => {
	return IfcConstructionResourceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONTEXT] = (d) => {
	return IfcContext.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONTEXTDEPENDENTUNIT] = (d) => {
	return IfcContextDependentUnit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONTROL] = (d) => {
	return IfcControl.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONTROLLER] = (d) => {
	return IfcController.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONTROLLERTYPE] = (d) => {
	return IfcControllerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONVERSIONBASEDUNIT] = (d) => {
	return IfcConversionBasedUnit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCONVERSIONBASEDUNITWITHOFFSET] = (d) => {
	return IfcConversionBasedUnitWithOffset.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOOLEDBEAM] = (d) => {
	return IfcCooledBeam.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOOLEDBEAMTYPE] = (d) => {
	return IfcCooledBeamType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOOLINGTOWER] = (d) => {
	return IfcCoolingTower.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOOLINGTOWERTYPE] = (d) => {
	return IfcCoolingTowerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOORDINATEOPERATION] = (d) => {
	return IfcCoordinateOperation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOORDINATEREFERENCESYSTEM] = (d) => {
	return IfcCoordinateReferenceSystem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOSTITEM] = (d) => {
	return IfcCostItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOSTSCHEDULE] = (d) => {
	return IfcCostSchedule.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOSTVALUE] = (d) => {
	return IfcCostValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOVERING] = (d) => {
	return IfcCovering.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCOVERINGTYPE] = (d) => {
	return IfcCoveringType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCREWRESOURCE] = (d) => {
	return IfcCrewResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCREWRESOURCETYPE] = (d) => {
	return IfcCrewResourceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCSGPRIMITIVE3D] = (d) => {
	return IfcCsgPrimitive3D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCSGSOLID] = (d) => {
	return IfcCsgSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCURRENCYRELATIONSHIP] = (d) => {
	return IfcCurrencyRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCURTAINWALL] = (d) => {
	return IfcCurtainWall.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCURTAINWALLTYPE] = (d) => {
	return IfcCurtainWallType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCURVE] = (d) => {
	return IfcCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCURVEBOUNDEDPLANE] = (d) => {
	return IfcCurveBoundedPlane.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCURVEBOUNDEDSURFACE] = (d) => {
	return IfcCurveBoundedSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCURVESEGMENT2D] = (d) => {
	return IfcCurveSegment2D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCURVESTYLE] = (d) => {
	return IfcCurveStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCURVESTYLEFONT] = (d) => {
	return IfcCurveStyleFont.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCURVESTYLEFONTANDSCALING] = (d) => {
	return IfcCurveStyleFontAndScaling.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCURVESTYLEFONTPATTERN] = (d) => {
	return IfcCurveStyleFontPattern.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCCYLINDRICALSURFACE] = (d) => {
	return IfcCylindricalSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDAMPER] = (d) => {
	return IfcDamper.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDAMPERTYPE] = (d) => {
	return IfcDamperType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDEEPFOUNDATION] = (d) => {
	return IfcDeepFoundation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDEEPFOUNDATIONTYPE] = (d) => {
	return IfcDeepFoundationType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDERIVEDPROFILEDEF] = (d) => {
	return IfcDerivedProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDERIVEDUNIT] = (d) => {
	return IfcDerivedUnit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDERIVEDUNITELEMENT] = (d) => {
	return IfcDerivedUnitElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDIMENSIONALEXPONENTS] = (d) => {
	return IfcDimensionalExponents.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDIRECTION] = (d) => {
	return IfcDirection.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDISCRETEACCESSORY] = (d) => {
	return IfcDiscreteAccessory.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDISCRETEACCESSORYTYPE] = (d) => {
	return IfcDiscreteAccessoryType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDISTANCEEXPRESSION] = (d) => {
	return IfcDistanceExpression.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDISTRIBUTIONCHAMBERELEMENT] = (d) => {
	return IfcDistributionChamberElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = (d) => {
	return IfcDistributionChamberElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDISTRIBUTIONCIRCUIT] = (d) => {
	return IfcDistributionCircuit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDISTRIBUTIONCONTROLELEMENT] = (d) => {
	return IfcDistributionControlElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDISTRIBUTIONCONTROLELEMENTTYPE] = (d) => {
	return IfcDistributionControlElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDISTRIBUTIONELEMENT] = (d) => {
	return IfcDistributionElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDISTRIBUTIONELEMENTTYPE] = (d) => {
	return IfcDistributionElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDISTRIBUTIONFLOWELEMENT] = (d) => {
	return IfcDistributionFlowElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDISTRIBUTIONFLOWELEMENTTYPE] = (d) => {
	return IfcDistributionFlowElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDISTRIBUTIONPORT] = (d) => {
	return IfcDistributionPort.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDISTRIBUTIONSYSTEM] = (d) => {
	return IfcDistributionSystem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDOCUMENTINFORMATION] = (d) => {
	return IfcDocumentInformation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDOCUMENTINFORMATIONRELATIONSHIP] = (d) => {
	return IfcDocumentInformationRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDOCUMENTREFERENCE] = (d) => {
	return IfcDocumentReference.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDOOR] = (d) => {
	return IfcDoor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDOORLININGPROPERTIES] = (d) => {
	return IfcDoorLiningProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDOORPANELPROPERTIES] = (d) => {
	return IfcDoorPanelProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDOORSTANDARDCASE] = (d) => {
	return IfcDoorStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDOORSTYLE] = (d) => {
	return IfcDoorStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDOORTYPE] = (d) => {
	return IfcDoorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDRAUGHTINGPREDEFINEDCOLOUR] = (d) => {
	return IfcDraughtingPreDefinedColour.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDRAUGHTINGPREDEFINEDCURVEFONT] = (d) => {
	return IfcDraughtingPreDefinedCurveFont.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDUCTFITTING] = (d) => {
	return IfcDuctFitting.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDUCTFITTINGTYPE] = (d) => {
	return IfcDuctFittingType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDUCTSEGMENT] = (d) => {
	return IfcDuctSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDUCTSEGMENTTYPE] = (d) => {
	return IfcDuctSegmentType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDUCTSILENCER] = (d) => {
	return IfcDuctSilencer.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCDUCTSILENCERTYPE] = (d) => {
	return IfcDuctSilencerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEDGE] = (d) => {
	return IfcEdge.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEDGECURVE] = (d) => {
	return IfcEdgeCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEDGELOOP] = (d) => {
	return IfcEdgeLoop.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELECTRICAPPLIANCE] = (d) => {
	return IfcElectricAppliance.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELECTRICAPPLIANCETYPE] = (d) => {
	return IfcElectricApplianceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELECTRICDISTRIBUTIONBOARD] = (d) => {
	return IfcElectricDistributionBoard.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELECTRICDISTRIBUTIONBOARDTYPE] = (d) => {
	return IfcElectricDistributionBoardType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELECTRICFLOWSTORAGEDEVICE] = (d) => {
	return IfcElectricFlowStorageDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELECTRICFLOWSTORAGEDEVICETYPE] = (d) => {
	return IfcElectricFlowStorageDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELECTRICGENERATOR] = (d) => {
	return IfcElectricGenerator.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELECTRICGENERATORTYPE] = (d) => {
	return IfcElectricGeneratorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELECTRICMOTOR] = (d) => {
	return IfcElectricMotor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELECTRICMOTORTYPE] = (d) => {
	return IfcElectricMotorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELECTRICTIMECONTROL] = (d) => {
	return IfcElectricTimeControl.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELECTRICTIMECONTROLTYPE] = (d) => {
	return IfcElectricTimeControlType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELEMENT] = (d) => {
	return IfcElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELEMENTASSEMBLY] = (d) => {
	return IfcElementAssembly.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELEMENTASSEMBLYTYPE] = (d) => {
	return IfcElementAssemblyType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELEMENTCOMPONENT] = (d) => {
	return IfcElementComponent.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELEMENTCOMPONENTTYPE] = (d) => {
	return IfcElementComponentType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELEMENTQUANTITY] = (d) => {
	return IfcElementQuantity.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELEMENTTYPE] = (d) => {
	return IfcElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELEMENTARYSURFACE] = (d) => {
	return IfcElementarySurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELLIPSE] = (d) => {
	return IfcEllipse.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCELLIPSEPROFILEDEF] = (d) => {
	return IfcEllipseProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCENERGYCONVERSIONDEVICE] = (d) => {
	return IfcEnergyConversionDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCENERGYCONVERSIONDEVICETYPE] = (d) => {
	return IfcEnergyConversionDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCENGINE] = (d) => {
	return IfcEngine.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCENGINETYPE] = (d) => {
	return IfcEngineType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEVAPORATIVECOOLER] = (d) => {
	return IfcEvaporativeCooler.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEVAPORATIVECOOLERTYPE] = (d) => {
	return IfcEvaporativeCoolerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEVAPORATOR] = (d) => {
	return IfcEvaporator.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEVAPORATORTYPE] = (d) => {
	return IfcEvaporatorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEVENT] = (d) => {
	return IfcEvent.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEVENTTIME] = (d) => {
	return IfcEventTime.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEVENTTYPE] = (d) => {
	return IfcEventType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEXTENDEDPROPERTIES] = (d) => {
	return IfcExtendedProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEXTERNALINFORMATION] = (d) => {
	return IfcExternalInformation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEXTERNALREFERENCE] = (d) => {
	return IfcExternalReference.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEXTERNALREFERENCERELATIONSHIP] = (d) => {
	return IfcExternalReferenceRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEXTERNALSPATIALELEMENT] = (d) => {
	return IfcExternalSpatialElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEXTERNALSPATIALSTRUCTUREELEMENT] = (d) => {
	return IfcExternalSpatialStructureElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEXTERNALLYDEFINEDHATCHSTYLE] = (d) => {
	return IfcExternallyDefinedHatchStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEXTERNALLYDEFINEDSURFACESTYLE] = (d) => {
	return IfcExternallyDefinedSurfaceStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEXTERNALLYDEFINEDTEXTFONT] = (d) => {
	return IfcExternallyDefinedTextFont.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEXTRUDEDAREASOLID] = (d) => {
	return IfcExtrudedAreaSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCEXTRUDEDAREASOLIDTAPERED] = (d) => {
	return IfcExtrudedAreaSolidTapered.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFACE] = (d) => {
	return IfcFace.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFACEBASEDSURFACEMODEL] = (d) => {
	return IfcFaceBasedSurfaceModel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFACEBOUND] = (d) => {
	return IfcFaceBound.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFACEOUTERBOUND] = (d) => {
	return IfcFaceOuterBound.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFACESURFACE] = (d) => {
	return IfcFaceSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFACETEDBREP] = (d) => {
	return IfcFacetedBrep.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFACETEDBREPWITHVOIDS] = (d) => {
	return IfcFacetedBrepWithVoids.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFACILITY] = (d) => {
	return IfcFacility.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFACILITYPART] = (d) => {
	return IfcFacilityPart.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFAILURECONNECTIONCONDITION] = (d) => {
	return IfcFailureConnectionCondition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFAN] = (d) => {
	return IfcFan.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFANTYPE] = (d) => {
	return IfcFanType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFASTENER] = (d) => {
	return IfcFastener.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFASTENERTYPE] = (d) => {
	return IfcFastenerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFEATUREELEMENT] = (d) => {
	return IfcFeatureElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFEATUREELEMENTADDITION] = (d) => {
	return IfcFeatureElementAddition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFEATUREELEMENTSUBTRACTION] = (d) => {
	return IfcFeatureElementSubtraction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFILLAREASTYLE] = (d) => {
	return IfcFillAreaStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFILLAREASTYLEHATCHING] = (d) => {
	return IfcFillAreaStyleHatching.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFILLAREASTYLETILES] = (d) => {
	return IfcFillAreaStyleTiles.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFILTER] = (d) => {
	return IfcFilter.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFILTERTYPE] = (d) => {
	return IfcFilterType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFIRESUPPRESSIONTERMINAL] = (d) => {
	return IfcFireSuppressionTerminal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFIRESUPPRESSIONTERMINALTYPE] = (d) => {
	return IfcFireSuppressionTerminalType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFIXEDREFERENCESWEPTAREASOLID] = (d) => {
	return IfcFixedReferenceSweptAreaSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWCONTROLLER] = (d) => {
	return IfcFlowController.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWCONTROLLERTYPE] = (d) => {
	return IfcFlowControllerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWFITTING] = (d) => {
	return IfcFlowFitting.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWFITTINGTYPE] = (d) => {
	return IfcFlowFittingType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWINSTRUMENT] = (d) => {
	return IfcFlowInstrument.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWINSTRUMENTTYPE] = (d) => {
	return IfcFlowInstrumentType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWMETER] = (d) => {
	return IfcFlowMeter.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWMETERTYPE] = (d) => {
	return IfcFlowMeterType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWMOVINGDEVICE] = (d) => {
	return IfcFlowMovingDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWMOVINGDEVICETYPE] = (d) => {
	return IfcFlowMovingDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWSEGMENT] = (d) => {
	return IfcFlowSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWSEGMENTTYPE] = (d) => {
	return IfcFlowSegmentType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWSTORAGEDEVICE] = (d) => {
	return IfcFlowStorageDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWSTORAGEDEVICETYPE] = (d) => {
	return IfcFlowStorageDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWTERMINAL] = (d) => {
	return IfcFlowTerminal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWTERMINALTYPE] = (d) => {
	return IfcFlowTerminalType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWTREATMENTDEVICE] = (d) => {
	return IfcFlowTreatmentDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFLOWTREATMENTDEVICETYPE] = (d) => {
	return IfcFlowTreatmentDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFOOTING] = (d) => {
	return IfcFooting.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFOOTINGTYPE] = (d) => {
	return IfcFootingType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFURNISHINGELEMENT] = (d) => {
	return IfcFurnishingElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFURNISHINGELEMENTTYPE] = (d) => {
	return IfcFurnishingElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFURNITURE] = (d) => {
	return IfcFurniture.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCFURNITURETYPE] = (d) => {
	return IfcFurnitureType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCGEOGRAPHICELEMENT] = (d) => {
	return IfcGeographicElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCGEOGRAPHICELEMENTTYPE] = (d) => {
	return IfcGeographicElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCGEOMETRICCURVESET] = (d) => {
	return IfcGeometricCurveSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCGEOMETRICREPRESENTATIONCONTEXT] = (d) => {
	return IfcGeometricRepresentationContext.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCGEOMETRICREPRESENTATIONITEM] = (d) => {
	return IfcGeometricRepresentationItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = (d) => {
	return IfcGeometricRepresentationSubContext.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCGEOMETRICSET] = (d) => {
	return IfcGeometricSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCGRID] = (d) => {
	return IfcGrid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCGRIDAXIS] = (d) => {
	return IfcGridAxis.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCGRIDPLACEMENT] = (d) => {
	return IfcGridPlacement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCGROUP] = (d) => {
	return IfcGroup.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCHALFSPACESOLID] = (d) => {
	return IfcHalfSpaceSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCHEATEXCHANGER] = (d) => {
	return IfcHeatExchanger.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCHEATEXCHANGERTYPE] = (d) => {
	return IfcHeatExchangerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCHUMIDIFIER] = (d) => {
	return IfcHumidifier.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCHUMIDIFIERTYPE] = (d) => {
	return IfcHumidifierType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCISHAPEPROFILEDEF] = (d) => {
	return IfcIShapeProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCIMAGETEXTURE] = (d) => {
	return IfcImageTexture.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCINDEXEDCOLOURMAP] = (d) => {
	return IfcIndexedColourMap.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCINDEXEDPOLYCURVE] = (d) => {
	return IfcIndexedPolyCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCINDEXEDPOLYGONALFACE] = (d) => {
	return IfcIndexedPolygonalFace.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCINDEXEDPOLYGONALFACEWITHVOIDS] = (d) => {
	return IfcIndexedPolygonalFaceWithVoids.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCINDEXEDTEXTUREMAP] = (d) => {
	return IfcIndexedTextureMap.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCINDEXEDTRIANGLETEXTUREMAP] = (d) => {
	return IfcIndexedTriangleTextureMap.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCINTERCEPTOR] = (d) => {
	return IfcInterceptor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCINTERCEPTORTYPE] = (d) => {
	return IfcInterceptorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCINTERSECTIONCURVE] = (d) => {
	return IfcIntersectionCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCINVENTORY] = (d) => {
	return IfcInventory.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCIRREGULARTIMESERIES] = (d) => {
	return IfcIrregularTimeSeries.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCIRREGULARTIMESERIESVALUE] = (d) => {
	return IfcIrregularTimeSeriesValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCJUNCTIONBOX] = (d) => {
	return IfcJunctionBox.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCJUNCTIONBOXTYPE] = (d) => {
	return IfcJunctionBoxType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLSHAPEPROFILEDEF] = (d) => {
	return IfcLShapeProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLABORRESOURCE] = (d) => {
	return IfcLaborResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLABORRESOURCETYPE] = (d) => {
	return IfcLaborResourceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLAGTIME] = (d) => {
	return IfcLagTime.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLAMP] = (d) => {
	return IfcLamp.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLAMPTYPE] = (d) => {
	return IfcLampType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLIBRARYINFORMATION] = (d) => {
	return IfcLibraryInformation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLIBRARYREFERENCE] = (d) => {
	return IfcLibraryReference.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLIGHTDISTRIBUTIONDATA] = (d) => {
	return IfcLightDistributionData.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLIGHTFIXTURE] = (d) => {
	return IfcLightFixture.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLIGHTFIXTURETYPE] = (d) => {
	return IfcLightFixtureType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLIGHTINTENSITYDISTRIBUTION] = (d) => {
	return IfcLightIntensityDistribution.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLIGHTSOURCE] = (d) => {
	return IfcLightSource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLIGHTSOURCEAMBIENT] = (d) => {
	return IfcLightSourceAmbient.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLIGHTSOURCEDIRECTIONAL] = (d) => {
	return IfcLightSourceDirectional.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLIGHTSOURCEGONIOMETRIC] = (d) => {
	return IfcLightSourceGoniometric.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLIGHTSOURCEPOSITIONAL] = (d) => {
	return IfcLightSourcePositional.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLIGHTSOURCESPOT] = (d) => {
	return IfcLightSourceSpot.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLINE] = (d) => {
	return IfcLine.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLINESEGMENT2D] = (d) => {
	return IfcLineSegment2D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLINEARPLACEMENT] = (d) => {
	return IfcLinearPlacement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLINEARPOSITIONINGELEMENT] = (d) => {
	return IfcLinearPositioningElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLOCALPLACEMENT] = (d) => {
	return IfcLocalPlacement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCLOOP] = (d) => {
	return IfcLoop.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMANIFOLDSOLIDBREP] = (d) => {
	return IfcManifoldSolidBrep.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMAPCONVERSION] = (d) => {
	return IfcMapConversion.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMAPPEDITEM] = (d) => {
	return IfcMappedItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIAL] = (d) => {
	return IfcMaterial.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALCLASSIFICATIONRELATIONSHIP] = (d) => {
	return IfcMaterialClassificationRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALCONSTITUENT] = (d) => {
	return IfcMaterialConstituent.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALCONSTITUENTSET] = (d) => {
	return IfcMaterialConstituentSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALDEFINITION] = (d) => {
	return IfcMaterialDefinition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALDEFINITIONREPRESENTATION] = (d) => {
	return IfcMaterialDefinitionRepresentation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALLAYER] = (d) => {
	return IfcMaterialLayer.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALLAYERSET] = (d) => {
	return IfcMaterialLayerSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALLAYERSETUSAGE] = (d) => {
	return IfcMaterialLayerSetUsage.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALLAYERWITHOFFSETS] = (d) => {
	return IfcMaterialLayerWithOffsets.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALLIST] = (d) => {
	return IfcMaterialList.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALPROFILE] = (d) => {
	return IfcMaterialProfile.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALPROFILESET] = (d) => {
	return IfcMaterialProfileSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALPROFILESETUSAGE] = (d) => {
	return IfcMaterialProfileSetUsage.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALPROFILESETUSAGETAPERING] = (d) => {
	return IfcMaterialProfileSetUsageTapering.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALPROFILEWITHOFFSETS] = (d) => {
	return IfcMaterialProfileWithOffsets.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALPROPERTIES] = (d) => {
	return IfcMaterialProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALRELATIONSHIP] = (d) => {
	return IfcMaterialRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMATERIALUSAGEDEFINITION] = (d) => {
	return IfcMaterialUsageDefinition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMEASUREWITHUNIT] = (d) => {
	return IfcMeasureWithUnit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMECHANICALFASTENER] = (d) => {
	return IfcMechanicalFastener.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMECHANICALFASTENERTYPE] = (d) => {
	return IfcMechanicalFastenerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMEDICALDEVICE] = (d) => {
	return IfcMedicalDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMEDICALDEVICETYPE] = (d) => {
	return IfcMedicalDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMEMBER] = (d) => {
	return IfcMember.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMEMBERSTANDARDCASE] = (d) => {
	return IfcMemberStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMEMBERTYPE] = (d) => {
	return IfcMemberType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMETRIC] = (d) => {
	return IfcMetric.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMIRROREDPROFILEDEF] = (d) => {
	return IfcMirroredProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMONETARYUNIT] = (d) => {
	return IfcMonetaryUnit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMOTORCONNECTION] = (d) => {
	return IfcMotorConnection.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCMOTORCONNECTIONTYPE] = (d) => {
	return IfcMotorConnectionType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCNAMEDUNIT] = (d) => {
	return IfcNamedUnit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCOBJECT] = (d) => {
	return IfcObject.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCOBJECTDEFINITION] = (d) => {
	return IfcObjectDefinition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCOBJECTPLACEMENT] = (d) => {
	return IfcObjectPlacement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCOBJECTIVE] = (d) => {
	return IfcObjective.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCOCCUPANT] = (d) => {
	return IfcOccupant.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCOFFSETCURVE] = (d) => {
	return IfcOffsetCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCOFFSETCURVE2D] = (d) => {
	return IfcOffsetCurve2D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCOFFSETCURVE3D] = (d) => {
	return IfcOffsetCurve3D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCOFFSETCURVEBYDISTANCES] = (d) => {
	return IfcOffsetCurveByDistances.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCOPENSHELL] = (d) => {
	return IfcOpenShell.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCOPENINGELEMENT] = (d) => {
	return IfcOpeningElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCOPENINGSTANDARDCASE] = (d) => {
	return IfcOpeningStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCORGANIZATION] = (d) => {
	return IfcOrganization.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCORGANIZATIONRELATIONSHIP] = (d) => {
	return IfcOrganizationRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCORIENTATIONEXPRESSION] = (d) => {
	return IfcOrientationExpression.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCORIENTEDEDGE] = (d) => {
	return IfcOrientedEdge.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCOUTERBOUNDARYCURVE] = (d) => {
	return IfcOuterBoundaryCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCOUTLET] = (d) => {
	return IfcOutlet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCOUTLETTYPE] = (d) => {
	return IfcOutletType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCOWNERHISTORY] = (d) => {
	return IfcOwnerHistory.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPARAMETERIZEDPROFILEDEF] = (d) => {
	return IfcParameterizedProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPATH] = (d) => {
	return IfcPath.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPCURVE] = (d) => {
	return IfcPcurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPERFORMANCEHISTORY] = (d) => {
	return IfcPerformanceHistory.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPERMEABLECOVERINGPROPERTIES] = (d) => {
	return IfcPermeableCoveringProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPERMIT] = (d) => {
	return IfcPermit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPERSON] = (d) => {
	return IfcPerson.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPERSONANDORGANIZATION] = (d) => {
	return IfcPersonAndOrganization.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPHYSICALCOMPLEXQUANTITY] = (d) => {
	return IfcPhysicalComplexQuantity.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPHYSICALQUANTITY] = (d) => {
	return IfcPhysicalQuantity.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPHYSICALSIMPLEQUANTITY] = (d) => {
	return IfcPhysicalSimpleQuantity.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPILE] = (d) => {
	return IfcPile.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPILETYPE] = (d) => {
	return IfcPileType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPIPEFITTING] = (d) => {
	return IfcPipeFitting.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPIPEFITTINGTYPE] = (d) => {
	return IfcPipeFittingType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPIPESEGMENT] = (d) => {
	return IfcPipeSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPIPESEGMENTTYPE] = (d) => {
	return IfcPipeSegmentType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPIXELTEXTURE] = (d) => {
	return IfcPixelTexture.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPLACEMENT] = (d) => {
	return IfcPlacement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPLANARBOX] = (d) => {
	return IfcPlanarBox.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPLANAREXTENT] = (d) => {
	return IfcPlanarExtent.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPLANE] = (d) => {
	return IfcPlane.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPLATE] = (d) => {
	return IfcPlate.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPLATESTANDARDCASE] = (d) => {
	return IfcPlateStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPLATETYPE] = (d) => {
	return IfcPlateType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPOINT] = (d) => {
	return IfcPoint.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPOINTONCURVE] = (d) => {
	return IfcPointOnCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPOINTONSURFACE] = (d) => {
	return IfcPointOnSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPOLYLOOP] = (d) => {
	return IfcPolyLoop.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPOLYGONALBOUNDEDHALFSPACE] = (d) => {
	return IfcPolygonalBoundedHalfSpace.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPOLYGONALFACESET] = (d) => {
	return IfcPolygonalFaceSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPOLYLINE] = (d) => {
	return IfcPolyline.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPORT] = (d) => {
	return IfcPort.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPOSITIONINGELEMENT] = (d) => {
	return IfcPositioningElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPOSTALADDRESS] = (d) => {
	return IfcPostalAddress.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPREDEFINEDCOLOUR] = (d) => {
	return IfcPreDefinedColour.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPREDEFINEDCURVEFONT] = (d) => {
	return IfcPreDefinedCurveFont.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPREDEFINEDITEM] = (d) => {
	return IfcPreDefinedItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPREDEFINEDPROPERTIES] = (d) => {
	return IfcPreDefinedProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPREDEFINEDPROPERTYSET] = (d) => {
	return IfcPreDefinedPropertySet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPREDEFINEDTEXTFONT] = (d) => {
	return IfcPreDefinedTextFont.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPRESENTATIONITEM] = (d) => {
	return IfcPresentationItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPRESENTATIONLAYERASSIGNMENT] = (d) => {
	return IfcPresentationLayerAssignment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPRESENTATIONLAYERWITHSTYLE] = (d) => {
	return IfcPresentationLayerWithStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPRESENTATIONSTYLE] = (d) => {
	return IfcPresentationStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPRESENTATIONSTYLEASSIGNMENT] = (d) => {
	return IfcPresentationStyleAssignment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROCEDURE] = (d) => {
	return IfcProcedure.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROCEDURETYPE] = (d) => {
	return IfcProcedureType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROCESS] = (d) => {
	return IfcProcess.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPRODUCT] = (d) => {
	return IfcProduct.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPRODUCTDEFINITIONSHAPE] = (d) => {
	return IfcProductDefinitionShape.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPRODUCTREPRESENTATION] = (d) => {
	return IfcProductRepresentation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROFILEDEF] = (d) => {
	return IfcProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROFILEPROPERTIES] = (d) => {
	return IfcProfileProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROJECT] = (d) => {
	return IfcProject.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROJECTLIBRARY] = (d) => {
	return IfcProjectLibrary.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROJECTORDER] = (d) => {
	return IfcProjectOrder.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROJECTEDCRS] = (d) => {
	return IfcProjectedCRS.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROJECTIONELEMENT] = (d) => {
	return IfcProjectionElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROPERTY] = (d) => {
	return IfcProperty.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROPERTYABSTRACTION] = (d) => {
	return IfcPropertyAbstraction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROPERTYBOUNDEDVALUE] = (d) => {
	return IfcPropertyBoundedValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROPERTYDEFINITION] = (d) => {
	return IfcPropertyDefinition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROPERTYDEPENDENCYRELATIONSHIP] = (d) => {
	return IfcPropertyDependencyRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROPERTYENUMERATEDVALUE] = (d) => {
	return IfcPropertyEnumeratedValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROPERTYENUMERATION] = (d) => {
	return IfcPropertyEnumeration.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROPERTYLISTVALUE] = (d) => {
	return IfcPropertyListValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROPERTYREFERENCEVALUE] = (d) => {
	return IfcPropertyReferenceValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROPERTYSET] = (d) => {
	return IfcPropertySet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROPERTYSETDEFINITION] = (d) => {
	return IfcPropertySetDefinition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROPERTYSETTEMPLATE] = (d) => {
	return IfcPropertySetTemplate.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROPERTYSINGLEVALUE] = (d) => {
	return IfcPropertySingleValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROPERTYTABLEVALUE] = (d) => {
	return IfcPropertyTableValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROPERTYTEMPLATE] = (d) => {
	return IfcPropertyTemplate.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROPERTYTEMPLATEDEFINITION] = (d) => {
	return IfcPropertyTemplateDefinition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROTECTIVEDEVICE] = (d) => {
	return IfcProtectiveDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROTECTIVEDEVICETRIPPINGUNIT] = (d) => {
	return IfcProtectiveDeviceTrippingUnit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROTECTIVEDEVICETRIPPINGUNITTYPE] = (d) => {
	return IfcProtectiveDeviceTrippingUnitType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROTECTIVEDEVICETYPE] = (d) => {
	return IfcProtectiveDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPROXY] = (d) => {
	return IfcProxy.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPUMP] = (d) => {
	return IfcPump.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCPUMPTYPE] = (d) => {
	return IfcPumpType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCQUANTITYAREA] = (d) => {
	return IfcQuantityArea.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCQUANTITYCOUNT] = (d) => {
	return IfcQuantityCount.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCQUANTITYLENGTH] = (d) => {
	return IfcQuantityLength.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCQUANTITYSET] = (d) => {
	return IfcQuantitySet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCQUANTITYTIME] = (d) => {
	return IfcQuantityTime.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCQUANTITYVOLUME] = (d) => {
	return IfcQuantityVolume.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCQUANTITYWEIGHT] = (d) => {
	return IfcQuantityWeight.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRAILING] = (d) => {
	return IfcRailing.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRAILINGTYPE] = (d) => {
	return IfcRailingType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRAMP] = (d) => {
	return IfcRamp.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRAMPFLIGHT] = (d) => {
	return IfcRampFlight.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRAMPFLIGHTTYPE] = (d) => {
	return IfcRampFlightType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRAMPTYPE] = (d) => {
	return IfcRampType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRATIONALBSPLINECURVEWITHKNOTS] = (d) => {
	return IfcRationalBSplineCurveWithKnots.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRATIONALBSPLINESURFACEWITHKNOTS] = (d) => {
	return IfcRationalBSplineSurfaceWithKnots.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRECTANGLEHOLLOWPROFILEDEF] = (d) => {
	return IfcRectangleHollowProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRECTANGLEPROFILEDEF] = (d) => {
	return IfcRectangleProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRECTANGULARPYRAMID] = (d) => {
	return IfcRectangularPyramid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRECTANGULARTRIMMEDSURFACE] = (d) => {
	return IfcRectangularTrimmedSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRECURRENCEPATTERN] = (d) => {
	return IfcRecurrencePattern.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREFERENCE] = (d) => {
	return IfcReference.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREFERENT] = (d) => {
	return IfcReferent.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREGULARTIMESERIES] = (d) => {
	return IfcRegularTimeSeries.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREINFORCEMENTBARPROPERTIES] = (d) => {
	return IfcReinforcementBarProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREINFORCEMENTDEFINITIONPROPERTIES] = (d) => {
	return IfcReinforcementDefinitionProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREINFORCINGBAR] = (d) => {
	return IfcReinforcingBar.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREINFORCINGBARTYPE] = (d) => {
	return IfcReinforcingBarType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREINFORCINGELEMENT] = (d) => {
	return IfcReinforcingElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREINFORCINGELEMENTTYPE] = (d) => {
	return IfcReinforcingElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREINFORCINGMESH] = (d) => {
	return IfcReinforcingMesh.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREINFORCINGMESHTYPE] = (d) => {
	return IfcReinforcingMeshType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELAGGREGATES] = (d) => {
	return IfcRelAggregates.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELASSIGNS] = (d) => {
	return IfcRelAssigns.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELASSIGNSTOACTOR] = (d) => {
	return IfcRelAssignsToActor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELASSIGNSTOCONTROL] = (d) => {
	return IfcRelAssignsToControl.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELASSIGNSTOGROUP] = (d) => {
	return IfcRelAssignsToGroup.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELASSIGNSTOGROUPBYFACTOR] = (d) => {
	return IfcRelAssignsToGroupByFactor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELASSIGNSTOPROCESS] = (d) => {
	return IfcRelAssignsToProcess.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELASSIGNSTOPRODUCT] = (d) => {
	return IfcRelAssignsToProduct.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELASSIGNSTORESOURCE] = (d) => {
	return IfcRelAssignsToResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELASSOCIATES] = (d) => {
	return IfcRelAssociates.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELASSOCIATESAPPROVAL] = (d) => {
	return IfcRelAssociatesApproval.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELASSOCIATESCLASSIFICATION] = (d) => {
	return IfcRelAssociatesClassification.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELASSOCIATESCONSTRAINT] = (d) => {
	return IfcRelAssociatesConstraint.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELASSOCIATESDOCUMENT] = (d) => {
	return IfcRelAssociatesDocument.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELASSOCIATESLIBRARY] = (d) => {
	return IfcRelAssociatesLibrary.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELASSOCIATESMATERIAL] = (d) => {
	return IfcRelAssociatesMaterial.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELCONNECTS] = (d) => {
	return IfcRelConnects.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELCONNECTSELEMENTS] = (d) => {
	return IfcRelConnectsElements.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELCONNECTSPATHELEMENTS] = (d) => {
	return IfcRelConnectsPathElements.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELCONNECTSPORTTOELEMENT] = (d) => {
	return IfcRelConnectsPortToElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELCONNECTSPORTS] = (d) => {
	return IfcRelConnectsPorts.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELCONNECTSSTRUCTURALACTIVITY] = (d) => {
	return IfcRelConnectsStructuralActivity.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELCONNECTSSTRUCTURALMEMBER] = (d) => {
	return IfcRelConnectsStructuralMember.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELCONNECTSWITHECCENTRICITY] = (d) => {
	return IfcRelConnectsWithEccentricity.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELCONNECTSWITHREALIZINGELEMENTS] = (d) => {
	return IfcRelConnectsWithRealizingElements.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELCONTAINEDINSPATIALSTRUCTURE] = (d) => {
	return IfcRelContainedInSpatialStructure.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELCOVERSBLDGELEMENTS] = (d) => {
	return IfcRelCoversBldgElements.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELCOVERSSPACES] = (d) => {
	return IfcRelCoversSpaces.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELDECLARES] = (d) => {
	return IfcRelDeclares.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELDECOMPOSES] = (d) => {
	return IfcRelDecomposes.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELDEFINES] = (d) => {
	return IfcRelDefines.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELDEFINESBYOBJECT] = (d) => {
	return IfcRelDefinesByObject.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELDEFINESBYPROPERTIES] = (d) => {
	return IfcRelDefinesByProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELDEFINESBYTEMPLATE] = (d) => {
	return IfcRelDefinesByTemplate.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELDEFINESBYTYPE] = (d) => {
	return IfcRelDefinesByType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELFILLSELEMENT] = (d) => {
	return IfcRelFillsElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELFLOWCONTROLELEMENTS] = (d) => {
	return IfcRelFlowControlElements.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELINTERFERESELEMENTS] = (d) => {
	return IfcRelInterferesElements.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELNESTS] = (d) => {
	return IfcRelNests.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELPOSITIONS] = (d) => {
	return IfcRelPositions.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELPROJECTSELEMENT] = (d) => {
	return IfcRelProjectsElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELREFERENCEDINSPATIALSTRUCTURE] = (d) => {
	return IfcRelReferencedInSpatialStructure.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELSEQUENCE] = (d) => {
	return IfcRelSequence.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELSERVICESBUILDINGS] = (d) => {
	return IfcRelServicesBuildings.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELSPACEBOUNDARY] = (d) => {
	return IfcRelSpaceBoundary.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELSPACEBOUNDARY1STLEVEL] = (d) => {
	return IfcRelSpaceBoundary1stLevel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELSPACEBOUNDARY2NDLEVEL] = (d) => {
	return IfcRelSpaceBoundary2ndLevel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELVOIDSELEMENT] = (d) => {
	return IfcRelVoidsElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRELATIONSHIP] = (d) => {
	return IfcRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREPARAMETRISEDCOMPOSITECURVESEGMENT] = (d) => {
	return IfcReparametrisedCompositeCurveSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREPRESENTATION] = (d) => {
	return IfcRepresentation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREPRESENTATIONCONTEXT] = (d) => {
	return IfcRepresentationContext.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREPRESENTATIONITEM] = (d) => {
	return IfcRepresentationItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREPRESENTATIONMAP] = (d) => {
	return IfcRepresentationMap.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRESOURCE] = (d) => {
	return IfcResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRESOURCEAPPROVALRELATIONSHIP] = (d) => {
	return IfcResourceApprovalRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRESOURCECONSTRAINTRELATIONSHIP] = (d) => {
	return IfcResourceConstraintRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRESOURCELEVELRELATIONSHIP] = (d) => {
	return IfcResourceLevelRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRESOURCETIME] = (d) => {
	return IfcResourceTime.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREVOLVEDAREASOLID] = (d) => {
	return IfcRevolvedAreaSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCREVOLVEDAREASOLIDTAPERED] = (d) => {
	return IfcRevolvedAreaSolidTapered.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRIGHTCIRCULARCONE] = (d) => {
	return IfcRightCircularCone.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCRIGHTCIRCULARCYLINDER] = (d) => {
	return IfcRightCircularCylinder.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCROOF] = (d) => {
	return IfcRoof.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCROOFTYPE] = (d) => {
	return IfcRoofType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCROOT] = (d) => {
	return IfcRoot.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCROUNDEDRECTANGLEPROFILEDEF] = (d) => {
	return IfcRoundedRectangleProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSIUNIT] = (d) => {
	return IfcSIUnit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSANITARYTERMINAL] = (d) => {
	return IfcSanitaryTerminal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSANITARYTERMINALTYPE] = (d) => {
	return IfcSanitaryTerminalType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSCHEDULINGTIME] = (d) => {
	return IfcSchedulingTime.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSEAMCURVE] = (d) => {
	return IfcSeamCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSECTIONPROPERTIES] = (d) => {
	return IfcSectionProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSECTIONREINFORCEMENTPROPERTIES] = (d) => {
	return IfcSectionReinforcementProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSECTIONEDSOLID] = (d) => {
	return IfcSectionedSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSECTIONEDSOLIDHORIZONTAL] = (d) => {
	return IfcSectionedSolidHorizontal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSECTIONEDSPINE] = (d) => {
	return IfcSectionedSpine.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSENSOR] = (d) => {
	return IfcSensor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSENSORTYPE] = (d) => {
	return IfcSensorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSHADINGDEVICE] = (d) => {
	return IfcShadingDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSHADINGDEVICETYPE] = (d) => {
	return IfcShadingDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSHAPEASPECT] = (d) => {
	return IfcShapeAspect.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSHAPEMODEL] = (d) => {
	return IfcShapeModel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSHAPEREPRESENTATION] = (d) => {
	return IfcShapeRepresentation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSHELLBASEDSURFACEMODEL] = (d) => {
	return IfcShellBasedSurfaceModel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSIMPLEPROPERTY] = (d) => {
	return IfcSimpleProperty.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSIMPLEPROPERTYTEMPLATE] = (d) => {
	return IfcSimplePropertyTemplate.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSITE] = (d) => {
	return IfcSite.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSLAB] = (d) => {
	return IfcSlab.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSLABELEMENTEDCASE] = (d) => {
	return IfcSlabElementedCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSLABSTANDARDCASE] = (d) => {
	return IfcSlabStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSLABTYPE] = (d) => {
	return IfcSlabType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSLIPPAGECONNECTIONCONDITION] = (d) => {
	return IfcSlippageConnectionCondition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSOLARDEVICE] = (d) => {
	return IfcSolarDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSOLARDEVICETYPE] = (d) => {
	return IfcSolarDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSOLIDMODEL] = (d) => {
	return IfcSolidModel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSPACE] = (d) => {
	return IfcSpace.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSPACEHEATER] = (d) => {
	return IfcSpaceHeater.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSPACEHEATERTYPE] = (d) => {
	return IfcSpaceHeaterType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSPACETYPE] = (d) => {
	return IfcSpaceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSPATIALELEMENT] = (d) => {
	return IfcSpatialElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSPATIALELEMENTTYPE] = (d) => {
	return IfcSpatialElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSPATIALSTRUCTUREELEMENT] = (d) => {
	return IfcSpatialStructureElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSPATIALSTRUCTUREELEMENTTYPE] = (d) => {
	return IfcSpatialStructureElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSPATIALZONE] = (d) => {
	return IfcSpatialZone.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSPATIALZONETYPE] = (d) => {
	return IfcSpatialZoneType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSPHERE] = (d) => {
	return IfcSphere.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSPHERICALSURFACE] = (d) => {
	return IfcSphericalSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTACKTERMINAL] = (d) => {
	return IfcStackTerminal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTACKTERMINALTYPE] = (d) => {
	return IfcStackTerminalType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTAIR] = (d) => {
	return IfcStair.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTAIRFLIGHT] = (d) => {
	return IfcStairFlight.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTAIRFLIGHTTYPE] = (d) => {
	return IfcStairFlightType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTAIRTYPE] = (d) => {
	return IfcStairType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALACTION] = (d) => {
	return IfcStructuralAction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALACTIVITY] = (d) => {
	return IfcStructuralActivity.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALANALYSISMODEL] = (d) => {
	return IfcStructuralAnalysisModel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALCONNECTION] = (d) => {
	return IfcStructuralConnection.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALCONNECTIONCONDITION] = (d) => {
	return IfcStructuralConnectionCondition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALCURVEACTION] = (d) => {
	return IfcStructuralCurveAction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALCURVECONNECTION] = (d) => {
	return IfcStructuralCurveConnection.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALCURVEMEMBER] = (d) => {
	return IfcStructuralCurveMember.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALCURVEMEMBERVARYING] = (d) => {
	return IfcStructuralCurveMemberVarying.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALCURVEREACTION] = (d) => {
	return IfcStructuralCurveReaction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALITEM] = (d) => {
	return IfcStructuralItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALLINEARACTION] = (d) => {
	return IfcStructuralLinearAction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALLOAD] = (d) => {
	return IfcStructuralLoad.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALLOADCASE] = (d) => {
	return IfcStructuralLoadCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALLOADCONFIGURATION] = (d) => {
	return IfcStructuralLoadConfiguration.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALLOADGROUP] = (d) => {
	return IfcStructuralLoadGroup.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALLOADLINEARFORCE] = (d) => {
	return IfcStructuralLoadLinearForce.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALLOADORRESULT] = (d) => {
	return IfcStructuralLoadOrResult.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALLOADPLANARFORCE] = (d) => {
	return IfcStructuralLoadPlanarForce.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = (d) => {
	return IfcStructuralLoadSingleDisplacement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION] = (d) => {
	return IfcStructuralLoadSingleDisplacementDistortion.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALLOADSINGLEFORCE] = (d) => {
	return IfcStructuralLoadSingleForce.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALLOADSINGLEFORCEWARPING] = (d) => {
	return IfcStructuralLoadSingleForceWarping.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALLOADSTATIC] = (d) => {
	return IfcStructuralLoadStatic.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALLOADTEMPERATURE] = (d) => {
	return IfcStructuralLoadTemperature.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALMEMBER] = (d) => {
	return IfcStructuralMember.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALPLANARACTION] = (d) => {
	return IfcStructuralPlanarAction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALPOINTACTION] = (d) => {
	return IfcStructuralPointAction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALPOINTCONNECTION] = (d) => {
	return IfcStructuralPointConnection.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALPOINTREACTION] = (d) => {
	return IfcStructuralPointReaction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALREACTION] = (d) => {
	return IfcStructuralReaction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALRESULTGROUP] = (d) => {
	return IfcStructuralResultGroup.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALSURFACEACTION] = (d) => {
	return IfcStructuralSurfaceAction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALSURFACECONNECTION] = (d) => {
	return IfcStructuralSurfaceConnection.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALSURFACEMEMBER] = (d) => {
	return IfcStructuralSurfaceMember.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALSURFACEMEMBERVARYING] = (d) => {
	return IfcStructuralSurfaceMemberVarying.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTRUCTURALSURFACEREACTION] = (d) => {
	return IfcStructuralSurfaceReaction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTYLEMODEL] = (d) => {
	return IfcStyleModel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTYLEDITEM] = (d) => {
	return IfcStyledItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSTYLEDREPRESENTATION] = (d) => {
	return IfcStyledRepresentation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSUBCONTRACTRESOURCE] = (d) => {
	return IfcSubContractResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSUBCONTRACTRESOURCETYPE] = (d) => {
	return IfcSubContractResourceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSUBEDGE] = (d) => {
	return IfcSubedge.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSURFACE] = (d) => {
	return IfcSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSURFACECURVE] = (d) => {
	return IfcSurfaceCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSURFACECURVESWEPTAREASOLID] = (d) => {
	return IfcSurfaceCurveSweptAreaSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSURFACEFEATURE] = (d) => {
	return IfcSurfaceFeature.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSURFACEOFLINEAREXTRUSION] = (d) => {
	return IfcSurfaceOfLinearExtrusion.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSURFACEOFREVOLUTION] = (d) => {
	return IfcSurfaceOfRevolution.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSURFACEREINFORCEMENTAREA] = (d) => {
	return IfcSurfaceReinforcementArea.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSURFACESTYLE] = (d) => {
	return IfcSurfaceStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSURFACESTYLELIGHTING] = (d) => {
	return IfcSurfaceStyleLighting.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSURFACESTYLEREFRACTION] = (d) => {
	return IfcSurfaceStyleRefraction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSURFACESTYLERENDERING] = (d) => {
	return IfcSurfaceStyleRendering.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSURFACESTYLESHADING] = (d) => {
	return IfcSurfaceStyleShading.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSURFACESTYLEWITHTEXTURES] = (d) => {
	return IfcSurfaceStyleWithTextures.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSURFACETEXTURE] = (d) => {
	return IfcSurfaceTexture.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSWEPTAREASOLID] = (d) => {
	return IfcSweptAreaSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSWEPTDISKSOLID] = (d) => {
	return IfcSweptDiskSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSWEPTDISKSOLIDPOLYGONAL] = (d) => {
	return IfcSweptDiskSolidPolygonal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSWEPTSURFACE] = (d) => {
	return IfcSweptSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSWITCHINGDEVICE] = (d) => {
	return IfcSwitchingDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSWITCHINGDEVICETYPE] = (d) => {
	return IfcSwitchingDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSYSTEM] = (d) => {
	return IfcSystem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSYSTEMFURNITUREELEMENT] = (d) => {
	return IfcSystemFurnitureElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCSYSTEMFURNITUREELEMENTTYPE] = (d) => {
	return IfcSystemFurnitureElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTSHAPEPROFILEDEF] = (d) => {
	return IfcTShapeProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTABLE] = (d) => {
	return IfcTable.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTABLECOLUMN] = (d) => {
	return IfcTableColumn.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTABLEROW] = (d) => {
	return IfcTableRow.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTANK] = (d) => {
	return IfcTank.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTANKTYPE] = (d) => {
	return IfcTankType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTASK] = (d) => {
	return IfcTask.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTASKTIME] = (d) => {
	return IfcTaskTime.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTASKTIMERECURRING] = (d) => {
	return IfcTaskTimeRecurring.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTASKTYPE] = (d) => {
	return IfcTaskType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTELECOMADDRESS] = (d) => {
	return IfcTelecomAddress.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTENDON] = (d) => {
	return IfcTendon.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTENDONANCHOR] = (d) => {
	return IfcTendonAnchor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTENDONANCHORTYPE] = (d) => {
	return IfcTendonAnchorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTENDONCONDUIT] = (d) => {
	return IfcTendonConduit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTENDONCONDUITTYPE] = (d) => {
	return IfcTendonConduitType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTENDONTYPE] = (d) => {
	return IfcTendonType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTESSELLATEDFACESET] = (d) => {
	return IfcTessellatedFaceSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTESSELLATEDITEM] = (d) => {
	return IfcTessellatedItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTEXTLITERAL] = (d) => {
	return IfcTextLiteral.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTEXTLITERALWITHEXTENT] = (d) => {
	return IfcTextLiteralWithExtent.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTEXTSTYLE] = (d) => {
	return IfcTextStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTEXTSTYLEFONTMODEL] = (d) => {
	return IfcTextStyleFontModel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTEXTSTYLEFORDEFINEDFONT] = (d) => {
	return IfcTextStyleForDefinedFont.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTEXTSTYLETEXTMODEL] = (d) => {
	return IfcTextStyleTextModel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTEXTURECOORDINATE] = (d) => {
	return IfcTextureCoordinate.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTEXTURECOORDINATEGENERATOR] = (d) => {
	return IfcTextureCoordinateGenerator.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTEXTUREMAP] = (d) => {
	return IfcTextureMap.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTEXTUREVERTEX] = (d) => {
	return IfcTextureVertex.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTEXTUREVERTEXLIST] = (d) => {
	return IfcTextureVertexList.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTIMEPERIOD] = (d) => {
	return IfcTimePeriod.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTIMESERIES] = (d) => {
	return IfcTimeSeries.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTIMESERIESVALUE] = (d) => {
	return IfcTimeSeriesValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTOPOLOGICALREPRESENTATIONITEM] = (d) => {
	return IfcTopologicalRepresentationItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTOPOLOGYREPRESENTATION] = (d) => {
	return IfcTopologyRepresentation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTOROIDALSURFACE] = (d) => {
	return IfcToroidalSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTRANSFORMER] = (d) => {
	return IfcTransformer.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTRANSFORMERTYPE] = (d) => {
	return IfcTransformerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTRANSITIONCURVESEGMENT2D] = (d) => {
	return IfcTransitionCurveSegment2D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTRANSPORTELEMENT] = (d) => {
	return IfcTransportElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTRANSPORTELEMENTTYPE] = (d) => {
	return IfcTransportElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTRAPEZIUMPROFILEDEF] = (d) => {
	return IfcTrapeziumProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTRIANGULATEDFACESET] = (d) => {
	return IfcTriangulatedFaceSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTRIANGULATEDIRREGULARNETWORK] = (d) => {
	return IfcTriangulatedIrregularNetwork.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTRIMMEDCURVE] = (d) => {
	return IfcTrimmedCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTUBEBUNDLE] = (d) => {
	return IfcTubeBundle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTUBEBUNDLETYPE] = (d) => {
	return IfcTubeBundleType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTYPEOBJECT] = (d) => {
	return IfcTypeObject.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTYPEPROCESS] = (d) => {
	return IfcTypeProcess.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTYPEPRODUCT] = (d) => {
	return IfcTypeProduct.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCTYPERESOURCE] = (d) => {
	return IfcTypeResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCUSHAPEPROFILEDEF] = (d) => {
	return IfcUShapeProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCUNITASSIGNMENT] = (d) => {
	return IfcUnitAssignment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCUNITARYCONTROLELEMENT] = (d) => {
	return IfcUnitaryControlElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCUNITARYCONTROLELEMENTTYPE] = (d) => {
	return IfcUnitaryControlElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCUNITARYEQUIPMENT] = (d) => {
	return IfcUnitaryEquipment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCUNITARYEQUIPMENTTYPE] = (d) => {
	return IfcUnitaryEquipmentType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCVALVE] = (d) => {
	return IfcValve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCVALVETYPE] = (d) => {
	return IfcValveType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCVECTOR] = (d) => {
	return IfcVector.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCVERTEX] = (d) => {
	return IfcVertex.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCVERTEXLOOP] = (d) => {
	return IfcVertexLoop.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCVERTEXPOINT] = (d) => {
	return IfcVertexPoint.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCVIBRATIONDAMPER] = (d) => {
	return IfcVibrationDamper.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCVIBRATIONDAMPERTYPE] = (d) => {
	return IfcVibrationDamperType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCVIBRATIONISOLATOR] = (d) => {
	return IfcVibrationIsolator.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCVIBRATIONISOLATORTYPE] = (d) => {
	return IfcVibrationIsolatorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCVIRTUALELEMENT] = (d) => {
	return IfcVirtualElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCVIRTUALGRIDINTERSECTION] = (d) => {
	return IfcVirtualGridIntersection.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCVOIDINGFEATURE] = (d) => {
	return IfcVoidingFeature.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWALL] = (d) => {
	return IfcWall.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWALLELEMENTEDCASE] = (d) => {
	return IfcWallElementedCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWALLSTANDARDCASE] = (d) => {
	return IfcWallStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWALLTYPE] = (d) => {
	return IfcWallType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWASTETERMINAL] = (d) => {
	return IfcWasteTerminal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWASTETERMINALTYPE] = (d) => {
	return IfcWasteTerminalType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWINDOW] = (d) => {
	return IfcWindow.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWINDOWLININGPROPERTIES] = (d) => {
	return IfcWindowLiningProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWINDOWPANELPROPERTIES] = (d) => {
	return IfcWindowPanelProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWINDOWSTANDARDCASE] = (d) => {
	return IfcWindowStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWINDOWSTYLE] = (d) => {
	return IfcWindowStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWINDOWTYPE] = (d) => {
	return IfcWindowType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWORKCALENDAR] = (d) => {
	return IfcWorkCalendar.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWORKCONTROL] = (d) => {
	return IfcWorkControl.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWORKPLAN] = (d) => {
	return IfcWorkPlan.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWORKSCHEDULE] = (d) => {
	return IfcWorkSchedule.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCWORKTIME] = (d) => {
	return IfcWorkTime.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCZSHAPEPROFILEDEF] = (d) => {
	return IfcZShapeProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[IFCZONE] = (d) => {
	return IfcZone.FromTape(d.ID, d.type, d.arguments);
};
var IfcActionRequest = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, PredefinedType, Status, LongDescription) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.PredefinedType = PredefinedType;
		this.Status = Status;
		this.LongDescription = LongDescription;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let Identification = tape[ptr++];
		let PredefinedType = tape[ptr++];
		let Status = tape[ptr++];
		let LongDescription = tape[ptr++];
		return new IfcActionRequest(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, PredefinedType, Status, LongDescription);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.Identification);
		args.push(this.PredefinedType);
		args.push(this.Status);
		args.push(this.LongDescription);
		return args;
	}
};
var IfcActor = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, TheActor) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.TheActor = TheActor;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let TheActor = tape[ptr++];
		return new IfcActor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, TheActor);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.TheActor);
		return args;
	}
};
var IfcActorRole = class {
	constructor(expressID, type, Role, UserDefinedRole, Description) {
		this.expressID = expressID;
		this.type = type;
		this.Role = Role;
		this.UserDefinedRole = UserDefinedRole;
		this.Description = Description;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Role = tape[ptr++];
		let UserDefinedRole = tape[ptr++];
		let Description = tape[ptr++];
		return new IfcActorRole(expressID, type, Role, UserDefinedRole, Description);
	}
	ToTape() {
		let args = [];
		args.push(this.Role);
		args.push(this.UserDefinedRole);
		args.push(this.Description);
		return args;
	}
};
var IfcActuator = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcActuator(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcActuatorType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcActuatorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcAddress = class {
	constructor(expressID, type, Purpose, Description, UserDefinedPurpose) {
		this.expressID = expressID;
		this.type = type;
		this.Purpose = Purpose;
		this.Description = Description;
		this.UserDefinedPurpose = UserDefinedPurpose;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Purpose = tape[ptr++];
		let Description = tape[ptr++];
		let UserDefinedPurpose = tape[ptr++];
		return new IfcAddress(expressID, type, Purpose, Description, UserDefinedPurpose);
	}
	ToTape() {
		let args = [];
		args.push(this.Purpose);
		args.push(this.Description);
		args.push(this.UserDefinedPurpose);
		return args;
	}
};
var IfcAdvancedBrep = class {
	constructor(expressID, type, Outer) {
		this.expressID = expressID;
		this.type = type;
		this.Outer = Outer;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Outer = tape[ptr++];
		return new IfcAdvancedBrep(expressID, type, Outer);
	}
	ToTape() {
		let args = [];
		args.push(this.Outer);
		return args;
	}
};
var IfcAdvancedBrepWithVoids = class {
	constructor(expressID, type, Outer, Voids) {
		this.expressID = expressID;
		this.type = type;
		this.Outer = Outer;
		this.Voids = Voids;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Outer = tape[ptr++];
		let Voids = tape[ptr++];
		return new IfcAdvancedBrepWithVoids(expressID, type, Outer, Voids);
	}
	ToTape() {
		let args = [];
		args.push(this.Outer);
		args.push(this.Voids);
		return args;
	}
};
var IfcAdvancedFace = class {
	constructor(expressID, type, Bounds, FaceSurface, SameSense) {
		this.expressID = expressID;
		this.type = type;
		this.Bounds = Bounds;
		this.FaceSurface = FaceSurface;
		this.SameSense = SameSense;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Bounds = tape[ptr++];
		let FaceSurface = tape[ptr++];
		let SameSense = tape[ptr++];
		return new IfcAdvancedFace(expressID, type, Bounds, FaceSurface, SameSense);
	}
	ToTape() {
		let args = [];
		args.push(this.Bounds);
		args.push(this.FaceSurface);
		args.push(this.SameSense);
		return args;
	}
};
var IfcAirTerminal = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcAirTerminal(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcAirTerminalBox = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcAirTerminalBox(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcAirTerminalBoxType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcAirTerminalBoxType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcAirTerminalType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcAirTerminalType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcAirToAirHeatRecovery = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcAirToAirHeatRecovery(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcAirToAirHeatRecoveryType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcAirToAirHeatRecoveryType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcAlarm = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcAlarm(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcAlarmType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcAlarmType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcAlignment = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Axis, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Axis = Axis;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Axis = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcAlignment(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Axis, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Axis);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcAlignment2DHorizontal = class {
	constructor(expressID, type, StartDistAlong, Segments) {
		this.expressID = expressID;
		this.type = type;
		this.StartDistAlong = StartDistAlong;
		this.Segments = Segments;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let StartDistAlong = tape[ptr++];
		let Segments = tape[ptr++];
		return new IfcAlignment2DHorizontal(expressID, type, StartDistAlong, Segments);
	}
	ToTape() {
		let args = [];
		args.push(this.StartDistAlong);
		args.push(this.Segments);
		return args;
	}
};
var IfcAlignment2DHorizontalSegment = class {
	constructor(expressID, type, TangentialContinuity, StartTag, EndTag, CurveGeometry) {
		this.expressID = expressID;
		this.type = type;
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
		this.CurveGeometry = CurveGeometry;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let TangentialContinuity = tape[ptr++];
		let StartTag = tape[ptr++];
		let EndTag = tape[ptr++];
		let CurveGeometry = tape[ptr++];
		return new IfcAlignment2DHorizontalSegment(expressID, type, TangentialContinuity, StartTag, EndTag, CurveGeometry);
	}
	ToTape() {
		let args = [];
		args.push(this.TangentialContinuity);
		args.push(this.StartTag);
		args.push(this.EndTag);
		args.push(this.CurveGeometry);
		return args;
	}
};
var IfcAlignment2DSegment = class {
	constructor(expressID, type, TangentialContinuity, StartTag, EndTag) {
		this.expressID = expressID;
		this.type = type;
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let TangentialContinuity = tape[ptr++];
		let StartTag = tape[ptr++];
		let EndTag = tape[ptr++];
		return new IfcAlignment2DSegment(expressID, type, TangentialContinuity, StartTag, EndTag);
	}
	ToTape() {
		let args = [];
		args.push(this.TangentialContinuity);
		args.push(this.StartTag);
		args.push(this.EndTag);
		return args;
	}
};
var IfcAlignment2DVerSegCircularArc = class {
	constructor(expressID, type, TangentialContinuity, StartTag, EndTag, StartDistAlong, HorizontalLength, StartHeight, StartGradient, Radius, IsConvex) {
		this.expressID = expressID;
		this.type = type;
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
		this.StartDistAlong = StartDistAlong;
		this.HorizontalLength = HorizontalLength;
		this.StartHeight = StartHeight;
		this.StartGradient = StartGradient;
		this.Radius = Radius;
		this.IsConvex = IsConvex;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let TangentialContinuity = tape[ptr++];
		let StartTag = tape[ptr++];
		let EndTag = tape[ptr++];
		let StartDistAlong = tape[ptr++];
		let HorizontalLength = tape[ptr++];
		let StartHeight = tape[ptr++];
		let StartGradient = tape[ptr++];
		let Radius = tape[ptr++];
		let IsConvex = tape[ptr++];
		return new IfcAlignment2DVerSegCircularArc(expressID, type, TangentialContinuity, StartTag, EndTag, StartDistAlong, HorizontalLength, StartHeight, StartGradient, Radius, IsConvex);
	}
	ToTape() {
		let args = [];
		args.push(this.TangentialContinuity);
		args.push(this.StartTag);
		args.push(this.EndTag);
		args.push(this.StartDistAlong);
		args.push(this.HorizontalLength);
		args.push(this.StartHeight);
		args.push(this.StartGradient);
		args.push(this.Radius);
		args.push(this.IsConvex);
		return args;
	}
};
var IfcAlignment2DVerSegLine = class {
	constructor(expressID, type, TangentialContinuity, StartTag, EndTag, StartDistAlong, HorizontalLength, StartHeight, StartGradient) {
		this.expressID = expressID;
		this.type = type;
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
		this.StartDistAlong = StartDistAlong;
		this.HorizontalLength = HorizontalLength;
		this.StartHeight = StartHeight;
		this.StartGradient = StartGradient;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let TangentialContinuity = tape[ptr++];
		let StartTag = tape[ptr++];
		let EndTag = tape[ptr++];
		let StartDistAlong = tape[ptr++];
		let HorizontalLength = tape[ptr++];
		let StartHeight = tape[ptr++];
		let StartGradient = tape[ptr++];
		return new IfcAlignment2DVerSegLine(expressID, type, TangentialContinuity, StartTag, EndTag, StartDistAlong, HorizontalLength, StartHeight, StartGradient);
	}
	ToTape() {
		let args = [];
		args.push(this.TangentialContinuity);
		args.push(this.StartTag);
		args.push(this.EndTag);
		args.push(this.StartDistAlong);
		args.push(this.HorizontalLength);
		args.push(this.StartHeight);
		args.push(this.StartGradient);
		return args;
	}
};
var IfcAlignment2DVerSegParabolicArc = class {
	constructor(expressID, type, TangentialContinuity, StartTag, EndTag, StartDistAlong, HorizontalLength, StartHeight, StartGradient, ParabolaConstant, IsConvex) {
		this.expressID = expressID;
		this.type = type;
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
		this.StartDistAlong = StartDistAlong;
		this.HorizontalLength = HorizontalLength;
		this.StartHeight = StartHeight;
		this.StartGradient = StartGradient;
		this.ParabolaConstant = ParabolaConstant;
		this.IsConvex = IsConvex;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let TangentialContinuity = tape[ptr++];
		let StartTag = tape[ptr++];
		let EndTag = tape[ptr++];
		let StartDistAlong = tape[ptr++];
		let HorizontalLength = tape[ptr++];
		let StartHeight = tape[ptr++];
		let StartGradient = tape[ptr++];
		let ParabolaConstant = tape[ptr++];
		let IsConvex = tape[ptr++];
		return new IfcAlignment2DVerSegParabolicArc(expressID, type, TangentialContinuity, StartTag, EndTag, StartDistAlong, HorizontalLength, StartHeight, StartGradient, ParabolaConstant, IsConvex);
	}
	ToTape() {
		let args = [];
		args.push(this.TangentialContinuity);
		args.push(this.StartTag);
		args.push(this.EndTag);
		args.push(this.StartDistAlong);
		args.push(this.HorizontalLength);
		args.push(this.StartHeight);
		args.push(this.StartGradient);
		args.push(this.ParabolaConstant);
		args.push(this.IsConvex);
		return args;
	}
};
var IfcAlignment2DVertical = class {
	constructor(expressID, type, Segments) {
		this.expressID = expressID;
		this.type = type;
		this.Segments = Segments;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Segments = tape[ptr++];
		return new IfcAlignment2DVertical(expressID, type, Segments);
	}
	ToTape() {
		let args = [];
		args.push(this.Segments);
		return args;
	}
};
var IfcAlignment2DVerticalSegment = class {
	constructor(expressID, type, TangentialContinuity, StartTag, EndTag, StartDistAlong, HorizontalLength, StartHeight, StartGradient) {
		this.expressID = expressID;
		this.type = type;
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
		this.StartDistAlong = StartDistAlong;
		this.HorizontalLength = HorizontalLength;
		this.StartHeight = StartHeight;
		this.StartGradient = StartGradient;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let TangentialContinuity = tape[ptr++];
		let StartTag = tape[ptr++];
		let EndTag = tape[ptr++];
		let StartDistAlong = tape[ptr++];
		let HorizontalLength = tape[ptr++];
		let StartHeight = tape[ptr++];
		let StartGradient = tape[ptr++];
		return new IfcAlignment2DVerticalSegment(expressID, type, TangentialContinuity, StartTag, EndTag, StartDistAlong, HorizontalLength, StartHeight, StartGradient);
	}
	ToTape() {
		let args = [];
		args.push(this.TangentialContinuity);
		args.push(this.StartTag);
		args.push(this.EndTag);
		args.push(this.StartDistAlong);
		args.push(this.HorizontalLength);
		args.push(this.StartHeight);
		args.push(this.StartGradient);
		return args;
	}
};
var IfcAlignmentCurve = class {
	constructor(expressID, type, Horizontal, Vertical, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.Horizontal = Horizontal;
		this.Vertical = Vertical;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Horizontal = tape[ptr++];
		let Vertical = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcAlignmentCurve(expressID, type, Horizontal, Vertical, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.Horizontal);
		args.push(this.Vertical);
		args.push(this.Tag);
		return args;
	}
};
var IfcAnnotation = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		return new IfcAnnotation(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		return args;
	}
};
var IfcAnnotationFillArea = class {
	constructor(expressID, type, OuterBoundary, InnerBoundaries) {
		this.expressID = expressID;
		this.type = type;
		this.OuterBoundary = OuterBoundary;
		this.InnerBoundaries = InnerBoundaries;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let OuterBoundary = tape[ptr++];
		let InnerBoundaries = tape[ptr++];
		return new IfcAnnotationFillArea(expressID, type, OuterBoundary, InnerBoundaries);
	}
	ToTape() {
		let args = [];
		args.push(this.OuterBoundary);
		args.push(this.InnerBoundaries);
		return args;
	}
};
var IfcApplication = class {
	constructor(expressID, type, ApplicationDeveloper, Version, ApplicationFullName, ApplicationIdentifier) {
		this.expressID = expressID;
		this.type = type;
		this.ApplicationDeveloper = ApplicationDeveloper;
		this.Version = Version;
		this.ApplicationFullName = ApplicationFullName;
		this.ApplicationIdentifier = ApplicationIdentifier;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ApplicationDeveloper = tape[ptr++];
		let Version = tape[ptr++];
		let ApplicationFullName = tape[ptr++];
		let ApplicationIdentifier = tape[ptr++];
		return new IfcApplication(expressID, type, ApplicationDeveloper, Version, ApplicationFullName, ApplicationIdentifier);
	}
	ToTape() {
		let args = [];
		args.push(this.ApplicationDeveloper);
		args.push(this.Version);
		args.push(this.ApplicationFullName);
		args.push(this.ApplicationIdentifier);
		return args;
	}
};
var IfcAppliedValue = class {
	constructor(expressID, type, Name, Description, AppliedValue, UnitBasis, ApplicableDate, FixedUntilDate, Category, Condition, ArithmeticOperator, Components) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.AppliedValue = AppliedValue;
		this.UnitBasis = UnitBasis;
		this.ApplicableDate = ApplicableDate;
		this.FixedUntilDate = FixedUntilDate;
		this.Category = Category;
		this.Condition = Condition;
		this.ArithmeticOperator = ArithmeticOperator;
		this.Components = Components;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let AppliedValue = tape[ptr++];
		let UnitBasis = tape[ptr++];
		let ApplicableDate = tape[ptr++];
		let FixedUntilDate = tape[ptr++];
		let Category = tape[ptr++];
		let Condition = tape[ptr++];
		let ArithmeticOperator = tape[ptr++];
		let Components = tape[ptr++];
		return new IfcAppliedValue(expressID, type, Name, Description, AppliedValue, UnitBasis, ApplicableDate, FixedUntilDate, Category, Condition, ArithmeticOperator, Components);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.AppliedValue);
		args.push(this.UnitBasis);
		args.push(this.ApplicableDate);
		args.push(this.FixedUntilDate);
		args.push(this.Category);
		args.push(this.Condition);
		args.push(this.ArithmeticOperator);
		args.push(this.Components);
		return args;
	}
};
var IfcApproval = class {
	constructor(expressID, type, Identifier, Name, Description, TimeOfApproval, Status, Level, Qualifier, RequestingApproval, GivingApproval) {
		this.expressID = expressID;
		this.type = type;
		this.Identifier = Identifier;
		this.Name = Name;
		this.Description = Description;
		this.TimeOfApproval = TimeOfApproval;
		this.Status = Status;
		this.Level = Level;
		this.Qualifier = Qualifier;
		this.RequestingApproval = RequestingApproval;
		this.GivingApproval = GivingApproval;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Identifier = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let TimeOfApproval = tape[ptr++];
		let Status = tape[ptr++];
		let Level = tape[ptr++];
		let Qualifier = tape[ptr++];
		let RequestingApproval = tape[ptr++];
		let GivingApproval = tape[ptr++];
		return new IfcApproval(expressID, type, Identifier, Name, Description, TimeOfApproval, Status, Level, Qualifier, RequestingApproval, GivingApproval);
	}
	ToTape() {
		let args = [];
		args.push(this.Identifier);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.TimeOfApproval);
		args.push(this.Status);
		args.push(this.Level);
		args.push(this.Qualifier);
		args.push(this.RequestingApproval);
		args.push(this.GivingApproval);
		return args;
	}
};
var IfcApprovalRelationship = class {
	constructor(expressID, type, Name, Description, RelatingApproval, RelatedApprovals) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.RelatingApproval = RelatingApproval;
		this.RelatedApprovals = RelatedApprovals;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let RelatingApproval = tape[ptr++];
		let RelatedApprovals = tape[ptr++];
		return new IfcApprovalRelationship(expressID, type, Name, Description, RelatingApproval, RelatedApprovals);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.RelatingApproval);
		args.push(this.RelatedApprovals);
		return args;
	}
};
var IfcArbitraryClosedProfileDef = class {
	constructor(expressID, type, ProfileType, ProfileName, OuterCurve) {
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.OuterCurve = OuterCurve;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ProfileType = tape[ptr++];
		let ProfileName = tape[ptr++];
		let OuterCurve = tape[ptr++];
		return new IfcArbitraryClosedProfileDef(expressID, type, ProfileType, ProfileName, OuterCurve);
	}
	ToTape() {
		let args = [];
		args.push(this.ProfileType);
		args.push(this.ProfileName);
		args.push(this.OuterCurve);
		return args;
	}
};
var IfcArbitraryOpenProfileDef = class {
	constructor(expressID, type, ProfileType, ProfileName, Curve) {
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Curve = Curve;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ProfileType = tape[ptr++];
		let ProfileName = tape[ptr++];
		let Curve = tape[ptr++];
		return new IfcArbitraryOpenProfileDef(expressID, type, ProfileType, ProfileName, Curve);
	}
	ToTape() {
		let args = [];
		args.push(this.ProfileType);
		args.push(this.ProfileName);
		args.push(this.Curve);
		return args;
	}
};
var IfcArbitraryProfileDefWithVoids = class {
	constructor(expressID, type, ProfileType, ProfileName, OuterCurve, InnerCurves) {
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.OuterCurve = OuterCurve;
		this.InnerCurves = InnerCurves;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ProfileType = tape[ptr++];
		let ProfileName = tape[ptr++];
		let OuterCurve = tape[ptr++];
		let InnerCurves = tape[ptr++];
		return new IfcArbitraryProfileDefWithVoids(expressID, type, ProfileType, ProfileName, OuterCurve, InnerCurves);
	}
	ToTape() {
		let args = [];
		args.push(this.ProfileType);
		args.push(this.ProfileName);
		args.push(this.OuterCurve);
		args.push(this.InnerCurves);
		return args;
	}
};
var IfcAsset = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, OriginalValue, CurrentValue, TotalReplacementCost, Owner, User, ResponsiblePerson, IncorporationDate, DepreciatedValue) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.OriginalValue = OriginalValue;
		this.CurrentValue = CurrentValue;
		this.TotalReplacementCost = TotalReplacementCost;
		this.Owner = Owner;
		this.User = User;
		this.ResponsiblePerson = ResponsiblePerson;
		this.IncorporationDate = IncorporationDate;
		this.DepreciatedValue = DepreciatedValue;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let Identification = tape[ptr++];
		let OriginalValue = tape[ptr++];
		let CurrentValue = tape[ptr++];
		let TotalReplacementCost = tape[ptr++];
		let Owner = tape[ptr++];
		let User = tape[ptr++];
		let ResponsiblePerson = tape[ptr++];
		let IncorporationDate = tape[ptr++];
		let DepreciatedValue = tape[ptr++];
		return new IfcAsset(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, OriginalValue, CurrentValue, TotalReplacementCost, Owner, User, ResponsiblePerson, IncorporationDate, DepreciatedValue);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.Identification);
		args.push(this.OriginalValue);
		args.push(this.CurrentValue);
		args.push(this.TotalReplacementCost);
		args.push(this.Owner);
		args.push(this.User);
		args.push(this.ResponsiblePerson);
		args.push(this.IncorporationDate);
		args.push(this.DepreciatedValue);
		return args;
	}
};
var IfcAsymmetricIShapeProfileDef = class {
	constructor(expressID, type, ProfileType, ProfileName, Position, BottomFlangeWidth, OverallDepth, WebThickness, BottomFlangeThickness, BottomFlangeFilletRadius, TopFlangeWidth, TopFlangeThickness, TopFlangeFilletRadius, BottomFlangeEdgeRadius, BottomFlangeSlope, TopFlangeEdgeRadius, TopFlangeSlope) {
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.BottomFlangeWidth = BottomFlangeWidth;
		this.OverallDepth = OverallDepth;
		this.WebThickness = WebThickness;
		this.BottomFlangeThickness = BottomFlangeThickness;
		this.BottomFlangeFilletRadius = BottomFlangeFilletRadius;
		this.TopFlangeWidth = TopFlangeWidth;
		this.TopFlangeThickness = TopFlangeThickness;
		this.TopFlangeFilletRadius = TopFlangeFilletRadius;
		this.BottomFlangeEdgeRadius = BottomFlangeEdgeRadius;
		this.BottomFlangeSlope = BottomFlangeSlope;
		this.TopFlangeEdgeRadius = TopFlangeEdgeRadius;
		this.TopFlangeSlope = TopFlangeSlope;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ProfileType = tape[ptr++];
		let ProfileName = tape[ptr++];
		let Position = tape[ptr++];
		let BottomFlangeWidth = tape[ptr++];
		let OverallDepth = tape[ptr++];
		let WebThickness = tape[ptr++];
		let BottomFlangeThickness = tape[ptr++];
		let BottomFlangeFilletRadius = tape[ptr++];
		let TopFlangeWidth = tape[ptr++];
		let TopFlangeThickness = tape[ptr++];
		let TopFlangeFilletRadius = tape[ptr++];
		let BottomFlangeEdgeRadius = tape[ptr++];
		let BottomFlangeSlope = tape[ptr++];
		let TopFlangeEdgeRadius = tape[ptr++];
		let TopFlangeSlope = tape[ptr++];
		return new IfcAsymmetricIShapeProfileDef(expressID, type, ProfileType, ProfileName, Position, BottomFlangeWidth, OverallDepth, WebThickness, BottomFlangeThickness, BottomFlangeFilletRadius, TopFlangeWidth, TopFlangeThickness, TopFlangeFilletRadius, BottomFlangeEdgeRadius, BottomFlangeSlope, TopFlangeEdgeRadius, TopFlangeSlope);
	}
	ToTape() {
		let args = [];
		args.push(this.ProfileType);
		args.push(this.ProfileName);
		args.push(this.Position);
		args.push(this.BottomFlangeWidth);
		args.push(this.OverallDepth);
		args.push(this.WebThickness);
		args.push(this.BottomFlangeThickness);
		args.push(this.BottomFlangeFilletRadius);
		args.push(this.TopFlangeWidth);
		args.push(this.TopFlangeThickness);
		args.push(this.TopFlangeFilletRadius);
		args.push(this.BottomFlangeEdgeRadius);
		args.push(this.BottomFlangeSlope);
		args.push(this.TopFlangeEdgeRadius);
		args.push(this.TopFlangeSlope);
		return args;
	}
};
var IfcAudioVisualAppliance = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcAudioVisualAppliance(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcAudioVisualApplianceType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcAudioVisualApplianceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcAxis1Placement = class {
	constructor(expressID, type, Location, Axis) {
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Axis = Axis;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Location = tape[ptr++];
		let Axis = tape[ptr++];
		return new IfcAxis1Placement(expressID, type, Location, Axis);
	}
	ToTape() {
		let args = [];
		args.push(this.Location);
		args.push(this.Axis);
		return args;
	}
};
var IfcAxis2Placement2D = class {
	constructor(expressID, type, Location, RefDirection) {
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.RefDirection = RefDirection;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Location = tape[ptr++];
		let RefDirection = tape[ptr++];
		return new IfcAxis2Placement2D(expressID, type, Location, RefDirection);
	}
	ToTape() {
		let args = [];
		args.push(this.Location);
		args.push(this.RefDirection);
		return args;
	}
};
var IfcAxis2Placement3D = class {
	constructor(expressID, type, Location, Axis, RefDirection) {
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Axis = Axis;
		this.RefDirection = RefDirection;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Location = tape[ptr++];
		let Axis = tape[ptr++];
		let RefDirection = tape[ptr++];
		return new IfcAxis2Placement3D(expressID, type, Location, Axis, RefDirection);
	}
	ToTape() {
		let args = [];
		args.push(this.Location);
		args.push(this.Axis);
		args.push(this.RefDirection);
		return args;
	}
};
var IfcBSplineCurve = class {
	constructor(expressID, type, Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect) {
		this.expressID = expressID;
		this.type = type;
		this.Degree = Degree;
		this.ControlPointsList = ControlPointsList;
		this.CurveForm = CurveForm;
		this.ClosedCurve = ClosedCurve;
		this.SelfIntersect = SelfIntersect;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Degree = tape[ptr++];
		let ControlPointsList = tape[ptr++];
		let CurveForm = tape[ptr++];
		let ClosedCurve = tape[ptr++];
		let SelfIntersect = tape[ptr++];
		return new IfcBSplineCurve(expressID, type, Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect);
	}
	ToTape() {
		let args = [];
		args.push(this.Degree);
		args.push(this.ControlPointsList);
		args.push(this.CurveForm);
		args.push(this.ClosedCurve);
		args.push(this.SelfIntersect);
		return args;
	}
};
var IfcBSplineCurveWithKnots = class {
	constructor(expressID, type, Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect, KnotMultiplicities, Knots, KnotSpec) {
		this.expressID = expressID;
		this.type = type;
		this.Degree = Degree;
		this.ControlPointsList = ControlPointsList;
		this.CurveForm = CurveForm;
		this.ClosedCurve = ClosedCurve;
		this.SelfIntersect = SelfIntersect;
		this.KnotMultiplicities = KnotMultiplicities;
		this.Knots = Knots;
		this.KnotSpec = KnotSpec;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Degree = tape[ptr++];
		let ControlPointsList = tape[ptr++];
		let CurveForm = tape[ptr++];
		let ClosedCurve = tape[ptr++];
		let SelfIntersect = tape[ptr++];
		let KnotMultiplicities = tape[ptr++];
		let Knots = tape[ptr++];
		let KnotSpec = tape[ptr++];
		return new IfcBSplineCurveWithKnots(expressID, type, Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect, KnotMultiplicities, Knots, KnotSpec);
	}
	ToTape() {
		let args = [];
		args.push(this.Degree);
		args.push(this.ControlPointsList);
		args.push(this.CurveForm);
		args.push(this.ClosedCurve);
		args.push(this.SelfIntersect);
		args.push(this.KnotMultiplicities);
		args.push(this.Knots);
		args.push(this.KnotSpec);
		return args;
	}
};
var IfcBSplineSurface = class {
	constructor(expressID, type, UDegree, VDegree, ControlPointsList, SurfaceForm, UClosed, VClosed, SelfIntersect) {
		this.expressID = expressID;
		this.type = type;
		this.UDegree = UDegree;
		this.VDegree = VDegree;
		this.ControlPointsList = ControlPointsList;
		this.SurfaceForm = SurfaceForm;
		this.UClosed = UClosed;
		this.VClosed = VClosed;
		this.SelfIntersect = SelfIntersect;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let UDegree = tape[ptr++];
		let VDegree = tape[ptr++];
		let ControlPointsList = tape[ptr++];
		let SurfaceForm = tape[ptr++];
		let UClosed = tape[ptr++];
		let VClosed = tape[ptr++];
		let SelfIntersect = tape[ptr++];
		return new IfcBSplineSurface(expressID, type, UDegree, VDegree, ControlPointsList, SurfaceForm, UClosed, VClosed, SelfIntersect);
	}
	ToTape() {
		let args = [];
		args.push(this.UDegree);
		args.push(this.VDegree);
		args.push(this.ControlPointsList);
		args.push(this.SurfaceForm);
		args.push(this.UClosed);
		args.push(this.VClosed);
		args.push(this.SelfIntersect);
		return args;
	}
};
var IfcBSplineSurfaceWithKnots = class {
	constructor(expressID, type, UDegree, VDegree, ControlPointsList, SurfaceForm, UClosed, VClosed, SelfIntersect, UMultiplicities, VMultiplicities, UKnots, VKnots, KnotSpec) {
		this.expressID = expressID;
		this.type = type;
		this.UDegree = UDegree;
		this.VDegree = VDegree;
		this.ControlPointsList = ControlPointsList;
		this.SurfaceForm = SurfaceForm;
		this.UClosed = UClosed;
		this.VClosed = VClosed;
		this.SelfIntersect = SelfIntersect;
		this.UMultiplicities = UMultiplicities;
		this.VMultiplicities = VMultiplicities;
		this.UKnots = UKnots;
		this.VKnots = VKnots;
		this.KnotSpec = KnotSpec;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let UDegree = tape[ptr++];
		let VDegree = tape[ptr++];
		let ControlPointsList = tape[ptr++];
		let SurfaceForm = tape[ptr++];
		let UClosed = tape[ptr++];
		let VClosed = tape[ptr++];
		let SelfIntersect = tape[ptr++];
		let UMultiplicities = tape[ptr++];
		let VMultiplicities = tape[ptr++];
		let UKnots = tape[ptr++];
		let VKnots = tape[ptr++];
		let KnotSpec = tape[ptr++];
		return new IfcBSplineSurfaceWithKnots(expressID, type, UDegree, VDegree, ControlPointsList, SurfaceForm, UClosed, VClosed, SelfIntersect, UMultiplicities, VMultiplicities, UKnots, VKnots, KnotSpec);
	}
	ToTape() {
		let args = [];
		args.push(this.UDegree);
		args.push(this.VDegree);
		args.push(this.ControlPointsList);
		args.push(this.SurfaceForm);
		args.push(this.UClosed);
		args.push(this.VClosed);
		args.push(this.SelfIntersect);
		args.push(this.UMultiplicities);
		args.push(this.VMultiplicities);
		args.push(this.UKnots);
		args.push(this.VKnots);
		args.push(this.KnotSpec);
		return args;
	}
};
var IfcBeam = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcBeam(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcBeamStandardCase = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcBeamStandardCase(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcBeamType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcBeamType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcBearing = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcBearing(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcBearingType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcBearingType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcBlobTexture = class {
	constructor(expressID, type, RepeatS, RepeatT, Mode, TextureTransform, Parameter, RasterFormat, RasterCode) {
		this.expressID = expressID;
		this.type = type;
		this.RepeatS = RepeatS;
		this.RepeatT = RepeatT;
		this.Mode = Mode;
		this.TextureTransform = TextureTransform;
		this.Parameter = Parameter;
		this.RasterFormat = RasterFormat;
		this.RasterCode = RasterCode;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let RepeatS = tape[ptr++];
		let RepeatT = tape[ptr++];
		let Mode = tape[ptr++];
		let TextureTransform = tape[ptr++];
		let Parameter = tape[ptr++];
		let RasterFormat = tape[ptr++];
		let RasterCode = tape[ptr++];
		return new IfcBlobTexture(expressID, type, RepeatS, RepeatT, Mode, TextureTransform, Parameter, RasterFormat, RasterCode);
	}
	ToTape() {
		let args = [];
		args.push(this.RepeatS);
		args.push(this.RepeatT);
		args.push(this.Mode);
		args.push(this.TextureTransform);
		args.push(this.Parameter);
		args.push(this.RasterFormat);
		args.push(this.RasterCode);
		return args;
	}
};
var IfcBlock = class {
	constructor(expressID, type, Position, XLength, YLength, ZLength) {
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
		this.XLength = XLength;
		this.YLength = YLength;
		this.ZLength = ZLength;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Position = tape[ptr++];
		let XLength = tape[ptr++];
		let YLength = tape[ptr++];
		let ZLength = tape[ptr++];
		return new IfcBlock(expressID, type, Position, XLength, YLength, ZLength);
	}
	ToTape() {
		let args = [];
		args.push(this.Position);
		args.push(this.XLength);
		args.push(this.YLength);
		args.push(this.ZLength);
		return args;
	}
};
var IfcBoiler = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcBoiler(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcBoilerType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcBoilerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcBooleanClippingResult = class {
	constructor(expressID, type, Operator, FirstOperand, SecondOperand) {
		this.expressID = expressID;
		this.type = type;
		this.Operator = Operator;
		this.FirstOperand = FirstOperand;
		this.SecondOperand = SecondOperand;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Operator = tape[ptr++];
		let FirstOperand = tape[ptr++];
		let SecondOperand = tape[ptr++];
		return new IfcBooleanClippingResult(expressID, type, Operator, FirstOperand, SecondOperand);
	}
	ToTape() {
		let args = [];
		args.push(this.Operator);
		args.push(this.FirstOperand);
		args.push(this.SecondOperand);
		return args;
	}
};
var IfcBooleanResult = class {
	constructor(expressID, type, Operator, FirstOperand, SecondOperand) {
		this.expressID = expressID;
		this.type = type;
		this.Operator = Operator;
		this.FirstOperand = FirstOperand;
		this.SecondOperand = SecondOperand;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Operator = tape[ptr++];
		let FirstOperand = tape[ptr++];
		let SecondOperand = tape[ptr++];
		return new IfcBooleanResult(expressID, type, Operator, FirstOperand, SecondOperand);
	}
	ToTape() {
		let args = [];
		args.push(this.Operator);
		args.push(this.FirstOperand);
		args.push(this.SecondOperand);
		return args;
	}
};
var IfcBoundaryCondition = class {
	constructor(expressID, type, Name) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		return new IfcBoundaryCondition(expressID, type, Name);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		return args;
	}
};
var IfcBoundaryCurve = class {
	constructor(expressID, type, Segments, SelfIntersect) {
		this.expressID = expressID;
		this.type = type;
		this.Segments = Segments;
		this.SelfIntersect = SelfIntersect;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Segments = tape[ptr++];
		let SelfIntersect = tape[ptr++];
		return new IfcBoundaryCurve(expressID, type, Segments, SelfIntersect);
	}
	ToTape() {
		let args = [];
		args.push(this.Segments);
		args.push(this.SelfIntersect);
		return args;
	}
};
var IfcBoundaryEdgeCondition = class {
	constructor(expressID, type, Name, TranslationalStiffnessByLengthX, TranslationalStiffnessByLengthY, TranslationalStiffnessByLengthZ, RotationalStiffnessByLengthX, RotationalStiffnessByLengthY, RotationalStiffnessByLengthZ) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.TranslationalStiffnessByLengthX = TranslationalStiffnessByLengthX;
		this.TranslationalStiffnessByLengthY = TranslationalStiffnessByLengthY;
		this.TranslationalStiffnessByLengthZ = TranslationalStiffnessByLengthZ;
		this.RotationalStiffnessByLengthX = RotationalStiffnessByLengthX;
		this.RotationalStiffnessByLengthY = RotationalStiffnessByLengthY;
		this.RotationalStiffnessByLengthZ = RotationalStiffnessByLengthZ;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let TranslationalStiffnessByLengthX = tape[ptr++];
		let TranslationalStiffnessByLengthY = tape[ptr++];
		let TranslationalStiffnessByLengthZ = tape[ptr++];
		let RotationalStiffnessByLengthX = tape[ptr++];
		let RotationalStiffnessByLengthY = tape[ptr++];
		let RotationalStiffnessByLengthZ = tape[ptr++];
		return new IfcBoundaryEdgeCondition(expressID, type, Name, TranslationalStiffnessByLengthX, TranslationalStiffnessByLengthY, TranslationalStiffnessByLengthZ, RotationalStiffnessByLengthX, RotationalStiffnessByLengthY, RotationalStiffnessByLengthZ);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.TranslationalStiffnessByLengthX);
		args.push(this.TranslationalStiffnessByLengthY);
		args.push(this.TranslationalStiffnessByLengthZ);
		args.push(this.RotationalStiffnessByLengthX);
		args.push(this.RotationalStiffnessByLengthY);
		args.push(this.RotationalStiffnessByLengthZ);
		return args;
	}
};
var IfcBoundaryFaceCondition = class {
	constructor(expressID, type, Name, TranslationalStiffnessByAreaX, TranslationalStiffnessByAreaY, TranslationalStiffnessByAreaZ) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.TranslationalStiffnessByAreaX = TranslationalStiffnessByAreaX;
		this.TranslationalStiffnessByAreaY = TranslationalStiffnessByAreaY;
		this.TranslationalStiffnessByAreaZ = TranslationalStiffnessByAreaZ;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let TranslationalStiffnessByAreaX = tape[ptr++];
		let TranslationalStiffnessByAreaY = tape[ptr++];
		let TranslationalStiffnessByAreaZ = tape[ptr++];
		return new IfcBoundaryFaceCondition(expressID, type, Name, TranslationalStiffnessByAreaX, TranslationalStiffnessByAreaY, TranslationalStiffnessByAreaZ);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.TranslationalStiffnessByAreaX);
		args.push(this.TranslationalStiffnessByAreaY);
		args.push(this.TranslationalStiffnessByAreaZ);
		return args;
	}
};
var IfcBoundaryNodeCondition = class {
	constructor(expressID, type, Name, TranslationalStiffnessX, TranslationalStiffnessY, TranslationalStiffnessZ, RotationalStiffnessX, RotationalStiffnessY, RotationalStiffnessZ) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.TranslationalStiffnessX = TranslationalStiffnessX;
		this.TranslationalStiffnessY = TranslationalStiffnessY;
		this.TranslationalStiffnessZ = TranslationalStiffnessZ;
		this.RotationalStiffnessX = RotationalStiffnessX;
		this.RotationalStiffnessY = RotationalStiffnessY;
		this.RotationalStiffnessZ = RotationalStiffnessZ;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let TranslationalStiffnessX = tape[ptr++];
		let TranslationalStiffnessY = tape[ptr++];
		let TranslationalStiffnessZ = tape[ptr++];
		let RotationalStiffnessX = tape[ptr++];
		let RotationalStiffnessY = tape[ptr++];
		let RotationalStiffnessZ = tape[ptr++];
		return new IfcBoundaryNodeCondition(expressID, type, Name, TranslationalStiffnessX, TranslationalStiffnessY, TranslationalStiffnessZ, RotationalStiffnessX, RotationalStiffnessY, RotationalStiffnessZ);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.TranslationalStiffnessX);
		args.push(this.TranslationalStiffnessY);
		args.push(this.TranslationalStiffnessZ);
		args.push(this.RotationalStiffnessX);
		args.push(this.RotationalStiffnessY);
		args.push(this.RotationalStiffnessZ);
		return args;
	}
};
var IfcBoundaryNodeConditionWarping = class {
	constructor(expressID, type, Name, TranslationalStiffnessX, TranslationalStiffnessY, TranslationalStiffnessZ, RotationalStiffnessX, RotationalStiffnessY, RotationalStiffnessZ, WarpingStiffness) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.TranslationalStiffnessX = TranslationalStiffnessX;
		this.TranslationalStiffnessY = TranslationalStiffnessY;
		this.TranslationalStiffnessZ = TranslationalStiffnessZ;
		this.RotationalStiffnessX = RotationalStiffnessX;
		this.RotationalStiffnessY = RotationalStiffnessY;
		this.RotationalStiffnessZ = RotationalStiffnessZ;
		this.WarpingStiffness = WarpingStiffness;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let TranslationalStiffnessX = tape[ptr++];
		let TranslationalStiffnessY = tape[ptr++];
		let TranslationalStiffnessZ = tape[ptr++];
		let RotationalStiffnessX = tape[ptr++];
		let RotationalStiffnessY = tape[ptr++];
		let RotationalStiffnessZ = tape[ptr++];
		let WarpingStiffness = tape[ptr++];
		return new IfcBoundaryNodeConditionWarping(expressID, type, Name, TranslationalStiffnessX, TranslationalStiffnessY, TranslationalStiffnessZ, RotationalStiffnessX, RotationalStiffnessY, RotationalStiffnessZ, WarpingStiffness);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.TranslationalStiffnessX);
		args.push(this.TranslationalStiffnessY);
		args.push(this.TranslationalStiffnessZ);
		args.push(this.RotationalStiffnessX);
		args.push(this.RotationalStiffnessY);
		args.push(this.RotationalStiffnessZ);
		args.push(this.WarpingStiffness);
		return args;
	}
};
var IfcBoundedCurve = class {
	constructor(expressID, type) {
		this.expressID = expressID;
		this.type = type;
	}
	static FromTape(expressID, type, tape) {
		return new IfcBoundedCurve(expressID, type);
	}
	ToTape() {
		let args = [];
		return args;
	}
};
var IfcBoundedSurface = class {
	constructor(expressID, type) {
		this.expressID = expressID;
		this.type = type;
	}
	static FromTape(expressID, type, tape) {
		return new IfcBoundedSurface(expressID, type);
	}
	ToTape() {
		let args = [];
		return args;
	}
};
var IfcBoundingBox = class {
	constructor(expressID, type, Corner, XDim, YDim, ZDim) {
		this.expressID = expressID;
		this.type = type;
		this.Corner = Corner;
		this.XDim = XDim;
		this.YDim = YDim;
		this.ZDim = ZDim;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Corner = tape[ptr++];
		let XDim = tape[ptr++];
		let YDim = tape[ptr++];
		let ZDim = tape[ptr++];
		return new IfcBoundingBox(expressID, type, Corner, XDim, YDim, ZDim);
	}
	ToTape() {
		let args = [];
		args.push(this.Corner);
		args.push(this.XDim);
		args.push(this.YDim);
		args.push(this.ZDim);
		return args;
	}
};
var IfcBoxedHalfSpace = class {
	constructor(expressID, type, BaseSurface, AgreementFlag, Enclosure) {
		this.expressID = expressID;
		this.type = type;
		this.BaseSurface = BaseSurface;
		this.AgreementFlag = AgreementFlag;
		this.Enclosure = Enclosure;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let BaseSurface = tape[ptr++];
		let AgreementFlag = tape[ptr++];
		let Enclosure = tape[ptr++];
		return new IfcBoxedHalfSpace(expressID, type, BaseSurface, AgreementFlag, Enclosure);
	}
	ToTape() {
		let args = [];
		args.push(this.BaseSurface);
		args.push(this.AgreementFlag);
		args.push(this.Enclosure);
		return args;
	}
};
var IfcBridge = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let LongName = tape[ptr++];
		let CompositionType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcBridge(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.LongName);
		args.push(this.CompositionType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcBridgePart = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let LongName = tape[ptr++];
		let CompositionType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcBridgePart(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.LongName);
		args.push(this.CompositionType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcBuilding = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType, ElevationOfRefHeight, ElevationOfTerrain, BuildingAddress) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.ElevationOfRefHeight = ElevationOfRefHeight;
		this.ElevationOfTerrain = ElevationOfTerrain;
		this.BuildingAddress = BuildingAddress;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let LongName = tape[ptr++];
		let CompositionType = tape[ptr++];
		let ElevationOfRefHeight = tape[ptr++];
		let ElevationOfTerrain = tape[ptr++];
		let BuildingAddress = tape[ptr++];
		return new IfcBuilding(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType, ElevationOfRefHeight, ElevationOfTerrain, BuildingAddress);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.LongName);
		args.push(this.CompositionType);
		args.push(this.ElevationOfRefHeight);
		args.push(this.ElevationOfTerrain);
		args.push(this.BuildingAddress);
		return args;
	}
};
var IfcBuildingElement = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcBuildingElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcBuildingElementPart = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcBuildingElementPart(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcBuildingElementPartType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcBuildingElementPartType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcBuildingElementProxy = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcBuildingElementProxy(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcBuildingElementProxyType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcBuildingElementProxyType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcBuildingElementType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcBuildingElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcBuildingStorey = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType, Elevation) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.Elevation = Elevation;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let LongName = tape[ptr++];
		let CompositionType = tape[ptr++];
		let Elevation = tape[ptr++];
		return new IfcBuildingStorey(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType, Elevation);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.LongName);
		args.push(this.CompositionType);
		args.push(this.Elevation);
		return args;
	}
};
var IfcBuildingSystem = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, PredefinedType, LongName) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.PredefinedType = PredefinedType;
		this.LongName = LongName;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		let LongName = tape[ptr++];
		return new IfcBuildingSystem(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, PredefinedType, LongName);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.PredefinedType);
		args.push(this.LongName);
		return args;
	}
};
var IfcBurner = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcBurner(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcBurnerType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcBurnerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCShapeProfileDef = class {
	constructor(expressID, type, ProfileType, ProfileName, Position, Depth, Width, WallThickness, Girth, InternalFilletRadius) {
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Depth = Depth;
		this.Width = Width;
		this.WallThickness = WallThickness;
		this.Girth = Girth;
		this.InternalFilletRadius = InternalFilletRadius;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ProfileType = tape[ptr++];
		let ProfileName = tape[ptr++];
		let Position = tape[ptr++];
		let Depth = tape[ptr++];
		let Width = tape[ptr++];
		let WallThickness = tape[ptr++];
		let Girth = tape[ptr++];
		let InternalFilletRadius = tape[ptr++];
		return new IfcCShapeProfileDef(expressID, type, ProfileType, ProfileName, Position, Depth, Width, WallThickness, Girth, InternalFilletRadius);
	}
	ToTape() {
		let args = [];
		args.push(this.ProfileType);
		args.push(this.ProfileName);
		args.push(this.Position);
		args.push(this.Depth);
		args.push(this.Width);
		args.push(this.WallThickness);
		args.push(this.Girth);
		args.push(this.InternalFilletRadius);
		return args;
	}
};
var IfcCableCarrierFitting = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCableCarrierFitting(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCableCarrierFittingType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCableCarrierFittingType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCableCarrierSegment = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCableCarrierSegment(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCableCarrierSegmentType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCableCarrierSegmentType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCableFitting = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCableFitting(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCableFittingType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCableFittingType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCableSegment = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCableSegment(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCableSegmentType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCableSegmentType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCaissonFoundation = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCaissonFoundation(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCaissonFoundationType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCaissonFoundationType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCartesianPoint = class {
	constructor(expressID, type, Coordinates) {
		this.expressID = expressID;
		this.type = type;
		this.Coordinates = Coordinates;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Coordinates = tape[ptr++];
		return new IfcCartesianPoint(expressID, type, Coordinates);
	}
	ToTape() {
		let args = [];
		args.push(this.Coordinates);
		return args;
	}
};
var IfcCartesianPointList = class {
	constructor(expressID, type) {
		this.expressID = expressID;
		this.type = type;
	}
	static FromTape(expressID, type, tape) {
		return new IfcCartesianPointList(expressID, type);
	}
	ToTape() {
		let args = [];
		return args;
	}
};
var IfcCartesianPointList2D = class {
	constructor(expressID, type, CoordList, TagList) {
		this.expressID = expressID;
		this.type = type;
		this.CoordList = CoordList;
		this.TagList = TagList;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let CoordList = tape[ptr++];
		let TagList = tape[ptr++];
		return new IfcCartesianPointList2D(expressID, type, CoordList, TagList);
	}
	ToTape() {
		let args = [];
		args.push(this.CoordList);
		args.push(this.TagList);
		return args;
	}
};
var IfcCartesianPointList3D = class {
	constructor(expressID, type, CoordList, TagList) {
		this.expressID = expressID;
		this.type = type;
		this.CoordList = CoordList;
		this.TagList = TagList;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let CoordList = tape[ptr++];
		let TagList = tape[ptr++];
		return new IfcCartesianPointList3D(expressID, type, CoordList, TagList);
	}
	ToTape() {
		let args = [];
		args.push(this.CoordList);
		args.push(this.TagList);
		return args;
	}
};
var IfcCartesianTransformationOperator = class {
	constructor(expressID, type, Axis1, Axis2, LocalOrigin, Scale) {
		this.expressID = expressID;
		this.type = type;
		this.Axis1 = Axis1;
		this.Axis2 = Axis2;
		this.LocalOrigin = LocalOrigin;
		this.Scale = Scale;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Axis1 = tape[ptr++];
		let Axis2 = tape[ptr++];
		let LocalOrigin = tape[ptr++];
		let Scale = tape[ptr++];
		return new IfcCartesianTransformationOperator(expressID, type, Axis1, Axis2, LocalOrigin, Scale);
	}
	ToTape() {
		let args = [];
		args.push(this.Axis1);
		args.push(this.Axis2);
		args.push(this.LocalOrigin);
		args.push(this.Scale);
		return args;
	}
};
var IfcCartesianTransformationOperator2D = class {
	constructor(expressID, type, Axis1, Axis2, LocalOrigin, Scale) {
		this.expressID = expressID;
		this.type = type;
		this.Axis1 = Axis1;
		this.Axis2 = Axis2;
		this.LocalOrigin = LocalOrigin;
		this.Scale = Scale;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Axis1 = tape[ptr++];
		let Axis2 = tape[ptr++];
		let LocalOrigin = tape[ptr++];
		let Scale = tape[ptr++];
		return new IfcCartesianTransformationOperator2D(expressID, type, Axis1, Axis2, LocalOrigin, Scale);
	}
	ToTape() {
		let args = [];
		args.push(this.Axis1);
		args.push(this.Axis2);
		args.push(this.LocalOrigin);
		args.push(this.Scale);
		return args;
	}
};
var IfcCartesianTransformationOperator2DnonUniform = class {
	constructor(expressID, type, Axis1, Axis2, LocalOrigin, Scale, Scale2) {
		this.expressID = expressID;
		this.type = type;
		this.Axis1 = Axis1;
		this.Axis2 = Axis2;
		this.LocalOrigin = LocalOrigin;
		this.Scale = Scale;
		this.Scale2 = Scale2;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Axis1 = tape[ptr++];
		let Axis2 = tape[ptr++];
		let LocalOrigin = tape[ptr++];
		let Scale = tape[ptr++];
		let Scale2 = tape[ptr++];
		return new IfcCartesianTransformationOperator2DnonUniform(expressID, type, Axis1, Axis2, LocalOrigin, Scale, Scale2);
	}
	ToTape() {
		let args = [];
		args.push(this.Axis1);
		args.push(this.Axis2);
		args.push(this.LocalOrigin);
		args.push(this.Scale);
		args.push(this.Scale2);
		return args;
	}
};
var IfcCartesianTransformationOperator3D = class {
	constructor(expressID, type, Axis1, Axis2, LocalOrigin, Scale, Axis3) {
		this.expressID = expressID;
		this.type = type;
		this.Axis1 = Axis1;
		this.Axis2 = Axis2;
		this.LocalOrigin = LocalOrigin;
		this.Scale = Scale;
		this.Axis3 = Axis3;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Axis1 = tape[ptr++];
		let Axis2 = tape[ptr++];
		let LocalOrigin = tape[ptr++];
		let Scale = tape[ptr++];
		let Axis3 = tape[ptr++];
		return new IfcCartesianTransformationOperator3D(expressID, type, Axis1, Axis2, LocalOrigin, Scale, Axis3);
	}
	ToTape() {
		let args = [];
		args.push(this.Axis1);
		args.push(this.Axis2);
		args.push(this.LocalOrigin);
		args.push(this.Scale);
		args.push(this.Axis3);
		return args;
	}
};
var IfcCartesianTransformationOperator3DnonUniform = class {
	constructor(expressID, type, Axis1, Axis2, LocalOrigin, Scale, Axis3, Scale2, Scale3) {
		this.expressID = expressID;
		this.type = type;
		this.Axis1 = Axis1;
		this.Axis2 = Axis2;
		this.LocalOrigin = LocalOrigin;
		this.Scale = Scale;
		this.Axis3 = Axis3;
		this.Scale2 = Scale2;
		this.Scale3 = Scale3;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Axis1 = tape[ptr++];
		let Axis2 = tape[ptr++];
		let LocalOrigin = tape[ptr++];
		let Scale = tape[ptr++];
		let Axis3 = tape[ptr++];
		let Scale2 = tape[ptr++];
		let Scale3 = tape[ptr++];
		return new IfcCartesianTransformationOperator3DnonUniform(expressID, type, Axis1, Axis2, LocalOrigin, Scale, Axis3, Scale2, Scale3);
	}
	ToTape() {
		let args = [];
		args.push(this.Axis1);
		args.push(this.Axis2);
		args.push(this.LocalOrigin);
		args.push(this.Scale);
		args.push(this.Axis3);
		args.push(this.Scale2);
		args.push(this.Scale3);
		return args;
	}
};
var IfcCenterLineProfileDef = class {
	constructor(expressID, type, ProfileType, ProfileName, Curve, Thickness) {
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Curve = Curve;
		this.Thickness = Thickness;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ProfileType = tape[ptr++];
		let ProfileName = tape[ptr++];
		let Curve = tape[ptr++];
		let Thickness = tape[ptr++];
		return new IfcCenterLineProfileDef(expressID, type, ProfileType, ProfileName, Curve, Thickness);
	}
	ToTape() {
		let args = [];
		args.push(this.ProfileType);
		args.push(this.ProfileName);
		args.push(this.Curve);
		args.push(this.Thickness);
		return args;
	}
};
var IfcChiller = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcChiller(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcChillerType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcChillerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcChimney = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcChimney(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcChimneyType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcChimneyType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCircle = class {
	constructor(expressID, type, Position, Radius) {
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
		this.Radius = Radius;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Position = tape[ptr++];
		let Radius = tape[ptr++];
		return new IfcCircle(expressID, type, Position, Radius);
	}
	ToTape() {
		let args = [];
		args.push(this.Position);
		args.push(this.Radius);
		return args;
	}
};
var IfcCircleHollowProfileDef = class {
	constructor(expressID, type, ProfileType, ProfileName, Position, Radius, WallThickness) {
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Radius = Radius;
		this.WallThickness = WallThickness;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ProfileType = tape[ptr++];
		let ProfileName = tape[ptr++];
		let Position = tape[ptr++];
		let Radius = tape[ptr++];
		let WallThickness = tape[ptr++];
		return new IfcCircleHollowProfileDef(expressID, type, ProfileType, ProfileName, Position, Radius, WallThickness);
	}
	ToTape() {
		let args = [];
		args.push(this.ProfileType);
		args.push(this.ProfileName);
		args.push(this.Position);
		args.push(this.Radius);
		args.push(this.WallThickness);
		return args;
	}
};
var IfcCircleProfileDef = class {
	constructor(expressID, type, ProfileType, ProfileName, Position, Radius) {
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Radius = Radius;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ProfileType = tape[ptr++];
		let ProfileName = tape[ptr++];
		let Position = tape[ptr++];
		let Radius = tape[ptr++];
		return new IfcCircleProfileDef(expressID, type, ProfileType, ProfileName, Position, Radius);
	}
	ToTape() {
		let args = [];
		args.push(this.ProfileType);
		args.push(this.ProfileName);
		args.push(this.Position);
		args.push(this.Radius);
		return args;
	}
};
var IfcCircularArcSegment2D = class {
	constructor(expressID, type, StartPoint, StartDirection, SegmentLength, Radius, IsCCW) {
		this.expressID = expressID;
		this.type = type;
		this.StartPoint = StartPoint;
		this.StartDirection = StartDirection;
		this.SegmentLength = SegmentLength;
		this.Radius = Radius;
		this.IsCCW = IsCCW;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let StartPoint = tape[ptr++];
		let StartDirection = tape[ptr++];
		let SegmentLength = tape[ptr++];
		let Radius = tape[ptr++];
		let IsCCW = tape[ptr++];
		return new IfcCircularArcSegment2D(expressID, type, StartPoint, StartDirection, SegmentLength, Radius, IsCCW);
	}
	ToTape() {
		let args = [];
		args.push(this.StartPoint);
		args.push(this.StartDirection);
		args.push(this.SegmentLength);
		args.push(this.Radius);
		args.push(this.IsCCW);
		return args;
	}
};
var IfcCivilElement = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcCivilElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcCivilElementType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcCivilElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcClassification = class {
	constructor(expressID, type, Source, Edition, EditionDate, Name, Description, Location, ReferenceTokens) {
		this.expressID = expressID;
		this.type = type;
		this.Source = Source;
		this.Edition = Edition;
		this.EditionDate = EditionDate;
		this.Name = Name;
		this.Description = Description;
		this.Location = Location;
		this.ReferenceTokens = ReferenceTokens;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Source = tape[ptr++];
		let Edition = tape[ptr++];
		let EditionDate = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let Location = tape[ptr++];
		let ReferenceTokens = tape[ptr++];
		return new IfcClassification(expressID, type, Source, Edition, EditionDate, Name, Description, Location, ReferenceTokens);
	}
	ToTape() {
		let args = [];
		args.push(this.Source);
		args.push(this.Edition);
		args.push(this.EditionDate);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.Location);
		args.push(this.ReferenceTokens);
		return args;
	}
};
var IfcClassificationReference = class {
	constructor(expressID, type, Location, Identification, Name, ReferencedSource, Description, Sort) {
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
		this.ReferencedSource = ReferencedSource;
		this.Description = Description;
		this.Sort = Sort;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Location = tape[ptr++];
		let Identification = tape[ptr++];
		let Name = tape[ptr++];
		let ReferencedSource = tape[ptr++];
		let Description = tape[ptr++];
		let Sort = tape[ptr++];
		return new IfcClassificationReference(expressID, type, Location, Identification, Name, ReferencedSource, Description, Sort);
	}
	ToTape() {
		let args = [];
		args.push(this.Location);
		args.push(this.Identification);
		args.push(this.Name);
		args.push(this.ReferencedSource);
		args.push(this.Description);
		args.push(this.Sort);
		return args;
	}
};
var IfcClosedShell = class {
	constructor(expressID, type, CfsFaces) {
		this.expressID = expressID;
		this.type = type;
		this.CfsFaces = CfsFaces;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let CfsFaces = tape[ptr++];
		return new IfcClosedShell(expressID, type, CfsFaces);
	}
	ToTape() {
		let args = [];
		args.push(this.CfsFaces);
		return args;
	}
};
var IfcCoil = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCoil(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCoilType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCoilType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcColourRgb = class {
	constructor(expressID, type, Name, Red, Green, Blue) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Red = Red;
		this.Green = Green;
		this.Blue = Blue;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Red = tape[ptr++];
		let Green = tape[ptr++];
		let Blue = tape[ptr++];
		return new IfcColourRgb(expressID, type, Name, Red, Green, Blue);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Red);
		args.push(this.Green);
		args.push(this.Blue);
		return args;
	}
};
var IfcColourRgbList = class {
	constructor(expressID, type, ColourList) {
		this.expressID = expressID;
		this.type = type;
		this.ColourList = ColourList;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ColourList = tape[ptr++];
		return new IfcColourRgbList(expressID, type, ColourList);
	}
	ToTape() {
		let args = [];
		args.push(this.ColourList);
		return args;
	}
};
var IfcColourSpecification = class {
	constructor(expressID, type, Name) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		return new IfcColourSpecification(expressID, type, Name);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		return args;
	}
};
var IfcColumn = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcColumn(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcColumnStandardCase = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcColumnStandardCase(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcColumnType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcColumnType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCommunicationsAppliance = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCommunicationsAppliance(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCommunicationsApplianceType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCommunicationsApplianceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcComplexProperty = class {
	constructor(expressID, type, Name, Description, UsageName, HasProperties) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.UsageName = UsageName;
		this.HasProperties = HasProperties;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let UsageName = tape[ptr++];
		let HasProperties = tape[ptr++];
		return new IfcComplexProperty(expressID, type, Name, Description, UsageName, HasProperties);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.UsageName);
		args.push(this.HasProperties);
		return args;
	}
};
var IfcComplexPropertyTemplate = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, UsageName, TemplateType, HasPropertyTemplates) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.UsageName = UsageName;
		this.TemplateType = TemplateType;
		this.HasPropertyTemplates = HasPropertyTemplates;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let UsageName = tape[ptr++];
		let TemplateType = tape[ptr++];
		let HasPropertyTemplates = tape[ptr++];
		return new IfcComplexPropertyTemplate(expressID, type, GlobalId, OwnerHistory, Name, Description, UsageName, TemplateType, HasPropertyTemplates);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.UsageName);
		args.push(this.TemplateType);
		args.push(this.HasPropertyTemplates);
		return args;
	}
};
var IfcCompositeCurve = class {
	constructor(expressID, type, Segments, SelfIntersect) {
		this.expressID = expressID;
		this.type = type;
		this.Segments = Segments;
		this.SelfIntersect = SelfIntersect;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Segments = tape[ptr++];
		let SelfIntersect = tape[ptr++];
		return new IfcCompositeCurve(expressID, type, Segments, SelfIntersect);
	}
	ToTape() {
		let args = [];
		args.push(this.Segments);
		args.push(this.SelfIntersect);
		return args;
	}
};
var IfcCompositeCurveOnSurface = class {
	constructor(expressID, type, Segments, SelfIntersect) {
		this.expressID = expressID;
		this.type = type;
		this.Segments = Segments;
		this.SelfIntersect = SelfIntersect;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Segments = tape[ptr++];
		let SelfIntersect = tape[ptr++];
		return new IfcCompositeCurveOnSurface(expressID, type, Segments, SelfIntersect);
	}
	ToTape() {
		let args = [];
		args.push(this.Segments);
		args.push(this.SelfIntersect);
		return args;
	}
};
var IfcCompositeCurveSegment = class {
	constructor(expressID, type, Transition, SameSense, ParentCurve) {
		this.expressID = expressID;
		this.type = type;
		this.Transition = Transition;
		this.SameSense = SameSense;
		this.ParentCurve = ParentCurve;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Transition = tape[ptr++];
		let SameSense = tape[ptr++];
		let ParentCurve = tape[ptr++];
		return new IfcCompositeCurveSegment(expressID, type, Transition, SameSense, ParentCurve);
	}
	ToTape() {
		let args = [];
		args.push(this.Transition);
		args.push(this.SameSense);
		args.push(this.ParentCurve);
		return args;
	}
};
var IfcCompositeProfileDef = class {
	constructor(expressID, type, ProfileType, ProfileName, Profiles, Label) {
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Profiles = Profiles;
		this.Label = Label;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ProfileType = tape[ptr++];
		let ProfileName = tape[ptr++];
		let Profiles = tape[ptr++];
		let Label = tape[ptr++];
		return new IfcCompositeProfileDef(expressID, type, ProfileType, ProfileName, Profiles, Label);
	}
	ToTape() {
		let args = [];
		args.push(this.ProfileType);
		args.push(this.ProfileName);
		args.push(this.Profiles);
		args.push(this.Label);
		return args;
	}
};
var IfcCompressor = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCompressor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCompressorType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCompressorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCondenser = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCondenser(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCondenserType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCondenserType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcConic = class {
	constructor(expressID, type, Position) {
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Position = tape[ptr++];
		return new IfcConic(expressID, type, Position);
	}
	ToTape() {
		let args = [];
		args.push(this.Position);
		return args;
	}
};
var IfcConnectedFaceSet = class {
	constructor(expressID, type, CfsFaces) {
		this.expressID = expressID;
		this.type = type;
		this.CfsFaces = CfsFaces;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let CfsFaces = tape[ptr++];
		return new IfcConnectedFaceSet(expressID, type, CfsFaces);
	}
	ToTape() {
		let args = [];
		args.push(this.CfsFaces);
		return args;
	}
};
var IfcConnectionCurveGeometry = class {
	constructor(expressID, type, CurveOnRelatingElement, CurveOnRelatedElement) {
		this.expressID = expressID;
		this.type = type;
		this.CurveOnRelatingElement = CurveOnRelatingElement;
		this.CurveOnRelatedElement = CurveOnRelatedElement;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let CurveOnRelatingElement = tape[ptr++];
		let CurveOnRelatedElement = tape[ptr++];
		return new IfcConnectionCurveGeometry(expressID, type, CurveOnRelatingElement, CurveOnRelatedElement);
	}
	ToTape() {
		let args = [];
		args.push(this.CurveOnRelatingElement);
		args.push(this.CurveOnRelatedElement);
		return args;
	}
};
var IfcConnectionGeometry = class {
	constructor(expressID, type) {
		this.expressID = expressID;
		this.type = type;
	}
	static FromTape(expressID, type, tape) {
		return new IfcConnectionGeometry(expressID, type);
	}
	ToTape() {
		let args = [];
		return args;
	}
};
var IfcConnectionPointEccentricity = class {
	constructor(expressID, type, PointOnRelatingElement, PointOnRelatedElement, EccentricityInX, EccentricityInY, EccentricityInZ) {
		this.expressID = expressID;
		this.type = type;
		this.PointOnRelatingElement = PointOnRelatingElement;
		this.PointOnRelatedElement = PointOnRelatedElement;
		this.EccentricityInX = EccentricityInX;
		this.EccentricityInY = EccentricityInY;
		this.EccentricityInZ = EccentricityInZ;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let PointOnRelatingElement = tape[ptr++];
		let PointOnRelatedElement = tape[ptr++];
		let EccentricityInX = tape[ptr++];
		let EccentricityInY = tape[ptr++];
		let EccentricityInZ = tape[ptr++];
		return new IfcConnectionPointEccentricity(expressID, type, PointOnRelatingElement, PointOnRelatedElement, EccentricityInX, EccentricityInY, EccentricityInZ);
	}
	ToTape() {
		let args = [];
		args.push(this.PointOnRelatingElement);
		args.push(this.PointOnRelatedElement);
		args.push(this.EccentricityInX);
		args.push(this.EccentricityInY);
		args.push(this.EccentricityInZ);
		return args;
	}
};
var IfcConnectionPointGeometry = class {
	constructor(expressID, type, PointOnRelatingElement, PointOnRelatedElement) {
		this.expressID = expressID;
		this.type = type;
		this.PointOnRelatingElement = PointOnRelatingElement;
		this.PointOnRelatedElement = PointOnRelatedElement;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let PointOnRelatingElement = tape[ptr++];
		let PointOnRelatedElement = tape[ptr++];
		return new IfcConnectionPointGeometry(expressID, type, PointOnRelatingElement, PointOnRelatedElement);
	}
	ToTape() {
		let args = [];
		args.push(this.PointOnRelatingElement);
		args.push(this.PointOnRelatedElement);
		return args;
	}
};
var IfcConnectionSurfaceGeometry = class {
	constructor(expressID, type, SurfaceOnRelatingElement, SurfaceOnRelatedElement) {
		this.expressID = expressID;
		this.type = type;
		this.SurfaceOnRelatingElement = SurfaceOnRelatingElement;
		this.SurfaceOnRelatedElement = SurfaceOnRelatedElement;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let SurfaceOnRelatingElement = tape[ptr++];
		let SurfaceOnRelatedElement = tape[ptr++];
		return new IfcConnectionSurfaceGeometry(expressID, type, SurfaceOnRelatingElement, SurfaceOnRelatedElement);
	}
	ToTape() {
		let args = [];
		args.push(this.SurfaceOnRelatingElement);
		args.push(this.SurfaceOnRelatedElement);
		return args;
	}
};
var IfcConnectionVolumeGeometry = class {
	constructor(expressID, type, VolumeOnRelatingElement, VolumeOnRelatedElement) {
		this.expressID = expressID;
		this.type = type;
		this.VolumeOnRelatingElement = VolumeOnRelatingElement;
		this.VolumeOnRelatedElement = VolumeOnRelatedElement;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let VolumeOnRelatingElement = tape[ptr++];
		let VolumeOnRelatedElement = tape[ptr++];
		return new IfcConnectionVolumeGeometry(expressID, type, VolumeOnRelatingElement, VolumeOnRelatedElement);
	}
	ToTape() {
		let args = [];
		args.push(this.VolumeOnRelatingElement);
		args.push(this.VolumeOnRelatedElement);
		return args;
	}
};
var IfcConstraint = class {
	constructor(expressID, type, Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.ConstraintGrade = ConstraintGrade;
		this.ConstraintSource = ConstraintSource;
		this.CreatingActor = CreatingActor;
		this.CreationTime = CreationTime;
		this.UserDefinedGrade = UserDefinedGrade;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ConstraintGrade = tape[ptr++];
		let ConstraintSource = tape[ptr++];
		let CreatingActor = tape[ptr++];
		let CreationTime = tape[ptr++];
		let UserDefinedGrade = tape[ptr++];
		return new IfcConstraint(expressID, type, Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ConstraintGrade);
		args.push(this.ConstraintSource);
		args.push(this.CreatingActor);
		args.push(this.CreationTime);
		args.push(this.UserDefinedGrade);
		return args;
	}
};
var IfcConstructionEquipmentResource = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let Identification = tape[ptr++];
		let LongDescription = tape[ptr++];
		let Usage = tape[ptr++];
		let BaseCosts = tape[ptr++];
		let BaseQuantity = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcConstructionEquipmentResource(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.Identification);
		args.push(this.LongDescription);
		args.push(this.Usage);
		args.push(this.BaseCosts);
		args.push(this.BaseQuantity);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcConstructionEquipmentResourceType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let Identification = tape[ptr++];
		let LongDescription = tape[ptr++];
		let ResourceType = tape[ptr++];
		let BaseCosts = tape[ptr++];
		let BaseQuantity = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcConstructionEquipmentResourceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.Identification);
		args.push(this.LongDescription);
		args.push(this.ResourceType);
		args.push(this.BaseCosts);
		args.push(this.BaseQuantity);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcConstructionMaterialResource = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let Identification = tape[ptr++];
		let LongDescription = tape[ptr++];
		let Usage = tape[ptr++];
		let BaseCosts = tape[ptr++];
		let BaseQuantity = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcConstructionMaterialResource(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.Identification);
		args.push(this.LongDescription);
		args.push(this.Usage);
		args.push(this.BaseCosts);
		args.push(this.BaseQuantity);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcConstructionMaterialResourceType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let Identification = tape[ptr++];
		let LongDescription = tape[ptr++];
		let ResourceType = tape[ptr++];
		let BaseCosts = tape[ptr++];
		let BaseQuantity = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcConstructionMaterialResourceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.Identification);
		args.push(this.LongDescription);
		args.push(this.ResourceType);
		args.push(this.BaseCosts);
		args.push(this.BaseQuantity);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcConstructionProductResource = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let Identification = tape[ptr++];
		let LongDescription = tape[ptr++];
		let Usage = tape[ptr++];
		let BaseCosts = tape[ptr++];
		let BaseQuantity = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcConstructionProductResource(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.Identification);
		args.push(this.LongDescription);
		args.push(this.Usage);
		args.push(this.BaseCosts);
		args.push(this.BaseQuantity);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcConstructionProductResourceType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let Identification = tape[ptr++];
		let LongDescription = tape[ptr++];
		let ResourceType = tape[ptr++];
		let BaseCosts = tape[ptr++];
		let BaseQuantity = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcConstructionProductResourceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.Identification);
		args.push(this.LongDescription);
		args.push(this.ResourceType);
		args.push(this.BaseCosts);
		args.push(this.BaseQuantity);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcConstructionResource = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let Identification = tape[ptr++];
		let LongDescription = tape[ptr++];
		let Usage = tape[ptr++];
		let BaseCosts = tape[ptr++];
		let BaseQuantity = tape[ptr++];
		return new IfcConstructionResource(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.Identification);
		args.push(this.LongDescription);
		args.push(this.Usage);
		args.push(this.BaseCosts);
		args.push(this.BaseQuantity);
		return args;
	}
};
var IfcConstructionResourceType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let Identification = tape[ptr++];
		let LongDescription = tape[ptr++];
		let ResourceType = tape[ptr++];
		let BaseCosts = tape[ptr++];
		let BaseQuantity = tape[ptr++];
		return new IfcConstructionResourceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.Identification);
		args.push(this.LongDescription);
		args.push(this.ResourceType);
		args.push(this.BaseCosts);
		args.push(this.BaseQuantity);
		return args;
	}
};
var IfcContext = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, Phase, RepresentationContexts, UnitsInContext) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.LongName = LongName;
		this.Phase = Phase;
		this.RepresentationContexts = RepresentationContexts;
		this.UnitsInContext = UnitsInContext;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let LongName = tape[ptr++];
		let Phase = tape[ptr++];
		let RepresentationContexts = tape[ptr++];
		let UnitsInContext = tape[ptr++];
		return new IfcContext(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, Phase, RepresentationContexts, UnitsInContext);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.LongName);
		args.push(this.Phase);
		args.push(this.RepresentationContexts);
		args.push(this.UnitsInContext);
		return args;
	}
};
var IfcContextDependentUnit = class {
	constructor(expressID, type, Dimensions, UnitType, Name) {
		this.expressID = expressID;
		this.type = type;
		this.Dimensions = Dimensions;
		this.UnitType = UnitType;
		this.Name = Name;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Dimensions = tape[ptr++];
		let UnitType = tape[ptr++];
		let Name = tape[ptr++];
		return new IfcContextDependentUnit(expressID, type, Dimensions, UnitType, Name);
	}
	ToTape() {
		let args = [];
		args.push(this.Dimensions);
		args.push(this.UnitType);
		args.push(this.Name);
		return args;
	}
};
var IfcControl = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let Identification = tape[ptr++];
		return new IfcControl(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.Identification);
		return args;
	}
};
var IfcController = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcController(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcControllerType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcControllerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcConversionBasedUnit = class {
	constructor(expressID, type, Dimensions, UnitType, Name, ConversionFactor) {
		this.expressID = expressID;
		this.type = type;
		this.Dimensions = Dimensions;
		this.UnitType = UnitType;
		this.Name = Name;
		this.ConversionFactor = ConversionFactor;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Dimensions = tape[ptr++];
		let UnitType = tape[ptr++];
		let Name = tape[ptr++];
		let ConversionFactor = tape[ptr++];
		return new IfcConversionBasedUnit(expressID, type, Dimensions, UnitType, Name, ConversionFactor);
	}
	ToTape() {
		let args = [];
		args.push(this.Dimensions);
		args.push(this.UnitType);
		args.push(this.Name);
		args.push(this.ConversionFactor);
		return args;
	}
};
var IfcConversionBasedUnitWithOffset = class {
	constructor(expressID, type, Dimensions, UnitType, Name, ConversionFactor, ConversionOffset) {
		this.expressID = expressID;
		this.type = type;
		this.Dimensions = Dimensions;
		this.UnitType = UnitType;
		this.Name = Name;
		this.ConversionFactor = ConversionFactor;
		this.ConversionOffset = ConversionOffset;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Dimensions = tape[ptr++];
		let UnitType = tape[ptr++];
		let Name = tape[ptr++];
		let ConversionFactor = tape[ptr++];
		let ConversionOffset = tape[ptr++];
		return new IfcConversionBasedUnitWithOffset(expressID, type, Dimensions, UnitType, Name, ConversionFactor, ConversionOffset);
	}
	ToTape() {
		let args = [];
		args.push(this.Dimensions);
		args.push(this.UnitType);
		args.push(this.Name);
		args.push(this.ConversionFactor);
		args.push(this.ConversionOffset);
		return args;
	}
};
var IfcCooledBeam = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCooledBeam(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCooledBeamType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCooledBeamType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCoolingTower = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCoolingTower(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCoolingTowerType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCoolingTowerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCoordinateOperation = class {
	constructor(expressID, type, SourceCRS, TargetCRS) {
		this.expressID = expressID;
		this.type = type;
		this.SourceCRS = SourceCRS;
		this.TargetCRS = TargetCRS;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let SourceCRS = tape[ptr++];
		let TargetCRS = tape[ptr++];
		return new IfcCoordinateOperation(expressID, type, SourceCRS, TargetCRS);
	}
	ToTape() {
		let args = [];
		args.push(this.SourceCRS);
		args.push(this.TargetCRS);
		return args;
	}
};
var IfcCoordinateReferenceSystem = class {
	constructor(expressID, type, Name, Description, GeodeticDatum, VerticalDatum) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.GeodeticDatum = GeodeticDatum;
		this.VerticalDatum = VerticalDatum;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let GeodeticDatum = tape[ptr++];
		let VerticalDatum = tape[ptr++];
		return new IfcCoordinateReferenceSystem(expressID, type, Name, Description, GeodeticDatum, VerticalDatum);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.GeodeticDatum);
		args.push(this.VerticalDatum);
		return args;
	}
};
var IfcCostItem = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, PredefinedType, CostValues, CostQuantities) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.PredefinedType = PredefinedType;
		this.CostValues = CostValues;
		this.CostQuantities = CostQuantities;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let Identification = tape[ptr++];
		let PredefinedType = tape[ptr++];
		let CostValues = tape[ptr++];
		let CostQuantities = tape[ptr++];
		return new IfcCostItem(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, PredefinedType, CostValues, CostQuantities);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.Identification);
		args.push(this.PredefinedType);
		args.push(this.CostValues);
		args.push(this.CostQuantities);
		return args;
	}
};
var IfcCostSchedule = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, PredefinedType, Status, SubmittedOn, UpdateDate) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.PredefinedType = PredefinedType;
		this.Status = Status;
		this.SubmittedOn = SubmittedOn;
		this.UpdateDate = UpdateDate;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let Identification = tape[ptr++];
		let PredefinedType = tape[ptr++];
		let Status = tape[ptr++];
		let SubmittedOn = tape[ptr++];
		let UpdateDate = tape[ptr++];
		return new IfcCostSchedule(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, PredefinedType, Status, SubmittedOn, UpdateDate);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.Identification);
		args.push(this.PredefinedType);
		args.push(this.Status);
		args.push(this.SubmittedOn);
		args.push(this.UpdateDate);
		return args;
	}
};
var IfcCostValue = class {
	constructor(expressID, type, Name, Description, AppliedValue, UnitBasis, ApplicableDate, FixedUntilDate, Category, Condition, ArithmeticOperator, Components) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.AppliedValue = AppliedValue;
		this.UnitBasis = UnitBasis;
		this.ApplicableDate = ApplicableDate;
		this.FixedUntilDate = FixedUntilDate;
		this.Category = Category;
		this.Condition = Condition;
		this.ArithmeticOperator = ArithmeticOperator;
		this.Components = Components;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let AppliedValue = tape[ptr++];
		let UnitBasis = tape[ptr++];
		let ApplicableDate = tape[ptr++];
		let FixedUntilDate = tape[ptr++];
		let Category = tape[ptr++];
		let Condition = tape[ptr++];
		let ArithmeticOperator = tape[ptr++];
		let Components = tape[ptr++];
		return new IfcCostValue(expressID, type, Name, Description, AppliedValue, UnitBasis, ApplicableDate, FixedUntilDate, Category, Condition, ArithmeticOperator, Components);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.AppliedValue);
		args.push(this.UnitBasis);
		args.push(this.ApplicableDate);
		args.push(this.FixedUntilDate);
		args.push(this.Category);
		args.push(this.Condition);
		args.push(this.ArithmeticOperator);
		args.push(this.Components);
		return args;
	}
};
var IfcCovering = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCovering(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCoveringType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCoveringType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCrewResource = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let Identification = tape[ptr++];
		let LongDescription = tape[ptr++];
		let Usage = tape[ptr++];
		let BaseCosts = tape[ptr++];
		let BaseQuantity = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCrewResource(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.Identification);
		args.push(this.LongDescription);
		args.push(this.Usage);
		args.push(this.BaseCosts);
		args.push(this.BaseQuantity);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCrewResourceType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let Identification = tape[ptr++];
		let LongDescription = tape[ptr++];
		let ResourceType = tape[ptr++];
		let BaseCosts = tape[ptr++];
		let BaseQuantity = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCrewResourceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.Identification);
		args.push(this.LongDescription);
		args.push(this.ResourceType);
		args.push(this.BaseCosts);
		args.push(this.BaseQuantity);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCsgPrimitive3D = class {
	constructor(expressID, type, Position) {
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Position = tape[ptr++];
		return new IfcCsgPrimitive3D(expressID, type, Position);
	}
	ToTape() {
		let args = [];
		args.push(this.Position);
		return args;
	}
};
var IfcCsgSolid = class {
	constructor(expressID, type, TreeRootExpression) {
		this.expressID = expressID;
		this.type = type;
		this.TreeRootExpression = TreeRootExpression;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let TreeRootExpression = tape[ptr++];
		return new IfcCsgSolid(expressID, type, TreeRootExpression);
	}
	ToTape() {
		let args = [];
		args.push(this.TreeRootExpression);
		return args;
	}
};
var IfcCurrencyRelationship = class {
	constructor(expressID, type, Name, Description, RelatingMonetaryUnit, RelatedMonetaryUnit, ExchangeRate, RateDateTime, RateSource) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.RelatingMonetaryUnit = RelatingMonetaryUnit;
		this.RelatedMonetaryUnit = RelatedMonetaryUnit;
		this.ExchangeRate = ExchangeRate;
		this.RateDateTime = RateDateTime;
		this.RateSource = RateSource;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let RelatingMonetaryUnit = tape[ptr++];
		let RelatedMonetaryUnit = tape[ptr++];
		let ExchangeRate = tape[ptr++];
		let RateDateTime = tape[ptr++];
		let RateSource = tape[ptr++];
		return new IfcCurrencyRelationship(expressID, type, Name, Description, RelatingMonetaryUnit, RelatedMonetaryUnit, ExchangeRate, RateDateTime, RateSource);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.RelatingMonetaryUnit);
		args.push(this.RelatedMonetaryUnit);
		args.push(this.ExchangeRate);
		args.push(this.RateDateTime);
		args.push(this.RateSource);
		return args;
	}
};
var IfcCurtainWall = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCurtainWall(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCurtainWallType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcCurtainWallType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcCurve = class {
	constructor(expressID, type) {
		this.expressID = expressID;
		this.type = type;
	}
	static FromTape(expressID, type, tape) {
		return new IfcCurve(expressID, type);
	}
	ToTape() {
		let args = [];
		return args;
	}
};
var IfcCurveBoundedPlane = class {
	constructor(expressID, type, BasisSurface, OuterBoundary, InnerBoundaries) {
		this.expressID = expressID;
		this.type = type;
		this.BasisSurface = BasisSurface;
		this.OuterBoundary = OuterBoundary;
		this.InnerBoundaries = InnerBoundaries;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let BasisSurface = tape[ptr++];
		let OuterBoundary = tape[ptr++];
		let InnerBoundaries = tape[ptr++];
		return new IfcCurveBoundedPlane(expressID, type, BasisSurface, OuterBoundary, InnerBoundaries);
	}
	ToTape() {
		let args = [];
		args.push(this.BasisSurface);
		args.push(this.OuterBoundary);
		args.push(this.InnerBoundaries);
		return args;
	}
};
var IfcCurveBoundedSurface = class {
	constructor(expressID, type, BasisSurface, Boundaries, ImplicitOuter) {
		this.expressID = expressID;
		this.type = type;
		this.BasisSurface = BasisSurface;
		this.Boundaries = Boundaries;
		this.ImplicitOuter = ImplicitOuter;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let BasisSurface = tape[ptr++];
		let Boundaries = tape[ptr++];
		let ImplicitOuter = tape[ptr++];
		return new IfcCurveBoundedSurface(expressID, type, BasisSurface, Boundaries, ImplicitOuter);
	}
	ToTape() {
		let args = [];
		args.push(this.BasisSurface);
		args.push(this.Boundaries);
		args.push(this.ImplicitOuter);
		return args;
	}
};
var IfcCurveSegment2D = class {
	constructor(expressID, type, StartPoint, StartDirection, SegmentLength) {
		this.expressID = expressID;
		this.type = type;
		this.StartPoint = StartPoint;
		this.StartDirection = StartDirection;
		this.SegmentLength = SegmentLength;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let StartPoint = tape[ptr++];
		let StartDirection = tape[ptr++];
		let SegmentLength = tape[ptr++];
		return new IfcCurveSegment2D(expressID, type, StartPoint, StartDirection, SegmentLength);
	}
	ToTape() {
		let args = [];
		args.push(this.StartPoint);
		args.push(this.StartDirection);
		args.push(this.SegmentLength);
		return args;
	}
};
var IfcCurveStyle = class {
	constructor(expressID, type, Name, CurveFont, CurveWidth, CurveColour, ModelOrDraughting) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.CurveFont = CurveFont;
		this.CurveWidth = CurveWidth;
		this.CurveColour = CurveColour;
		this.ModelOrDraughting = ModelOrDraughting;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let CurveFont = tape[ptr++];
		let CurveWidth = tape[ptr++];
		let CurveColour = tape[ptr++];
		let ModelOrDraughting = tape[ptr++];
		return new IfcCurveStyle(expressID, type, Name, CurveFont, CurveWidth, CurveColour, ModelOrDraughting);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.CurveFont);
		args.push(this.CurveWidth);
		args.push(this.CurveColour);
		args.push(this.ModelOrDraughting);
		return args;
	}
};
var IfcCurveStyleFont = class {
	constructor(expressID, type, Name, PatternList) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.PatternList = PatternList;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let PatternList = tape[ptr++];
		return new IfcCurveStyleFont(expressID, type, Name, PatternList);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.PatternList);
		return args;
	}
};
var IfcCurveStyleFontAndScaling = class {
	constructor(expressID, type, Name, CurveFont, CurveFontScaling) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.CurveFont = CurveFont;
		this.CurveFontScaling = CurveFontScaling;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let CurveFont = tape[ptr++];
		let CurveFontScaling = tape[ptr++];
		return new IfcCurveStyleFontAndScaling(expressID, type, Name, CurveFont, CurveFontScaling);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.CurveFont);
		args.push(this.CurveFontScaling);
		return args;
	}
};
var IfcCurveStyleFontPattern = class {
	constructor(expressID, type, VisibleSegmentLength, InvisibleSegmentLength) {
		this.expressID = expressID;
		this.type = type;
		this.VisibleSegmentLength = VisibleSegmentLength;
		this.InvisibleSegmentLength = InvisibleSegmentLength;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let VisibleSegmentLength = tape[ptr++];
		let InvisibleSegmentLength = tape[ptr++];
		return new IfcCurveStyleFontPattern(expressID, type, VisibleSegmentLength, InvisibleSegmentLength);
	}
	ToTape() {
		let args = [];
		args.push(this.VisibleSegmentLength);
		args.push(this.InvisibleSegmentLength);
		return args;
	}
};
var IfcCylindricalSurface = class {
	constructor(expressID, type, Position, Radius) {
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
		this.Radius = Radius;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Position = tape[ptr++];
		let Radius = tape[ptr++];
		return new IfcCylindricalSurface(expressID, type, Position, Radius);
	}
	ToTape() {
		let args = [];
		args.push(this.Position);
		args.push(this.Radius);
		return args;
	}
};
var IfcDamper = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcDamper(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcDamperType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcDamperType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcDeepFoundation = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcDeepFoundation(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcDeepFoundationType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcDeepFoundationType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcDerivedProfileDef = class {
	constructor(expressID, type, ProfileType, ProfileName, ParentProfile, Operator, Label) {
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.ParentProfile = ParentProfile;
		this.Operator = Operator;
		this.Label = Label;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ProfileType = tape[ptr++];
		let ProfileName = tape[ptr++];
		let ParentProfile = tape[ptr++];
		let Operator = tape[ptr++];
		let Label = tape[ptr++];
		return new IfcDerivedProfileDef(expressID, type, ProfileType, ProfileName, ParentProfile, Operator, Label);
	}
	ToTape() {
		let args = [];
		args.push(this.ProfileType);
		args.push(this.ProfileName);
		args.push(this.ParentProfile);
		args.push(this.Operator);
		args.push(this.Label);
		return args;
	}
};
var IfcDerivedUnit = class {
	constructor(expressID, type, Elements, UnitType, UserDefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.Elements = Elements;
		this.UnitType = UnitType;
		this.UserDefinedType = UserDefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Elements = tape[ptr++];
		let UnitType = tape[ptr++];
		let UserDefinedType = tape[ptr++];
		return new IfcDerivedUnit(expressID, type, Elements, UnitType, UserDefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.Elements);
		args.push(this.UnitType);
		args.push(this.UserDefinedType);
		return args;
	}
};
var IfcDerivedUnitElement = class {
	constructor(expressID, type, Unit, Exponent) {
		this.expressID = expressID;
		this.type = type;
		this.Unit = Unit;
		this.Exponent = Exponent;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Unit = tape[ptr++];
		let Exponent = tape[ptr++];
		return new IfcDerivedUnitElement(expressID, type, Unit, Exponent);
	}
	ToTape() {
		let args = [];
		args.push(this.Unit);
		args.push(this.Exponent);
		return args;
	}
};
var IfcDimensionalExponents = class {
	constructor(expressID, type, LengthExponent, MassExponent, TimeExponent, ElectricCurrentExponent, ThermodynamicTemperatureExponent, AmountOfSubstanceExponent, LuminousIntensityExponent) {
		this.expressID = expressID;
		this.type = type;
		this.LengthExponent = LengthExponent;
		this.MassExponent = MassExponent;
		this.TimeExponent = TimeExponent;
		this.ElectricCurrentExponent = ElectricCurrentExponent;
		this.ThermodynamicTemperatureExponent = ThermodynamicTemperatureExponent;
		this.AmountOfSubstanceExponent = AmountOfSubstanceExponent;
		this.LuminousIntensityExponent = LuminousIntensityExponent;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let LengthExponent = tape[ptr++];
		let MassExponent = tape[ptr++];
		let TimeExponent = tape[ptr++];
		let ElectricCurrentExponent = tape[ptr++];
		let ThermodynamicTemperatureExponent = tape[ptr++];
		let AmountOfSubstanceExponent = tape[ptr++];
		let LuminousIntensityExponent = tape[ptr++];
		return new IfcDimensionalExponents(expressID, type, LengthExponent, MassExponent, TimeExponent, ElectricCurrentExponent, ThermodynamicTemperatureExponent, AmountOfSubstanceExponent, LuminousIntensityExponent);
	}
	ToTape() {
		let args = [];
		args.push(this.LengthExponent);
		args.push(this.MassExponent);
		args.push(this.TimeExponent);
		args.push(this.ElectricCurrentExponent);
		args.push(this.ThermodynamicTemperatureExponent);
		args.push(this.AmountOfSubstanceExponent);
		args.push(this.LuminousIntensityExponent);
		return args;
	}
};
var IfcDirection = class {
	constructor(expressID, type, DirectionRatios) {
		this.expressID = expressID;
		this.type = type;
		this.DirectionRatios = DirectionRatios;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let DirectionRatios = tape[ptr++];
		return new IfcDirection(expressID, type, DirectionRatios);
	}
	ToTape() {
		let args = [];
		args.push(this.DirectionRatios);
		return args;
	}
};
var IfcDiscreteAccessory = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcDiscreteAccessory(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcDiscreteAccessoryType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcDiscreteAccessoryType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcDistanceExpression = class {
	constructor(expressID, type, DistanceAlong, OffsetLateral, OffsetVertical, OffsetLongitudinal, AlongHorizontal) {
		this.expressID = expressID;
		this.type = type;
		this.DistanceAlong = DistanceAlong;
		this.OffsetLateral = OffsetLateral;
		this.OffsetVertical = OffsetVertical;
		this.OffsetLongitudinal = OffsetLongitudinal;
		this.AlongHorizontal = AlongHorizontal;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let DistanceAlong = tape[ptr++];
		let OffsetLateral = tape[ptr++];
		let OffsetVertical = tape[ptr++];
		let OffsetLongitudinal = tape[ptr++];
		let AlongHorizontal = tape[ptr++];
		return new IfcDistanceExpression(expressID, type, DistanceAlong, OffsetLateral, OffsetVertical, OffsetLongitudinal, AlongHorizontal);
	}
	ToTape() {
		let args = [];
		args.push(this.DistanceAlong);
		args.push(this.OffsetLateral);
		args.push(this.OffsetVertical);
		args.push(this.OffsetLongitudinal);
		args.push(this.AlongHorizontal);
		return args;
	}
};
var IfcDistributionChamberElement = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcDistributionChamberElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcDistributionChamberElementType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcDistributionChamberElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcDistributionCircuit = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.LongName = LongName;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let LongName = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcDistributionCircuit(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.LongName);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcDistributionControlElement = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcDistributionControlElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcDistributionControlElementType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcDistributionControlElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcDistributionElement = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcDistributionElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcDistributionElementType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcDistributionElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcDistributionFlowElement = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcDistributionFlowElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcDistributionFlowElementType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcDistributionFlowElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcDistributionPort = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, FlowDirection, PredefinedType, SystemType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.FlowDirection = FlowDirection;
		this.PredefinedType = PredefinedType;
		this.SystemType = SystemType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let FlowDirection = tape[ptr++];
		let PredefinedType = tape[ptr++];
		let SystemType = tape[ptr++];
		return new IfcDistributionPort(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, FlowDirection, PredefinedType, SystemType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.FlowDirection);
		args.push(this.PredefinedType);
		args.push(this.SystemType);
		return args;
	}
};
var IfcDistributionSystem = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.LongName = LongName;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let LongName = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcDistributionSystem(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.LongName);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcDocumentInformation = class {
	constructor(expressID, type, Identification, Name, Description, Location, Purpose, IntendedUse, Scope, Revision, DocumentOwner, Editors, CreationTime, LastRevisionTime, ElectronicFormat, ValidFrom, ValidUntil, Confidentiality, Status) {
		this.expressID = expressID;
		this.type = type;
		this.Identification = Identification;
		this.Name = Name;
		this.Description = Description;
		this.Location = Location;
		this.Purpose = Purpose;
		this.IntendedUse = IntendedUse;
		this.Scope = Scope;
		this.Revision = Revision;
		this.DocumentOwner = DocumentOwner;
		this.Editors = Editors;
		this.CreationTime = CreationTime;
		this.LastRevisionTime = LastRevisionTime;
		this.ElectronicFormat = ElectronicFormat;
		this.ValidFrom = ValidFrom;
		this.ValidUntil = ValidUntil;
		this.Confidentiality = Confidentiality;
		this.Status = Status;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Identification = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let Location = tape[ptr++];
		let Purpose = tape[ptr++];
		let IntendedUse = tape[ptr++];
		let Scope = tape[ptr++];
		let Revision = tape[ptr++];
		let DocumentOwner = tape[ptr++];
		let Editors = tape[ptr++];
		let CreationTime = tape[ptr++];
		let LastRevisionTime = tape[ptr++];
		let ElectronicFormat = tape[ptr++];
		let ValidFrom = tape[ptr++];
		let ValidUntil = tape[ptr++];
		let Confidentiality = tape[ptr++];
		let Status = tape[ptr++];
		return new IfcDocumentInformation(expressID, type, Identification, Name, Description, Location, Purpose, IntendedUse, Scope, Revision, DocumentOwner, Editors, CreationTime, LastRevisionTime, ElectronicFormat, ValidFrom, ValidUntil, Confidentiality, Status);
	}
	ToTape() {
		let args = [];
		args.push(this.Identification);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.Location);
		args.push(this.Purpose);
		args.push(this.IntendedUse);
		args.push(this.Scope);
		args.push(this.Revision);
		args.push(this.DocumentOwner);
		args.push(this.Editors);
		args.push(this.CreationTime);
		args.push(this.LastRevisionTime);
		args.push(this.ElectronicFormat);
		args.push(this.ValidFrom);
		args.push(this.ValidUntil);
		args.push(this.Confidentiality);
		args.push(this.Status);
		return args;
	}
};
var IfcDocumentInformationRelationship = class {
	constructor(expressID, type, Name, Description, RelatingDocument, RelatedDocuments, RelationshipType) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.RelatingDocument = RelatingDocument;
		this.RelatedDocuments = RelatedDocuments;
		this.RelationshipType = RelationshipType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let RelatingDocument = tape[ptr++];
		let RelatedDocuments = tape[ptr++];
		let RelationshipType = tape[ptr++];
		return new IfcDocumentInformationRelationship(expressID, type, Name, Description, RelatingDocument, RelatedDocuments, RelationshipType);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.RelatingDocument);
		args.push(this.RelatedDocuments);
		args.push(this.RelationshipType);
		return args;
	}
};
var IfcDocumentReference = class {
	constructor(expressID, type, Location, Identification, Name, Description, ReferencedDocument) {
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
		this.Description = Description;
		this.ReferencedDocument = ReferencedDocument;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Location = tape[ptr++];
		let Identification = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ReferencedDocument = tape[ptr++];
		return new IfcDocumentReference(expressID, type, Location, Identification, Name, Description, ReferencedDocument);
	}
	ToTape() {
		let args = [];
		args.push(this.Location);
		args.push(this.Identification);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ReferencedDocument);
		return args;
	}
};
var IfcDoor = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, OverallHeight, OverallWidth, PredefinedType, OperationType, UserDefinedOperationType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.OverallHeight = OverallHeight;
		this.OverallWidth = OverallWidth;
		this.PredefinedType = PredefinedType;
		this.OperationType = OperationType;
		this.UserDefinedOperationType = UserDefinedOperationType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let OverallHeight = tape[ptr++];
		let OverallWidth = tape[ptr++];
		let PredefinedType = tape[ptr++];
		let OperationType = tape[ptr++];
		let UserDefinedOperationType = tape[ptr++];
		return new IfcDoor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, OverallHeight, OverallWidth, PredefinedType, OperationType, UserDefinedOperationType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.OverallHeight);
		args.push(this.OverallWidth);
		args.push(this.PredefinedType);
		args.push(this.OperationType);
		args.push(this.UserDefinedOperationType);
		return args;
	}
};
var IfcDoorLiningProperties = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, LiningDepth, LiningThickness, ThresholdDepth, ThresholdThickness, TransomThickness, TransomOffset, LiningOffset, ThresholdOffset, CasingThickness, CasingDepth, ShapeAspectStyle, LiningToPanelOffsetX, LiningToPanelOffsetY) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.LiningDepth = LiningDepth;
		this.LiningThickness = LiningThickness;
		this.ThresholdDepth = ThresholdDepth;
		this.ThresholdThickness = ThresholdThickness;
		this.TransomThickness = TransomThickness;
		this.TransomOffset = TransomOffset;
		this.LiningOffset = LiningOffset;
		this.ThresholdOffset = ThresholdOffset;
		this.CasingThickness = CasingThickness;
		this.CasingDepth = CasingDepth;
		this.ShapeAspectStyle = ShapeAspectStyle;
		this.LiningToPanelOffsetX = LiningToPanelOffsetX;
		this.LiningToPanelOffsetY = LiningToPanelOffsetY;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let LiningDepth = tape[ptr++];
		let LiningThickness = tape[ptr++];
		let ThresholdDepth = tape[ptr++];
		let ThresholdThickness = tape[ptr++];
		let TransomThickness = tape[ptr++];
		let TransomOffset = tape[ptr++];
		let LiningOffset = tape[ptr++];
		let ThresholdOffset = tape[ptr++];
		let CasingThickness = tape[ptr++];
		let CasingDepth = tape[ptr++];
		let ShapeAspectStyle = tape[ptr++];
		let LiningToPanelOffsetX = tape[ptr++];
		let LiningToPanelOffsetY = tape[ptr++];
		return new IfcDoorLiningProperties(expressID, type, GlobalId, OwnerHistory, Name, Description, LiningDepth, LiningThickness, ThresholdDepth, ThresholdThickness, TransomThickness, TransomOffset, LiningOffset, ThresholdOffset, CasingThickness, CasingDepth, ShapeAspectStyle, LiningToPanelOffsetX, LiningToPanelOffsetY);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.LiningDepth);
		args.push(this.LiningThickness);
		args.push(this.ThresholdDepth);
		args.push(this.ThresholdThickness);
		args.push(this.TransomThickness);
		args.push(this.TransomOffset);
		args.push(this.LiningOffset);
		args.push(this.ThresholdOffset);
		args.push(this.CasingThickness);
		args.push(this.CasingDepth);
		args.push(this.ShapeAspectStyle);
		args.push(this.LiningToPanelOffsetX);
		args.push(this.LiningToPanelOffsetY);
		return args;
	}
};
var IfcDoorPanelProperties = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, PanelDepth, PanelOperation, PanelWidth, PanelPosition, ShapeAspectStyle) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.PanelDepth = PanelDepth;
		this.PanelOperation = PanelOperation;
		this.PanelWidth = PanelWidth;
		this.PanelPosition = PanelPosition;
		this.ShapeAspectStyle = ShapeAspectStyle;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let PanelDepth = tape[ptr++];
		let PanelOperation = tape[ptr++];
		let PanelWidth = tape[ptr++];
		let PanelPosition = tape[ptr++];
		let ShapeAspectStyle = tape[ptr++];
		return new IfcDoorPanelProperties(expressID, type, GlobalId, OwnerHistory, Name, Description, PanelDepth, PanelOperation, PanelWidth, PanelPosition, ShapeAspectStyle);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.PanelDepth);
		args.push(this.PanelOperation);
		args.push(this.PanelWidth);
		args.push(this.PanelPosition);
		args.push(this.ShapeAspectStyle);
		return args;
	}
};
var IfcDoorStandardCase = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, OverallHeight, OverallWidth, PredefinedType, OperationType, UserDefinedOperationType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.OverallHeight = OverallHeight;
		this.OverallWidth = OverallWidth;
		this.PredefinedType = PredefinedType;
		this.OperationType = OperationType;
		this.UserDefinedOperationType = UserDefinedOperationType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let OverallHeight = tape[ptr++];
		let OverallWidth = tape[ptr++];
		let PredefinedType = tape[ptr++];
		let OperationType = tape[ptr++];
		let UserDefinedOperationType = tape[ptr++];
		return new IfcDoorStandardCase(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, OverallHeight, OverallWidth, PredefinedType, OperationType, UserDefinedOperationType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.OverallHeight);
		args.push(this.OverallWidth);
		args.push(this.PredefinedType);
		args.push(this.OperationType);
		args.push(this.UserDefinedOperationType);
		return args;
	}
};
var IfcDoorStyle = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, OperationType, ConstructionType, ParameterTakesPrecedence, Sizeable) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.OperationType = OperationType;
		this.ConstructionType = ConstructionType;
		this.ParameterTakesPrecedence = ParameterTakesPrecedence;
		this.Sizeable = Sizeable;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let OperationType = tape[ptr++];
		let ConstructionType = tape[ptr++];
		let ParameterTakesPrecedence = tape[ptr++];
		let Sizeable = tape[ptr++];
		return new IfcDoorStyle(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, OperationType, ConstructionType, ParameterTakesPrecedence, Sizeable);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.OperationType);
		args.push(this.ConstructionType);
		args.push(this.ParameterTakesPrecedence);
		args.push(this.Sizeable);
		return args;
	}
};
var IfcDoorType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType, OperationType, ParameterTakesPrecedence, UserDefinedOperationType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.OperationType = OperationType;
		this.ParameterTakesPrecedence = ParameterTakesPrecedence;
		this.UserDefinedOperationType = UserDefinedOperationType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		let OperationType = tape[ptr++];
		let ParameterTakesPrecedence = tape[ptr++];
		let UserDefinedOperationType = tape[ptr++];
		return new IfcDoorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType, OperationType, ParameterTakesPrecedence, UserDefinedOperationType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		args.push(this.OperationType);
		args.push(this.ParameterTakesPrecedence);
		args.push(this.UserDefinedOperationType);
		return args;
	}
};
var IfcDraughtingPreDefinedColour = class {
	constructor(expressID, type, Name) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		return new IfcDraughtingPreDefinedColour(expressID, type, Name);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		return args;
	}
};
var IfcDraughtingPreDefinedCurveFont = class {
	constructor(expressID, type, Name) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		return new IfcDraughtingPreDefinedCurveFont(expressID, type, Name);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		return args;
	}
};
var IfcDuctFitting = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcDuctFitting(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcDuctFittingType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcDuctFittingType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcDuctSegment = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcDuctSegment(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcDuctSegmentType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcDuctSegmentType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcDuctSilencer = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcDuctSilencer(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcDuctSilencerType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcDuctSilencerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcEdge = class {
	constructor(expressID, type, EdgeStart, EdgeEnd) {
		this.expressID = expressID;
		this.type = type;
		this.EdgeStart = EdgeStart;
		this.EdgeEnd = EdgeEnd;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let EdgeStart = tape[ptr++];
		let EdgeEnd = tape[ptr++];
		return new IfcEdge(expressID, type, EdgeStart, EdgeEnd);
	}
	ToTape() {
		let args = [];
		args.push(this.EdgeStart);
		args.push(this.EdgeEnd);
		return args;
	}
};
var IfcEdgeCurve = class {
	constructor(expressID, type, EdgeStart, EdgeEnd, EdgeGeometry, SameSense) {
		this.expressID = expressID;
		this.type = type;
		this.EdgeStart = EdgeStart;
		this.EdgeEnd = EdgeEnd;
		this.EdgeGeometry = EdgeGeometry;
		this.SameSense = SameSense;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let EdgeStart = tape[ptr++];
		let EdgeEnd = tape[ptr++];
		let EdgeGeometry = tape[ptr++];
		let SameSense = tape[ptr++];
		return new IfcEdgeCurve(expressID, type, EdgeStart, EdgeEnd, EdgeGeometry, SameSense);
	}
	ToTape() {
		let args = [];
		args.push(this.EdgeStart);
		args.push(this.EdgeEnd);
		args.push(this.EdgeGeometry);
		args.push(this.SameSense);
		return args;
	}
};
var IfcEdgeLoop = class {
	constructor(expressID, type, EdgeList) {
		this.expressID = expressID;
		this.type = type;
		this.EdgeList = EdgeList;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let EdgeList = tape[ptr++];
		return new IfcEdgeLoop(expressID, type, EdgeList);
	}
	ToTape() {
		let args = [];
		args.push(this.EdgeList);
		return args;
	}
};
var IfcElectricAppliance = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcElectricAppliance(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcElectricApplianceType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcElectricApplianceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcElectricDistributionBoard = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcElectricDistributionBoard(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcElectricDistributionBoardType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcElectricDistributionBoardType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcElectricFlowStorageDevice = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcElectricFlowStorageDevice(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcElectricFlowStorageDeviceType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcElectricFlowStorageDeviceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcElectricGenerator = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcElectricGenerator(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcElectricGeneratorType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcElectricGeneratorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcElectricMotor = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcElectricMotor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcElectricMotorType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcElectricMotorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcElectricTimeControl = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcElectricTimeControl(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcElectricTimeControlType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcElectricTimeControlType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcElement = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcElementAssembly = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, AssemblyPlace, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.AssemblyPlace = AssemblyPlace;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let AssemblyPlace = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcElementAssembly(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, AssemblyPlace, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.AssemblyPlace);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcElementAssemblyType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcElementAssemblyType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcElementComponent = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcElementComponent(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcElementComponentType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcElementComponentType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcElementQuantity = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, MethodOfMeasurement, Quantities) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.MethodOfMeasurement = MethodOfMeasurement;
		this.Quantities = Quantities;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let MethodOfMeasurement = tape[ptr++];
		let Quantities = tape[ptr++];
		return new IfcElementQuantity(expressID, type, GlobalId, OwnerHistory, Name, Description, MethodOfMeasurement, Quantities);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.MethodOfMeasurement);
		args.push(this.Quantities);
		return args;
	}
};
var IfcElementType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcElementarySurface = class {
	constructor(expressID, type, Position) {
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Position = tape[ptr++];
		return new IfcElementarySurface(expressID, type, Position);
	}
	ToTape() {
		let args = [];
		args.push(this.Position);
		return args;
	}
};
var IfcEllipse = class {
	constructor(expressID, type, Position, SemiAxis1, SemiAxis2) {
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
		this.SemiAxis1 = SemiAxis1;
		this.SemiAxis2 = SemiAxis2;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Position = tape[ptr++];
		let SemiAxis1 = tape[ptr++];
		let SemiAxis2 = tape[ptr++];
		return new IfcEllipse(expressID, type, Position, SemiAxis1, SemiAxis2);
	}
	ToTape() {
		let args = [];
		args.push(this.Position);
		args.push(this.SemiAxis1);
		args.push(this.SemiAxis2);
		return args;
	}
};
var IfcEllipseProfileDef = class {
	constructor(expressID, type, ProfileType, ProfileName, Position, SemiAxis1, SemiAxis2) {
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.SemiAxis1 = SemiAxis1;
		this.SemiAxis2 = SemiAxis2;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ProfileType = tape[ptr++];
		let ProfileName = tape[ptr++];
		let Position = tape[ptr++];
		let SemiAxis1 = tape[ptr++];
		let SemiAxis2 = tape[ptr++];
		return new IfcEllipseProfileDef(expressID, type, ProfileType, ProfileName, Position, SemiAxis1, SemiAxis2);
	}
	ToTape() {
		let args = [];
		args.push(this.ProfileType);
		args.push(this.ProfileName);
		args.push(this.Position);
		args.push(this.SemiAxis1);
		args.push(this.SemiAxis2);
		return args;
	}
};
var IfcEnergyConversionDevice = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcEnergyConversionDevice(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcEnergyConversionDeviceType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcEnergyConversionDeviceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcEngine = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcEngine(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcEngineType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcEngineType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcEvaporativeCooler = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcEvaporativeCooler(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcEvaporativeCoolerType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcEvaporativeCoolerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcEvaporator = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcEvaporator(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcEvaporatorType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcEvaporatorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcEvent = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, PredefinedType, EventTriggerType, UserDefinedEventTriggerType, EventOccurenceTime) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.PredefinedType = PredefinedType;
		this.EventTriggerType = EventTriggerType;
		this.UserDefinedEventTriggerType = UserDefinedEventTriggerType;
		this.EventOccurenceTime = EventOccurenceTime;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let Identification = tape[ptr++];
		let LongDescription = tape[ptr++];
		let PredefinedType = tape[ptr++];
		let EventTriggerType = tape[ptr++];
		let UserDefinedEventTriggerType = tape[ptr++];
		let EventOccurenceTime = tape[ptr++];
		return new IfcEvent(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, PredefinedType, EventTriggerType, UserDefinedEventTriggerType, EventOccurenceTime);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.Identification);
		args.push(this.LongDescription);
		args.push(this.PredefinedType);
		args.push(this.EventTriggerType);
		args.push(this.UserDefinedEventTriggerType);
		args.push(this.EventOccurenceTime);
		return args;
	}
};
var IfcEventTime = class {
	constructor(expressID, type, Name, DataOrigin, UserDefinedDataOrigin, ActualDate, EarlyDate, LateDate, ScheduleDate) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.ActualDate = ActualDate;
		this.EarlyDate = EarlyDate;
		this.LateDate = LateDate;
		this.ScheduleDate = ScheduleDate;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let DataOrigin = tape[ptr++];
		let UserDefinedDataOrigin = tape[ptr++];
		let ActualDate = tape[ptr++];
		let EarlyDate = tape[ptr++];
		let LateDate = tape[ptr++];
		let ScheduleDate = tape[ptr++];
		return new IfcEventTime(expressID, type, Name, DataOrigin, UserDefinedDataOrigin, ActualDate, EarlyDate, LateDate, ScheduleDate);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.DataOrigin);
		args.push(this.UserDefinedDataOrigin);
		args.push(this.ActualDate);
		args.push(this.EarlyDate);
		args.push(this.LateDate);
		args.push(this.ScheduleDate);
		return args;
	}
};
var IfcEventType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ProcessType, PredefinedType, EventTriggerType, UserDefinedEventTriggerType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ProcessType = ProcessType;
		this.PredefinedType = PredefinedType;
		this.EventTriggerType = EventTriggerType;
		this.UserDefinedEventTriggerType = UserDefinedEventTriggerType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let Identification = tape[ptr++];
		let LongDescription = tape[ptr++];
		let ProcessType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		let EventTriggerType = tape[ptr++];
		let UserDefinedEventTriggerType = tape[ptr++];
		return new IfcEventType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ProcessType, PredefinedType, EventTriggerType, UserDefinedEventTriggerType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.Identification);
		args.push(this.LongDescription);
		args.push(this.ProcessType);
		args.push(this.PredefinedType);
		args.push(this.EventTriggerType);
		args.push(this.UserDefinedEventTriggerType);
		return args;
	}
};
var IfcExtendedProperties = class {
	constructor(expressID, type, Name, Description, Properties2) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Properties = Properties2;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let Properties2 = tape[ptr++];
		return new IfcExtendedProperties(expressID, type, Name, Description, Properties2);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.Properties);
		return args;
	}
};
var IfcExternalInformation = class {
	constructor(expressID, type) {
		this.expressID = expressID;
		this.type = type;
	}
	static FromTape(expressID, type, tape) {
		return new IfcExternalInformation(expressID, type);
	}
	ToTape() {
		let args = [];
		return args;
	}
};
var IfcExternalReference = class {
	constructor(expressID, type, Location, Identification, Name) {
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Location = tape[ptr++];
		let Identification = tape[ptr++];
		let Name = tape[ptr++];
		return new IfcExternalReference(expressID, type, Location, Identification, Name);
	}
	ToTape() {
		let args = [];
		args.push(this.Location);
		args.push(this.Identification);
		args.push(this.Name);
		return args;
	}
};
var IfcExternalReferenceRelationship = class {
	constructor(expressID, type, Name, Description, RelatingReference, RelatedResourceObjects) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.RelatingReference = RelatingReference;
		this.RelatedResourceObjects = RelatedResourceObjects;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let RelatingReference = tape[ptr++];
		let RelatedResourceObjects = tape[ptr++];
		return new IfcExternalReferenceRelationship(expressID, type, Name, Description, RelatingReference, RelatedResourceObjects);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.RelatingReference);
		args.push(this.RelatedResourceObjects);
		return args;
	}
};
var IfcExternalSpatialElement = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let LongName = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcExternalSpatialElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.LongName);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcExternalSpatialStructureElement = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let LongName = tape[ptr++];
		return new IfcExternalSpatialStructureElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.LongName);
		return args;
	}
};
var IfcExternallyDefinedHatchStyle = class {
	constructor(expressID, type, Location, Identification, Name) {
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Location = tape[ptr++];
		let Identification = tape[ptr++];
		let Name = tape[ptr++];
		return new IfcExternallyDefinedHatchStyle(expressID, type, Location, Identification, Name);
	}
	ToTape() {
		let args = [];
		args.push(this.Location);
		args.push(this.Identification);
		args.push(this.Name);
		return args;
	}
};
var IfcExternallyDefinedSurfaceStyle = class {
	constructor(expressID, type, Location, Identification, Name) {
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Location = tape[ptr++];
		let Identification = tape[ptr++];
		let Name = tape[ptr++];
		return new IfcExternallyDefinedSurfaceStyle(expressID, type, Location, Identification, Name);
	}
	ToTape() {
		let args = [];
		args.push(this.Location);
		args.push(this.Identification);
		args.push(this.Name);
		return args;
	}
};
var IfcExternallyDefinedTextFont = class {
	constructor(expressID, type, Location, Identification, Name) {
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Location = tape[ptr++];
		let Identification = tape[ptr++];
		let Name = tape[ptr++];
		return new IfcExternallyDefinedTextFont(expressID, type, Location, Identification, Name);
	}
	ToTape() {
		let args = [];
		args.push(this.Location);
		args.push(this.Identification);
		args.push(this.Name);
		return args;
	}
};
var IfcExtrudedAreaSolid = class {
	constructor(expressID, type, SweptArea, Position, ExtrudedDirection, Depth) {
		this.expressID = expressID;
		this.type = type;
		this.SweptArea = SweptArea;
		this.Position = Position;
		this.ExtrudedDirection = ExtrudedDirection;
		this.Depth = Depth;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let SweptArea = tape[ptr++];
		let Position = tape[ptr++];
		let ExtrudedDirection = tape[ptr++];
		let Depth = tape[ptr++];
		return new IfcExtrudedAreaSolid(expressID, type, SweptArea, Position, ExtrudedDirection, Depth);
	}
	ToTape() {
		let args = [];
		args.push(this.SweptArea);
		args.push(this.Position);
		args.push(this.ExtrudedDirection);
		args.push(this.Depth);
		return args;
	}
};
var IfcExtrudedAreaSolidTapered = class {
	constructor(expressID, type, SweptArea, Position, ExtrudedDirection, Depth, EndSweptArea) {
		this.expressID = expressID;
		this.type = type;
		this.SweptArea = SweptArea;
		this.Position = Position;
		this.ExtrudedDirection = ExtrudedDirection;
		this.Depth = Depth;
		this.EndSweptArea = EndSweptArea;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let SweptArea = tape[ptr++];
		let Position = tape[ptr++];
		let ExtrudedDirection = tape[ptr++];
		let Depth = tape[ptr++];
		let EndSweptArea = tape[ptr++];
		return new IfcExtrudedAreaSolidTapered(expressID, type, SweptArea, Position, ExtrudedDirection, Depth, EndSweptArea);
	}
	ToTape() {
		let args = [];
		args.push(this.SweptArea);
		args.push(this.Position);
		args.push(this.ExtrudedDirection);
		args.push(this.Depth);
		args.push(this.EndSweptArea);
		return args;
	}
};
var IfcFace = class {
	constructor(expressID, type, Bounds) {
		this.expressID = expressID;
		this.type = type;
		this.Bounds = Bounds;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Bounds = tape[ptr++];
		return new IfcFace(expressID, type, Bounds);
	}
	ToTape() {
		let args = [];
		args.push(this.Bounds);
		return args;
	}
};
var IfcFaceBasedSurfaceModel = class {
	constructor(expressID, type, FbsmFaces) {
		this.expressID = expressID;
		this.type = type;
		this.FbsmFaces = FbsmFaces;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let FbsmFaces = tape[ptr++];
		return new IfcFaceBasedSurfaceModel(expressID, type, FbsmFaces);
	}
	ToTape() {
		let args = [];
		args.push(this.FbsmFaces);
		return args;
	}
};
var IfcFaceBound = class {
	constructor(expressID, type, Bound, Orientation) {
		this.expressID = expressID;
		this.type = type;
		this.Bound = Bound;
		this.Orientation = Orientation;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Bound = tape[ptr++];
		let Orientation = tape[ptr++];
		return new IfcFaceBound(expressID, type, Bound, Orientation);
	}
	ToTape() {
		let args = [];
		args.push(this.Bound);
		args.push(this.Orientation);
		return args;
	}
};
var IfcFaceOuterBound = class {
	constructor(expressID, type, Bound, Orientation) {
		this.expressID = expressID;
		this.type = type;
		this.Bound = Bound;
		this.Orientation = Orientation;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Bound = tape[ptr++];
		let Orientation = tape[ptr++];
		return new IfcFaceOuterBound(expressID, type, Bound, Orientation);
	}
	ToTape() {
		let args = [];
		args.push(this.Bound);
		args.push(this.Orientation);
		return args;
	}
};
var IfcFaceSurface = class {
	constructor(expressID, type, Bounds, FaceSurface, SameSense) {
		this.expressID = expressID;
		this.type = type;
		this.Bounds = Bounds;
		this.FaceSurface = FaceSurface;
		this.SameSense = SameSense;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Bounds = tape[ptr++];
		let FaceSurface = tape[ptr++];
		let SameSense = tape[ptr++];
		return new IfcFaceSurface(expressID, type, Bounds, FaceSurface, SameSense);
	}
	ToTape() {
		let args = [];
		args.push(this.Bounds);
		args.push(this.FaceSurface);
		args.push(this.SameSense);
		return args;
	}
};
var IfcFacetedBrep = class {
	constructor(expressID, type, Outer) {
		this.expressID = expressID;
		this.type = type;
		this.Outer = Outer;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Outer = tape[ptr++];
		return new IfcFacetedBrep(expressID, type, Outer);
	}
	ToTape() {
		let args = [];
		args.push(this.Outer);
		return args;
	}
};
var IfcFacetedBrepWithVoids = class {
	constructor(expressID, type, Outer, Voids) {
		this.expressID = expressID;
		this.type = type;
		this.Outer = Outer;
		this.Voids = Voids;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Outer = tape[ptr++];
		let Voids = tape[ptr++];
		return new IfcFacetedBrepWithVoids(expressID, type, Outer, Voids);
	}
	ToTape() {
		let args = [];
		args.push(this.Outer);
		args.push(this.Voids);
		return args;
	}
};
var IfcFacility = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let LongName = tape[ptr++];
		let CompositionType = tape[ptr++];
		return new IfcFacility(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.LongName);
		args.push(this.CompositionType);
		return args;
	}
};
var IfcFacilityPart = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let LongName = tape[ptr++];
		let CompositionType = tape[ptr++];
		return new IfcFacilityPart(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.LongName);
		args.push(this.CompositionType);
		return args;
	}
};
var IfcFailureConnectionCondition = class {
	constructor(expressID, type, Name, TensionFailureX, TensionFailureY, TensionFailureZ, CompressionFailureX, CompressionFailureY, CompressionFailureZ) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.TensionFailureX = TensionFailureX;
		this.TensionFailureY = TensionFailureY;
		this.TensionFailureZ = TensionFailureZ;
		this.CompressionFailureX = CompressionFailureX;
		this.CompressionFailureY = CompressionFailureY;
		this.CompressionFailureZ = CompressionFailureZ;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let TensionFailureX = tape[ptr++];
		let TensionFailureY = tape[ptr++];
		let TensionFailureZ = tape[ptr++];
		let CompressionFailureX = tape[ptr++];
		let CompressionFailureY = tape[ptr++];
		let CompressionFailureZ = tape[ptr++];
		return new IfcFailureConnectionCondition(expressID, type, Name, TensionFailureX, TensionFailureY, TensionFailureZ, CompressionFailureX, CompressionFailureY, CompressionFailureZ);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.TensionFailureX);
		args.push(this.TensionFailureY);
		args.push(this.TensionFailureZ);
		args.push(this.CompressionFailureX);
		args.push(this.CompressionFailureY);
		args.push(this.CompressionFailureZ);
		return args;
	}
};
var IfcFan = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcFan(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcFanType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcFanType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcFastener = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcFastener(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcFastenerType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcFastenerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcFeatureElement = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcFeatureElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcFeatureElementAddition = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcFeatureElementAddition(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcFeatureElementSubtraction = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcFeatureElementSubtraction(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcFillAreaStyle = class {
	constructor(expressID, type, Name, FillStyles, ModelorDraughting) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.FillStyles = FillStyles;
		this.ModelorDraughting = ModelorDraughting;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let FillStyles = tape[ptr++];
		let ModelorDraughting = tape[ptr++];
		return new IfcFillAreaStyle(expressID, type, Name, FillStyles, ModelorDraughting);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.FillStyles);
		args.push(this.ModelorDraughting);
		return args;
	}
};
var IfcFillAreaStyleHatching = class {
	constructor(expressID, type, HatchLineAppearance, StartOfNextHatchLine, PointOfReferenceHatchLine, PatternStart, HatchLineAngle) {
		this.expressID = expressID;
		this.type = type;
		this.HatchLineAppearance = HatchLineAppearance;
		this.StartOfNextHatchLine = StartOfNextHatchLine;
		this.PointOfReferenceHatchLine = PointOfReferenceHatchLine;
		this.PatternStart = PatternStart;
		this.HatchLineAngle = HatchLineAngle;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let HatchLineAppearance = tape[ptr++];
		let StartOfNextHatchLine = tape[ptr++];
		let PointOfReferenceHatchLine = tape[ptr++];
		let PatternStart = tape[ptr++];
		let HatchLineAngle = tape[ptr++];
		return new IfcFillAreaStyleHatching(expressID, type, HatchLineAppearance, StartOfNextHatchLine, PointOfReferenceHatchLine, PatternStart, HatchLineAngle);
	}
	ToTape() {
		let args = [];
		args.push(this.HatchLineAppearance);
		args.push(this.StartOfNextHatchLine);
		args.push(this.PointOfReferenceHatchLine);
		args.push(this.PatternStart);
		args.push(this.HatchLineAngle);
		return args;
	}
};
var IfcFillAreaStyleTiles = class {
	constructor(expressID, type, TilingPattern, Tiles, TilingScale) {
		this.expressID = expressID;
		this.type = type;
		this.TilingPattern = TilingPattern;
		this.Tiles = Tiles;
		this.TilingScale = TilingScale;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let TilingPattern = tape[ptr++];
		let Tiles = tape[ptr++];
		let TilingScale = tape[ptr++];
		return new IfcFillAreaStyleTiles(expressID, type, TilingPattern, Tiles, TilingScale);
	}
	ToTape() {
		let args = [];
		args.push(this.TilingPattern);
		args.push(this.Tiles);
		args.push(this.TilingScale);
		return args;
	}
};
var IfcFilter = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcFilter(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcFilterType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcFilterType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcFireSuppressionTerminal = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcFireSuppressionTerminal(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcFireSuppressionTerminalType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcFireSuppressionTerminalType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcFixedReferenceSweptAreaSolid = class {
	constructor(expressID, type, SweptArea, Position, Directrix, StartParam, EndParam, FixedReference) {
		this.expressID = expressID;
		this.type = type;
		this.SweptArea = SweptArea;
		this.Position = Position;
		this.Directrix = Directrix;
		this.StartParam = StartParam;
		this.EndParam = EndParam;
		this.FixedReference = FixedReference;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let SweptArea = tape[ptr++];
		let Position = tape[ptr++];
		let Directrix = tape[ptr++];
		let StartParam = tape[ptr++];
		let EndParam = tape[ptr++];
		let FixedReference = tape[ptr++];
		return new IfcFixedReferenceSweptAreaSolid(expressID, type, SweptArea, Position, Directrix, StartParam, EndParam, FixedReference);
	}
	ToTape() {
		let args = [];
		args.push(this.SweptArea);
		args.push(this.Position);
		args.push(this.Directrix);
		args.push(this.StartParam);
		args.push(this.EndParam);
		args.push(this.FixedReference);
		return args;
	}
};
var IfcFlowController = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcFlowController(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcFlowControllerType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcFlowControllerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcFlowFitting = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcFlowFitting(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcFlowFittingType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcFlowFittingType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcFlowInstrument = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcFlowInstrument(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcFlowInstrumentType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcFlowInstrumentType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcFlowMeter = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcFlowMeter(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcFlowMeterType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcFlowMeterType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcFlowMovingDevice = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcFlowMovingDevice(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcFlowMovingDeviceType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcFlowMovingDeviceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcFlowSegment = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcFlowSegment(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcFlowSegmentType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcFlowSegmentType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcFlowStorageDevice = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcFlowStorageDevice(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcFlowStorageDeviceType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcFlowStorageDeviceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcFlowTerminal = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcFlowTerminal(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcFlowTerminalType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcFlowTerminalType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcFlowTreatmentDevice = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcFlowTreatmentDevice(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcFlowTreatmentDeviceType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcFlowTreatmentDeviceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcFooting = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcFooting(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcFootingType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcFootingType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcFurnishingElement = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcFurnishingElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		return args;
	}
};
var IfcFurnishingElementType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		return new IfcFurnishingElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		return args;
	}
};
var IfcFurniture = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcFurniture(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcFurnitureType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, AssemblyPlace, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.AssemblyPlace = AssemblyPlace;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let AssemblyPlace = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcFurnitureType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, AssemblyPlace, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.AssemblyPlace);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcGeographicElement = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcGeographicElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcGeographicElementType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcGeographicElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcGeometricCurveSet = class {
	constructor(expressID, type, Elements) {
		this.expressID = expressID;
		this.type = type;
		this.Elements = Elements;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Elements = tape[ptr++];
		return new IfcGeometricCurveSet(expressID, type, Elements);
	}
	ToTape() {
		let args = [];
		args.push(this.Elements);
		return args;
	}
};
var IfcGeometricRepresentationContext = class {
	constructor(expressID, type, ContextIdentifier, ContextType, CoordinateSpaceDimension, Precision, WorldCoordinateSystem, TrueNorth) {
		this.expressID = expressID;
		this.type = type;
		this.ContextIdentifier = ContextIdentifier;
		this.ContextType = ContextType;
		this.CoordinateSpaceDimension = CoordinateSpaceDimension;
		this.Precision = Precision;
		this.WorldCoordinateSystem = WorldCoordinateSystem;
		this.TrueNorth = TrueNorth;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ContextIdentifier = tape[ptr++];
		let ContextType = tape[ptr++];
		let CoordinateSpaceDimension = tape[ptr++];
		let Precision = tape[ptr++];
		let WorldCoordinateSystem = tape[ptr++];
		let TrueNorth = tape[ptr++];
		return new IfcGeometricRepresentationContext(expressID, type, ContextIdentifier, ContextType, CoordinateSpaceDimension, Precision, WorldCoordinateSystem, TrueNorth);
	}
	ToTape() {
		let args = [];
		args.push(this.ContextIdentifier);
		args.push(this.ContextType);
		args.push(this.CoordinateSpaceDimension);
		args.push(this.Precision);
		args.push(this.WorldCoordinateSystem);
		args.push(this.TrueNorth);
		return args;
	}
};
var IfcGeometricRepresentationItem = class {
	constructor(expressID, type) {
		this.expressID = expressID;
		this.type = type;
	}
	static FromTape(expressID, type, tape) {
		return new IfcGeometricRepresentationItem(expressID, type);
	}
	ToTape() {
		let args = [];
		return args;
	}
};
var IfcGeometricRepresentationSubContext = class {
	constructor(expressID, type, ContextIdentifier, ContextType, CoordinateSpaceDimension, Precision, WorldCoordinateSystem, TrueNorth, ParentContext, TargetScale, TargetView, UserDefinedTargetView) {
		this.expressID = expressID;
		this.type = type;
		this.ContextIdentifier = ContextIdentifier;
		this.ContextType = ContextType;
		this.CoordinateSpaceDimension = CoordinateSpaceDimension;
		this.Precision = Precision;
		this.WorldCoordinateSystem = WorldCoordinateSystem;
		this.TrueNorth = TrueNorth;
		this.ParentContext = ParentContext;
		this.TargetScale = TargetScale;
		this.TargetView = TargetView;
		this.UserDefinedTargetView = UserDefinedTargetView;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ContextIdentifier = tape[ptr++];
		let ContextType = tape[ptr++];
		let CoordinateSpaceDimension = tape[ptr++];
		let Precision = tape[ptr++];
		let WorldCoordinateSystem = tape[ptr++];
		let TrueNorth = tape[ptr++];
		let ParentContext = tape[ptr++];
		let TargetScale = tape[ptr++];
		let TargetView = tape[ptr++];
		let UserDefinedTargetView = tape[ptr++];
		return new IfcGeometricRepresentationSubContext(expressID, type, ContextIdentifier, ContextType, CoordinateSpaceDimension, Precision, WorldCoordinateSystem, TrueNorth, ParentContext, TargetScale, TargetView, UserDefinedTargetView);
	}
	ToTape() {
		let args = [];
		args.push(this.ContextIdentifier);
		args.push(this.ContextType);
		args.push(this.CoordinateSpaceDimension);
		args.push(this.Precision);
		args.push(this.WorldCoordinateSystem);
		args.push(this.TrueNorth);
		args.push(this.ParentContext);
		args.push(this.TargetScale);
		args.push(this.TargetView);
		args.push(this.UserDefinedTargetView);
		return args;
	}
};
var IfcGeometricSet = class {
	constructor(expressID, type, Elements) {
		this.expressID = expressID;
		this.type = type;
		this.Elements = Elements;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Elements = tape[ptr++];
		return new IfcGeometricSet(expressID, type, Elements);
	}
	ToTape() {
		let args = [];
		args.push(this.Elements);
		return args;
	}
};
var IfcGrid = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, UAxes, VAxes, WAxes, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.UAxes = UAxes;
		this.VAxes = VAxes;
		this.WAxes = WAxes;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let UAxes = tape[ptr++];
		let VAxes = tape[ptr++];
		let WAxes = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcGrid(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, UAxes, VAxes, WAxes, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.UAxes);
		args.push(this.VAxes);
		args.push(this.WAxes);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcGridAxis = class {
	constructor(expressID, type, AxisTag, AxisCurve, SameSense) {
		this.expressID = expressID;
		this.type = type;
		this.AxisTag = AxisTag;
		this.AxisCurve = AxisCurve;
		this.SameSense = SameSense;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let AxisTag = tape[ptr++];
		let AxisCurve = tape[ptr++];
		let SameSense = tape[ptr++];
		return new IfcGridAxis(expressID, type, AxisTag, AxisCurve, SameSense);
	}
	ToTape() {
		let args = [];
		args.push(this.AxisTag);
		args.push(this.AxisCurve);
		args.push(this.SameSense);
		return args;
	}
};
var IfcGridPlacement = class {
	constructor(expressID, type, PlacementRelTo, PlacementLocation, PlacementRefDirection) {
		this.expressID = expressID;
		this.type = type;
		this.PlacementRelTo = PlacementRelTo;
		this.PlacementLocation = PlacementLocation;
		this.PlacementRefDirection = PlacementRefDirection;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let PlacementRelTo = tape[ptr++];
		let PlacementLocation = tape[ptr++];
		let PlacementRefDirection = tape[ptr++];
		return new IfcGridPlacement(expressID, type, PlacementRelTo, PlacementLocation, PlacementRefDirection);
	}
	ToTape() {
		let args = [];
		args.push(this.PlacementRelTo);
		args.push(this.PlacementLocation);
		args.push(this.PlacementRefDirection);
		return args;
	}
};
var IfcGroup = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		return new IfcGroup(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		return args;
	}
};
var IfcHalfSpaceSolid = class {
	constructor(expressID, type, BaseSurface, AgreementFlag) {
		this.expressID = expressID;
		this.type = type;
		this.BaseSurface = BaseSurface;
		this.AgreementFlag = AgreementFlag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let BaseSurface = tape[ptr++];
		let AgreementFlag = tape[ptr++];
		return new IfcHalfSpaceSolid(expressID, type, BaseSurface, AgreementFlag);
	}
	ToTape() {
		let args = [];
		args.push(this.BaseSurface);
		args.push(this.AgreementFlag);
		return args;
	}
};
var IfcHeatExchanger = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcHeatExchanger(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcHeatExchangerType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcHeatExchangerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcHumidifier = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcHumidifier(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcHumidifierType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcHumidifierType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcIShapeProfileDef = class {
	constructor(expressID, type, ProfileType, ProfileName, Position, OverallWidth, OverallDepth, WebThickness, FlangeThickness, FilletRadius, FlangeEdgeRadius, FlangeSlope) {
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.OverallWidth = OverallWidth;
		this.OverallDepth = OverallDepth;
		this.WebThickness = WebThickness;
		this.FlangeThickness = FlangeThickness;
		this.FilletRadius = FilletRadius;
		this.FlangeEdgeRadius = FlangeEdgeRadius;
		this.FlangeSlope = FlangeSlope;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ProfileType = tape[ptr++];
		let ProfileName = tape[ptr++];
		let Position = tape[ptr++];
		let OverallWidth = tape[ptr++];
		let OverallDepth = tape[ptr++];
		let WebThickness = tape[ptr++];
		let FlangeThickness = tape[ptr++];
		let FilletRadius = tape[ptr++];
		let FlangeEdgeRadius = tape[ptr++];
		let FlangeSlope = tape[ptr++];
		return new IfcIShapeProfileDef(expressID, type, ProfileType, ProfileName, Position, OverallWidth, OverallDepth, WebThickness, FlangeThickness, FilletRadius, FlangeEdgeRadius, FlangeSlope);
	}
	ToTape() {
		let args = [];
		args.push(this.ProfileType);
		args.push(this.ProfileName);
		args.push(this.Position);
		args.push(this.OverallWidth);
		args.push(this.OverallDepth);
		args.push(this.WebThickness);
		args.push(this.FlangeThickness);
		args.push(this.FilletRadius);
		args.push(this.FlangeEdgeRadius);
		args.push(this.FlangeSlope);
		return args;
	}
};
var IfcImageTexture = class {
	constructor(expressID, type, RepeatS, RepeatT, Mode, TextureTransform, Parameter, URLReference) {
		this.expressID = expressID;
		this.type = type;
		this.RepeatS = RepeatS;
		this.RepeatT = RepeatT;
		this.Mode = Mode;
		this.TextureTransform = TextureTransform;
		this.Parameter = Parameter;
		this.URLReference = URLReference;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let RepeatS = tape[ptr++];
		let RepeatT = tape[ptr++];
		let Mode = tape[ptr++];
		let TextureTransform = tape[ptr++];
		let Parameter = tape[ptr++];
		let URLReference = tape[ptr++];
		return new IfcImageTexture(expressID, type, RepeatS, RepeatT, Mode, TextureTransform, Parameter, URLReference);
	}
	ToTape() {
		let args = [];
		args.push(this.RepeatS);
		args.push(this.RepeatT);
		args.push(this.Mode);
		args.push(this.TextureTransform);
		args.push(this.Parameter);
		args.push(this.URLReference);
		return args;
	}
};
var IfcIndexedColourMap = class {
	constructor(expressID, type, MappedTo, Opacity, Colours, ColourIndex) {
		this.expressID = expressID;
		this.type = type;
		this.MappedTo = MappedTo;
		this.Opacity = Opacity;
		this.Colours = Colours;
		this.ColourIndex = ColourIndex;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let MappedTo = tape[ptr++];
		let Opacity = tape[ptr++];
		let Colours = tape[ptr++];
		let ColourIndex = tape[ptr++];
		return new IfcIndexedColourMap(expressID, type, MappedTo, Opacity, Colours, ColourIndex);
	}
	ToTape() {
		let args = [];
		args.push(this.MappedTo);
		args.push(this.Opacity);
		args.push(this.Colours);
		args.push(this.ColourIndex);
		return args;
	}
};
var IfcIndexedPolyCurve = class {
	constructor(expressID, type, Points, Segments, SelfIntersect) {
		this.expressID = expressID;
		this.type = type;
		this.Points = Points;
		this.Segments = Segments;
		this.SelfIntersect = SelfIntersect;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Points = tape[ptr++];
		let Segments = tape[ptr++];
		let SelfIntersect = tape[ptr++];
		return new IfcIndexedPolyCurve(expressID, type, Points, Segments, SelfIntersect);
	}
	ToTape() {
		let args = [];
		args.push(this.Points);
		args.push(this.Segments);
		args.push(this.SelfIntersect);
		return args;
	}
};
var IfcIndexedPolygonalFace = class {
	constructor(expressID, type, CoordIndex) {
		this.expressID = expressID;
		this.type = type;
		this.CoordIndex = CoordIndex;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let CoordIndex = tape[ptr++];
		return new IfcIndexedPolygonalFace(expressID, type, CoordIndex);
	}
	ToTape() {
		let args = [];
		args.push(this.CoordIndex);
		return args;
	}
};
var IfcIndexedPolygonalFaceWithVoids = class {
	constructor(expressID, type, CoordIndex, InnerCoordIndices) {
		this.expressID = expressID;
		this.type = type;
		this.CoordIndex = CoordIndex;
		this.InnerCoordIndices = InnerCoordIndices;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let CoordIndex = tape[ptr++];
		let InnerCoordIndices = tape[ptr++];
		return new IfcIndexedPolygonalFaceWithVoids(expressID, type, CoordIndex, InnerCoordIndices);
	}
	ToTape() {
		let args = [];
		args.push(this.CoordIndex);
		args.push(this.InnerCoordIndices);
		return args;
	}
};
var IfcIndexedTextureMap = class {
	constructor(expressID, type, Maps, MappedTo, TexCoords) {
		this.expressID = expressID;
		this.type = type;
		this.Maps = Maps;
		this.MappedTo = MappedTo;
		this.TexCoords = TexCoords;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Maps = tape[ptr++];
		let MappedTo = tape[ptr++];
		let TexCoords = tape[ptr++];
		return new IfcIndexedTextureMap(expressID, type, Maps, MappedTo, TexCoords);
	}
	ToTape() {
		let args = [];
		args.push(this.Maps);
		args.push(this.MappedTo);
		args.push(this.TexCoords);
		return args;
	}
};
var IfcIndexedTriangleTextureMap = class {
	constructor(expressID, type, Maps, MappedTo, TexCoords, TexCoordIndex) {
		this.expressID = expressID;
		this.type = type;
		this.Maps = Maps;
		this.MappedTo = MappedTo;
		this.TexCoords = TexCoords;
		this.TexCoordIndex = TexCoordIndex;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Maps = tape[ptr++];
		let MappedTo = tape[ptr++];
		let TexCoords = tape[ptr++];
		let TexCoordIndex = tape[ptr++];
		return new IfcIndexedTriangleTextureMap(expressID, type, Maps, MappedTo, TexCoords, TexCoordIndex);
	}
	ToTape() {
		let args = [];
		args.push(this.Maps);
		args.push(this.MappedTo);
		args.push(this.TexCoords);
		args.push(this.TexCoordIndex);
		return args;
	}
};
var IfcInterceptor = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcInterceptor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcInterceptorType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcInterceptorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcIntersectionCurve = class {
	constructor(expressID, type, Curve3D, AssociatedGeometry, MasterRepresentation) {
		this.expressID = expressID;
		this.type = type;
		this.Curve3D = Curve3D;
		this.AssociatedGeometry = AssociatedGeometry;
		this.MasterRepresentation = MasterRepresentation;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Curve3D = tape[ptr++];
		let AssociatedGeometry = tape[ptr++];
		let MasterRepresentation = tape[ptr++];
		return new IfcIntersectionCurve(expressID, type, Curve3D, AssociatedGeometry, MasterRepresentation);
	}
	ToTape() {
		let args = [];
		args.push(this.Curve3D);
		args.push(this.AssociatedGeometry);
		args.push(this.MasterRepresentation);
		return args;
	}
};
var IfcInventory = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, PredefinedType, Jurisdiction, ResponsiblePersons, LastUpdateDate, CurrentValue, OriginalValue) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.PredefinedType = PredefinedType;
		this.Jurisdiction = Jurisdiction;
		this.ResponsiblePersons = ResponsiblePersons;
		this.LastUpdateDate = LastUpdateDate;
		this.CurrentValue = CurrentValue;
		this.OriginalValue = OriginalValue;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		let Jurisdiction = tape[ptr++];
		let ResponsiblePersons = tape[ptr++];
		let LastUpdateDate = tape[ptr++];
		let CurrentValue = tape[ptr++];
		let OriginalValue = tape[ptr++];
		return new IfcInventory(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, PredefinedType, Jurisdiction, ResponsiblePersons, LastUpdateDate, CurrentValue, OriginalValue);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.PredefinedType);
		args.push(this.Jurisdiction);
		args.push(this.ResponsiblePersons);
		args.push(this.LastUpdateDate);
		args.push(this.CurrentValue);
		args.push(this.OriginalValue);
		return args;
	}
};
var IfcIrregularTimeSeries = class {
	constructor(expressID, type, Name, Description, StartTime, EndTime, TimeSeriesDataType, DataOrigin, UserDefinedDataOrigin, Unit, Values) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.StartTime = StartTime;
		this.EndTime = EndTime;
		this.TimeSeriesDataType = TimeSeriesDataType;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.Unit = Unit;
		this.Values = Values;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let StartTime = tape[ptr++];
		let EndTime = tape[ptr++];
		let TimeSeriesDataType = tape[ptr++];
		let DataOrigin = tape[ptr++];
		let UserDefinedDataOrigin = tape[ptr++];
		let Unit = tape[ptr++];
		let Values = tape[ptr++];
		return new IfcIrregularTimeSeries(expressID, type, Name, Description, StartTime, EndTime, TimeSeriesDataType, DataOrigin, UserDefinedDataOrigin, Unit, Values);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.StartTime);
		args.push(this.EndTime);
		args.push(this.TimeSeriesDataType);
		args.push(this.DataOrigin);
		args.push(this.UserDefinedDataOrigin);
		args.push(this.Unit);
		args.push(this.Values);
		return args;
	}
};
var IfcIrregularTimeSeriesValue = class {
	constructor(expressID, type, TimeStamp, ListValues) {
		this.expressID = expressID;
		this.type = type;
		this.TimeStamp = TimeStamp;
		this.ListValues = ListValues;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let TimeStamp = tape[ptr++];
		let ListValues = tape[ptr++];
		return new IfcIrregularTimeSeriesValue(expressID, type, TimeStamp, ListValues);
	}
	ToTape() {
		let args = [];
		args.push(this.TimeStamp);
		args.push(this.ListValues);
		return args;
	}
};
var IfcJunctionBox = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcJunctionBox(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcJunctionBoxType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcJunctionBoxType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcLShapeProfileDef = class {
	constructor(expressID, type, ProfileType, ProfileName, Position, Depth, Width, Thickness, FilletRadius, EdgeRadius, LegSlope) {
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Depth = Depth;
		this.Width = Width;
		this.Thickness = Thickness;
		this.FilletRadius = FilletRadius;
		this.EdgeRadius = EdgeRadius;
		this.LegSlope = LegSlope;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ProfileType = tape[ptr++];
		let ProfileName = tape[ptr++];
		let Position = tape[ptr++];
		let Depth = tape[ptr++];
		let Width = tape[ptr++];
		let Thickness = tape[ptr++];
		let FilletRadius = tape[ptr++];
		let EdgeRadius = tape[ptr++];
		let LegSlope = tape[ptr++];
		return new IfcLShapeProfileDef(expressID, type, ProfileType, ProfileName, Position, Depth, Width, Thickness, FilletRadius, EdgeRadius, LegSlope);
	}
	ToTape() {
		let args = [];
		args.push(this.ProfileType);
		args.push(this.ProfileName);
		args.push(this.Position);
		args.push(this.Depth);
		args.push(this.Width);
		args.push(this.Thickness);
		args.push(this.FilletRadius);
		args.push(this.EdgeRadius);
		args.push(this.LegSlope);
		return args;
	}
};
var IfcLaborResource = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let Identification = tape[ptr++];
		let LongDescription = tape[ptr++];
		let Usage = tape[ptr++];
		let BaseCosts = tape[ptr++];
		let BaseQuantity = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcLaborResource(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.Identification);
		args.push(this.LongDescription);
		args.push(this.Usage);
		args.push(this.BaseCosts);
		args.push(this.BaseQuantity);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcLaborResourceType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let Identification = tape[ptr++];
		let LongDescription = tape[ptr++];
		let ResourceType = tape[ptr++];
		let BaseCosts = tape[ptr++];
		let BaseQuantity = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcLaborResourceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.Identification);
		args.push(this.LongDescription);
		args.push(this.ResourceType);
		args.push(this.BaseCosts);
		args.push(this.BaseQuantity);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcLagTime = class {
	constructor(expressID, type, Name, DataOrigin, UserDefinedDataOrigin, LagValue, DurationType) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.LagValue = LagValue;
		this.DurationType = DurationType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let DataOrigin = tape[ptr++];
		let UserDefinedDataOrigin = tape[ptr++];
		let LagValue = tape[ptr++];
		let DurationType = tape[ptr++];
		return new IfcLagTime(expressID, type, Name, DataOrigin, UserDefinedDataOrigin, LagValue, DurationType);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.DataOrigin);
		args.push(this.UserDefinedDataOrigin);
		args.push(this.LagValue);
		args.push(this.DurationType);
		return args;
	}
};
var IfcLamp = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcLamp(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcLampType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcLampType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcLibraryInformation = class {
	constructor(expressID, type, Name, Version, Publisher, VersionDate, Location, Description) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Version = Version;
		this.Publisher = Publisher;
		this.VersionDate = VersionDate;
		this.Location = Location;
		this.Description = Description;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Version = tape[ptr++];
		let Publisher = tape[ptr++];
		let VersionDate = tape[ptr++];
		let Location = tape[ptr++];
		let Description = tape[ptr++];
		return new IfcLibraryInformation(expressID, type, Name, Version, Publisher, VersionDate, Location, Description);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Version);
		args.push(this.Publisher);
		args.push(this.VersionDate);
		args.push(this.Location);
		args.push(this.Description);
		return args;
	}
};
var IfcLibraryReference = class {
	constructor(expressID, type, Location, Identification, Name, Description, Language, ReferencedLibrary) {
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
		this.Description = Description;
		this.Language = Language;
		this.ReferencedLibrary = ReferencedLibrary;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Location = tape[ptr++];
		let Identification = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let Language = tape[ptr++];
		let ReferencedLibrary = tape[ptr++];
		return new IfcLibraryReference(expressID, type, Location, Identification, Name, Description, Language, ReferencedLibrary);
	}
	ToTape() {
		let args = [];
		args.push(this.Location);
		args.push(this.Identification);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.Language);
		args.push(this.ReferencedLibrary);
		return args;
	}
};
var IfcLightDistributionData = class {
	constructor(expressID, type, MainPlaneAngle, SecondaryPlaneAngle, LuminousIntensity) {
		this.expressID = expressID;
		this.type = type;
		this.MainPlaneAngle = MainPlaneAngle;
		this.SecondaryPlaneAngle = SecondaryPlaneAngle;
		this.LuminousIntensity = LuminousIntensity;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let MainPlaneAngle = tape[ptr++];
		let SecondaryPlaneAngle = tape[ptr++];
		let LuminousIntensity = tape[ptr++];
		return new IfcLightDistributionData(expressID, type, MainPlaneAngle, SecondaryPlaneAngle, LuminousIntensity);
	}
	ToTape() {
		let args = [];
		args.push(this.MainPlaneAngle);
		args.push(this.SecondaryPlaneAngle);
		args.push(this.LuminousIntensity);
		return args;
	}
};
var IfcLightFixture = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcLightFixture(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcLightFixtureType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcLightFixtureType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcLightIntensityDistribution = class {
	constructor(expressID, type, LightDistributionCurve, DistributionData) {
		this.expressID = expressID;
		this.type = type;
		this.LightDistributionCurve = LightDistributionCurve;
		this.DistributionData = DistributionData;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let LightDistributionCurve = tape[ptr++];
		let DistributionData = tape[ptr++];
		return new IfcLightIntensityDistribution(expressID, type, LightDistributionCurve, DistributionData);
	}
	ToTape() {
		let args = [];
		args.push(this.LightDistributionCurve);
		args.push(this.DistributionData);
		return args;
	}
};
var IfcLightSource = class {
	constructor(expressID, type, Name, LightColour, AmbientIntensity, Intensity) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let LightColour = tape[ptr++];
		let AmbientIntensity = tape[ptr++];
		let Intensity = tape[ptr++];
		return new IfcLightSource(expressID, type, Name, LightColour, AmbientIntensity, Intensity);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.LightColour);
		args.push(this.AmbientIntensity);
		args.push(this.Intensity);
		return args;
	}
};
var IfcLightSourceAmbient = class {
	constructor(expressID, type, Name, LightColour, AmbientIntensity, Intensity) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let LightColour = tape[ptr++];
		let AmbientIntensity = tape[ptr++];
		let Intensity = tape[ptr++];
		return new IfcLightSourceAmbient(expressID, type, Name, LightColour, AmbientIntensity, Intensity);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.LightColour);
		args.push(this.AmbientIntensity);
		args.push(this.Intensity);
		return args;
	}
};
var IfcLightSourceDirectional = class {
	constructor(expressID, type, Name, LightColour, AmbientIntensity, Intensity, Orientation) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
		this.Orientation = Orientation;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let LightColour = tape[ptr++];
		let AmbientIntensity = tape[ptr++];
		let Intensity = tape[ptr++];
		let Orientation = tape[ptr++];
		return new IfcLightSourceDirectional(expressID, type, Name, LightColour, AmbientIntensity, Intensity, Orientation);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.LightColour);
		args.push(this.AmbientIntensity);
		args.push(this.Intensity);
		args.push(this.Orientation);
		return args;
	}
};
var IfcLightSourceGoniometric = class {
	constructor(expressID, type, Name, LightColour, AmbientIntensity, Intensity, Position, ColourAppearance, ColourTemperature, LuminousFlux, LightEmissionSource, LightDistributionDataSource) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
		this.Position = Position;
		this.ColourAppearance = ColourAppearance;
		this.ColourTemperature = ColourTemperature;
		this.LuminousFlux = LuminousFlux;
		this.LightEmissionSource = LightEmissionSource;
		this.LightDistributionDataSource = LightDistributionDataSource;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let LightColour = tape[ptr++];
		let AmbientIntensity = tape[ptr++];
		let Intensity = tape[ptr++];
		let Position = tape[ptr++];
		let ColourAppearance = tape[ptr++];
		let ColourTemperature = tape[ptr++];
		let LuminousFlux = tape[ptr++];
		let LightEmissionSource = tape[ptr++];
		let LightDistributionDataSource = tape[ptr++];
		return new IfcLightSourceGoniometric(expressID, type, Name, LightColour, AmbientIntensity, Intensity, Position, ColourAppearance, ColourTemperature, LuminousFlux, LightEmissionSource, LightDistributionDataSource);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.LightColour);
		args.push(this.AmbientIntensity);
		args.push(this.Intensity);
		args.push(this.Position);
		args.push(this.ColourAppearance);
		args.push(this.ColourTemperature);
		args.push(this.LuminousFlux);
		args.push(this.LightEmissionSource);
		args.push(this.LightDistributionDataSource);
		return args;
	}
};
var IfcLightSourcePositional = class {
	constructor(expressID, type, Name, LightColour, AmbientIntensity, Intensity, Position, Radius, ConstantAttenuation, DistanceAttenuation, QuadricAttenuation) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
		this.Position = Position;
		this.Radius = Radius;
		this.ConstantAttenuation = ConstantAttenuation;
		this.DistanceAttenuation = DistanceAttenuation;
		this.QuadricAttenuation = QuadricAttenuation;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let LightColour = tape[ptr++];
		let AmbientIntensity = tape[ptr++];
		let Intensity = tape[ptr++];
		let Position = tape[ptr++];
		let Radius = tape[ptr++];
		let ConstantAttenuation = tape[ptr++];
		let DistanceAttenuation = tape[ptr++];
		let QuadricAttenuation = tape[ptr++];
		return new IfcLightSourcePositional(expressID, type, Name, LightColour, AmbientIntensity, Intensity, Position, Radius, ConstantAttenuation, DistanceAttenuation, QuadricAttenuation);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.LightColour);
		args.push(this.AmbientIntensity);
		args.push(this.Intensity);
		args.push(this.Position);
		args.push(this.Radius);
		args.push(this.ConstantAttenuation);
		args.push(this.DistanceAttenuation);
		args.push(this.QuadricAttenuation);
		return args;
	}
};
var IfcLightSourceSpot = class {
	constructor(expressID, type, Name, LightColour, AmbientIntensity, Intensity, Position, Radius, ConstantAttenuation, DistanceAttenuation, QuadricAttenuation, Orientation, ConcentrationExponent, SpreadAngle, BeamWidthAngle) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
		this.Position = Position;
		this.Radius = Radius;
		this.ConstantAttenuation = ConstantAttenuation;
		this.DistanceAttenuation = DistanceAttenuation;
		this.QuadricAttenuation = QuadricAttenuation;
		this.Orientation = Orientation;
		this.ConcentrationExponent = ConcentrationExponent;
		this.SpreadAngle = SpreadAngle;
		this.BeamWidthAngle = BeamWidthAngle;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let LightColour = tape[ptr++];
		let AmbientIntensity = tape[ptr++];
		let Intensity = tape[ptr++];
		let Position = tape[ptr++];
		let Radius = tape[ptr++];
		let ConstantAttenuation = tape[ptr++];
		let DistanceAttenuation = tape[ptr++];
		let QuadricAttenuation = tape[ptr++];
		let Orientation = tape[ptr++];
		let ConcentrationExponent = tape[ptr++];
		let SpreadAngle = tape[ptr++];
		let BeamWidthAngle = tape[ptr++];
		return new IfcLightSourceSpot(expressID, type, Name, LightColour, AmbientIntensity, Intensity, Position, Radius, ConstantAttenuation, DistanceAttenuation, QuadricAttenuation, Orientation, ConcentrationExponent, SpreadAngle, BeamWidthAngle);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.LightColour);
		args.push(this.AmbientIntensity);
		args.push(this.Intensity);
		args.push(this.Position);
		args.push(this.Radius);
		args.push(this.ConstantAttenuation);
		args.push(this.DistanceAttenuation);
		args.push(this.QuadricAttenuation);
		args.push(this.Orientation);
		args.push(this.ConcentrationExponent);
		args.push(this.SpreadAngle);
		args.push(this.BeamWidthAngle);
		return args;
	}
};
var IfcLine = class {
	constructor(expressID, type, Pnt, Dir) {
		this.expressID = expressID;
		this.type = type;
		this.Pnt = Pnt;
		this.Dir = Dir;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Pnt = tape[ptr++];
		let Dir = tape[ptr++];
		return new IfcLine(expressID, type, Pnt, Dir);
	}
	ToTape() {
		let args = [];
		args.push(this.Pnt);
		args.push(this.Dir);
		return args;
	}
};
var IfcLineSegment2D = class {
	constructor(expressID, type, StartPoint, StartDirection, SegmentLength) {
		this.expressID = expressID;
		this.type = type;
		this.StartPoint = StartPoint;
		this.StartDirection = StartDirection;
		this.SegmentLength = SegmentLength;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let StartPoint = tape[ptr++];
		let StartDirection = tape[ptr++];
		let SegmentLength = tape[ptr++];
		return new IfcLineSegment2D(expressID, type, StartPoint, StartDirection, SegmentLength);
	}
	ToTape() {
		let args = [];
		args.push(this.StartPoint);
		args.push(this.StartDirection);
		args.push(this.SegmentLength);
		return args;
	}
};
var IfcLinearPlacement = class {
	constructor(expressID, type, PlacementRelTo, PlacementMeasuredAlong, Distance, Orientation, CartesianPosition) {
		this.expressID = expressID;
		this.type = type;
		this.PlacementRelTo = PlacementRelTo;
		this.PlacementMeasuredAlong = PlacementMeasuredAlong;
		this.Distance = Distance;
		this.Orientation = Orientation;
		this.CartesianPosition = CartesianPosition;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let PlacementRelTo = tape[ptr++];
		let PlacementMeasuredAlong = tape[ptr++];
		let Distance = tape[ptr++];
		let Orientation = tape[ptr++];
		let CartesianPosition = tape[ptr++];
		return new IfcLinearPlacement(expressID, type, PlacementRelTo, PlacementMeasuredAlong, Distance, Orientation, CartesianPosition);
	}
	ToTape() {
		let args = [];
		args.push(this.PlacementRelTo);
		args.push(this.PlacementMeasuredAlong);
		args.push(this.Distance);
		args.push(this.Orientation);
		args.push(this.CartesianPosition);
		return args;
	}
};
var IfcLinearPositioningElement = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Axis) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Axis = Axis;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Axis = tape[ptr++];
		return new IfcLinearPositioningElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Axis);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Axis);
		return args;
	}
};
var IfcLocalPlacement = class {
	constructor(expressID, type, PlacementRelTo, RelativePlacement) {
		this.expressID = expressID;
		this.type = type;
		this.PlacementRelTo = PlacementRelTo;
		this.RelativePlacement = RelativePlacement;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let PlacementRelTo = tape[ptr++];
		let RelativePlacement = tape[ptr++];
		return new IfcLocalPlacement(expressID, type, PlacementRelTo, RelativePlacement);
	}
	ToTape() {
		let args = [];
		args.push(this.PlacementRelTo);
		args.push(this.RelativePlacement);
		return args;
	}
};
var IfcLoop = class {
	constructor(expressID, type) {
		this.expressID = expressID;
		this.type = type;
	}
	static FromTape(expressID, type, tape) {
		return new IfcLoop(expressID, type);
	}
	ToTape() {
		let args = [];
		return args;
	}
};
var IfcManifoldSolidBrep = class {
	constructor(expressID, type, Outer) {
		this.expressID = expressID;
		this.type = type;
		this.Outer = Outer;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Outer = tape[ptr++];
		return new IfcManifoldSolidBrep(expressID, type, Outer);
	}
	ToTape() {
		let args = [];
		args.push(this.Outer);
		return args;
	}
};
var IfcMapConversion = class {
	constructor(expressID, type, SourceCRS, TargetCRS, Eastings, Northings, OrthogonalHeight, XAxisAbscissa, XAxisOrdinate, Scale) {
		this.expressID = expressID;
		this.type = type;
		this.SourceCRS = SourceCRS;
		this.TargetCRS = TargetCRS;
		this.Eastings = Eastings;
		this.Northings = Northings;
		this.OrthogonalHeight = OrthogonalHeight;
		this.XAxisAbscissa = XAxisAbscissa;
		this.XAxisOrdinate = XAxisOrdinate;
		this.Scale = Scale;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let SourceCRS = tape[ptr++];
		let TargetCRS = tape[ptr++];
		let Eastings = tape[ptr++];
		let Northings = tape[ptr++];
		let OrthogonalHeight = tape[ptr++];
		let XAxisAbscissa = tape[ptr++];
		let XAxisOrdinate = tape[ptr++];
		let Scale = tape[ptr++];
		return new IfcMapConversion(expressID, type, SourceCRS, TargetCRS, Eastings, Northings, OrthogonalHeight, XAxisAbscissa, XAxisOrdinate, Scale);
	}
	ToTape() {
		let args = [];
		args.push(this.SourceCRS);
		args.push(this.TargetCRS);
		args.push(this.Eastings);
		args.push(this.Northings);
		args.push(this.OrthogonalHeight);
		args.push(this.XAxisAbscissa);
		args.push(this.XAxisOrdinate);
		args.push(this.Scale);
		return args;
	}
};
var IfcMappedItem = class {
	constructor(expressID, type, MappingSource, MappingTarget) {
		this.expressID = expressID;
		this.type = type;
		this.MappingSource = MappingSource;
		this.MappingTarget = MappingTarget;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let MappingSource = tape[ptr++];
		let MappingTarget = tape[ptr++];
		return new IfcMappedItem(expressID, type, MappingSource, MappingTarget);
	}
	ToTape() {
		let args = [];
		args.push(this.MappingSource);
		args.push(this.MappingTarget);
		return args;
	}
};
var IfcMaterial = class {
	constructor(expressID, type, Name, Description, Category) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Category = Category;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let Category = tape[ptr++];
		return new IfcMaterial(expressID, type, Name, Description, Category);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.Category);
		return args;
	}
};
var IfcMaterialClassificationRelationship = class {
	constructor(expressID, type, MaterialClassifications, ClassifiedMaterial) {
		this.expressID = expressID;
		this.type = type;
		this.MaterialClassifications = MaterialClassifications;
		this.ClassifiedMaterial = ClassifiedMaterial;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let MaterialClassifications = tape[ptr++];
		let ClassifiedMaterial = tape[ptr++];
		return new IfcMaterialClassificationRelationship(expressID, type, MaterialClassifications, ClassifiedMaterial);
	}
	ToTape() {
		let args = [];
		args.push(this.MaterialClassifications);
		args.push(this.ClassifiedMaterial);
		return args;
	}
};
var IfcMaterialConstituent = class {
	constructor(expressID, type, Name, Description, Material, Fraction, Category) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Material = Material;
		this.Fraction = Fraction;
		this.Category = Category;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let Material = tape[ptr++];
		let Fraction = tape[ptr++];
		let Category = tape[ptr++];
		return new IfcMaterialConstituent(expressID, type, Name, Description, Material, Fraction, Category);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.Material);
		args.push(this.Fraction);
		args.push(this.Category);
		return args;
	}
};
var IfcMaterialConstituentSet = class {
	constructor(expressID, type, Name, Description, MaterialConstituents) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.MaterialConstituents = MaterialConstituents;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let MaterialConstituents = tape[ptr++];
		return new IfcMaterialConstituentSet(expressID, type, Name, Description, MaterialConstituents);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.MaterialConstituents);
		return args;
	}
};
var IfcMaterialDefinition = class {
	constructor(expressID, type) {
		this.expressID = expressID;
		this.type = type;
	}
	static FromTape(expressID, type, tape) {
		return new IfcMaterialDefinition(expressID, type);
	}
	ToTape() {
		let args = [];
		return args;
	}
};
var IfcMaterialDefinitionRepresentation = class {
	constructor(expressID, type, Name, Description, Representations, RepresentedMaterial) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Representations = Representations;
		this.RepresentedMaterial = RepresentedMaterial;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let Representations = tape[ptr++];
		let RepresentedMaterial = tape[ptr++];
		return new IfcMaterialDefinitionRepresentation(expressID, type, Name, Description, Representations, RepresentedMaterial);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.Representations);
		args.push(this.RepresentedMaterial);
		return args;
	}
};
var IfcMaterialLayer = class {
	constructor(expressID, type, Material, LayerThickness, IsVentilated, Name, Description, Category, Priority) {
		this.expressID = expressID;
		this.type = type;
		this.Material = Material;
		this.LayerThickness = LayerThickness;
		this.IsVentilated = IsVentilated;
		this.Name = Name;
		this.Description = Description;
		this.Category = Category;
		this.Priority = Priority;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Material = tape[ptr++];
		let LayerThickness = tape[ptr++];
		let IsVentilated = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let Category = tape[ptr++];
		let Priority = tape[ptr++];
		return new IfcMaterialLayer(expressID, type, Material, LayerThickness, IsVentilated, Name, Description, Category, Priority);
	}
	ToTape() {
		let args = [];
		args.push(this.Material);
		args.push(this.LayerThickness);
		args.push(this.IsVentilated);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.Category);
		args.push(this.Priority);
		return args;
	}
};
var IfcMaterialLayerSet = class {
	constructor(expressID, type, MaterialLayers, LayerSetName, Description) {
		this.expressID = expressID;
		this.type = type;
		this.MaterialLayers = MaterialLayers;
		this.LayerSetName = LayerSetName;
		this.Description = Description;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let MaterialLayers = tape[ptr++];
		let LayerSetName = tape[ptr++];
		let Description = tape[ptr++];
		return new IfcMaterialLayerSet(expressID, type, MaterialLayers, LayerSetName, Description);
	}
	ToTape() {
		let args = [];
		args.push(this.MaterialLayers);
		args.push(this.LayerSetName);
		args.push(this.Description);
		return args;
	}
};
var IfcMaterialLayerSetUsage = class {
	constructor(expressID, type, ForLayerSet, LayerSetDirection, DirectionSense, OffsetFromReferenceLine, ReferenceExtent) {
		this.expressID = expressID;
		this.type = type;
		this.ForLayerSet = ForLayerSet;
		this.LayerSetDirection = LayerSetDirection;
		this.DirectionSense = DirectionSense;
		this.OffsetFromReferenceLine = OffsetFromReferenceLine;
		this.ReferenceExtent = ReferenceExtent;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ForLayerSet = tape[ptr++];
		let LayerSetDirection = tape[ptr++];
		let DirectionSense = tape[ptr++];
		let OffsetFromReferenceLine = tape[ptr++];
		let ReferenceExtent = tape[ptr++];
		return new IfcMaterialLayerSetUsage(expressID, type, ForLayerSet, LayerSetDirection, DirectionSense, OffsetFromReferenceLine, ReferenceExtent);
	}
	ToTape() {
		let args = [];
		args.push(this.ForLayerSet);
		args.push(this.LayerSetDirection);
		args.push(this.DirectionSense);
		args.push(this.OffsetFromReferenceLine);
		args.push(this.ReferenceExtent);
		return args;
	}
};
var IfcMaterialLayerWithOffsets = class {
	constructor(expressID, type, Material, LayerThickness, IsVentilated, Name, Description, Category, Priority, OffsetDirection, OffsetValues) {
		this.expressID = expressID;
		this.type = type;
		this.Material = Material;
		this.LayerThickness = LayerThickness;
		this.IsVentilated = IsVentilated;
		this.Name = Name;
		this.Description = Description;
		this.Category = Category;
		this.Priority = Priority;
		this.OffsetDirection = OffsetDirection;
		this.OffsetValues = OffsetValues;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Material = tape[ptr++];
		let LayerThickness = tape[ptr++];
		let IsVentilated = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let Category = tape[ptr++];
		let Priority = tape[ptr++];
		let OffsetDirection = tape[ptr++];
		let OffsetValues = tape[ptr++];
		return new IfcMaterialLayerWithOffsets(expressID, type, Material, LayerThickness, IsVentilated, Name, Description, Category, Priority, OffsetDirection, OffsetValues);
	}
	ToTape() {
		let args = [];
		args.push(this.Material);
		args.push(this.LayerThickness);
		args.push(this.IsVentilated);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.Category);
		args.push(this.Priority);
		args.push(this.OffsetDirection);
		args.push(this.OffsetValues);
		return args;
	}
};
var IfcMaterialList = class {
	constructor(expressID, type, Materials) {
		this.expressID = expressID;
		this.type = type;
		this.Materials = Materials;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Materials = tape[ptr++];
		return new IfcMaterialList(expressID, type, Materials);
	}
	ToTape() {
		let args = [];
		args.push(this.Materials);
		return args;
	}
};
var IfcMaterialProfile = class {
	constructor(expressID, type, Name, Description, Material, Profile, Priority, Category) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Material = Material;
		this.Profile = Profile;
		this.Priority = Priority;
		this.Category = Category;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let Material = tape[ptr++];
		let Profile = tape[ptr++];
		let Priority = tape[ptr++];
		let Category = tape[ptr++];
		return new IfcMaterialProfile(expressID, type, Name, Description, Material, Profile, Priority, Category);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.Material);
		args.push(this.Profile);
		args.push(this.Priority);
		args.push(this.Category);
		return args;
	}
};
var IfcMaterialProfileSet = class {
	constructor(expressID, type, Name, Description, MaterialProfiles, CompositeProfile) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.MaterialProfiles = MaterialProfiles;
		this.CompositeProfile = CompositeProfile;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let MaterialProfiles = tape[ptr++];
		let CompositeProfile = tape[ptr++];
		return new IfcMaterialProfileSet(expressID, type, Name, Description, MaterialProfiles, CompositeProfile);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.MaterialProfiles);
		args.push(this.CompositeProfile);
		return args;
	}
};
var IfcMaterialProfileSetUsage = class {
	constructor(expressID, type, ForProfileSet, CardinalPoint, ReferenceExtent) {
		this.expressID = expressID;
		this.type = type;
		this.ForProfileSet = ForProfileSet;
		this.CardinalPoint = CardinalPoint;
		this.ReferenceExtent = ReferenceExtent;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ForProfileSet = tape[ptr++];
		let CardinalPoint = tape[ptr++];
		let ReferenceExtent = tape[ptr++];
		return new IfcMaterialProfileSetUsage(expressID, type, ForProfileSet, CardinalPoint, ReferenceExtent);
	}
	ToTape() {
		let args = [];
		args.push(this.ForProfileSet);
		args.push(this.CardinalPoint);
		args.push(this.ReferenceExtent);
		return args;
	}
};
var IfcMaterialProfileSetUsageTapering = class {
	constructor(expressID, type, ForProfileSet, CardinalPoint, ReferenceExtent, ForProfileEndSet, CardinalEndPoint) {
		this.expressID = expressID;
		this.type = type;
		this.ForProfileSet = ForProfileSet;
		this.CardinalPoint = CardinalPoint;
		this.ReferenceExtent = ReferenceExtent;
		this.ForProfileEndSet = ForProfileEndSet;
		this.CardinalEndPoint = CardinalEndPoint;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ForProfileSet = tape[ptr++];
		let CardinalPoint = tape[ptr++];
		let ReferenceExtent = tape[ptr++];
		let ForProfileEndSet = tape[ptr++];
		let CardinalEndPoint = tape[ptr++];
		return new IfcMaterialProfileSetUsageTapering(expressID, type, ForProfileSet, CardinalPoint, ReferenceExtent, ForProfileEndSet, CardinalEndPoint);
	}
	ToTape() {
		let args = [];
		args.push(this.ForProfileSet);
		args.push(this.CardinalPoint);
		args.push(this.ReferenceExtent);
		args.push(this.ForProfileEndSet);
		args.push(this.CardinalEndPoint);
		return args;
	}
};
var IfcMaterialProfileWithOffsets = class {
	constructor(expressID, type, Name, Description, Material, Profile, Priority, Category, OffsetValues) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Material = Material;
		this.Profile = Profile;
		this.Priority = Priority;
		this.Category = Category;
		this.OffsetValues = OffsetValues;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let Material = tape[ptr++];
		let Profile = tape[ptr++];
		let Priority = tape[ptr++];
		let Category = tape[ptr++];
		let OffsetValues = tape[ptr++];
		return new IfcMaterialProfileWithOffsets(expressID, type, Name, Description, Material, Profile, Priority, Category, OffsetValues);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.Material);
		args.push(this.Profile);
		args.push(this.Priority);
		args.push(this.Category);
		args.push(this.OffsetValues);
		return args;
	}
};
var IfcMaterialProperties = class {
	constructor(expressID, type, Name, Description, Properties2, Material) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Properties = Properties2;
		this.Material = Material;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let Properties2 = tape[ptr++];
		let Material = tape[ptr++];
		return new IfcMaterialProperties(expressID, type, Name, Description, Properties2, Material);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.Properties);
		args.push(this.Material);
		return args;
	}
};
var IfcMaterialRelationship = class {
	constructor(expressID, type, Name, Description, RelatingMaterial, RelatedMaterials, Expression) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.RelatingMaterial = RelatingMaterial;
		this.RelatedMaterials = RelatedMaterials;
		this.Expression = Expression;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let RelatingMaterial = tape[ptr++];
		let RelatedMaterials = tape[ptr++];
		let Expression = tape[ptr++];
		return new IfcMaterialRelationship(expressID, type, Name, Description, RelatingMaterial, RelatedMaterials, Expression);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.RelatingMaterial);
		args.push(this.RelatedMaterials);
		args.push(this.Expression);
		return args;
	}
};
var IfcMaterialUsageDefinition = class {
	constructor(expressID, type) {
		this.expressID = expressID;
		this.type = type;
	}
	static FromTape(expressID, type, tape) {
		return new IfcMaterialUsageDefinition(expressID, type);
	}
	ToTape() {
		let args = [];
		return args;
	}
};
var IfcMeasureWithUnit = class {
	constructor(expressID, type, ValueComponent, UnitComponent) {
		this.expressID = expressID;
		this.type = type;
		this.ValueComponent = ValueComponent;
		this.UnitComponent = UnitComponent;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ValueComponent = tape[ptr++];
		let UnitComponent = tape[ptr++];
		return new IfcMeasureWithUnit(expressID, type, ValueComponent, UnitComponent);
	}
	ToTape() {
		let args = [];
		args.push(this.ValueComponent);
		args.push(this.UnitComponent);
		return args;
	}
};
var IfcMechanicalFastener = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, NominalDiameter, NominalLength, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.NominalDiameter = NominalDiameter;
		this.NominalLength = NominalLength;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let NominalDiameter = tape[ptr++];
		let NominalLength = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcMechanicalFastener(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, NominalDiameter, NominalLength, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.NominalDiameter);
		args.push(this.NominalLength);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcMechanicalFastenerType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType, NominalDiameter, NominalLength) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.NominalDiameter = NominalDiameter;
		this.NominalLength = NominalLength;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		let NominalDiameter = tape[ptr++];
		let NominalLength = tape[ptr++];
		return new IfcMechanicalFastenerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType, NominalDiameter, NominalLength);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		args.push(this.NominalDiameter);
		args.push(this.NominalLength);
		return args;
	}
};
var IfcMedicalDevice = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcMedicalDevice(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcMedicalDeviceType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcMedicalDeviceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcMember = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcMember(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcMemberStandardCase = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcMemberStandardCase(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcMemberType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcMemberType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcMetric = class {
	constructor(expressID, type, Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade, Benchmark, ValueSource, DataValue, ReferencePath) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.ConstraintGrade = ConstraintGrade;
		this.ConstraintSource = ConstraintSource;
		this.CreatingActor = CreatingActor;
		this.CreationTime = CreationTime;
		this.UserDefinedGrade = UserDefinedGrade;
		this.Benchmark = Benchmark;
		this.ValueSource = ValueSource;
		this.DataValue = DataValue;
		this.ReferencePath = ReferencePath;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ConstraintGrade = tape[ptr++];
		let ConstraintSource = tape[ptr++];
		let CreatingActor = tape[ptr++];
		let CreationTime = tape[ptr++];
		let UserDefinedGrade = tape[ptr++];
		let Benchmark = tape[ptr++];
		let ValueSource = tape[ptr++];
		let DataValue = tape[ptr++];
		let ReferencePath = tape[ptr++];
		return new IfcMetric(expressID, type, Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade, Benchmark, ValueSource, DataValue, ReferencePath);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ConstraintGrade);
		args.push(this.ConstraintSource);
		args.push(this.CreatingActor);
		args.push(this.CreationTime);
		args.push(this.UserDefinedGrade);
		args.push(this.Benchmark);
		args.push(this.ValueSource);
		args.push(this.DataValue);
		args.push(this.ReferencePath);
		return args;
	}
};
var IfcMirroredProfileDef = class {
	constructor(expressID, type, ProfileType, ProfileName, ParentProfile, Operator, Label) {
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.ParentProfile = ParentProfile;
		this.Operator = Operator;
		this.Label = Label;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let ProfileType = tape[ptr++];
		let ProfileName = tape[ptr++];
		let ParentProfile = tape[ptr++];
		let Operator = tape[ptr++];
		let Label = tape[ptr++];
		return new IfcMirroredProfileDef(expressID, type, ProfileType, ProfileName, ParentProfile, Operator, Label);
	}
	ToTape() {
		let args = [];
		args.push(this.ProfileType);
		args.push(this.ProfileName);
		args.push(this.ParentProfile);
		args.push(this.Operator);
		args.push(this.Label);
		return args;
	}
};
var IfcMonetaryUnit = class {
	constructor(expressID, type, Currency) {
		this.expressID = expressID;
		this.type = type;
		this.Currency = Currency;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Currency = tape[ptr++];
		return new IfcMonetaryUnit(expressID, type, Currency);
	}
	ToTape() {
		let args = [];
		args.push(this.Currency);
		return args;
	}
};
var IfcMotorConnection = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let ObjectPlacement = tape[ptr++];
		let Representation = tape[ptr++];
		let Tag = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcMotorConnection(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.ObjectPlacement);
		args.push(this.Representation);
		args.push(this.Tag);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcMotorConnectionType = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ApplicableOccurrence = tape[ptr++];
		let HasPropertySets = tape[ptr++];
		let RepresentationMaps = tape[ptr++];
		let Tag = tape[ptr++];
		let ElementType = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcMotorConnectionType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ApplicableOccurrence);
		args.push(this.HasPropertySets);
		args.push(this.RepresentationMaps);
		args.push(this.Tag);
		args.push(this.ElementType);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcNamedUnit = class {
	constructor(expressID, type, Dimensions, UnitType) {
		this.expressID = expressID;
		this.type = type;
		this.Dimensions = Dimensions;
		this.UnitType = UnitType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Dimensions = tape[ptr++];
		let UnitType = tape[ptr++];
		return new IfcNamedUnit(expressID, type, Dimensions, UnitType);
	}
	ToTape() {
		let args = [];
		args.push(this.Dimensions);
		args.push(this.UnitType);
		return args;
	}
};
var IfcObject = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		return new IfcObject(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		return args;
	}
};
var IfcObjectDefinition = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		return new IfcObjectDefinition(expressID, type, GlobalId, OwnerHistory, Name, Description);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		return args;
	}
};
var IfcObjectPlacement = class {
	constructor(expressID, type, PlacementRelTo) {
		this.expressID = expressID;
		this.type = type;
		this.PlacementRelTo = PlacementRelTo;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let PlacementRelTo = tape[ptr++];
		return new IfcObjectPlacement(expressID, type, PlacementRelTo);
	}
	ToTape() {
		let args = [];
		args.push(this.PlacementRelTo);
		return args;
	}
};
var IfcObjective = class {
	constructor(expressID, type, Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade, BenchmarkValues, LogicalAggregator, ObjectiveQualifier, UserDefinedQualifier) {
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.ConstraintGrade = ConstraintGrade;
		this.ConstraintSource = ConstraintSource;
		this.CreatingActor = CreatingActor;
		this.CreationTime = CreationTime;
		this.UserDefinedGrade = UserDefinedGrade;
		this.BenchmarkValues = BenchmarkValues;
		this.LogicalAggregator = LogicalAggregator;
		this.ObjectiveQualifier = ObjectiveQualifier;
		this.UserDefinedQualifier = UserDefinedQualifier;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ConstraintGrade = tape[ptr++];
		let ConstraintSource = tape[ptr++];
		let CreatingActor = tape[ptr++];
		let CreationTime = tape[ptr++];
		let UserDefinedGrade = tape[ptr++];
		let BenchmarkValues = tape[ptr++];
		let LogicalAggregator = tape[ptr++];
		let ObjectiveQualifier = tape[ptr++];
		let UserDefinedQualifier = tape[ptr++];
		return new IfcObjective(expressID, type, Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade, BenchmarkValues, LogicalAggregator, ObjectiveQualifier, UserDefinedQualifier);
	}
	ToTape() {
		let args = [];
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ConstraintGrade);
		args.push(this.ConstraintSource);
		args.push(this.CreatingActor);
		args.push(this.CreationTime);
		args.push(this.UserDefinedGrade);
		args.push(this.BenchmarkValues);
		args.push(this.LogicalAggregator);
		args.push(this.ObjectiveQualifier);
		args.push(this.UserDefinedQualifier);
		return args;
	}
};
var IfcOccupant = class {
	constructor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, TheActor, PredefinedType) {
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.TheActor = TheActor;
		this.PredefinedType = PredefinedType;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let GlobalId = tape[ptr++];
		let OwnerHistory = tape[ptr++];
		let Name = tape[ptr++];
		let Description = tape[ptr++];
		let ObjectType = tape[ptr++];
		let TheActor = tape[ptr++];
		let PredefinedType = tape[ptr++];
		return new IfcOccupant(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, TheActor, PredefinedType);
	}
	ToTape() {
		let args = [];
		args.push(this.GlobalId);
		args.push(this.OwnerHistory);
		args.push(this.Name);
		args.push(this.Description);
		args.push(this.ObjectType);
		args.push(this.TheActor);
		args.push(this.PredefinedType);
		return args;
	}
};
var IfcOffsetCurve = class {
	constructor(expressID, type, BasisCurve) {
		this.expressID = expressID;
		this.type = type;
		this.BasisCurve = BasisCurve;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let BasisCurve = tape[ptr++];
		return new IfcOffsetCurve(expressID, type, BasisCurve);
	}
	ToTape() {
		let args = [];
		args.push(this.BasisCurve);
		return args;
	}
};
var IfcOffsetCurve2D = class {
	constructor(expressID, type, BasisCurve, Distance, SelfIntersect) {
		this.expressID = expressID;
		this.type = type;
		this.BasisCurve = BasisCurve;
		this.Distance = Distance;
		this.SelfIntersect = SelfIntersect;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let BasisCurve = tape[ptr++];
		let Distance = tape[ptr++];
		let SelfIntersect = tape[ptr++];
		return new IfcOffsetCurve2D(expressID, type, BasisCurve, Distance, SelfIntersect);
	}
	ToTape() {
		let args = [];
		args.push(this.BasisCurve);
		args.push(this.Distance);
		args.push(this.SelfIntersect);
		return args;
	}
};
var IfcOffsetCurve3D = class {
	constructor(expressID, type, BasisCurve, Distance, SelfIntersect, RefDirection) {
		this.expressID = expressID;
		this.type = type;
		this.BasisCurve = BasisCurve;
		this.Distance = Distance;
		this.SelfIntersect = SelfIntersect;
		this.RefDirection = RefDirection;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let BasisCurve = tape[ptr++];
		let Distance = tape[ptr++];
		let SelfIntersect = tape[ptr++];
		let RefDirection = tape[ptr++];
		return new IfcOffsetCurve3D(expressID, type, BasisCurve, Distance, SelfIntersect, RefDirection);
	}
	ToTape() {
		let args = [];
		args.push(this.BasisCurve);
		args.push(this.Distance);
		args.push(this.SelfIntersect);
		args.push(this.RefDirection);
		return args;
	}
};
var IfcOffsetCurveByDistances = class {
	constructor(expressID, type, BasisCurve, OffsetValues, Tag) {
		this.expressID = expressID;
		this.type = type;
		this.BasisCurve = BasisCurve;
		this.OffsetValues = OffsetValues;
		this.Tag = Tag;
	}
	static FromTape(expressID, type, tape) {
		let ptr = 0;
		let BasisCurve = tape[ptr++];
		let OffsetValues = tape[ptr++];
		let Tag = tape[ptr++];
		return new IfcOffsetCurveByDistances(expressID, type, BasisCurve, OffsetValues, Tag);
	}
	ToTape() {
		let args = [];
		args.push(this.BasisCurve);
		args.push(this.OffsetValues);
		args.push(this.Tag);
		return args;
	}
};